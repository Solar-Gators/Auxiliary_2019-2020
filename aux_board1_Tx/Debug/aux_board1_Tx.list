
aux_board1_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003854  08003854  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003854  08003854  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003854  08003854  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000074  080038d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080038d8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e350  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002640  00000000  00000000  0002e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00031680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b568  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d568  00000000  00000000  0004d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099799  00000000  00000000  0005aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000f4494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037e8 	.word	0x080037e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080037e8 	.word	0x080037e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fe6a 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f850 	bl	80004a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f92c 	bl	800065c <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000404:	f000 f890 	bl	8000528 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000408:	f000 f8c8 	bl	800059c <_ZL12MX_TIM2_Initv>
  /**
   * SG
   * Initialize the Timer/Counter module. This is used to send
   * CAN messages on a regular interval
   */
  __HAL_TIM_SET_COUNTER(&htim2, 0);		// initial count = 0
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <main+0xa0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);		// Start timer
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <main+0xa0>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fd6e 	bl	8002ef8 <HAL_TIM_Base_Start_IT>
  * SG
  * Initialize/modify values for the Aux TX CAN message.
  * .txData is an AUX_MESSAGE_0_DATA_PACKET struct encapsulated 
  *	within the AUX_MESSAGE_0 
  */
  aux_tx.txData.cplusOn 		= 1;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <main+0xa4>)
 800041e:	2239      	movs	r2, #57	; 0x39
 8000420:	2101      	movs	r1, #1
 8000422:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.cminusOn 		= 0;
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <main+0xa4>)
 8000426:	223a      	movs	r2, #58	; 0x3a
 8000428:	2100      	movs	r1, #0
 800042a:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.hornOn 			= 1;
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <main+0xa4>)
 800042e:	223b      	movs	r2, #59	; 0x3b
 8000430:	2101      	movs	r1, #1
 8000432:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.regenOn 		= 0;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <main+0xa4>)
 8000436:	223c      	movs	r2, #60	; 0x3c
 8000438:	2100      	movs	r1, #0
 800043a:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.hazardsOn		= 1;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <main+0xa4>)
 800043e:	223d      	movs	r2, #61	; 0x3d
 8000440:	2101      	movs	r1, #1
 8000442:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.leftOn 			= 0;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <main+0xa4>)
 8000446:	223e      	movs	r2, #62	; 0x3e
 8000448:	2100      	movs	r1, #0
 800044a:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.rightOn 		= 1;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <main+0xa4>)
 800044e:	223f      	movs	r2, #63	; 0x3f
 8000450:	2101      	movs	r1, #1
 8000452:	5499      	strb	r1, [r3, r2]
  aux_tx.txData.headlightsOn 	= 0;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <main+0xa4>)
 8000456:	2240      	movs	r2, #64	; 0x40
 8000458:	2100      	movs	r1, #0
 800045a:	5499      	strb	r1, [r3, r2]

  /**
  * SG
  * Don't forget to StartCAN! 
  */
  SUBSYSTEM_DATA_MODULE::StartCAN();
 800045c:	f000 fbee 	bl	8000c3c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (timerFlag)
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <main+0xa8>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	b29b      	uxth	r3, r3
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	4193      	sbcs	r3, r2
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f7      	beq.n	8000460 <main+0x6c>
	{
		timerFlag = 0;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <main+0xa8>)
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
		/**
		*	SG
		*	Send the data using SendData function.
		*/
		aux_tx.SendData();
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <main+0xa4>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fbad 	bl	8000bd8 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
		
		// toggle the headlights
		aux_tx.txData.headlightsOn = !aux_tx.txData.headlightsOn;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <main+0xa4>)
 8000480:	2240      	movs	r2, #64	; 0x40
 8000482:	5c9b      	ldrb	r3, [r3, r2]
 8000484:	2201      	movs	r2, #1
 8000486:	4053      	eors	r3, r2
 8000488:	b2d9      	uxtb	r1, r3
 800048a:	4b03      	ldr	r3, [pc, #12]	; (8000498 <main+0xa4>)
 800048c:	2240      	movs	r2, #64	; 0x40
 800048e:	5499      	strb	r1, [r3, r2]
	if (timerFlag)
 8000490:	e7e6      	b.n	8000460 <main+0x6c>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	200000f4 	.word	0x200000f4
 8000498:	20000140 	.word	0x20000140
 800049c:	2000013c 	.word	0x2000013c

080004a0 <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b093      	sub	sp, #76	; 0x4c
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	2414      	movs	r4, #20
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	2334      	movs	r3, #52	; 0x34
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f003 f947 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	0018      	movs	r0, r3
 80004ba:	2310      	movs	r3, #16
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f003 f940 	bl	8003744 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2220      	movs	r2, #32
 80004c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2201      	movs	r2, #1
 80004ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 ffdd 	bl	8002498 <HAL_RCC_OscConfig>
 80004de:	0003      	movs	r3, r0
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	4193      	sbcs	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 80004ea:	f000 f8f3 	bl	80006d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2207      	movs	r2, #7
 80004f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2203      	movs	r2, #3
 80004f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2101      	movs	r1, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fb4a 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000510:	0003      	movs	r3, r0
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	4193      	sbcs	r3, r2
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800051c:	f000 f8da 	bl	80006d4 <Error_Handler>
  }
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b013      	add	sp, #76	; 0x4c
 8000526:	bd90      	pop	{r4, r7, pc}

08000528 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 800052e:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <_ZL11MX_CAN_Initv+0x70>)
 8000530:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000534:	2210      	movs	r2, #16
 8000536:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000552:	2200      	movs	r2, #0
 8000554:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000558:	2200      	movs	r2, #0
 800055a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 800055e:	2200      	movs	r2, #0
 8000560:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000564:	2200      	movs	r2, #0
 8000566:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 800056a:	2200      	movs	r2, #0
 800056c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000570:	2200      	movs	r2, #0
 8000572:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_ZL11MX_CAN_Initv+0x6c>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fe0e 	bl	8001198 <HAL_CAN_Init>
 800057c:	0003      	movs	r3, r0
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 8000588:	f000 f8a4 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000090 	.word	0x20000090
 8000598:	40006400 	.word	0x40006400

0800059c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	2308      	movs	r3, #8
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2310      	movs	r3, #16
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f003 f8c9 	bl	8003744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2308      	movs	r3, #8
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f003 f8c2 	bl	8003744 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	05d2      	lsls	r2, r2, #23
 80005c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005ca:	222f      	movs	r2, #47	; 0x2f
 80005cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <_ZL12MX_TIM2_Initv+0xbc>)
 80005d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 fc35 	bl	8002e58 <HAL_TIM_Base_Init>
 80005ee:	0003      	movs	r3, r0
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	4193      	sbcs	r3, r2
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80005fa:	f000 f86b 	bl	80006d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fe:	2108      	movs	r1, #8
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	0152      	lsls	r2, r2, #5
 8000606:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000608:	187a      	adds	r2, r7, r1
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f002 fdda 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8000614:	0003      	movs	r3, r0
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4193      	sbcs	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8000620:	f000 f858 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	003b      	movs	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000630:	003a      	movs	r2, r7
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_ZL12MX_TIM2_Initv+0xb8>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f002 ffd4 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	0003      	movs	r3, r0
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	4193      	sbcs	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000648:	f000 f844 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b006      	add	sp, #24
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000f4 	.word	0x200000f4
 8000658:	0000270f 	.word	0x0000270f

0800065c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	03c9      	lsls	r1, r1, #15
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	03db      	lsls	r3, r3, #15
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0289      	lsls	r1, r1, #10
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <_ZL12MX_GPIO_Initv+0x48>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	029b      	lsls	r3, r3, #10
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_PeriodElapsedCallback>:
{
	__NOP();	// no operation
	
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// check which timer triggered interrupt
	if(htim->Instance == TIM2)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d103      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timerFlag = 1;
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006be:	2201      	movs	r2, #1
 80006c0:	801a      	strh	r2, [r3, #0]
	}
	else __NOP();	// no operation
}
 80006c2:	e000      	b.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	else __NOP();	// no operation
 80006c4:	46c0      	nop			; (mov r8, r8)
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	2000013c 	.word	0x2000013c

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d107      	bne.n	8000700 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d103      	bne.n	8000700 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AUX_MESSAGE_0 aux_tx;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f964 	bl	80009c8 <_ZN13AUX_MESSAGE_0C1Ev>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0000ffff 	.word	0x0000ffff
 800070c:	20000140 	.word	0x20000140

08000710 <_GLOBAL__sub_I_hcan>:
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <_GLOBAL__sub_I_hcan+0x14>)
 8000716:	0019      	movs	r1, r3
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff ffe1 	bl	80006e0 <_Z41__static_initialization_and_destruction_0ii>
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	0000ffff 	.word	0x0000ffff

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	619a      	str	r2, [r3, #24]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0549      	lsls	r1, r1, #21
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_MspInit+0x44>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	055b      	lsls	r3, r3, #21
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08b      	sub	sp, #44	; 0x2c
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	2314      	movs	r3, #20
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 ffde 	bl	8003744 <memset>
  if(hcan->Instance==CAN)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_CAN_MspInit+0x94>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d133      	bne.n	80007fa <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <HAL_CAN_MspInit+0x98>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_CAN_MspInit+0x98>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0489      	lsls	r1, r1, #18
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_CAN_MspInit+0x98>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	049b      	lsls	r3, r3, #18
 80007a8:	4013      	ands	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_CAN_MspInit+0x98>)
 80007b0:	695a      	ldr	r2, [r3, #20]
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_CAN_MspInit+0x98>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0289      	lsls	r1, r1, #10
 80007b8:	430a      	orrs	r2, r1
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_CAN_MspInit+0x98>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	029b      	lsls	r3, r3, #10
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	0152      	lsls	r2, r2, #5
 80007d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2202      	movs	r2, #2
 80007d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2203      	movs	r2, #3
 80007e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2204      	movs	r2, #4
 80007ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	187a      	adds	r2, r7, r1
 80007ee:	2390      	movs	r3, #144	; 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fcd7 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	; 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40006400 	.word	0x40006400
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	429a      	cmp	r2, r3
 800081e:	d113      	bne.n	8000848 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_TIM_Base_MspInit+0x44>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_TIM_Base_MspInit+0x44>)
 8000826:	2101      	movs	r1, #1
 8000828:	430a      	orrs	r2, r1
 800082a:	61da      	str	r2, [r3, #28]
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_TIM_Base_MspInit+0x44>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	2201      	movs	r2, #1
 8000832:	4013      	ands	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	200f      	movs	r0, #15
 800083e:	f001 fc81 	bl	8002144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000842:	200f      	movs	r0, #15
 8000844:	f001 fc93 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b004      	add	sp, #16
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 fc70 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <TIM2_IRQHandler+0x14>)
 800088e:	0018      	movs	r0, r3
 8000890:	f002 fb84 	bl	8002f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000f4 	.word	0x200000f4

080008a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	return 1;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_kill>:

int _kill(int pid, int sig)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008b6:	f002 ff1b 	bl	80036f0 <__errno>
 80008ba:	0003      	movs	r3, r0
 80008bc:	2216      	movs	r2, #22
 80008be:	601a      	str	r2, [r3, #0]
	return -1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_exit>:

void _exit (int status)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008d4:	2301      	movs	r3, #1
 80008d6:	425a      	negs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ffe5 	bl	80008ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80008e2:	e7fe      	b.n	80008e2 <_exit+0x16>

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 80008ee:	b590      	push	{r4, r7, lr}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	2408      	movs	r4, #8
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	6018      	str	r0, [r3, #0]
 80008fa:	6059      	str	r1, [r3, #4]
 80008fc:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0021      	movs	r1, r4
 800090a:	187a      	adds	r2, r7, r1
 800090c:	7912      	ldrb	r2, [r2, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	b2da      	uxtb	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25a      	sxtb	r2, r3
 800091c:	187b      	adds	r3, r7, r1
 800091e:	79db      	ldrb	r3, [r3, #7]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b25a      	sxtb	r2, r3
 8000934:	187b      	adds	r3, r7, r1
 8000936:	795b      	ldrb	r3, [r3, #5]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b25b      	sxtb	r3, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25a      	sxtb	r2, r3
 800094c:	187b      	adds	r3, r7, r1
 800094e:	799b      	ldrb	r3, [r3, #6]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	b25b      	sxtb	r3, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	b25b      	sxtb	r3, r3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25a      	sxtb	r2, r3
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b25b      	sxtb	r3, r3
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25a      	sxtb	r2, r3
 800097c:	187b      	adds	r3, r7, r1
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	015b      	lsls	r3, r3, #5
 8000982:	b25b      	sxtb	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b25b      	sxtb	r3, r3
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b25a      	sxtb	r2, r3
 8000994:	187b      	adds	r3, r7, r1
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	b25b      	sxtb	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b25a      	sxtb	r2, r3
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	78db      	ldrb	r3, [r3, #3]
 80009b0:	01db      	lsls	r3, r3, #7
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b005      	add	sp, #20
 80009c4:	bd90      	pop	{r4, r7, pc}
	...

080009c8 <_ZN13AUX_MESSAGE_0C1Ev>:

	return output;
}

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 80009d4:	2300      	movs	r3, #0
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2201      	movs	r2, #1
 80009e0:	f000 f80c 	bl	80009fc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
{}
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	000003ff 	.word	0x000003ff
 80009f8:	08003838 	.word	0x08003838

080009fc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	        }
	    }
	    return returnData;
	}
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	0019      	movs	r1, r3
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	1c0a      	adds	r2, r1, #0
 8000a10:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	781c      	ldrb	r4, [r3, #0]
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	2324      	movs	r3, #36	; 0x24
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2320      	movs	r3, #32
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	0023      	movs	r3, r4
 8000a30:	f000 f886 	bl	8000b40 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	601a      	str	r2, [r3, #0]
		{}
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b005      	add	sp, #20
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	08003844 	.word	0x08003844

08000a48 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3309      	adds	r3, #9
 8000a54:	001c      	movs	r4, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2239      	movs	r2, #57	; 0x39
 8000a5a:	5c99      	ldrb	r1, [r3, r2]
 8000a5c:	1898      	adds	r0, r3, r2
 8000a5e:	7840      	ldrb	r0, [r0, #1]
 8000a60:	0200      	lsls	r0, r0, #8
 8000a62:	4301      	orrs	r1, r0
 8000a64:	1898      	adds	r0, r3, r2
 8000a66:	7880      	ldrb	r0, [r0, #2]
 8000a68:	0400      	lsls	r0, r0, #16
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	1898      	adds	r0, r3, r2
 8000a6e:	78c0      	ldrb	r0, [r0, #3]
 8000a70:	0600      	lsls	r0, r0, #24
 8000a72:	4301      	orrs	r1, r0
 8000a74:	2000      	movs	r0, #0
 8000a76:	0008      	movs	r0, r1
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	791a      	ldrb	r2, [r3, #4]
 8000a7c:	7959      	ldrb	r1, [r3, #5]
 8000a7e:	0209      	lsls	r1, r1, #8
 8000a80:	430a      	orrs	r2, r1
 8000a82:	7999      	ldrb	r1, [r3, #6]
 8000a84:	0409      	lsls	r1, r1, #16
 8000a86:	430a      	orrs	r2, r1
 8000a88:	79db      	ldrb	r3, [r3, #7]
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	0013      	movs	r3, r2
 8000a92:	0022      	movs	r2, r4
 8000a94:	0019      	movs	r1, r3
 8000a96:	f7ff ff2a 	bl	80008ee <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bd90      	pop	{r4, r7, pc}

08000aa2 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000aa2:	b590      	push	{r4, r7, lr}
 8000aa4:	b08d      	sub	sp, #52	; 0x34
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2100      	movs	r1, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f826 	bl	8001b00 <HAL_CAN_GetRxFifoFillLevel>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4193      	sbcs	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d02e      	beq.n	8000b1e <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2410      	movs	r4, #16
 8000ac6:	193a      	adds	r2, r7, r4
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	2100      	movs	r1, #0
 8000acc:	f000 fefc 	bl	80018c8 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000ad0:	0022      	movs	r2, r4
 8000ad2:	18bb      	adds	r3, r7, r2
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000ada:	18bb      	adds	r3, r7, r2
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	e002      	b.n	8000ae6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f864 	bl	8000bb4 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000aec:	0003      	movs	r3, r0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0d9      	beq.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	001a      	movs	r2, r3
 8000afc:	2310      	movs	r3, #16
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d1d1      	bne.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000b06:	2308      	movs	r3, #8
 8000b08:	18fa      	adds	r2, r7, r3
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f97a 	bl	8000e08 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f87f 	bl	8000c1a <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000b1c:	e7c5      	b.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b00d      	add	sp, #52	; 0x34
 8000b24:	bd90      	pop	{r4, r7, pc}
	...

08000b28 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <CEC_CAN_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 f83b 	bl	8001baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200001fc 	.word	0x200001fc

08000b40 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	1c0a      	adds	r2, r1, #0
 8000b54:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1dfa      	adds	r2, r7, #7
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	721a      	strb	r2, [r3, #8]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3312      	adds	r3, #18
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 f95d 	bl	8000e2e <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	1dba      	adds	r2, r7, #6
 8000b78:	2130      	movs	r1, #48	; 0x30
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	545a      	strb	r2, [r3, r1]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	2318      	movs	r3, #24
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2131      	movs	r1, #49	; 0x31
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	5453      	strb	r3, [r2, r1]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	221c      	movs	r2, #28
 8000b8e:	18ba      	adds	r2, r7, r2
 8000b90:	2132      	movs	r1, #50	; 0x32
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	545a      	strb	r2, [r3, r1]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2238      	movs	r2, #56	; 0x38
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	5499      	strb	r1, [r3, r2]
{}
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	08003850 	.word	0x08003850

08000bb4 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f9e4 	bl	8000f90 <_ZN14RX_BINARY_TREE11FindElementEm>
 8000bc8:	0003      	movs	r3, r0
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000184 	.word	0x20000184

08000bd8 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:
        isReceiving = true;
    } 
}

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2231      	movs	r2, #49	; 0x31
 8000be4:	5c9b      	ldrb	r3, [r3, r2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d113      	bne.n	8000c12 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f8c4 	bl	8000d84 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 8000bfc:	e009      	b.n	8000c12 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	0010      	movs	r0, r2
 8000c08:	4798      	blx	r3
	    this->sendTransmitBufferData();
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f877 	bl	8000d00 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	0010      	movs	r0, r2
 8000c32:	4798      	blx	r3
    }
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8000c46:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c4a:	2206      	movs	r2, #6
 8000c4c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c5c:	22c0      	movs	r2, #192	; 0xc0
 8000c5e:	0312      	lsls	r2, r2, #12
 8000c60:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0352      	lsls	r2, r2, #13
 8000c68:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fa81 	bl	8001198 <HAL_CAN_Init>
 8000c96:	0003      	movs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 8000ca2:	f7ff fd17 	bl	80006d4 <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8000cb8:	003b      	movs	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000cd0:	003a      	movs	r2, r7
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fba8 	bl	800142c <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cde:	2102      	movs	r1, #2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 ff38 	bl	8001b56 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fc91 	bl	8001610 <HAL_CAN_Start>
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b00a      	add	sp, #40	; 0x28
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200001fc 	.word	0x200001fc
 8000cfc:	40006400 	.word	0x40006400

08000d00 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d032      	beq.n	8000d76 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fda0 	bl	8001858 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	425a      	negs	r2, r3
 8000d1c:	4153      	adcs	r3, r2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d000      	beq.n	8000d26 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8000d24:	e7f4      	b.n	8000d10 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8000d26:	210c      	movs	r1, #12
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	001a      	movs	r2, r3
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e007      	b.n	8000d62 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	210c      	movs	r1, #12
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3309      	adds	r3, #9
 8000d66:	001a      	movs	r2, r3
 8000d68:	2324      	movs	r3, #36	; 0x24
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	210c      	movs	r1, #12
 8000d6e:	1879      	adds	r1, r7, r1
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8000d72:	f000 fc93 	bl	800169c <HAL_CAN_AddTxMessage>
	}
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b00a      	add	sp, #40	; 0x28
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	200001fc 	.word	0x200001fc

08000d84 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d032      	beq.n	8000dfa <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fd5e 	bl	8001858 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	425a      	negs	r2, r3
 8000da0:	4153      	adcs	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d000      	beq.n	8000daa <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 8000da8:	e7f4      	b.n	8000d94 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 8000daa:	210c      	movs	r1, #12
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2202      	movs	r2, #2
 8000db0:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7a1b      	ldrb	r3, [r3, #8]
 8000db6:	001a      	movs	r2, r3
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2230      	movs	r2, #48	; 0x30
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	e007      	b.n	8000de6 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	210c      	movs	r1, #12
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3309      	adds	r3, #9
 8000dea:	001a      	movs	r2, r3
 8000dec:	2324      	movs	r3, #36	; 0x24
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	210c      	movs	r1, #12
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8000df6:	f000 fc51 	bl	800169c <HAL_CAN_AddTxMessage>
	}
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b00a      	add	sp, #40	; 0x28
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200001fc 	.word	0x200001fc

08000e08 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3312      	adds	r3, #18
 8000e16:	240f      	movs	r4, #15
 8000e18:	193a      	adds	r2, r7, r4
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 f818 	bl	8000e52 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}

08000e2e <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
template <class T,uint16_t DEPTH, uint16_t SIZE>
class HELPER_FIFO
{
public:
    //Constructors
    HELPER_FIFO():
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	831a      	strh	r2, [r3, #24]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	835a      	strh	r2, [r3, #26]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	771a      	strb	r2, [r3, #28]
    {}
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8b5a      	ldrh	r2, [r3, #26]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	8b1b      	ldrh	r3, [r3, #24]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d10d      	bne.n	8000e86 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	7f1b      	ldrb	r3, [r3, #28]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4053      	eors	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
        {
            //Fail to write since we are full
            if(success)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d025      	beq.n	8000eca <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                *success = false;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
            if(success)
 8000e84:	e021      	b.n	8000eca <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            }
        }else
        {
            if(success)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
            {
                *success = true;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8b19      	ldrh	r1, [r3, #24]
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f819 	bl	8000ed2 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	8b1b      	ldrh	r3, [r3, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fa9d 	bl	80003e8 <__aeabi_idivmod>
 8000eae:	000b      	movs	r3, r1
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	831a      	strh	r2, [r3, #24]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8b1a      	ldrh	r2, [r3, #24]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8b5b      	ldrh	r3, [r3, #26]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d103      	bne.n	8000eca <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                emptyNotFull = false;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	771a      	strb	r2, [r3, #28]
            }
        }
    }
 8000ec8:	e7ff      	b.n	8000eca <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8000ed2:	b590      	push	{r4, r7, lr}
 8000ed4:	b087      	sub	sp, #28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	230a      	movs	r3, #10
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	1c0a      	adds	r2, r1, #0
 8000ee2:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8000ee4:	2316      	movs	r3, #22
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]
 8000eec:	2416      	movs	r4, #22
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	d814      	bhi.n	8000f20 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	18d1      	adds	r1, r2, r3
 8000efe:	230a      	movs	r3, #10
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	7808      	ldrb	r0, [r1, #0]
 8000f0a:	68f9      	ldr	r1, [r7, #12]
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	188a      	adds	r2, r1, r2
 8000f10:	1c01      	adds	r1, r0, #0
 8000f12:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	3201      	adds	r2, #1
 8000f1c:	801a      	strh	r2, [r3, #0]
 8000f1e:	e7e5      	b.n	8000eec <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b007      	add	sp, #28
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <_Z41__static_initialization_and_destruction_0ii>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d107      	bne.n	8000f48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d103      	bne.n	8000f48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f814 	bl	8000f70 <_ZN14RX_BINARY_TREEC1Ev>
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0000ffff 	.word	0x0000ffff
 8000f54:	20000184 	.word	0x20000184

08000f58 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ffe1 	bl	8000f28 <_Z41__static_initialization_and_destruction_0ii>
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	0000ffff 	.word	0x0000ffff

08000f70 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2274      	movs	r2, #116	; 0x74
 8000f82:	2100      	movs	r1, #0
 8000f84:	5299      	strh	r1, [r3, r2]
{}
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN14RX_BINARY_TREE11FindElementEm>:
    }
    return false;
}

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 f80d 	bl	8000fc2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e001      	b.n	8000fba <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	e034      	b.n	8001042 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f833 	bl	800104a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	1c19      	adds	r1, r3, #0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4293      	cmp	r3, r2
 8000fee:	db01      	blt.n	8000ff4 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	1c19      	adds	r1, r3, #0
 8000ff4:	b2cb      	uxtb	r3, r1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	6859      	ldr	r1, [r3, #4]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ffdd 	bl	8000fc2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001008:	0003      	movs	r3, r0
 800100a:	e01a      	b.n	8001042 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f000 f819 	bl	800104a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001018:	0002      	movs	r2, r0
 800101a:	2301      	movs	r3, #1
 800101c:	1c19      	adds	r1, r3, #0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4293      	cmp	r3, r2
 8001022:	dc01      	bgt.n	8001028 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001024:	2300      	movs	r3, #0
 8001026:	1c19      	adds	r1, r3, #0
 8001028:	b2cb      	uxtb	r3, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6899      	ldr	r1, [r3, #8]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff ffc3 	bl	8000fc2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 800103c:	0003      	movs	r3, r0
 800103e:	e000      	b.n	8001042 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001040:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZN14RX_BINARY_TREE8node_keyEP4Node>:
        return 0;  
    return N->height;  
}

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 800105a:	2301      	movs	r3, #1
 800105c:	425b      	negs	r3, r3
 800105e:	e009      	b.n	8001074 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001068:	2301      	movs	r3, #1
 800106a:	425b      	negs	r3, r3
 800106c:	e002      	b.n	8001074 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010a6:	f7ff fc1d 	bl	80008e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010aa:	f002 fb27 	bl	80036fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff f9a1 	bl	80003f4 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010c0:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 80010c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010c8:	20000268 	.word	0x20000268

080010cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_COMP_IRQHandler>
	...

080010d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_Init+0x24>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_Init+0x24>)
 80010da:	2110      	movs	r1, #16
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f809 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fb1f 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x5c>)
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0019      	movs	r1, r3
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	0098      	lsls	r0, r3, #2
 800110e:	f7fe fffb 	bl	8000108 <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	0019      	movs	r1, r3
 8001116:	0020      	movs	r0, r4
 8001118:	f7fe fff6 	bl	8000108 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0018      	movs	r0, r3
 8001120:	f001 f835 	bl	800218e <HAL_SYSTICK_Config>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00f      	b.n	800114c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d80b      	bhi.n	800114a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f001 f802 	bl	8002144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_InitTick+0x64>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	20000260 	.word	0x20000260

08001184 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000260 	.word	0x20000260

08001198 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e11f      	b.n	80013ea <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2220      	movs	r2, #32
 80011ae:	5c9b      	ldrb	r3, [r3, r2]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d132      	bne.n	800121c <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a8e      	ldr	r2, [pc, #568]	; (80013f4 <HAL_CAN_Init+0x25c>)
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a8e      	ldr	r2, [pc, #568]	; (80013f8 <HAL_CAN_Init+0x260>)
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a8d      	ldr	r2, [pc, #564]	; (80013fc <HAL_CAN_Init+0x264>)
 80011c6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a8d      	ldr	r2, [pc, #564]	; (8001400 <HAL_CAN_Init+0x268>)
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a8c      	ldr	r2, [pc, #560]	; (8001404 <HAL_CAN_Init+0x26c>)
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a8c      	ldr	r2, [pc, #560]	; (8001408 <HAL_CAN_Init+0x270>)
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a8b      	ldr	r2, [pc, #556]	; (800140c <HAL_CAN_Init+0x274>)
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a8b      	ldr	r2, [pc, #556]	; (8001410 <HAL_CAN_Init+0x278>)
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a8a      	ldr	r2, [pc, #552]	; (8001414 <HAL_CAN_Init+0x27c>)
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a8a      	ldr	r2, [pc, #552]	; (8001418 <HAL_CAN_Init+0x280>)
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a89      	ldr	r2, [pc, #548]	; (800141c <HAL_CAN_Init+0x284>)
 80011f6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a89      	ldr	r2, [pc, #548]	; (8001420 <HAL_CAN_Init+0x288>)
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a88      	ldr	r2, [pc, #544]	; (8001424 <HAL_CAN_Init+0x28c>)
 8001202:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a86      	ldr	r2, [pc, #536]	; (8001428 <HAL_CAN_Init+0x290>)
 8001210:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	0010      	movs	r0, r2
 800121a:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff ffaa 	bl	8001184 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001234:	e013      	b.n	800125e <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001236:	f7ff ffa5 	bl	8001184 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d90c      	bls.n	800125e <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0292      	lsls	r2, r2, #10
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2220      	movs	r2, #32
 8001256:	2105      	movs	r1, #5
 8001258:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0c5      	b.n	80013ea <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	4013      	ands	r3, r2
 8001268:	d0e5      	beq.n	8001236 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2102      	movs	r1, #2
 8001276:	438a      	bics	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127a:	f7ff ff83 	bl	8001184 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001282:	e013      	b.n	80012ac <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001284:	f7ff ff7e 	bl	8001184 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90c      	bls.n	80012ac <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	0292      	lsls	r2, r2, #10
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	2105      	movs	r1, #5
 80012a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e09e      	b.n	80013ea <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1e5      	bne.n	8001284 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e007      	b.n	80012e2 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	438a      	bics	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e5b      	ldrb	r3, [r3, #25]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e007      	b.n	800130c <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e9b      	ldrb	r3, [r3, #26]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2120      	movs	r1, #32
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2120      	movs	r1, #32
 8001332:	438a      	bics	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7edb      	ldrb	r3, [r3, #27]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2110      	movs	r1, #16
 800134a:	438a      	bics	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2110      	movs	r1, #16
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7f1b      	ldrb	r3, [r3, #28]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2108      	movs	r1, #8
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2108      	movs	r1, #8
 8001386:	438a      	bics	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7f5b      	ldrb	r3, [r3, #29]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2104      	movs	r1, #4
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2104      	movs	r1, #4
 80013b0:	438a      	bics	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	0011      	movs	r1, r2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2220      	movs	r2, #32
 80013e4:	2101      	movs	r1, #1
 80013e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	08000aa3 	.word	0x08000aa3
 80013f8:	08001f8d 	.word	0x08001f8d
 80013fc:	08001f9d 	.word	0x08001f9d
 8001400:	08001fad 	.word	0x08001fad
 8001404:	08001f2d 	.word	0x08001f2d
 8001408:	08001f3d 	.word	0x08001f3d
 800140c:	08001f4d 	.word	0x08001f4d
 8001410:	08001f5d 	.word	0x08001f5d
 8001414:	08001f6d 	.word	0x08001f6d
 8001418:	08001f7d 	.word	0x08001f7d
 800141c:	08001fbd 	.word	0x08001fbd
 8001420:	08001fcd 	.word	0x08001fcd
 8001424:	08001fdd 	.word	0x08001fdd
 8001428:	08000771 	.word	0x08000771

0800142c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800143c:	2013      	movs	r0, #19
 800143e:	183b      	adds	r3, r7, r0
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	2120      	movs	r1, #32
 8001444:	5c52      	ldrb	r2, [r2, r1]
 8001446:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001448:	0002      	movs	r2, r0
 800144a:	18bb      	adds	r3, r7, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d004      	beq.n	800145c <HAL_CAN_ConfigFilter+0x30>
 8001452:	18bb      	adds	r3, r7, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d000      	beq.n	800145c <HAL_CAN_ConfigFilter+0x30>
 800145a:	e0cd      	b.n	80015f8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	58d3      	ldr	r3, [r2, r3]
 8001464:	2201      	movs	r2, #1
 8001466:	431a      	orrs	r2, r3
 8001468:	0011      	movs	r1, r2
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	221f      	movs	r2, #31
 8001478:	4013      	ands	r3, r2
 800147a:	2201      	movs	r2, #1
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	2387      	movs	r3, #135	; 0x87
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	58d3      	ldr	r3, [r2, r3]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	43d2      	mvns	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	0011      	movs	r1, r2
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	2387      	movs	r3, #135	; 0x87
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d129      	bne.n	80014f6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	2383      	movs	r3, #131	; 0x83
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	58d3      	ldr	r3, [r2, r3]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	2383      	movs	r3, #131	; 0x83
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014cc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3248      	adds	r2, #72	; 0x48
 80014d2:	00d2      	lsls	r2, r2, #3
 80014d4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	3348      	adds	r3, #72	; 0x48
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	18cb      	adds	r3, r1, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d128      	bne.n	8001550 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	2383      	movs	r3, #131	; 0x83
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	58d2      	ldr	r2, [r2, r3]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	431a      	orrs	r2, r3
 800150a:	0011      	movs	r1, r2
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	2383      	movs	r3, #131	; 0x83
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001526:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3248      	adds	r2, #72	; 0x48
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001542:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	3348      	adds	r3, #72	; 0x48
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	18cb      	adds	r3, r1, r3
 800154c:	3304      	adds	r3, #4
 800154e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	2381      	movs	r3, #129	; 0x81
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	58d3      	ldr	r3, [r2, r3]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	43d2      	mvns	r2, r2
 8001564:	401a      	ands	r2, r3
 8001566:	0011      	movs	r1, r2
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	2381      	movs	r3, #129	; 0x81
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	50d1      	str	r1, [r2, r3]
 8001570:	e00a      	b.n	8001588 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	2381      	movs	r3, #129	; 0x81
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	58d2      	ldr	r2, [r2, r3]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	431a      	orrs	r2, r3
 800157e:	0011      	movs	r1, r2
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	2381      	movs	r3, #129	; 0x81
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10c      	bne.n	80015aa <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	2385      	movs	r3, #133	; 0x85
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	58d3      	ldr	r3, [r2, r3]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	43d2      	mvns	r2, r2
 800159c:	401a      	ands	r2, r3
 800159e:	0011      	movs	r1, r2
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	2385      	movs	r3, #133	; 0x85
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	50d1      	str	r1, [r2, r3]
 80015a8:	e00a      	b.n	80015c0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	2385      	movs	r3, #133	; 0x85
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	58d2      	ldr	r2, [r2, r3]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	0011      	movs	r1, r2
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	2385      	movs	r3, #133	; 0x85
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10a      	bne.n	80015de <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	2387      	movs	r3, #135	; 0x87
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	58d2      	ldr	r2, [r2, r3]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	0011      	movs	r1, r2
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	2387      	movs	r3, #135	; 0x87
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	58d3      	ldr	r3, [r2, r3]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4393      	bics	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e007      	b.n	8001608 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	02d2      	lsls	r2, r2, #11
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
  }
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	5c9b      	ldrb	r3, [r3, r2]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d12f      	bne.n	8001684 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2220      	movs	r2, #32
 8001628:	2102      	movs	r1, #2
 800162a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fda2 	bl	8001184 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001644:	e013      	b.n	800166e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001646:	f7ff fd9d 	bl	8001184 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b0a      	cmp	r3, #10
 8001652:	d90c      	bls.n	800166e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	0292      	lsls	r2, r2, #10
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	2105      	movs	r1, #5
 8001668:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e012      	b.n	8001694 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	d1e5      	bne.n	8001646 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e007      	b.n	8001694 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	0312      	lsls	r2, r2, #12
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
  }
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016aa:	201f      	movs	r0, #31
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	2120      	movs	r1, #32
 80016b2:	5c52      	ldrb	r2, [r2, r1]
 80016b4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016be:	183b      	adds	r3, r7, r0
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d004      	beq.n	80016d0 <HAL_CAN_AddTxMessage+0x34>
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d000      	beq.n	80016d0 <HAL_CAN_AddTxMessage+0x34>
 80016ce:	e0b7      	b.n	8001840 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	04db      	lsls	r3, r3, #19
 80016d6:	4013      	ands	r3, r2
 80016d8:	d10a      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	051b      	lsls	r3, r3, #20
 80016e0:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016e2:	d105      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	055b      	lsls	r3, r3, #21
 80016ea:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016ec:	d100      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x54>
 80016ee:	e09e      	b.n	800182e <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0e1b      	lsrs	r3, r3, #24
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d908      	bls.n	8001712 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	0412      	lsls	r2, r2, #16
 8001708:	431a      	orrs	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e09e      	b.n	8001850 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001712:	2201      	movs	r2, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4311      	orrs	r1, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	3218      	adds	r2, #24
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	50d1      	str	r1, [r2, r3]
 800173c:	e00f      	b.n	800175e <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001748:	431a      	orrs	r2, r3
 800174a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001754:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	3218      	adds	r2, #24
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	18cb      	adds	r3, r1, r3
 800176e:	3304      	adds	r3, #4
 8001770:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	7d1b      	ldrb	r3, [r3, #20]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d112      	bne.n	80017a0 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	3304      	adds	r3, #4
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3318      	adds	r3, #24
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	18cb      	adds	r3, r1, r3
 800179c:	3304      	adds	r3, #4
 800179e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3307      	adds	r3, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	061a      	lsls	r2, r3, #24
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3306      	adds	r3, #6
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3305      	adds	r3, #5
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3304      	adds	r3, #4
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	0019      	movs	r1, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	6979      	ldr	r1, [r7, #20]
 80017cc:	23c6      	movs	r3, #198	; 0xc6
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	0109      	lsls	r1, r1, #4
 80017d2:	1841      	adds	r1, r0, r1
 80017d4:	18cb      	adds	r3, r1, r3
 80017d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3303      	adds	r3, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	061a      	lsls	r2, r3, #24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3302      	adds	r3, #2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3301      	adds	r3, #1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	0019      	movs	r1, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	23c4      	movs	r3, #196	; 0xc4
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	1841      	adds	r1, r0, r1
 800180a:	18cb      	adds	r3, r1, r3
 800180c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	3218      	adds	r2, #24
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	58d2      	ldr	r2, [r2, r3]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2101      	movs	r1, #1
 8001820:	4311      	orrs	r1, r2
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	3218      	adds	r2, #24
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e010      	b.n	8001850 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	0392      	lsls	r2, r2, #14
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e007      	b.n	8001850 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	02d2      	lsls	r2, r2, #11
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
  }
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b008      	add	sp, #32
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001864:	200b      	movs	r0, #11
 8001866:	183b      	adds	r3, r7, r0
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	2120      	movs	r1, #32
 800186c:	5c52      	ldrb	r2, [r2, r1]
 800186e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001870:	0002      	movs	r2, r0
 8001872:	18bb      	adds	r3, r7, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d003      	beq.n	8001882 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800187a:	18bb      	adds	r3, r7, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d11d      	bne.n	80018be <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	04db      	lsls	r3, r3, #19
 800188c:	4013      	ands	r3, r2
 800188e:	d002      	beq.n	8001896 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	051b      	lsls	r3, r3, #20
 80018a0:	4013      	ands	r3, r2
 80018a2:	d002      	beq.n	80018aa <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	055b      	lsls	r3, r3, #21
 80018b4:	4013      	ands	r3, r2
 80018b6:	d002      	beq.n	80018be <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d6:	2017      	movs	r0, #23
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	2120      	movs	r1, #32
 80018de:	5c52      	ldrb	r2, [r2, r1]
 80018e0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e2:	0002      	movs	r2, r0
 80018e4:	18bb      	adds	r3, r7, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d004      	beq.n	80018f6 <HAL_CAN_GetRxMessage+0x2e>
 80018ec:	18bb      	adds	r3, r7, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d000      	beq.n	80018f6 <HAL_CAN_GetRxMessage+0x2e>
 80018f4:	e0f8      	b.n	8001ae8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10e      	bne.n	800191a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2203      	movs	r2, #3
 8001904:	4013      	ands	r3, r2
 8001906:	d117      	bne.n	8001938 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	0392      	lsls	r2, r2, #14
 8001910:	431a      	orrs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0ee      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2203      	movs	r2, #3
 8001922:	4013      	ands	r3, r2
 8001924:	d108      	bne.n	8001938 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	0392      	lsls	r2, r2, #14
 800192e:	431a      	orrs	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0df      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	321b      	adds	r2, #27
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	58d3      	ldr	r3, [r2, r3]
 8001944:	2204      	movs	r2, #4
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	321b      	adds	r2, #27
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	58d3      	ldr	r3, [r2, r3]
 8001960:	0d5b      	lsrs	r3, r3, #21
 8001962:	055b      	lsls	r3, r3, #21
 8001964:	0d5a      	lsrs	r2, r3, #21
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e00a      	b.n	8001982 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	321b      	adds	r2, #27
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	58d3      	ldr	r3, [r2, r3]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	321b      	adds	r2, #27
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	58d3      	ldr	r3, [r2, r3]
 800198e:	2202      	movs	r2, #2
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	331b      	adds	r3, #27
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	220f      	movs	r2, #15
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	331b      	adds	r3, #27
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	401a      	ands	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	331b      	adds	r3, #27
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	3304      	adds	r3, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	0c1a      	lsrs	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	23dc      	movs	r3, #220	; 0xdc
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	188a      	adds	r2, r1, r2
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	23dc      	movs	r3, #220	; 0xdc
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	188a      	adds	r2, r1, r2
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0a1a      	lsrs	r2, r3, #8
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	23dc      	movs	r3, #220	; 0xdc
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	188a      	adds	r2, r1, r2
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0c1a      	lsrs	r2, r3, #16
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	23dc      	movs	r3, #220	; 0xdc
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	188a      	adds	r2, r1, r2
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e1a      	lsrs	r2, r3, #24
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	23de      	movs	r3, #222	; 0xde
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	188a      	adds	r2, r1, r2
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3304      	adds	r3, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	23de      	movs	r3, #222	; 0xde
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	188a      	adds	r2, r1, r2
 8001a76:	18d3      	adds	r3, r2, r3
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0a1a      	lsrs	r2, r3, #8
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3305      	adds	r3, #5
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	23de      	movs	r3, #222	; 0xde
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	188a      	adds	r2, r1, r2
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0c1a      	lsrs	r2, r3, #16
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3306      	adds	r3, #6
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	23de      	movs	r3, #222	; 0xde
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	188a      	adds	r2, r1, r2
 8001aae:	18d3      	adds	r3, r2, r3
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e1a      	lsrs	r2, r3, #24
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3307      	adds	r3, #7
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d108      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2120      	movs	r1, #32
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	e007      	b.n	8001ae4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2120      	movs	r1, #32
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	02d2      	lsls	r2, r2, #11
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b006      	add	sp, #24
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0e:	200b      	movs	r0, #11
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	2120      	movs	r1, #32
 8001b16:	5c52      	ldrb	r2, [r2, r1]
 8001b18:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	18bb      	adds	r3, r7, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001b24:	18bb      	adds	r3, r7, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d10f      	bne.n	8001b4c <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e005      	b.n	8001b4c <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2203      	movs	r2, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b60:	200f      	movs	r0, #15
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	2120      	movs	r1, #32
 8001b68:	5c52      	ldrb	r2, [r2, r1]
 8001b6a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	18bb      	adds	r3, r7, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d003      	beq.n	8001b7e <HAL_CAN_ActivateNotification+0x28>
 8001b76:	18bb      	adds	r3, r7, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d109      	bne.n	8001b92 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	02d2      	lsls	r2, r2, #11
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
  }
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b08a      	sub	sp, #40	; 0x28
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	d100      	bne.n	8001bf0 <HAL_CAN_IRQHandler+0x46>
 8001bee:	e08a      	b.n	8001d06 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d026      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d005      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	0010      	movs	r0, r2
 8001c10:	4798      	blx	r3
 8001c12:	e018      	b.n	8001c46 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d005      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	4313      	orrs	r3, r2
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e00e      	b.n	8001c46 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d005      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0152      	lsls	r2, r2, #5
 8001c36:	4313      	orrs	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e004      	b.n	8001c46 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	0010      	movs	r0, r2
 8001c44:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d02a      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0052      	lsls	r2, r2, #1
 8001c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d005      	beq.n	8001c70 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	4798      	blx	r3
 8001c6e:	e01a      	b.n	8001ca6 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4013      	ands	r3, r2
 8001c78:	d005      	beq.n	8001c86 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	0192      	lsls	r2, r2, #6
 8001c80:	4313      	orrs	r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e00f      	b.n	8001ca6 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d005      	beq.n	8001c9c <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	01d2      	lsls	r2, r2, #7
 8001c96:	4313      	orrs	r3, r2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9a:	e004      	b.n	8001ca6 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	025b      	lsls	r3, r3, #9
 8001cac:	4013      	ands	r3, r2
 8001cae:	d02a      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	0252      	lsls	r2, r2, #9
 8001cb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d005      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	0010      	movs	r0, r2
 8001ccc:	4798      	blx	r3
 8001cce:	e01a      	b.n	8001d06 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	02db      	lsls	r3, r3, #11
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d005      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	0212      	lsls	r2, r2, #8
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	e00f      	b.n	8001d06 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	031b      	lsls	r3, r3, #12
 8001cec:	4013      	ands	r3, r2
 8001cee:	d005      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0252      	lsls	r2, r2, #9
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e004      	b.n	8001d06 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	0010      	movs	r0, r2
 8001d04:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d00c      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2210      	movs	r2, #16
 8001d12:	4013      	ands	r3, r2
 8001d14:	d008      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2210      	movs	r2, #16
 8001d26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d00c      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2208      	movs	r2, #8
 8001d34:	4013      	ands	r3, r2
 8001d36:	d008      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	0010      	movs	r0, r2
 8001d48:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d00a      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	0010      	movs	r0, r2
 8001d66:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00c      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2210      	movs	r2, #16
 8001d74:	4013      	ands	r3, r2
 8001d76:	d008      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2210      	movs	r2, #16
 8001d88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d00c      	beq.n	8001dac <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2208      	movs	r2, #8
 8001d96:	4013      	ands	r3, r2
 8001d98:	d008      	beq.n	8001dac <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2208      	movs	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	0010      	movs	r0, r2
 8001daa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	2210      	movs	r2, #16
 8001db0:	4013      	ands	r3, r2
 8001db2:	d00a      	beq.n	8001dca <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	029b      	lsls	r3, r3, #10
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d00c      	beq.n	8001dee <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d008      	beq.n	8001dee <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	0010      	movs	r0, r2
 8001dec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dee:	6a3a      	ldr	r2, [r7, #32]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	4013      	ands	r3, r2
 8001df6:	d00c      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d008      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2208      	movs	r2, #8
 8001e06:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	0010      	movs	r0, r2
 8001e10:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <HAL_CAN_IRQHandler+0x274>
 8001e1c:	e074      	b.n	8001f08 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2204      	movs	r2, #4
 8001e22:	4013      	ands	r3, r2
 8001e24:	d100      	bne.n	8001e28 <HAL_CAN_IRQHandler+0x27e>
 8001e26:	e06b      	b.n	8001f00 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e38:	d003      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e42:	6a3a      	ldr	r2, [r7, #32]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e52:	d003      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	2202      	movs	r2, #2
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4013      	ands	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e6c:	d003      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	2204      	movs	r2, #4
 8001e72:	4313      	orrs	r3, r2
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e76:	6a3a      	ldr	r2, [r7, #32]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d03f      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2270      	movs	r2, #112	; 0x70
 8001e84:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e86:	d03b      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2270      	movs	r2, #112	; 0x70
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b60      	cmp	r3, #96	; 0x60
 8001e90:	d027      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x338>
 8001e92:	d82c      	bhi.n	8001eee <HAL_CAN_IRQHandler+0x344>
 8001e94:	2b50      	cmp	r3, #80	; 0x50
 8001e96:	d01f      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x32e>
 8001e98:	d829      	bhi.n	8001eee <HAL_CAN_IRQHandler+0x344>
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d017      	beq.n	8001ece <HAL_CAN_IRQHandler+0x324>
 8001e9e:	d826      	bhi.n	8001eee <HAL_CAN_IRQHandler+0x344>
 8001ea0:	2b30      	cmp	r3, #48	; 0x30
 8001ea2:	d00f      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x31a>
 8001ea4:	d823      	bhi.n	8001eee <HAL_CAN_IRQHandler+0x344>
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d002      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x306>
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d005      	beq.n	8001eba <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eae:	e01e      	b.n	8001eee <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb8:	e01a      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec2:	e015      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ecc:	e010      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	2240      	movs	r2, #64	; 0x40
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed6:	e00b      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	4313      	orrs	r3, r2
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ee0:	e006      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eec:	e000      	b.n	8001ef0 <HAL_CAN_IRQHandler+0x346>
            break;
 8001eee:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2170      	movs	r1, #112	; 0x70
 8001efc:	438a      	bics	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2204      	movs	r2, #4
 8001f06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	0010      	movs	r0, r2
 8001f22:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b00a      	add	sp, #40	; 0x28
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ffe:	d809      	bhi.n	8002014 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	001a      	movs	r2, r3
 8002006:	231f      	movs	r3, #31
 8002008:	401a      	ands	r2, r3
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_EnableIRQ+0x30>)
 800200c:	2101      	movs	r1, #1
 800200e:	4091      	lsls	r1, r2
 8002010:	000a      	movs	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
  }
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	0002      	movs	r2, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b7f      	cmp	r3, #127	; 0x7f
 8002034:	d828      	bhi.n	8002088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002036:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <__NVIC_SetPriority+0xd4>)
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b25b      	sxtb	r3, r3
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	33c0      	adds	r3, #192	; 0xc0
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	589b      	ldr	r3, [r3, r2]
 8002046:	1dfa      	adds	r2, r7, #7
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	0011      	movs	r1, r2
 800204c:	2203      	movs	r2, #3
 800204e:	400a      	ands	r2, r1
 8002050:	00d2      	lsls	r2, r2, #3
 8002052:	21ff      	movs	r1, #255	; 0xff
 8002054:	4091      	lsls	r1, r2
 8002056:	000a      	movs	r2, r1
 8002058:	43d2      	mvns	r2, r2
 800205a:	401a      	ands	r2, r3
 800205c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	22ff      	movs	r2, #255	; 0xff
 8002064:	401a      	ands	r2, r3
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	0018      	movs	r0, r3
 800206c:	2303      	movs	r3, #3
 800206e:	4003      	ands	r3, r0
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002074:	481f      	ldr	r0, [pc, #124]	; (80020f4 <__NVIC_SetPriority+0xd4>)
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	430a      	orrs	r2, r1
 8002080:	33c0      	adds	r3, #192	; 0xc0
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002086:	e031      	b.n	80020ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <__NVIC_SetPriority+0xd8>)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0019      	movs	r1, r3
 8002090:	230f      	movs	r3, #15
 8002092:	400b      	ands	r3, r1
 8002094:	3b08      	subs	r3, #8
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3306      	adds	r3, #6
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	18d3      	adds	r3, r2, r3
 800209e:	3304      	adds	r3, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1dfa      	adds	r2, r7, #7
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	0011      	movs	r1, r2
 80020a8:	2203      	movs	r2, #3
 80020aa:	400a      	ands	r2, r1
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	21ff      	movs	r1, #255	; 0xff
 80020b0:	4091      	lsls	r1, r2
 80020b2:	000a      	movs	r2, r1
 80020b4:	43d2      	mvns	r2, r2
 80020b6:	401a      	ands	r2, r3
 80020b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	401a      	ands	r2, r3
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	2303      	movs	r3, #3
 80020ca:	4003      	ands	r3, r0
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <__NVIC_SetPriority+0xd8>)
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	001c      	movs	r4, r3
 80020d8:	230f      	movs	r3, #15
 80020da:	4023      	ands	r3, r4
 80020dc:	3b08      	subs	r3, #8
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	430a      	orrs	r2, r1
 80020e2:	3306      	adds	r3, #6
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	18c3      	adds	r3, r0, r3
 80020e8:	3304      	adds	r3, #4
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b003      	add	sp, #12
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	045b      	lsls	r3, r3, #17
 800210c:	429a      	cmp	r2, r3
 800210e:	d301      	bcc.n	8002114 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002110:	2301      	movs	r3, #1
 8002112:	e010      	b.n	8002136 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <SysTick_Config+0x44>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	3a01      	subs	r2, #1
 800211a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	2103      	movs	r1, #3
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff ff7c 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x44>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x44>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	210f      	movs	r1, #15
 8002150:	187b      	adds	r3, r7, r1
 8002152:	1c02      	adds	r2, r0, #0
 8002154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	187b      	adds	r3, r7, r1
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b25b      	sxtb	r3, r3
 800215e:	0011      	movs	r1, r2
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	0002      	movs	r2, r0
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b25b      	sxtb	r3, r3
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ff33 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f7ff ffaf 	bl	80020fc <SysTick_Config>
 800219e:	0003      	movs	r3, r0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e155      	b.n	8002464 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4091      	lsls	r1, r2
 80021c2:	000a      	movs	r2, r1
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d100      	bne.n	80021d0 <HAL_GPIO_Init+0x28>
 80021ce:	e146      	b.n	800245e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d005      	beq.n	80021e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	43da      	mvns	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	0013      	movs	r3, r2
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	2201      	movs	r2, #1
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	4013      	ands	r3, r2
 8002252:	2b03      	cmp	r3, #3
 8002254:	d017      	beq.n	8002286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	409a      	lsls	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	43da      	mvns	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	4013      	ands	r3, r2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d123      	bne.n	80022da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	58d3      	ldr	r3, [r2, r3]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	43da      	mvns	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2107      	movs	r1, #7
 80022be:	400b      	ands	r3, r1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	401a      	ands	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	029b      	lsls	r3, r3, #10
 8002316:	4013      	ands	r3, r2
 8002318:	d100      	bne.n	800231c <HAL_GPIO_Init+0x174>
 800231a:	e0a0      	b.n	800245e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_GPIO_Init+0x2d4>)
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_GPIO_Init+0x2d4>)
 8002322:	2101      	movs	r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	619a      	str	r2, [r3, #24]
 8002328:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_GPIO_Init+0x2d4>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x2d8>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	589b      	ldr	r3, [r3, r2]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2203      	movs	r2, #3
 8002346:	4013      	ands	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	409a      	lsls	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	43da      	mvns	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	2390      	movs	r3, #144	; 0x90
 800235c:	05db      	lsls	r3, r3, #23
 800235e:	429a      	cmp	r2, r3
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_GPIO_Init+0x2dc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x1ea>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x2e0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x1e6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_GPIO_Init+0x2e4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x1e2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a44      	ldr	r2, [pc, #272]	; (8002490 <HAL_GPIO_Init+0x2e8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x1de>
 8002382:	2304      	movs	r3, #4
 8002384:	e008      	b.n	8002398 <HAL_GPIO_Init+0x1f0>
 8002386:	2305      	movs	r3, #5
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x1f0>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x1f0>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x1f0>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x1f0>
 8002396:	2300      	movs	r3, #0
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	2103      	movs	r1, #3
 800239c:	400a      	ands	r2, r1
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023a8:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x2d8>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43da      	mvns	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4013      	ands	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023da:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43da      	mvns	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	035b      	lsls	r3, r3, #13
 8002422:	4013      	ands	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	039b      	lsls	r3, r3, #14
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	40da      	lsrs	r2, r3
 800246c:	1e13      	subs	r3, r2, #0
 800246e:	d000      	beq.n	8002472 <HAL_GPIO_Init+0x2ca>
 8002470:	e6a2      	b.n	80021b8 <HAL_GPIO_Init+0x10>
  } 
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b006      	add	sp, #24
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000
 8002484:	48000400 	.word	0x48000400
 8002488:	48000800 	.word	0x48000800
 800248c:	48000c00 	.word	0x48000c00
 8002490:	48001000 	.word	0x48001000
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f000 fb76 	bl	8002b98 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d100      	bne.n	80024b8 <HAL_RCC_OscConfig+0x20>
 80024b6:	e08e      	b.n	80025d6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024b8:	4bc5      	ldr	r3, [pc, #788]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	220c      	movs	r2, #12
 80024be:	4013      	ands	r3, r2
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00e      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4bc2      	ldr	r3, [pc, #776]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d117      	bne.n	8002500 <HAL_RCC_OscConfig+0x68>
 80024d0:	4bbf      	ldr	r3, [pc, #764]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	23c0      	movs	r3, #192	; 0xc0
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	401a      	ands	r2, r3
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	025b      	lsls	r3, r3, #9
 80024de:	429a      	cmp	r2, r3
 80024e0:	d10e      	bne.n	8002500 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4bbb      	ldr	r3, [pc, #748]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	029b      	lsls	r3, r3, #10
 80024ea:	4013      	ands	r3, r2
 80024ec:	d100      	bne.n	80024f0 <HAL_RCC_OscConfig+0x58>
 80024ee:	e071      	b.n	80025d4 <HAL_RCC_OscConfig+0x13c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d000      	beq.n	80024fa <HAL_RCC_OscConfig+0x62>
 80024f8:	e06c      	b.n	80025d4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f000 fb4c 	bl	8002b98 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x80>
 8002508:	4bb1      	ldr	r3, [pc, #708]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4bb0      	ldr	r3, [pc, #704]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	0249      	lsls	r1, r1, #9
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e02f      	b.n	8002578 <HAL_RCC_OscConfig+0xe0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0xa2>
 8002520:	4bab      	ldr	r3, [pc, #684]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4baa      	ldr	r3, [pc, #680]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002526:	49ab      	ldr	r1, [pc, #684]	; (80027d4 <HAL_RCC_OscConfig+0x33c>)
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4ba8      	ldr	r3, [pc, #672]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4ba7      	ldr	r3, [pc, #668]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002532:	49a9      	ldr	r1, [pc, #676]	; (80027d8 <HAL_RCC_OscConfig+0x340>)
 8002534:	400a      	ands	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e01e      	b.n	8002578 <HAL_RCC_OscConfig+0xe0>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d10e      	bne.n	8002560 <HAL_RCC_OscConfig+0xc8>
 8002542:	4ba3      	ldr	r3, [pc, #652]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4ba2      	ldr	r3, [pc, #648]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	02c9      	lsls	r1, r1, #11
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	4b9f      	ldr	r3, [pc, #636]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0249      	lsls	r1, r1, #9
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xe0>
 8002560:	4b9b      	ldr	r3, [pc, #620]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b9a      	ldr	r3, [pc, #616]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002566:	499b      	ldr	r1, [pc, #620]	; (80027d4 <HAL_RCC_OscConfig+0x33c>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b97      	ldr	r3, [pc, #604]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002572:	4999      	ldr	r1, [pc, #612]	; (80027d8 <HAL_RCC_OscConfig+0x340>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d014      	beq.n	80025aa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fe00 	bl	8001184 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258a:	f7fe fdfb 	bl	8001184 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e2fd      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	4013      	ands	r3, r2
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0xf2>
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fdeb 	bl	8001184 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fde6 	bl	8001184 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e2e8      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	029b      	lsls	r3, r3, #10
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x11c>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d100      	bne.n	80025e2 <HAL_RCC_OscConfig+0x14a>
 80025e0:	e06c      	b.n	80026bc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	220c      	movs	r2, #12
 80025e8:	4013      	ands	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025ec:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	220c      	movs	r2, #12
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d11f      	bne.n	8002638 <HAL_RCC_OscConfig+0x1a0>
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	401a      	ands	r2, r3
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	429a      	cmp	r2, r3
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b71      	ldr	r3, [pc, #452]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x188>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e2bb      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	22f8      	movs	r2, #248	; 0xf8
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00da      	lsls	r2, r3, #3
 8002630:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e041      	b.n	80026bc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d024      	beq.n	800268a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fd9a 	bl	8001184 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe fd95 	bl	8001184 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e297      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d0f1      	beq.n	8002656 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	22f8      	movs	r2, #248	; 0xf8
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	00da      	lsls	r2, r3, #3
 8002682:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e018      	b.n	80026bc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002690:	2101      	movs	r1, #1
 8002692:	438a      	bics	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fd75 	bl	8001184 <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fe fd70 	bl	8001184 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e272      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d1f1      	bne.n	80026a0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	4013      	ands	r3, r2
 80026c4:	d036      	beq.n	8002734 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d019      	beq.n	8002702 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b40      	ldr	r3, [pc, #256]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80026d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	430a      	orrs	r2, r1
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe fd53 	bl	8001184 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe fd4e 	bl	8001184 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e250      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0f1      	beq.n	80026e4 <HAL_RCC_OscConfig+0x24c>
 8002700:	e018      	b.n	8002734 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002708:	2101      	movs	r1, #1
 800270a:	438a      	bics	r2, r1
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe fd39 	bl	8001184 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe fd34 	bl	8001184 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e236      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d1f1      	bne.n	8002718 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_RCC_OscConfig+0x2a8>
 800273e:	e0b5      	b.n	80028ac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002740:	201f      	movs	r0, #31
 8002742:	183b      	adds	r3, r7, r0
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	4013      	ands	r3, r2
 8002752:	d110      	bne.n	8002776 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0549      	lsls	r1, r1, #21
 800275e:	430a      	orrs	r2, r1
 8002760:	61da      	str	r2, [r3, #28]
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002770:	183b      	adds	r3, r7, r0
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_OscConfig+0x344>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4013      	ands	r3, r2
 8002780:	d11a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_RCC_OscConfig+0x344>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x344>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0049      	lsls	r1, r1, #1
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002790:	f7fe fcf8 	bl	8001184 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7fe fcf3 	bl	8001184 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1f5      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x344>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x348>
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <HAL_RCC_OscConfig+0x338>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	430a      	orrs	r2, r1
 80027ca:	621a      	str	r2, [r3, #32]
 80027cc:	e036      	b.n	800283c <HAL_RCC_OscConfig+0x3a4>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	40021000 	.word	0x40021000
 80027d4:	fffeffff 	.word	0xfffeffff
 80027d8:	fffbffff 	.word	0xfffbffff
 80027dc:	40007000 	.word	0x40007000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x36a>
 80027e8:	4bca      	ldr	r3, [pc, #808]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	4bc9      	ldr	r3, [pc, #804]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	621a      	str	r2, [r3, #32]
 80027f4:	4bc7      	ldr	r3, [pc, #796]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	4bc6      	ldr	r3, [pc, #792]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	2104      	movs	r1, #4
 80027fc:	438a      	bics	r2, r1
 80027fe:	621a      	str	r2, [r3, #32]
 8002800:	e01c      	b.n	800283c <HAL_RCC_OscConfig+0x3a4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x38c>
 800280a:	4bc2      	ldr	r3, [pc, #776]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4bc1      	ldr	r3, [pc, #772]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002810:	2104      	movs	r1, #4
 8002812:	430a      	orrs	r2, r1
 8002814:	621a      	str	r2, [r3, #32]
 8002816:	4bbf      	ldr	r3, [pc, #764]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4bbe      	ldr	r3, [pc, #760]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	621a      	str	r2, [r3, #32]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0x3a4>
 8002824:	4bbb      	ldr	r3, [pc, #748]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	4bba      	ldr	r3, [pc, #744]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800282a:	2101      	movs	r1, #1
 800282c:	438a      	bics	r2, r1
 800282e:	621a      	str	r2, [r3, #32]
 8002830:	4bb8      	ldr	r3, [pc, #736]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	4bb7      	ldr	r3, [pc, #732]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002836:	2104      	movs	r1, #4
 8002838:	438a      	bics	r2, r1
 800283a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d014      	beq.n	800286e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe fc9e 	bl	8001184 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e009      	b.n	8002862 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fc99 	bl	8001184 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4aaf      	ldr	r2, [pc, #700]	; (8002b18 <HAL_RCC_OscConfig+0x680>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e19a      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	4bac      	ldr	r3, [pc, #688]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	2202      	movs	r2, #2
 8002868:	4013      	ands	r3, r2
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x3b6>
 800286c:	e013      	b.n	8002896 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fc89 	bl	8001184 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002876:	e009      	b.n	800288c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fc84 	bl	8001184 <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	4aa5      	ldr	r2, [pc, #660]	; (8002b18 <HAL_RCC_OscConfig+0x680>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e185      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	4ba1      	ldr	r3, [pc, #644]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	2202      	movs	r2, #2
 8002892:	4013      	ands	r3, r2
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b9c      	ldr	r3, [pc, #624]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	4b9b      	ldr	r3, [pc, #620]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	499d      	ldr	r1, [pc, #628]	; (8002b1c <HAL_RCC_OscConfig+0x684>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12a      	bne.n	8002914 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028be:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	4b94      	ldr	r3, [pc, #592]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028c4:	2104      	movs	r1, #4
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028ca:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ce:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fc55 	bl	8001184 <HAL_GetTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028e0:	f7fe fc50 	bl	8001184 <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e152      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f1      	beq.n	80028e0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028fc:	4b85      	ldr	r3, [pc, #532]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	22f8      	movs	r2, #248	; 0xf8
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	00da      	lsls	r2, r3, #3
 800290c:	4b81      	ldr	r3, [pc, #516]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800290e:	430a      	orrs	r2, r1
 8002910:	635a      	str	r2, [r3, #52]	; 0x34
 8002912:	e034      	b.n	800297e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	3305      	adds	r3, #5
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800291c:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800291e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002920:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002922:	2104      	movs	r1, #4
 8002924:	438a      	bics	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002928:	4b7a      	ldr	r3, [pc, #488]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	22f8      	movs	r2, #248	; 0xf8
 800292e:	4393      	bics	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	00da      	lsls	r2, r3, #3
 8002938:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
 800293e:	e01e      	b.n	800297e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002940:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002946:	2104      	movs	r1, #4
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800294c:	4b71      	ldr	r3, [pc, #452]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800294e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002950:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002952:	2101      	movs	r1, #1
 8002954:	438a      	bics	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe fc14 	bl	8001184 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002962:	f7fe fc0f 	bl	8001184 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e111      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002974:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	2202      	movs	r2, #2
 800297a:	4013      	ands	r3, r2
 800297c:	d1f1      	bne.n	8002962 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	4013      	ands	r3, r2
 8002986:	d05c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002988:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	220c      	movs	r2, #12
 800298e:	4013      	ands	r3, r2
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d00e      	beq.n	80029b2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002994:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800299c:	2b08      	cmp	r3, #8
 800299e:	d114      	bne.n	80029ca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029a0:	4b5c      	ldr	r3, [pc, #368]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	23c0      	movs	r3, #192	; 0xc0
 80029a6:	025b      	lsls	r3, r3, #9
 80029a8:	401a      	ands	r2, r3
 80029aa:	23c0      	movs	r3, #192	; 0xc0
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029b2:	4b58      	ldr	r3, [pc, #352]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	025b      	lsls	r3, r3, #9
 80029ba:	4013      	ands	r3, r2
 80029bc:	d040      	beq.n	8002a40 <HAL_RCC_OscConfig+0x5a8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d03c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e6      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01b      	beq.n	8002a0a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80029d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0249      	lsls	r1, r1, #9
 80029dc:	430a      	orrs	r2, r1
 80029de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fbd0 	bl	8001184 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7fe fbcb 	bl	8001184 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0cd      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	025b      	lsls	r3, r3, #9
 8002a04:	4013      	ands	r3, r2
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x552>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	4943      	ldr	r1, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x688>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fbb5 	bl	8001184 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a20:	f7fe fbb0 	bl	8001184 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0b2      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x588>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a40:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5b4>
 8002a4a:	e0a4      	b.n	8002b96 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	220c      	movs	r2, #12
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5c2>
 8002a58:	e078      	b.n	8002b4c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d14c      	bne.n	8002afc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a68:	492e      	ldr	r1, [pc, #184]	; (8002b24 <HAL_RCC_OscConfig+0x68c>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fb89 	bl	8001184 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fb84 	bl	8001184 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e086      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	049b      	lsls	r3, r3, #18
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_RCC_OscConfig+0x690>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	431a      	orrs	r2, r3
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0449      	lsls	r1, r1, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fb57 	bl	8001184 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fb52 	bl	8001184 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	049b      	lsls	r3, r3, #18
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x644>
 8002afa:	e04c      	b.n	8002b96 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_RCC_OscConfig+0x67c>)
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x68c>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fb3c 	bl	8001184 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x6a6>
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	40021000 	.word	0x40021000
 8002b18:	00001388 	.word	0x00001388
 8002b1c:	efffffff 	.word	0xefffffff
 8002b20:	fffeffff 	.word	0xfffeffff
 8002b24:	feffffff 	.word	0xfeffffff
 8002b28:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fb2a 	bl	8001184 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e02c      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_RCC_OscConfig+0x708>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	049b      	lsls	r3, r3, #18
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x694>
 8002b4a:	e024      	b.n	8002b96 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e01f      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_RCC_OscConfig+0x708>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_RCC_OscConfig+0x708>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10e      	bne.n	8002b92 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	220f      	movs	r2, #15
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	23f0      	movs	r3, #240	; 0xf0
 8002b86:	039b      	lsls	r3, r3, #14
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b008      	add	sp, #32
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0bf      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d911      	bls.n	8002bea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4393      	bics	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0a6      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d006      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c04:	21e0      	movs	r1, #224	; 0xe0
 8002c06:	00c9      	lsls	r1, r1, #3
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	22f0      	movs	r2, #240	; 0xf0
 8002c12:	4393      	bics	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	d04c      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d120      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07a      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	049b      	lsls	r3, r3, #18
 8002c52:	4013      	ands	r3, r2
 8002c54:	d114      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06e      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c62:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e062      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e05b      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2203      	movs	r2, #3
 8002c86:	4393      	bics	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fa76 	bl	8001184 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	e009      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9e:	f7fe fa71 	bl	8001184 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <HAL_RCC_ClockConfig+0x1a4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e042      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1ec      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d211      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4393      	bics	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_ClockConfig+0x19c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4013      	ands	r3, r2
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e020      	b.n	8002d38 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_RCC_ClockConfig+0x1a8>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d14:	f000 f820 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d18:	0001      	movs	r1, r0
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_ClockConfig+0x1a0>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	220f      	movs	r2, #15
 8002d22:	4013      	ands	r3, r2
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1ac>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	000a      	movs	r2, r1
 8002d2a:	40da      	lsrs	r2, r3
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1b0>)
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fe f9e1 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	00001388 	.word	0x00001388
 8002d4c:	fffff8ff 	.word	0xfffff8ff
 8002d50:	08003820 	.word	0x08003820
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08f      	sub	sp, #60	; 0x3c
 8002d5c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d5e:	2314      	movs	r3, #20
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xec>)
 8002d64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d66:	c313      	stmia	r3!, {r0, r1, r4}
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002d70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d72:	c313      	stmia	r3!, {r0, r1, r4}
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	2300      	movs	r3, #0
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	220c      	movs	r2, #12
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d047      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xd4>
 8002d9c:	d849      	bhi.n	8002e32 <HAL_RCC_GetSysClockFreq+0xda>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x50>
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x56>
 8002da6:	e044      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dac:	e044      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	0c9b      	lsrs	r3, r3, #18
 8002db2:	220f      	movs	r2, #15
 8002db4:	4013      	ands	r3, r2
 8002db6:	2214      	movs	r2, #20
 8002db8:	18ba      	adds	r2, r7, r2
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	1d3a      	adds	r2, r7, #4
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	025b      	lsls	r3, r3, #9
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dde:	481c      	ldr	r0, [pc, #112]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de0:	f7fd f992 	bl	8000108 <__udivsi3>
 8002de4:	0003      	movs	r3, r0
 8002de6:	001a      	movs	r2, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	4353      	muls	r3, r2
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	e01a      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	23c0      	movs	r3, #192	; 0xc0
 8002df4:	025b      	lsls	r3, r3, #9
 8002df6:	401a      	ands	r2, r3
 8002df8:	23c0      	movs	r3, #192	; 0xc0
 8002dfa:	025b      	lsls	r3, r3, #9
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d109      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e02:	4814      	ldr	r0, [pc, #80]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e04:	f7fd f980 	bl	8000108 <__udivsi3>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	4353      	muls	r3, r2
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e16:	480e      	ldr	r0, [pc, #56]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e18:	f7fd f976 	bl	8000108 <__udivsi3>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	001a      	movs	r2, r3
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	4353      	muls	r3, r2
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e30:	e002      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b00f      	add	sp, #60	; 0x3c
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	08003800 	.word	0x08003800
 8002e48:	08003810 	.word	0x08003810
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	02dc6c00 	.word	0x02dc6c00

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e042      	b.n	8002ef0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223d      	movs	r2, #61	; 0x3d
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223c      	movs	r2, #60	; 0x3c
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd fcc3 	bl	800080c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223d      	movs	r2, #61	; 0x3d
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	0019      	movs	r1, r3
 8002e98:	0010      	movs	r0, r2
 8002e9a:	f000 fa89 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2246      	movs	r2, #70	; 0x46
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	223e      	movs	r2, #62	; 0x3e
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2241      	movs	r2, #65	; 0x41
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2242      	movs	r2, #66	; 0x42
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5499      	strb	r1, [r3, r2]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2243      	movs	r2, #67	; 0x43
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2244      	movs	r2, #68	; 0x44
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2245      	movs	r2, #69	; 0x45
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223d      	movs	r2, #61	; 0x3d
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	223d      	movs	r2, #61	; 0x3d
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e03b      	b.n	8002f88 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223d      	movs	r2, #61	; 0x3d
 8002f14:	2102      	movs	r1, #2
 8002f16:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2101      	movs	r1, #1
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIM_Base_Start_IT+0x98>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00f      	beq.n	8002f52 <HAL_TIM_Base_Start_IT+0x5a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_Base_Start_IT+0x5a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_Base_Start_IT+0x5a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2207      	movs	r2, #7
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40014000 	.word	0x40014000

08002f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d124      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d11d      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	4252      	negs	r2, r2
 8002fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f9ce 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e007      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f9c1 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f9cd 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2204      	movs	r2, #4
 8003004:	4013      	ands	r3, r2
 8003006:	2b04      	cmp	r3, #4
 8003008:	d125      	bne.n	8003056 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2204      	movs	r2, #4
 8003012:	4013      	ands	r3, r2
 8003014:	2b04      	cmp	r3, #4
 8003016:	d11e      	bne.n	8003056 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2205      	movs	r2, #5
 800301e:	4252      	negs	r2, r2
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	23c0      	movs	r3, #192	; 0xc0
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f9a1 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 800303e:	e007      	b.n	8003050 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f994 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f9a0 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2208      	movs	r2, #8
 800305e:	4013      	ands	r3, r2
 8003060:	2b08      	cmp	r3, #8
 8003062:	d124      	bne.n	80030ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11d      	bne.n	80030ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2209      	movs	r2, #9
 8003078:	4252      	negs	r2, r2
 800307a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2204      	movs	r2, #4
 8003080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2203      	movs	r2, #3
 800308a:	4013      	ands	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 f975 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003096:	e007      	b.n	80030a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f968 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f974 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d125      	bne.n	8003108 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2210      	movs	r2, #16
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d11e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2211      	movs	r2, #17
 80030d0:	4252      	negs	r2, r2
 80030d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2208      	movs	r2, #8
 80030d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	23c0      	movs	r3, #192	; 0xc0
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f948 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e007      	b.n	8003102 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f93b 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f947 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10f      	bne.n	8003136 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	2b01      	cmp	r3, #1
 8003122:	d108      	bne.n	8003136 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2202      	movs	r2, #2
 800312a:	4252      	negs	r2, r2
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f7fd fab9 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	4013      	ands	r3, r2
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d10f      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	4013      	ands	r3, r2
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d108      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2281      	movs	r2, #129	; 0x81
 8003158:	4252      	negs	r2, r2
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 faa6 	bl	80036b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	4013      	ands	r3, r2
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d10f      	bne.n	8003192 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	4013      	ands	r3, r2
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d108      	bne.n	8003192 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2241      	movs	r2, #65	; 0x41
 8003186:	4252      	negs	r2, r2
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f907 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2220      	movs	r2, #32
 800319a:	4013      	ands	r3, r2
 800319c:	2b20      	cmp	r3, #32
 800319e:	d10f      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d108      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2221      	movs	r2, #33	; 0x21
 80031b4:	4252      	negs	r2, r2
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fa70 	bl	80036a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	230f      	movs	r3, #15
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	223c      	movs	r2, #60	; 0x3c
 80031de:	5c9b      	ldrb	r3, [r3, r2]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_ConfigClockSource+0x20>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0bc      	b.n	8003362 <HAL_TIM_ConfigClockSource+0x19a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	223c      	movs	r2, #60	; 0x3c
 80031ec:	2101      	movs	r1, #1
 80031ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	223d      	movs	r2, #61	; 0x3d
 80031f4:	2102      	movs	r1, #2
 80031f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2277      	movs	r2, #119	; 0x77
 8003204:	4393      	bics	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_TIM_ConfigClockSource+0x1a4>)
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	0192      	lsls	r2, r2, #6
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xde>
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0192      	lsls	r2, r2, #6
 8003228:	4293      	cmp	r3, r2
 800322a:	d900      	bls.n	800322e <HAL_TIM_ConfigClockSource+0x66>
 800322c:	e088      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	0152      	lsls	r2, r2, #5
 8003232:	4293      	cmp	r3, r2
 8003234:	d100      	bne.n	8003238 <HAL_TIM_ConfigClockSource+0x70>
 8003236:	e088      	b.n	800334a <HAL_TIM_ConfigClockSource+0x182>
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0152      	lsls	r2, r2, #5
 800323c:	4293      	cmp	r3, r2
 800323e:	d900      	bls.n	8003242 <HAL_TIM_ConfigClockSource+0x7a>
 8003240:	e07e      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 8003242:	2b70      	cmp	r3, #112	; 0x70
 8003244:	d018      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xb0>
 8003246:	d900      	bls.n	800324a <HAL_TIM_ConfigClockSource+0x82>
 8003248:	e07a      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 800324a:	2b60      	cmp	r3, #96	; 0x60
 800324c:	d04f      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x126>
 800324e:	d900      	bls.n	8003252 <HAL_TIM_ConfigClockSource+0x8a>
 8003250:	e076      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 8003252:	2b50      	cmp	r3, #80	; 0x50
 8003254:	d03b      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x106>
 8003256:	d900      	bls.n	800325a <HAL_TIM_ConfigClockSource+0x92>
 8003258:	e072      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d057      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x146>
 800325e:	d900      	bls.n	8003262 <HAL_TIM_ConfigClockSource+0x9a>
 8003260:	e06e      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d063      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x166>
 8003266:	d86b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d060      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x166>
 800326c:	d868      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d05d      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x166>
 8003272:	2b10      	cmp	r3, #16
 8003274:	d05b      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x166>
 8003276:	e063      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f000 f98c 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2277      	movs	r2, #119	; 0x77
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
      break;
 80032a4:	e052      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f000 f975 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	01c9      	lsls	r1, r1, #7
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e03e      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	001a      	movs	r2, r3
 80032dc:	f000 f8e8 	bl	80034b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2150      	movs	r1, #80	; 0x50
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 f942 	bl	8003570 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e02e      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	001a      	movs	r2, r3
 80032fc:	f000 f906 	bl	800350c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2160      	movs	r1, #96	; 0x60
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f932 	bl	8003570 <TIM_ITRx_SetConfig>
      break;
 800330c:	e01e      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	001a      	movs	r2, r3
 800331c:	f000 f8c8 	bl	80034b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f922 	bl	8003570 <TIM_ITRx_SetConfig>
      break;
 800332c:	e00e      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0019      	movs	r1, r3
 8003338:	0010      	movs	r0, r2
 800333a:	f000 f919 	bl	8003570 <TIM_ITRx_SetConfig>
      break;
 800333e:	e005      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003340:	230f      	movs	r3, #15
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
      break;
 8003348:	e000      	b.n	800334c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800334a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	223d      	movs	r2, #61	; 0x3d
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223c      	movs	r2, #60	; 0x3c
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

  return status;
 800335c:	230f      	movs	r3, #15
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	ffff00ff 	.word	0xffff00ff

08003370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a34      	ldr	r2, [pc, #208]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d008      	beq.n	80033da <TIM_Base_SetConfig+0x2a>
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0x2a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a30      	ldr	r2, [pc, #192]	; (8003498 <TIM_Base_SetConfig+0xe8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2270      	movs	r2, #112	; 0x70
 80033de:	4393      	bics	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <TIM_Base_SetConfig+0xe8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a24      	ldr	r2, [pc, #144]	; (800349c <TIM_Base_SetConfig+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <TIM_Base_SetConfig+0xf0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <TIM_Base_SetConfig+0xf4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0x76>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <TIM_Base_SetConfig+0xf8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <TIM_Base_SetConfig+0xfc>)
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	4393      	bics	r3, r2
 800343e:	001a      	movs	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <TIM_Base_SetConfig+0xce>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <TIM_Base_SetConfig+0xf0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <TIM_Base_SetConfig+0xce>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <TIM_Base_SetConfig+0xf4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0xce>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <TIM_Base_SetConfig+0xf8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d103      	bne.n	8003486 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	615a      	str	r2, [r3, #20]
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b004      	add	sp, #16
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40002000 	.word	0x40002000
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	fffffcff 	.word	0xfffffcff

080034b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4393      	bics	r3, r2
 80034ca:	001a      	movs	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	22f0      	movs	r2, #240	; 0xf0
 80034da:	4393      	bics	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	220a      	movs	r2, #10
 80034ec:	4393      	bics	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}

0800350c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	2210      	movs	r2, #16
 800351e:	4393      	bics	r3, r2
 8003520:	001a      	movs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <TIM_TI2_ConfigInputStage+0x60>)
 8003536:	4013      	ands	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	031b      	lsls	r3, r3, #12
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	22a0      	movs	r2, #160	; 0xa0
 8003548:	4393      	bics	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	ffff0fff 	.word	0xffff0fff

08003570 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2270      	movs	r2, #112	; 0x70
 8003584:	4393      	bics	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	2207      	movs	r2, #7
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	609a      	str	r2, [r3, #8]
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b004      	add	sp, #16
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <TIM_ETR_SetConfig+0x3c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	ffff00ff 	.word	0xffff00ff

080035e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	223c      	movs	r2, #60	; 0x3c
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e047      	b.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223c      	movs	r2, #60	; 0x3c
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	223d      	movs	r2, #61	; 0x3d
 8003608:	2102      	movs	r1, #2
 800360a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2270      	movs	r2, #112	; 0x70
 8003620:	4393      	bics	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00f      	beq.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	429a      	cmp	r2, r3
 800364a:	d009      	beq.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10c      	bne.n	800367a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	4393      	bics	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	4313      	orrs	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223d      	movs	r2, #61	; 0x3d
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	223c      	movs	r2, #60	; 0x3c
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40000400 	.word	0x40000400
 800369c:	40014000 	.word	0x40014000

080036a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}

080036c0 <__cxa_pure_virtual>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	f000 f805 	bl	80036d0 <_ZSt9terminatev>

080036c6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80036c6:	b510      	push	{r4, lr}
 80036c8:	4780      	blx	r0
 80036ca:	f000 f809 	bl	80036e0 <abort>
	...

080036d0 <_ZSt9terminatev>:
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <_ZSt9terminatev+0xc>)
 80036d2:	b510      	push	{r4, lr}
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	f7ff fff6 	bl	80036c6 <_ZN10__cxxabiv111__terminateEPFvvE>
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <abort>:
 80036e0:	2006      	movs	r0, #6
 80036e2:	b510      	push	{r4, lr}
 80036e4:	f000 f860 	bl	80037a8 <raise>
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7fd f8ef 	bl	80008cc <_exit>
	...

080036f0 <__errno>:
 80036f0:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <__errno+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	4770      	bx	lr
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000010 	.word	0x20000010

080036fc <__libc_init_array>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	2600      	movs	r6, #0
 8003700:	4d0c      	ldr	r5, [pc, #48]	; (8003734 <__libc_init_array+0x38>)
 8003702:	4c0d      	ldr	r4, [pc, #52]	; (8003738 <__libc_init_array+0x3c>)
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	42a6      	cmp	r6, r4
 800370a:	d109      	bne.n	8003720 <__libc_init_array+0x24>
 800370c:	2600      	movs	r6, #0
 800370e:	f000 f86b 	bl	80037e8 <_init>
 8003712:	4d0a      	ldr	r5, [pc, #40]	; (800373c <__libc_init_array+0x40>)
 8003714:	4c0a      	ldr	r4, [pc, #40]	; (8003740 <__libc_init_array+0x44>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	42a6      	cmp	r6, r4
 800371c:	d105      	bne.n	800372a <__libc_init_array+0x2e>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	00b3      	lsls	r3, r6, #2
 8003722:	58eb      	ldr	r3, [r5, r3]
 8003724:	4798      	blx	r3
 8003726:	3601      	adds	r6, #1
 8003728:	e7ee      	b.n	8003708 <__libc_init_array+0xc>
 800372a:	00b3      	lsls	r3, r6, #2
 800372c:	58eb      	ldr	r3, [r5, r3]
 800372e:	4798      	blx	r3
 8003730:	3601      	adds	r6, #1
 8003732:	e7f2      	b.n	800371a <__libc_init_array+0x1e>
 8003734:	08003854 	.word	0x08003854
 8003738:	08003854 	.word	0x08003854
 800373c:	08003854 	.word	0x08003854
 8003740:	08003860 	.word	0x08003860

08003744 <memset>:
 8003744:	0003      	movs	r3, r0
 8003746:	1882      	adds	r2, r0, r2
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	7019      	strb	r1, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <_raise_r>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	0004      	movs	r4, r0
 8003758:	000d      	movs	r5, r1
 800375a:	291f      	cmp	r1, #31
 800375c:	d904      	bls.n	8003768 <_raise_r+0x14>
 800375e:	2316      	movs	r3, #22
 8003760:	6003      	str	r3, [r0, #0]
 8003762:	2001      	movs	r0, #1
 8003764:	4240      	negs	r0, r0
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <_raise_r+0x24>
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	189b      	adds	r3, r3, r2
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2a00      	cmp	r2, #0
 8003776:	d108      	bne.n	800378a <_raise_r+0x36>
 8003778:	0020      	movs	r0, r4
 800377a:	f000 f831 	bl	80037e0 <_getpid_r>
 800377e:	002a      	movs	r2, r5
 8003780:	0001      	movs	r1, r0
 8003782:	0020      	movs	r0, r4
 8003784:	f000 f81a 	bl	80037bc <_kill_r>
 8003788:	e7ed      	b.n	8003766 <_raise_r+0x12>
 800378a:	2000      	movs	r0, #0
 800378c:	2a01      	cmp	r2, #1
 800378e:	d0ea      	beq.n	8003766 <_raise_r+0x12>
 8003790:	1c51      	adds	r1, r2, #1
 8003792:	d103      	bne.n	800379c <_raise_r+0x48>
 8003794:	2316      	movs	r3, #22
 8003796:	3001      	adds	r0, #1
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	e7e4      	b.n	8003766 <_raise_r+0x12>
 800379c:	2400      	movs	r4, #0
 800379e:	0028      	movs	r0, r5
 80037a0:	601c      	str	r4, [r3, #0]
 80037a2:	4790      	blx	r2
 80037a4:	0020      	movs	r0, r4
 80037a6:	e7de      	b.n	8003766 <_raise_r+0x12>

080037a8 <raise>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <raise+0x10>)
 80037ac:	0001      	movs	r1, r0
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	f7ff ffd0 	bl	8003754 <_raise_r>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20000010 	.word	0x20000010

080037bc <_kill_r>:
 80037bc:	2300      	movs	r3, #0
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	4d06      	ldr	r5, [pc, #24]	; (80037dc <_kill_r+0x20>)
 80037c2:	0004      	movs	r4, r0
 80037c4:	0008      	movs	r0, r1
 80037c6:	0011      	movs	r1, r2
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	f7fd f86f 	bl	80008ac <_kill>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d103      	bne.n	80037da <_kill_r+0x1e>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d000      	beq.n	80037da <_kill_r+0x1e>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	20000264 	.word	0x20000264

080037e0 <_getpid_r>:
 80037e0:	b510      	push	{r4, lr}
 80037e2:	f7fd f85d 	bl	80008a0 <_getpid>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
