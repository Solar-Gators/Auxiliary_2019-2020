
motorc_board2_mitsuba_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f98  08003f98  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003f98  08003f98  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f98  08003f98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000074  0800401c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800401c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a508  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fa  00000000  00000000  0002a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a819  00000000  00000000  0002d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008933  00000000  00000000  00047dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926ba  00000000  00000000  00050704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf4  00000000  00000000  000e2e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ee4 	.word	0x08003ee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003ee4 	.word	0x08003ee4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f001 fe12 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f8fa 	bl	80005f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f976 	bl	80006f0 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000404:	f000 f93a 	bl	800067c <_ZL11MX_CAN_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mcFrame0.txData.battVoltage=0;
 8000408:	4b72      	ldr	r3, [pc, #456]	; (80005d4 <main+0x1e0>)
 800040a:	2200      	movs	r2, #0
 800040c:	875a      	strh	r2, [r3, #58]	; 0x3a
  mcFrame0.txData.battCurrent=0;
 800040e:	4b71      	ldr	r3, [pc, #452]	; (80005d4 <main+0x1e0>)
 8000410:	2200      	movs	r2, #0
 8000412:	879a      	strh	r2, [r3, #60]	; 0x3c
  mcFrame0.txData.battCurrentDir=0;
 8000414:	4b6f      	ldr	r3, [pc, #444]	; (80005d4 <main+0x1e0>)
 8000416:	223e      	movs	r2, #62	; 0x3e
 8000418:	2100      	movs	r1, #0
 800041a:	5499      	strb	r1, [r3, r2]
  mcFrame0.txData.motorCurrentPkAvg=0;
 800041c:	4b6d      	ldr	r3, [pc, #436]	; (80005d4 <main+0x1e0>)
 800041e:	2240      	movs	r2, #64	; 0x40
 8000420:	2100      	movs	r1, #0
 8000422:	5299      	strh	r1, [r3, r2]
  mcFrame0.txData.FETtemp=0;
 8000424:	4b6b      	ldr	r3, [pc, #428]	; (80005d4 <main+0x1e0>)
 8000426:	2242      	movs	r2, #66	; 0x42
 8000428:	2100      	movs	r1, #0
 800042a:	5499      	strb	r1, [r3, r2]
  mcFrame0.txData.motorRPM=0;
 800042c:	4b69      	ldr	r3, [pc, #420]	; (80005d4 <main+0x1e0>)
 800042e:	2244      	movs	r2, #68	; 0x44
 8000430:	2100      	movs	r1, #0
 8000432:	5299      	strh	r1, [r3, r2]
  mcFrame0.txData.PWMDuty=0;
 8000434:	4b67      	ldr	r3, [pc, #412]	; (80005d4 <main+0x1e0>)
 8000436:	2246      	movs	r2, #70	; 0x46
 8000438:	2100      	movs	r1, #0
 800043a:	5299      	strh	r1, [r3, r2]
  mcFrame0.txData.LeadAngle=0;
 800043c:	4b65      	ldr	r3, [pc, #404]	; (80005d4 <main+0x1e0>)
 800043e:	2248      	movs	r2, #72	; 0x48
 8000440:	2100      	movs	r1, #0
 8000442:	5499      	strb	r1, [r3, r2]

  mcFrame1.txData.powerMode=0;
 8000444:	4b64      	ldr	r3, [pc, #400]	; (80005d8 <main+0x1e4>)
 8000446:	223a      	movs	r2, #58	; 0x3a
 8000448:	2100      	movs	r1, #0
 800044a:	5499      	strb	r1, [r3, r2]
  mcFrame1.txData.MCmode=0;
 800044c:	4b62      	ldr	r3, [pc, #392]	; (80005d8 <main+0x1e4>)
 800044e:	223b      	movs	r2, #59	; 0x3b
 8000450:	2100      	movs	r1, #0
 8000452:	5499      	strb	r1, [r3, r2]
  mcFrame1.txData.AcceleratorPosition=0;
 8000454:	4b60      	ldr	r3, [pc, #384]	; (80005d8 <main+0x1e4>)
 8000456:	2200      	movs	r2, #0
 8000458:	879a      	strh	r2, [r3, #60]	; 0x3c
  mcFrame1.txData.regenVRposition=0;
 800045a:	4b5f      	ldr	r3, [pc, #380]	; (80005d8 <main+0x1e4>)
 800045c:	2200      	movs	r2, #0
 800045e:	87da      	strh	r2, [r3, #62]	; 0x3e
  mcFrame1.txData.digitSWposition=0;
 8000460:	4b5d      	ldr	r3, [pc, #372]	; (80005d8 <main+0x1e4>)
 8000462:	2240      	movs	r2, #64	; 0x40
 8000464:	2100      	movs	r1, #0
 8000466:	5499      	strb	r1, [r3, r2]
  mcFrame1.txData.outTargetVal=0;
 8000468:	4b5b      	ldr	r3, [pc, #364]	; (80005d8 <main+0x1e4>)
 800046a:	2242      	movs	r2, #66	; 0x42
 800046c:	2100      	movs	r1, #0
 800046e:	5299      	strh	r1, [r3, r2]
  mcFrame1.txData.driveActStat=0;
 8000470:	4b59      	ldr	r3, [pc, #356]	; (80005d8 <main+0x1e4>)
 8000472:	2244      	movs	r2, #68	; 0x44
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  mcFrame1.txData.regenStat=0;
 8000478:	4b57      	ldr	r3, [pc, #348]	; (80005d8 <main+0x1e4>)
 800047a:	2245      	movs	r2, #69	; 0x45
 800047c:	2100      	movs	r1, #0
 800047e:	5499      	strb	r1, [r3, r2]
  
  mcFrame2.txData.adSensorError=0;
 8000480:	4b56      	ldr	r3, [pc, #344]	; (80005dc <main+0x1e8>)
 8000482:	2239      	movs	r2, #57	; 0x39
 8000484:	2100      	movs	r1, #0
 8000486:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.motorCurrSensorUError=0;
 8000488:	4b54      	ldr	r3, [pc, #336]	; (80005dc <main+0x1e8>)
 800048a:	223a      	movs	r2, #58	; 0x3a
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.motorCurrSensorWError=0;
 8000490:	4b52      	ldr	r3, [pc, #328]	; (80005dc <main+0x1e8>)
 8000492:	223b      	movs	r2, #59	; 0x3b
 8000494:	2100      	movs	r1, #0
 8000496:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.fetThermError=0;
 8000498:	4b50      	ldr	r3, [pc, #320]	; (80005dc <main+0x1e8>)
 800049a:	223c      	movs	r2, #60	; 0x3c
 800049c:	2100      	movs	r1, #0
 800049e:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.battVoltSensorError=0;
 80004a0:	4b4e      	ldr	r3, [pc, #312]	; (80005dc <main+0x1e8>)
 80004a2:	223d      	movs	r2, #61	; 0x3d
 80004a4:	2100      	movs	r1, #0
 80004a6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.battCurrSensorError=0;
 80004a8:	4b4c      	ldr	r3, [pc, #304]	; (80005dc <main+0x1e8>)
 80004aa:	223e      	movs	r2, #62	; 0x3e
 80004ac:	2100      	movs	r1, #0
 80004ae:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.battCurrSensorAdjError=0;
 80004b0:	4b4a      	ldr	r3, [pc, #296]	; (80005dc <main+0x1e8>)
 80004b2:	223f      	movs	r2, #63	; 0x3f
 80004b4:	2100      	movs	r1, #0
 80004b6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.motorCurrSensorAdjError=0;
 80004b8:	4b48      	ldr	r3, [pc, #288]	; (80005dc <main+0x1e8>)
 80004ba:	2240      	movs	r2, #64	; 0x40
 80004bc:	2100      	movs	r1, #0
 80004be:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.accelPosError=0;
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <main+0x1e8>)
 80004c2:	2241      	movs	r2, #65	; 0x41
 80004c4:	2100      	movs	r1, #0
 80004c6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.contVoltSensorError=0;
 80004c8:	4b44      	ldr	r3, [pc, #272]	; (80005dc <main+0x1e8>)
 80004ca:	2242      	movs	r2, #66	; 0x42
 80004cc:	2100      	movs	r1, #0
 80004ce:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.powerSystemError=0;
 80004d0:	4b42      	ldr	r3, [pc, #264]	; (80005dc <main+0x1e8>)
 80004d2:	2243      	movs	r2, #67	; 0x43
 80004d4:	2100      	movs	r1, #0
 80004d6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.overCurrError=0;
 80004d8:	4b40      	ldr	r3, [pc, #256]	; (80005dc <main+0x1e8>)
 80004da:	2244      	movs	r2, #68	; 0x44
 80004dc:	2100      	movs	r1, #0
 80004de:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.overVoltError=0;
 80004e0:	4b3e      	ldr	r3, [pc, #248]	; (80005dc <main+0x1e8>)
 80004e2:	2245      	movs	r2, #69	; 0x45
 80004e4:	2100      	movs	r1, #0
 80004e6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.overCurrLimit=0;
 80004e8:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <main+0x1e8>)
 80004ea:	2246      	movs	r2, #70	; 0x46
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.motorSystemError=0;
 80004f0:	4b3a      	ldr	r3, [pc, #232]	; (80005dc <main+0x1e8>)
 80004f2:	2247      	movs	r2, #71	; 0x47
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.motorLock=0;
 80004f8:	4b38      	ldr	r3, [pc, #224]	; (80005dc <main+0x1e8>)
 80004fa:	2248      	movs	r2, #72	; 0x48
 80004fc:	2100      	movs	r1, #0
 80004fe:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.hallSensorShort=0;
 8000500:	4b36      	ldr	r3, [pc, #216]	; (80005dc <main+0x1e8>)
 8000502:	2249      	movs	r2, #73	; 0x49
 8000504:	2100      	movs	r1, #0
 8000506:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.hallSensorOpen=0;
 8000508:	4b34      	ldr	r3, [pc, #208]	; (80005dc <main+0x1e8>)
 800050a:	224a      	movs	r2, #74	; 0x4a
 800050c:	2100      	movs	r1, #0
 800050e:	5499      	strb	r1, [r3, r2]
  mcFrame2.txData.overHeatLevel=0;
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <main+0x1e8>)
 8000512:	224b      	movs	r2, #75	; 0x4b
 8000514:	2100      	movs	r1, #0
 8000516:	5499      	strb	r1, [r3, r2]
   * SG
   * Configure/enable the callback functions. Will run whenever the mitsuba emulator receives a message request from MC
   *
   * Also, don't forget to start CAN!
   */
  mcRequest.SetupReceive(MC_Request_Receive_Callback);
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <main+0x1ec>)
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <main+0x1f0>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f001 f854 	bl	80015cc <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 8000524:	f001 f8b0 	bl	8001688 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(newInput_CAN)
 8000528:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <main+0x1f4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0fb      	beq.n	8000528 <main+0x134>
		{
			//reset flag
			newInput_CAN = false;
 8000530:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <main+0x1f4>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

			if (mc_request_flag)
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <main+0x1f8>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f4      	beq.n	8000528 <main+0x134>
			{
				mc_request_flag = false;
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <main+0x1f8>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
				if (mcRequest_packet.requestFrame0)
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <main+0x1fc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d018      	beq.n	800057e <main+0x18a>
				{
					mcFrame0.SendData();
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <main+0x1e0>)
 800054e:	0018      	movs	r0, r3
 8000550:	f001 f868 	bl	8001624 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
					mcFrame0.txData.motorRPM += 100;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <main+0x1e0>)
 8000556:	2244      	movs	r2, #68	; 0x44
 8000558:	5a9b      	ldrh	r3, [r3, r2]
 800055a:	3364      	adds	r3, #100	; 0x64
 800055c:	b299      	uxth	r1, r3
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <main+0x1e0>)
 8000560:	2244      	movs	r2, #68	; 0x44
 8000562:	5299      	strh	r1, [r3, r2]
					mcFrame0.txData.motorRPM %= 1000;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0x1e0>)
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	5a9b      	ldrh	r3, [r3, r2]
 800056a:	22fa      	movs	r2, #250	; 0xfa
 800056c:	0091      	lsls	r1, r2, #2
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe50 	bl	8000214 <__aeabi_uidivmod>
 8000574:	000b      	movs	r3, r1
 8000576:	b299      	uxth	r1, r3
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0x1e0>)
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	5299      	strh	r1, [r3, r2]
				}
				if (mcRequest_packet.requestFrame1)
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <main+0x1fc>)
 8000580:	785b      	ldrb	r3, [r3, #1]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d013      	beq.n	80005ae <main+0x1ba>
				{
					mcFrame1.SendData();
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x1e4>)
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f84b 	bl	8001624 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
					mcFrame1.txData.AcceleratorPosition += 10;
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x1e4>)
 8000590:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000592:	330a      	adds	r3, #10
 8000594:	b29a      	uxth	r2, r3
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <main+0x1e4>)
 8000598:	879a      	strh	r2, [r3, #60]	; 0x3c
					mcFrame1.txData.AcceleratorPosition %= 100;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <main+0x1e4>)
 800059c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fe37 	bl	8000214 <__aeabi_uidivmod>
 80005a6:	000b      	movs	r3, r1
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0x1e4>)
 80005ac:	879a      	strh	r2, [r3, #60]	; 0x3c
				}
				if (mcRequest_packet.requestFrame2)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <main+0x1fc>)
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0b8      	beq.n	8000528 <main+0x134>
				{
					mcFrame2.SendData();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x1e8>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 f833 	bl	8001624 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
					mcFrame2.txData.accelPosError = !mcFrame2.txData.accelPosError;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0x1e8>)
 80005c0:	2241      	movs	r2, #65	; 0x41
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4053      	eors	r3, r2
 80005c8:	b2d9      	uxtb	r1, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <main+0x1e8>)
 80005cc:	2241      	movs	r2, #65	; 0x41
 80005ce:	5499      	strb	r1, [r3, r2]
		if(newInput_CAN)
 80005d0:	e7aa      	b.n	8000528 <main+0x134>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	200000f8 	.word	0x200000f8
 80005d8:	20000144 	.word	0x20000144
 80005dc:	2000018c 	.word	0x2000018c
 80005e0:	08000749 	.word	0x08000749
 80005e4:	200001d8 	.word	0x200001d8
 80005e8:	200000f5 	.word	0x200000f5
 80005ec:	200000f4 	.word	0x200000f4
 80005f0:	20000214 	.word	0x20000214

080005f4 <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b093      	sub	sp, #76	; 0x4c
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	2414      	movs	r4, #20
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	0018      	movs	r0, r3
 8000600:	2334      	movs	r3, #52	; 0x34
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f003 fc1a 	bl	8003e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	0018      	movs	r0, r3
 800060e:	2310      	movs	r3, #16
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f003 fc13 	bl	8003e3e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2220      	movs	r2, #32
 800061c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2201      	movs	r2, #1
 8000622:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	193b      	adds	r3, r7, r4
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fedb 	bl	80033e8 <HAL_RCC_OscConfig>
 8000632:	0003      	movs	r3, r0
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	4193      	sbcs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 800063e:	f000 f87d 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2207      	movs	r2, #7
 8000646:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2203      	movs	r2, #3
 800064c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2101      	movs	r1, #1
 800065e:	0018      	movs	r0, r3
 8000660:	f003 fa48 	bl	8003af4 <HAL_RCC_ClockConfig>
 8000664:	0003      	movs	r3, r0
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	4193      	sbcs	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000670:	f000 f864 	bl	800073c <Error_Handler>
  }
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b013      	add	sp, #76	; 0x4c
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <_ZL11MX_CAN_Initv+0x70>)
 8000684:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 8000688:	2210      	movs	r2, #16
 800068a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_ZL11MX_CAN_Initv+0x6c>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fd0c 	bl	80020e8 <HAL_CAN_Init>
 80006d0:	0003      	movs	r3, r0
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 80006dc:	f000 f82e 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000090 	.word	0x20000090
 80006ec:	40006400 	.word	0x40006400

080006f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	03c9      	lsls	r1, r1, #15
 8000700:	430a      	orrs	r2, r1
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 8000706:	695a      	ldr	r2, [r3, #20]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	03db      	lsls	r3, r3, #15
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0289      	lsls	r1, r1, #10
 800071c:	430a      	orrs	r2, r1
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <_ZL12MX_GPIO_Initv+0x48>)
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
 * The callback that runs automatically whenever we receive a new message from
 * Mitsuba. One for each type of dataframe. The method "GetOldestDataPacket" sets
 * the input flag to true.
 *
 */
void MC_Request_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(!mcRequest.isFifoEmpty())
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f87e 	bl	8001854 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000758:	0003      	movs	r3, r0
 800075a:	001a      	movs	r2, r3
 800075c:	2301      	movs	r3, #1
 800075e:	4053      	eors	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d010      	beq.n	8000788 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x40>
		mcRequest_packet = mcRequest.GetOldestDataPacket(&mc_request_flag);
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f000 f81b 	bl	80007a8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb>
 8000772:	0003      	movs	r3, r0
 8000774:	001a      	movs	r2, r3
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x58>)
 8000778:	1c11      	adds	r1, r2, #0
 800077a:	7019      	strb	r1, [r3, #0]
 800077c:	0411      	lsls	r1, r2, #16
 800077e:	0e09      	lsrs	r1, r1, #24
 8000780:	7059      	strb	r1, [r3, #1]
 8000782:	0212      	lsls	r2, r2, #8
 8000784:	0e12      	lsrs	r2, r2, #24
 8000786:	709a      	strb	r2, [r3, #2]
	newInput_CAN = true;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <_Z27MC_Request_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x5c>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	200001d8 	.word	0x200001d8
 800079c:	200000f4 	.word	0x200000f4
 80007a0:	20000214 	.word	0x20000214
 80007a4:	200000f5 	.word	0x200000f5

080007a8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	{
		CHILD_DATA returnData;
	    if(success)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d01c      	beq.n	80007f2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb+0x4a>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3312      	adds	r3, #18
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 f83d 	bl	8000840 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 80007c6:	0003      	movs	r3, r0
 80007c8:	617b      	str	r3, [r7, #20]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00f      	beq.n	80007f2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb+0x4a>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 f9a5 	bl	8000b24 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17arrayToDataPacketEPh>
 80007da:	0003      	movs	r3, r0
 80007dc:	001a      	movs	r2, r3
 80007de:	230c      	movs	r3, #12
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	1c11      	adds	r1, r2, #0
 80007e4:	7019      	strb	r1, [r3, #0]
 80007e6:	0411      	lsls	r1, r2, #16
 80007e8:	0e09      	lsrs	r1, r1, #24
 80007ea:	7059      	strb	r1, [r3, #1]
 80007ec:	0212      	lsls	r2, r2, #8
 80007ee:	0e12      	lsrs	r2, r2, #24
 80007f0:	709a      	strb	r2, [r3, #2]
	        }
	    }
	    return returnData;
 80007f2:	2010      	movs	r0, #16
 80007f4:	183b      	adds	r3, r7, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	18ba      	adds	r2, r7, r2
 80007fa:	8811      	ldrh	r1, [r2, #0]
 80007fc:	8019      	strh	r1, [r3, #0]
 80007fe:	7892      	ldrb	r2, [r2, #2]
 8000800:	709a      	strb	r2, [r3, #2]
 8000802:	183a      	adds	r2, r7, r0
 8000804:	2300      	movs	r3, #0
 8000806:	7811      	ldrb	r1, [r2, #0]
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	4001      	ands	r1, r0
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	4383      	bics	r3, r0
 8000810:	430b      	orrs	r3, r1
 8000812:	7851      	ldrb	r1, [r2, #1]
 8000814:	20ff      	movs	r0, #255	; 0xff
 8000816:	4001      	ands	r1, r0
 8000818:	0209      	lsls	r1, r1, #8
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb+0x90>)
 800081c:	4003      	ands	r3, r0
 800081e:	430b      	orrs	r3, r1
 8000820:	7892      	ldrb	r2, [r2, #2]
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	400a      	ands	r2, r1
 8000826:	0412      	lsls	r2, r2, #16
 8000828:	4904      	ldr	r1, [pc, #16]	; (800083c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE19GetOldestDataPacketEPb+0x94>)
 800082a:	400b      	ands	r3, r1
 800082c:	4313      	orrs	r3, r2
	}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b006      	add	sp, #24
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	ffff00ff 	.word	0xffff00ff
 800083c:	ff00ffff 	.word	0xff00ffff

08000840 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 800084a:	230e      	movs	r3, #14
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	2200      	movs	r2, #0
 8000850:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	8b5a      	ldrh	r2, [r3, #26]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	8b1b      	ldrh	r3, [r3, #24]
 800085a:	429a      	cmp	r2, r3
 800085c:	d10a      	bne.n	8000874 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7f1b      	ldrb	r3, [r3, #28]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d022      	beq.n	80008b2 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
            if(success)
 8000872:	e01e      	b.n	80008b2 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000880:	230e      	movs	r3, #14
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	8b52      	ldrh	r2, [r2, #26]
 8000888:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	8b5b      	ldrh	r3, [r3, #26]
 800088e:	3301      	adds	r3, #1
 8000890:	2103      	movs	r1, #3
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fda8 	bl	80003e8 <__aeabi_idivmod>
 8000898:	000b      	movs	r3, r1
 800089a:	b29a      	uxth	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	8b5a      	ldrh	r2, [r3, #26]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	8b1b      	ldrh	r3, [r3, #24]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d102      	bne.n	80008b2 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80008b2:	230e      	movs	r3, #14
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	18d3      	adds	r3, r2, r3
    }
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_Z41__static_initialization_and_destruction_0ii>:
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d11b      	bne.n	8000910 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d117      	bne.n	8000910 <_Z41__static_initialization_and_destruction_0ii+0x48>
static MITSUBA_DRIVER_RX_FRAME_0 mcFrame0(MC_RX_FRAME0_ID);
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fa62 	bl	8000db0 <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>
static MITSUBA_DRIVER_RX_FRAME_1 mcFrame1(MC_RX_FRAME1_ID);
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fb22 	bl	8000f3c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>
static MITSUBA_DRIVER_RX_FRAME_2 mcFrame2(MC_RX_FRAME2_ID);
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fc4a 	bl	8001198 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>
static MITSUBA_DRIVER_TX_RL_MESSAGE mcRequest(MC_REQUEST_ID);
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f952 	bl	8000bb4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	0000ffff 	.word	0x0000ffff
 800091c:	08850225 	.word	0x08850225
 8000920:	200000f8 	.word	0x200000f8
 8000924:	08950225 	.word	0x08950225
 8000928:	20000144 	.word	0x20000144
 800092c:	08a50225 	.word	0x08a50225
 8000930:	2000018c 	.word	0x2000018c
 8000934:	08f89540 	.word	0x08f89540
 8000938:	200001d8 	.word	0x200001d8

0800093c <_GLOBAL__sub_I_hcan>:
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <_GLOBAL__sub_I_hcan+0x14>)
 8000942:	0019      	movs	r1, r3
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff ffbf 	bl	80008c8 <_Z41__static_initialization_and_destruction_0ii>
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	0000ffff 	.word	0x0000ffff

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x44>)
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_MspInit+0x44>)
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	619a      	str	r2, [r3, #24]
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x44>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	2201      	movs	r2, #1
 800096c:	4013      	ands	r3, r2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x44>)
 8000974:	69da      	ldr	r2, [r3, #28]
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_MspInit+0x44>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0549      	lsls	r1, r1, #21
 800097c:	430a      	orrs	r2, r1
 800097e:	61da      	str	r2, [r3, #28]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_MspInit+0x44>)
 8000982:	69da      	ldr	r2, [r3, #28]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	055b      	lsls	r3, r3, #21
 8000988:	4013      	ands	r3, r2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08b      	sub	sp, #44	; 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	2414      	movs	r4, #20
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f003 fa45 	bl	8003e3e <memset>
  if(hcan->Instance==CAN)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_CAN_MspInit+0xa4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d13b      	bne.n	8000a36 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0489      	lsls	r1, r1, #18
 80009c8:	430a      	orrs	r2, r1
 80009ca:	61da      	str	r2, [r3, #28]
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	049b      	lsls	r3, r3, #18
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0289      	lsls	r1, r1, #10
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_CAN_MspInit+0xa8>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	029b      	lsls	r3, r3, #10
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	22c0      	movs	r2, #192	; 0xc0
 80009fa:	0152      	lsls	r2, r2, #5
 80009fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2202      	movs	r2, #2
 8000a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2204      	movs	r2, #4
 8000a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	187a      	adds	r2, r7, r1
 8000a1a:	2390      	movs	r3, #144	; 0x90
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fb69 	bl	80030f8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201e      	movs	r0, #30
 8000a2c:	f002 fb32 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000a30:	201e      	movs	r0, #30
 8000a32:	f002 fb44 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b00b      	add	sp, #44	; 0x2c
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40006400 	.word	0x40006400
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f001 fb1e 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_kill>:

int _kill(int pid, int sig)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a90:	f003 f9a2 	bl	8003dd8 <__errno>
 8000a94:	0003      	movs	r3, r0
 8000a96:	2216      	movs	r2, #22
 8000a98:	601a      	str	r2, [r3, #0]
	return -1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	425b      	negs	r3, r3
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_exit>:

void _exit (int status)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000aae:	2301      	movs	r3, #1
 8000ab0:	425a      	negs	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff ffe5 	bl	8000a86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000abc:	e7fe      	b.n	8000abc <_exit+0x16>

08000abe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>:
//Private Function Definitions

//Protected Function Definitions
/*****************TX Classes*****************/
void MITSUBA_DRIVER_TX_RL_MESSAGE::dataPacketToArray(MITSUBA_DRIVER_TX_RL_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	6018      	str	r0, [r3, #0]
 8000ad2:	6039      	str	r1, [r7, #0]
	output[0] = 0;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.requestFrame0) << 0;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame1) << 1;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame2) << 2;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25a      	sxtb	r2, r3
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	701a      	strb	r2, [r3, #0]
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17arrayToDataPacketEPh>:

MITSUBA_DRIVER_TX_RL_DATA_PACKET MITSUBA_DRIVER_TX_RL_MESSAGE::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	MITSUBA_DRIVER_TX_RL_DATA_PACKET output;
	output.requestFrame0 = input[0] & (1 << 0);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	2301      	movs	r3, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	4193      	sbcs	r3, r2
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	output.requestFrame1 = input[0] & (1 << 1);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	001a      	movs	r2, r3
 8000b48:	2302      	movs	r3, #2
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	705a      	strb	r2, [r3, #1]
	output.requestFrame2 = input[0] & (1 << 2);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	4013      	ands	r3, r2
 8000b60:	1e5a      	subs	r2, r3, #1
 8000b62:	4193      	sbcs	r3, r2
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	709a      	strb	r2, [r3, #2]

	return output;
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	183b      	adds	r3, r7, r0
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	8811      	ldrh	r1, [r2, #0]
 8000b72:	8019      	strh	r1, [r3, #0]
 8000b74:	7892      	ldrb	r2, [r2, #2]
 8000b76:	709a      	strb	r2, [r3, #2]
 8000b78:	183a      	adds	r2, r7, r0
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	7811      	ldrb	r1, [r2, #0]
 8000b7e:	20ff      	movs	r0, #255	; 0xff
 8000b80:	4001      	ands	r1, r0
 8000b82:	20ff      	movs	r0, #255	; 0xff
 8000b84:	4383      	bics	r3, r0
 8000b86:	430b      	orrs	r3, r1
 8000b88:	7851      	ldrb	r1, [r2, #1]
 8000b8a:	20ff      	movs	r0, #255	; 0xff
 8000b8c:	4001      	ands	r1, r0
 8000b8e:	0209      	lsls	r1, r1, #8
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17arrayToDataPacketEPh+0x88>)
 8000b92:	4003      	ands	r3, r0
 8000b94:	430b      	orrs	r3, r1
 8000b96:	7892      	ldrb	r2, [r2, #2]
 8000b98:	21ff      	movs	r1, #255	; 0xff
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	0412      	lsls	r2, r2, #16
 8000b9e:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17arrayToDataPacketEPh+0x8c>)
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	4313      	orrs	r3, r2
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	ffff00ff 	.word	0xffff00ff
 8000bb0:	ff00ffff 	.word	0xff00ffff

08000bb4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>:

//Public Function Definitions
MITSUBA_DRIVER_TX_RL_MESSAGE::MITSUBA_DRIVER_TX_RL_MESSAGE(uint32_t message_id):
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_TX_RL_MESSAGE, MITSUBA_DRIVER_TX_RL_DATA_PACKET>{message_id,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f000 fafd 	bl	80011cc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em+0x30>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	601a      	str	r2, [r3, #0]
{}
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	08003f7c 	.word	0x08003f7c

08000be8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
/*****************RX Classes*****************/
//RX Frame 0
void MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	003c      	movs	r4, r7
 8000bf0:	6020      	str	r0, [r4, #0]
 8000bf2:	6061      	str	r1, [r4, #4]
 8000bf4:	60a2      	str	r2, [r4, #8]
 8000bf6:	60e3      	str	r3, [r4, #12]
	output[0] = 0;
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltage);
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	003b      	movs	r3, r7
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	3301      	adds	r3, #1
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.battVoltage >> 8);
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	7819      	ldrb	r1, [r3, #0]
 8000c1e:	003b      	movs	r3, r7
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	121b      	asrs	r3, r3, #8
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrent) << 2);
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	3301      	adds	r3, #1
 8000c34:	7819      	ldrb	r1, [r3, #0]
 8000c36:	003b      	movs	r3, r7
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c42:	3301      	adds	r3, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.battCurrent >> 6);
 8000c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c54:	3302      	adds	r3, #2
 8000c56:	7819      	ldrb	r1, [r3, #0]
 8000c58:	003b      	movs	r3, r7
 8000c5a:	885b      	ldrh	r3, [r3, #2]
 8000c5c:	119b      	asrs	r3, r3, #6
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	3302      	adds	r3, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrentDir) << 3);
 8000c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	7819      	ldrb	r1, [r3, #0]
 8000c70:	003b      	movs	r3, r7
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.motorCurrentPkAvg << 4);
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	3302      	adds	r3, #2
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	003b      	movs	r3, r7
 8000c8a:	88db      	ldrh	r3, [r3, #6]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c94:	3302      	adds	r3, #2
 8000c96:	430a      	orrs	r2, r1
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorCurrentPkAvg >> 4);
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	7819      	ldrb	r1, [r3, #0]
 8000caa:	003b      	movs	r3, r7
 8000cac:	88db      	ldrh	r3, [r3, #6]
 8000cae:	111b      	asrs	r3, r3, #4
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	3303      	adds	r3, #3
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(static_cast<uint32_t>(input.FETtemp) << 6);
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	7819      	ldrb	r1, [r3, #0]
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	7a1b      	ldrb	r3, [r3, #8]
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	3303      	adds	r3, #3
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]


	uint32_t convMotorRPM = input.motorRPM * 1;
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	895b      	ldrh	r3, [r3, #10]
 8000cd8:	617b      	str	r3, [r7, #20]
	output[4] = 0;
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.FETtemp >> 2);
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	7819      	ldrb	r1, [r3, #0]
 8000ce8:	003b      	movs	r3, r7
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	109b      	asrs	r3, r3, #2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	701a      	strb	r2, [r3, #0]
	output[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	7819      	ldrb	r1, [r3, #0]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]

	output[5] = 0;
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	3305      	adds	r3, #5
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	3305      	adds	r3, #5
 8000d1e:	7819      	ldrb	r1, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	227f      	movs	r2, #127	; 0x7f
 8000d28:	4013      	ands	r3, r2
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	3305      	adds	r3, #5
 8000d30:	430a      	orrs	r2, r1
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint8_t>(input.PWMDuty << 7));
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	3305      	adds	r3, #5
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	899b      	ldrh	r3, [r3, #12]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	01db      	lsls	r3, r3, #7
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d48:	3305      	adds	r3, #5
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	701a      	strb	r2, [r3, #0]

	output[6] = 0;
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	3306      	adds	r3, #6
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	output[6] |= static_cast<uint8_t>(input.PWMDuty >> 1);
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	3306      	adds	r3, #6
 8000d5c:	7819      	ldrb	r1, [r3, #0]
 8000d5e:	003b      	movs	r3, r7
 8000d60:	899b      	ldrh	r3, [r3, #12]
 8000d62:	105b      	asrs	r3, r3, #1
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d68:	3306      	adds	r3, #6
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]

	output[7] = 0;
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	3307      	adds	r3, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(input.PWMDuty >> 9);
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	3307      	adds	r3, #7
 8000d7c:	7819      	ldrb	r1, [r3, #0]
 8000d7e:	003b      	movs	r3, r7
 8000d80:	899b      	ldrh	r3, [r3, #12]
 8000d82:	125b      	asrs	r3, r3, #9
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d88:	3307      	adds	r3, #7
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(static_cast<uint32_t>(input.LeadAngle) << 1);
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	3307      	adds	r3, #7
 8000d94:	7819      	ldrb	r1, [r3, #0]
 8000d96:	003b      	movs	r3, r7
 8000d98:	7b9b      	ldrb	r3, [r3, #14]
 8000d9a:	18db      	adds	r3, r3, r3
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	3307      	adds	r3, #7
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	701a      	strb	r2, [r3, #0]
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b007      	add	sp, #28
 8000dae:	bd90      	pop	{r4, r7, pc}

08000db0 <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>:
	output.LeadAngle = static_cast<uint8_t>((input[7] >> 1));

	return output;
}

MITSUBA_DRIVER_RX_FRAME_0::MITSUBA_DRIVER_RX_FRAME_0(uint32_t message_id):
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_0, MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET>{message_id,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, false, false}
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	6839      	ldr	r1, [r7, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2208      	movs	r2, #8
 8000dca:	f000 fa25 	bl	8001218 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em+0x30>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	601a      	str	r2, [r3, #0]
{}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	08003f64 	.word	0x08003f64

08000de4 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>:

//RX Frame 1
void MITSUBA_DRIVER_RX_FRAME_1::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	1d3c      	adds	r4, r7, #4
 8000dec:	6020      	str	r0, [r4, #0]
 8000dee:	6061      	str	r1, [r4, #4]
 8000df0:	60a2      	str	r2, [r4, #8]
 8000df2:	603b      	str	r3, [r7, #0]
	output[0] = 0;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.powerMode);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.MCmode) << 1;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.AcceleratorPosition << 2);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	885b      	ldrh	r3, [r3, #2]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.AcceleratorPosition >> 6);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	7819      	ldrb	r1, [r3, #0]
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	885b      	ldrh	r3, [r3, #2]
 8000e4a:	119b      	asrs	r3, r3, #6
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.regenVRposition << 4);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	7819      	ldrb	r1, [r3, #0]
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	889b      	ldrh	r3, [r3, #4]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.regenVRposition >> 4);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	7819      	ldrb	r1, [r3, #0]
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	889b      	ldrh	r3, [r3, #4]
 8000e84:	111b      	asrs	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.digitSWposition) << 6);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	3302      	adds	r3, #2
 8000e96:	7819      	ldrb	r1, [r3, #0]
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	799b      	ldrb	r3, [r3, #6]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3303      	adds	r3, #3
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.digitSWposition >> 2);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	799b      	ldrb	r3, [r3, #6]
 8000ebc:	109b      	asrs	r3, r3, #2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.outTargetVal << 2);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3303      	adds	r3, #3
 8000ece:	7819      	ldrb	r1, [r3, #0]
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	891b      	ldrh	r3, [r3, #8]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3303      	adds	r3, #3
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]

	output[4] = 0;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.outTargetVal >> 6);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	119b      	asrs	r3, r3, #6
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3304      	adds	r3, #4
 8000efe:	430a      	orrs	r2, r1
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.driveActStat << 4);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3304      	adds	r3, #4
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	7a9b      	ldrb	r3, [r3, #10]
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3304      	adds	r3, #4
 8000f16:	430a      	orrs	r2, r1
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(static_cast<uint8_t>(input.regenStat) << 6);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	7819      	ldrb	r1, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	7adb      	ldrb	r3, [r3, #11]
 8000f26:	019b      	lsls	r3, r3, #6
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b005      	add	sp, #20
 8000f3a:	bd90      	pop	{r4, r7, pc}

08000f3c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>:
	output.regenStat = static_cast<bool>((input[4] >> 6) & 1);

	return output;
}

MITSUBA_DRIVER_RX_FRAME_1::MITSUBA_DRIVER_RX_FRAME_1(uint32_t message_id):
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_1, MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET>{message_id,subsystem_info::MOTORRX1_RL_MSG_LENGTH, true, false, false}
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	6839      	ldr	r1, [r7, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2205      	movs	r2, #5
 8000f56:	f000 f985 	bl	8001264 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em+0x30>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
{}
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	08003f4c 	.word	0x08003f4c

08000f70 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>:

//RX Frame 2
void MITSUBA_DRIVER_RX_FRAME_2::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000f70:	b084      	sub	sp, #16
 8000f72:	b5b0      	push	{r4, r5, r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	2518      	movs	r5, #24
 8000f7a:	197c      	adds	r4, r7, r5
 8000f7c:	6020      	str	r0, [r4, #0]
 8000f7e:	6061      	str	r1, [r4, #4]
 8000f80:	60a2      	str	r2, [r4, #8]
 8000f82:	60e3      	str	r3, [r4, #12]
	uint32_t convOverHeadLevel = input.overHeatLevel;
 8000f84:	0029      	movs	r1, r5
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	7c9b      	ldrb	r3, [r3, #18]
 8000f8a:	607b      	str	r3, [r7, #4]

	output[0] = 0;
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.adSensorError) << 0;
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorUError) << 1;
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorWError) << 2;
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.fetThermError) << 3;
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltSensorError) << 5;
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b25a      	sxtb	r2, r3
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorError) << 6;
 8001002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b25a      	sxtb	r2, r3
 8001008:	187b      	adds	r3, r7, r1
 800100a:	795b      	ldrb	r3, [r3, #5]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	b25b      	sxtb	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorAdjError) << 7;
 800101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25a      	sxtb	r2, r3
 8001020:	187b      	adds	r3, r7, r1
 8001022:	799b      	ldrb	r3, [r3, #6]
 8001024:	01db      	lsls	r3, r3, #7
 8001026:	b25b      	sxtb	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	3301      	adds	r3, #1
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.motorCurrSensorAdjError) << 0;
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	3301      	adds	r3, #1
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	0008      	movs	r0, r1
 8001042:	187b      	adds	r3, r7, r1
 8001044:	79db      	ldrb	r3, [r3, #7]
 8001046:	0019      	movs	r1, r3
 8001048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104a:	3301      	adds	r3, #1
 800104c:	430a      	orrs	r2, r1
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.accelPosError) << 1;
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3301      	adds	r3, #1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25a      	sxtb	r2, r3
 800105a:	0001      	movs	r1, r0
 800105c:	187b      	adds	r3, r7, r1
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	b25b      	sxtb	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b25a      	sxtb	r2, r3
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	3301      	adds	r3, #1
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.contVoltSensorError) << 3;
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25a      	sxtb	r2, r3
 8001078:	187b      	adds	r3, r7, r1
 800107a:	7a5b      	ldrb	r3, [r3, #9]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b25a      	sxtb	r2, r3
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	3301      	adds	r3, #1
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108e:	3302      	adds	r3, #2
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.powerSystemError) << 0;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	3302      	adds	r3, #2
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	0008      	movs	r0, r1
 800109c:	187b      	adds	r3, r7, r1
 800109e:	7a9b      	ldrb	r3, [r3, #10]
 80010a0:	0019      	movs	r1, r3
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3302      	adds	r3, #2
 80010a6:	430a      	orrs	r2, r1
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrError) << 1;
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	3302      	adds	r3, #2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	0001      	movs	r1, r0
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	7adb      	ldrb	r3, [r3, #11]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	3302      	adds	r3, #2
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overVoltError) << 3;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	3302      	adds	r3, #2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25a      	sxtb	r2, r3
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	3302      	adds	r3, #2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrLimit) << 5;
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	3302      	adds	r3, #2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	7b5b      	ldrb	r3, [r3, #13]
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	3302      	adds	r3, #2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	3303      	adds	r3, #3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorSystemError) << 0;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	3303      	adds	r3, #3
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	0008      	movs	r0, r1
 8001112:	187b      	adds	r3, r7, r1
 8001114:	7b9b      	ldrb	r3, [r3, #14]
 8001116:	0019      	movs	r1, r3
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	3303      	adds	r3, #3
 800111c:	430a      	orrs	r2, r1
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorLock) << 1;
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	3303      	adds	r3, #3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25a      	sxtb	r2, r3
 800112a:	0001      	movs	r1, r0
 800112c:	187b      	adds	r3, r7, r1
 800112e:	7bdb      	ldrb	r3, [r3, #15]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b25a      	sxtb	r2, r3
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	3303      	adds	r3, #3
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorShort) << 2;
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	3303      	adds	r3, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25a      	sxtb	r2, r3
 8001148:	187b      	adds	r3, r7, r1
 800114a:	7c1b      	ldrb	r3, [r3, #16]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25a      	sxtb	r2, r3
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	3303      	adds	r3, #3
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorOpen) << 3;
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	3303      	adds	r3, #3
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25a      	sxtb	r2, r3
 8001164:	187b      	adds	r3, r7, r1
 8001166:	7c5b      	ldrb	r3, [r3, #17]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	b25b      	sxtb	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b25a      	sxtb	r2, r3
 8001170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001172:	3303      	adds	r3, #3
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]

	output[4] = static_cast<uint32_t>(convOverHeadLevel) & 0x3;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	3304      	adds	r3, #4
 8001180:	2103      	movs	r1, #3
 8001182:	400a      	ands	r2, r1
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bcb0      	pop	{r4, r5, r7}
 8001190:	bc08      	pop	{r3}
 8001192:	b004      	add	sp, #16
 8001194:	4718      	bx	r3
	...

08001198 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>:

	return output;
}

//Public Function Definitions
MITSUBA_DRIVER_RX_FRAME_2::MITSUBA_DRIVER_RX_FRAME_2(uint32_t message_id):
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_2, MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET>{message_id,subsystem_info::MOTORRX2_RL_MSG_LENGTH, true, false, false}
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	6839      	ldr	r1, [r7, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2205      	movs	r2, #5
 80011b2:	f000 f87d 	bl	80012b0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em+0x30>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
{}
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	08003f34 	.word	0x08003f34

080011cc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	0019      	movs	r1, r3
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	1c0a      	adds	r2, r1, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	781c      	ldrb	r4, [r3, #0]
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	2324      	movs	r3, #36	; 0x24
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2320      	movs	r3, #32
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	0023      	movs	r3, r4
 8001200:	f000 f998 	bl	8001534 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb+0x48>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]
		{}
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b005      	add	sp, #20
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	08003f88 	.word	0x08003f88

08001218 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	0019      	movs	r1, r3
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	1c0a      	adds	r2, r1, #0
 800122c:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	781c      	ldrb	r4, [r3, #0]
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	2324      	movs	r3, #36	; 0x24
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2320      	movs	r3, #32
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	0023      	movs	r3, r4
 800124c:	f000 f972 	bl	8001534 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]
		{}
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b005      	add	sp, #20
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	08003f70 	.word	0x08003f70

08001264 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	0019      	movs	r1, r3
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	1c0a      	adds	r2, r1, #0
 8001278:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	781c      	ldrb	r4, [r3, #0]
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	2324      	movs	r3, #36	; 0x24
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2320      	movs	r3, #32
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	0023      	movs	r3, r4
 8001298:	f000 f94c 	bl	8001534 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb+0x48>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]
		{}
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b005      	add	sp, #20
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	08003f58 	.word	0x08003f58

080012b0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	0019      	movs	r1, r3
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	1c0a      	adds	r2, r1, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	1dbb      	adds	r3, r7, #6
 80012ca:	781c      	ldrb	r4, [r3, #0]
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	2324      	movs	r3, #36	; 0x24
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	2320      	movs	r3, #32
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	0023      	movs	r3, r4
 80012e4:	f000 f926 	bl	8001534 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb+0x48>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	601a      	str	r2, [r3, #0]
		{}
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b005      	add	sp, #20
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	08003f40 	.word	0x08003f40

080012fc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	46c6      	mov	lr, r8
 8001300:	b500      	push	{lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3309      	adds	r3, #9
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2239      	movs	r2, #57	; 0x39
 8001312:	9101      	str	r1, [sp, #4]
 8001314:	5c99      	ldrb	r1, [r3, r2]
 8001316:	1898      	adds	r0, r3, r2
 8001318:	7840      	ldrb	r0, [r0, #1]
 800131a:	0200      	lsls	r0, r0, #8
 800131c:	4301      	orrs	r1, r0
 800131e:	1898      	adds	r0, r3, r2
 8001320:	7880      	ldrb	r0, [r0, #2]
 8001322:	0400      	lsls	r0, r0, #16
 8001324:	4301      	orrs	r1, r0
 8001326:	1898      	adds	r0, r3, r2
 8001328:	78c0      	ldrb	r0, [r0, #3]
 800132a:	0600      	lsls	r0, r0, #24
 800132c:	4301      	orrs	r1, r0
 800132e:	2000      	movs	r0, #0
 8001330:	4688      	mov	r8, r1
 8001332:	1899      	adds	r1, r3, r2
 8001334:	7908      	ldrb	r0, [r1, #4]
 8001336:	794c      	ldrb	r4, [r1, #5]
 8001338:	0224      	lsls	r4, r4, #8
 800133a:	4320      	orrs	r0, r4
 800133c:	798c      	ldrb	r4, [r1, #6]
 800133e:	0424      	lsls	r4, r4, #16
 8001340:	4320      	orrs	r0, r4
 8001342:	79c9      	ldrb	r1, [r1, #7]
 8001344:	0609      	lsls	r1, r1, #24
 8001346:	4301      	orrs	r1, r0
 8001348:	2600      	movs	r6, #0
 800134a:	000e      	movs	r6, r1
 800134c:	1899      	adds	r1, r3, r2
 800134e:	7a08      	ldrb	r0, [r1, #8]
 8001350:	7a4c      	ldrb	r4, [r1, #9]
 8001352:	0224      	lsls	r4, r4, #8
 8001354:	4320      	orrs	r0, r4
 8001356:	7a8c      	ldrb	r4, [r1, #10]
 8001358:	0424      	lsls	r4, r4, #16
 800135a:	4320      	orrs	r0, r4
 800135c:	7ac9      	ldrb	r1, [r1, #11]
 800135e:	0609      	lsls	r1, r1, #24
 8001360:	4301      	orrs	r1, r0
 8001362:	2500      	movs	r5, #0
 8001364:	000d      	movs	r5, r1
 8001366:	1899      	adds	r1, r3, r2
 8001368:	7b08      	ldrb	r0, [r1, #12]
 800136a:	7b4c      	ldrb	r4, [r1, #13]
 800136c:	0224      	lsls	r4, r4, #8
 800136e:	4320      	orrs	r0, r4
 8001370:	7b8c      	ldrb	r4, [r1, #14]
 8001372:	0424      	lsls	r4, r4, #16
 8001374:	4320      	orrs	r0, r4
 8001376:	7bc9      	ldrb	r1, [r1, #15]
 8001378:	0609      	lsls	r1, r1, #24
 800137a:	4301      	orrs	r1, r0
 800137c:	2400      	movs	r4, #0
 800137e:	000c      	movs	r4, r1
 8001380:	2110      	movs	r1, #16
 8001382:	189b      	adds	r3, r3, r2
 8001384:	185a      	adds	r2, r3, r1
 8001386:	466b      	mov	r3, sp
 8001388:	0018      	movs	r0, r3
 800138a:	0011      	movs	r1, r2
 800138c:	2303      	movs	r3, #3
 800138e:	001a      	movs	r2, r3
 8001390:	f002 fd4c 	bl	8003e2c <memcpy>
 8001394:	4640      	mov	r0, r8
 8001396:	0031      	movs	r1, r6
 8001398:	002a      	movs	r2, r5
 800139a:	0023      	movs	r3, r4
 800139c:	f7ff fde8 	bl	8000f70 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>
	}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bc80      	pop	{r7}
 80013a8:	46b8      	mov	r8, r7
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ac <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3309      	adds	r3, #9
 80013b8:	001c      	movs	r4, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	223a      	movs	r2, #58	; 0x3a
 80013be:	5a99      	ldrh	r1, [r3, r2]
 80013c0:	1898      	adds	r0, r3, r2
 80013c2:	8840      	ldrh	r0, [r0, #2]
 80013c4:	0400      	lsls	r0, r0, #16
 80013c6:	4301      	orrs	r1, r0
 80013c8:	2500      	movs	r5, #0
 80013ca:	000d      	movs	r5, r1
 80013cc:	1899      	adds	r1, r3, r2
 80013ce:	8888      	ldrh	r0, [r1, #4]
 80013d0:	88c9      	ldrh	r1, [r1, #6]
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	4308      	orrs	r0, r1
 80013d6:	2100      	movs	r1, #0
 80013d8:	0001      	movs	r1, r0
 80013da:	189b      	adds	r3, r3, r2
 80013dc:	891a      	ldrh	r2, [r3, #8]
 80013de:	895b      	ldrh	r3, [r3, #10]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	4313      	orrs	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	001a      	movs	r2, r3
 80013e8:	0023      	movs	r3, r4
 80013ea:	0028      	movs	r0, r5
 80013ec:	f7ff fcfa 	bl	8000de4 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>
	}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bdb0      	pop	{r4, r5, r7, pc}

080013f8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3309      	adds	r3, #9
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	223a      	movs	r2, #58	; 0x3a
 800140a:	9100      	str	r1, [sp, #0]
 800140c:	5a99      	ldrh	r1, [r3, r2]
 800140e:	1898      	adds	r0, r3, r2
 8001410:	8840      	ldrh	r0, [r0, #2]
 8001412:	0400      	lsls	r0, r0, #16
 8001414:	4301      	orrs	r1, r0
 8001416:	2600      	movs	r6, #0
 8001418:	000e      	movs	r6, r1
 800141a:	1899      	adds	r1, r3, r2
 800141c:	8888      	ldrh	r0, [r1, #4]
 800141e:	88c9      	ldrh	r1, [r1, #6]
 8001420:	0409      	lsls	r1, r1, #16
 8001422:	4301      	orrs	r1, r0
 8001424:	2500      	movs	r5, #0
 8001426:	000d      	movs	r5, r1
 8001428:	1899      	adds	r1, r3, r2
 800142a:	8908      	ldrh	r0, [r1, #8]
 800142c:	8949      	ldrh	r1, [r1, #10]
 800142e:	0409      	lsls	r1, r1, #16
 8001430:	4301      	orrs	r1, r0
 8001432:	2400      	movs	r4, #0
 8001434:	000c      	movs	r4, r1
 8001436:	189b      	adds	r3, r3, r2
 8001438:	899a      	ldrh	r2, [r3, #12]
 800143a:	89db      	ldrh	r3, [r3, #14]
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	2300      	movs	r3, #0
 8001442:	0013      	movs	r3, r2
 8001444:	0030      	movs	r0, r6
 8001446:	0029      	movs	r1, r5
 8001448:	0022      	movs	r2, r4
 800144a:	f7ff fbcd 	bl	8000be8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b003      	add	sp, #12
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001456 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8001456:	b590      	push	{r4, r7, lr}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3309      	adds	r3, #9
 8001462:	001c      	movs	r4, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2239      	movs	r2, #57	; 0x39
 8001468:	5c99      	ldrb	r1, [r3, r2]
 800146a:	1898      	adds	r0, r3, r2
 800146c:	7840      	ldrb	r0, [r0, #1]
 800146e:	0200      	lsls	r0, r0, #8
 8001470:	4301      	orrs	r1, r0
 8001472:	189b      	adds	r3, r3, r2
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	430b      	orrs	r3, r1
 800147a:	001a      	movs	r2, r3
 800147c:	2300      	movs	r3, #0
 800147e:	0212      	lsls	r2, r2, #8
 8001480:	0a12      	lsrs	r2, r2, #8
 8001482:	0e1b      	lsrs	r3, r3, #24
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	4313      	orrs	r3, r2
 8001488:	0021      	movs	r1, r4
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fb1c 	bl	8000ac8 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>
	}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b003      	add	sp, #12
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b08d      	sub	sp, #52	; 0x34
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2100      	movs	r1, #0
 80014a4:	0018      	movs	r0, r3
 80014a6:	f001 fad3 	bl	8002a50 <HAL_CAN_GetRxFifoFillLevel>
 80014aa:	0003      	movs	r3, r0
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	4193      	sbcs	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d02e      	beq.n	8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 80014b6:	2308      	movs	r3, #8
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2410      	movs	r4, #16
 80014bc:	193a      	adds	r2, r7, r4
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	2100      	movs	r1, #0
 80014c2:	f001 f9a9 	bl	8002818 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 80014c6:	0022      	movs	r2, r4
 80014c8:	18bb      	adds	r3, r7, r2
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 80014d0:	18bb      	adds	r3, r7, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e002      	b.n	80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80014d6:	2310      	movs	r3, #16
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 f863 	bl	80015a8 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 80014e2:	0003      	movs	r3, r0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0d9      	beq.n	80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	7a1b      	ldrb	r3, [r3, #8]
 80014f0:	001a      	movs	r2, r3
 80014f2:	2310      	movs	r3, #16
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1d1      	bne.n	80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 80014fc:	2308      	movs	r3, #8
 80014fe:	18fa      	adds	r2, r7, r3
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f000 f9b3 	bl	8001870 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	0018      	movs	r0, r3
 800150e:	f000 f8aa 	bl	8001666 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8001512:	e7c5      	b.n	80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b00d      	add	sp, #52	; 0x34
 800151a:	bd90      	pop	{r4, r7, pc}

0800151c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <CEC_CAN_IRQHandler+0x14>)
 8001522:	0018      	movs	r0, r3
 8001524:	f001 fae9 	bl	8002afa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	20000290 	.word	0x20000290

08001534 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	0019      	movs	r1, r3
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	1c0a      	adds	r2, r1, #0
 8001548:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1dfa      	adds	r2, r7, #7
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	721a      	strb	r2, [r3, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3312      	adds	r3, #18
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f997 	bl	8001896 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1dba      	adds	r2, r7, #6
 800156c:	2130      	movs	r1, #48	; 0x30
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	545a      	strb	r2, [r3, r1]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	2318      	movs	r3, #24
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2131      	movs	r1, #49	; 0x31
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	5453      	strb	r3, [r2, r1]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	221c      	movs	r2, #28
 8001582:	18ba      	adds	r2, r7, r2
 8001584:	2132      	movs	r1, #50	; 0x32
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	545a      	strb	r2, [r3, r1]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2238      	movs	r2, #56	; 0x38
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
{}
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	08003f94 	.word	0x08003f94

080015a8 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 80015b4:	0011      	movs	r1, r2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fa52 	bl	8001a60 <_ZN14RX_BINARY_TREE11FindElementEm>
 80015bc:	0003      	movs	r3, r0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000218 	.word	0x20000218

080015cc <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2238      	movs	r2, #56	; 0x38
 80015e0:	5c9b      	ldrb	r3, [r3, r2]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4053      	eors	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x4c>
    {
        bool success = SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 80015ec:	250f      	movs	r5, #15
 80015ee:	197c      	adds	r4, r7, r5
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x54>)
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fa14 	bl	8001a24 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
 80015fc:	0003      	movs	r3, r0
 80015fe:	7023      	strb	r3, [r4, #0]
        // TODO figure out a way to make this better
		#ifdef DEBUG
        	if(!success)
 8001600:	197b      	adds	r3, r7, r5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4053      	eors	r3, r2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d000      	beq.n	8001610 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x44>
        	{
        		__BKPT(0);
 800160e:	be00      	bkpt	0x0000
        	}
			  // If you are at this breakpoint then your number of messages is incorrect
		#endif
        isReceiving = true;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2238      	movs	r2, #56	; 0x38
 8001614:	2101      	movs	r1, #1
 8001616:	5499      	strb	r1, [r3, r2]
    } 
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	20000218 	.word	0x20000218

08001624 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2231      	movs	r2, #49	; 0x31
 8001630:	5c9b      	ldrb	r3, [r3, r2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d113      	bne.n	800165e <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2232      	movs	r2, #50	; 0x32
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	0018      	movs	r0, r3
 8001644:	f000 f8c4 	bl	80017d0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 8001648:	e009      	b.n	800165e <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	0010      	movs	r0, r2
 8001654:	4798      	blx	r3
	    this->sendTransmitBufferData();
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	f000 f877 	bl	800174c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	0010      	movs	r0, r2
 800167e:	4798      	blx	r3
    }
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8001692:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001696:	2206      	movs	r2, #6
 8001698:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016a8:	22c0      	movs	r2, #192	; 0xc0
 80016aa:	0312      	lsls	r2, r2, #12
 80016ac:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0352      	lsls	r2, r2, #13
 80016b4:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 fd03 	bl	80020e8 <HAL_CAN_Init>
 80016e2:	0003      	movs	r3, r0
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	4193      	sbcs	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 80016ee:	f7ff f825 	bl	800073c <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 80016f2:	003b      	movs	r3, r7
 80016f4:	2201      	movs	r2, #1
 80016f6:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 80016f8:	003b      	movs	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 80016fe:	003b      	movs	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8001704:	003b      	movs	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 800170a:	003b      	movs	r3, r7
 800170c:	2201      	movs	r2, #1
 800170e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8001710:	003b      	movs	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8001716:	003b      	movs	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800171c:	003a      	movs	r2, r7
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001720:	0011      	movs	r1, r2
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fe2a 	bl	800237c <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800172a:	2102      	movs	r1, #2
 800172c:	0018      	movs	r0, r3
 800172e:	f001 f9ba 	bl	8002aa6 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001734:	0018      	movs	r0, r3
 8001736:	f000 ff13 	bl	8002560 <HAL_CAN_Start>
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b00a      	add	sp, #40	; 0x28
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	20000290 	.word	0x20000290
 8001748:	40006400 	.word	0x40006400

0800174c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 800175e:	0018      	movs	r0, r3
 8001760:	f001 f822 	bl	80027a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001764:	0003      	movs	r3, r0
 8001766:	425a      	negs	r2, r3
 8001768:	4153      	adcs	r3, r2
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d000      	beq.n	8001772 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8001770:	e7f4      	b.n	800175c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8001772:	210c      	movs	r1, #12
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7a1b      	ldrb	r3, [r3, #8]
 800177e:	001a      	movs	r2, r3
 8001780:	187b      	adds	r3, r7, r1
 8001782:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2230      	movs	r2, #48	; 0x30
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	187b      	adds	r3, r7, r1
 8001794:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2204      	movs	r2, #4
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e007      	b.n	80017ae <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	210c      	movs	r1, #12
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3309      	adds	r3, #9
 80017b2:	001a      	movs	r2, r3
 80017b4:	2324      	movs	r3, #36	; 0x24
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	210c      	movs	r1, #12
 80017ba:	1879      	adds	r1, r7, r1
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 80017be:	f000 ff15 	bl	80025ec <HAL_CAN_AddTxMessage>
	}
}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b00a      	add	sp, #40	; 0x28
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000290 	.word	0x20000290

080017d0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d032      	beq.n	8001846 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 ffe0 	bl	80027a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80017e8:	0003      	movs	r3, r0
 80017ea:	425a      	negs	r2, r3
 80017ec:	4153      	adcs	r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d000      	beq.n	80017f6 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 80017f4:	e7f4      	b.n	80017e0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 80017f6:	210c      	movs	r1, #12
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2202      	movs	r2, #2
 80017fc:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7a1b      	ldrb	r3, [r3, #8]
 8001802:	001a      	movs	r2, r3
 8001804:	187b      	adds	r3, r7, r1
 8001806:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2230      	movs	r2, #48	; 0x30
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	187b      	adds	r3, r7, r1
 8001818:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2204      	movs	r2, #4
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e007      	b.n	8001832 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	210c      	movs	r1, #12
 8001828:	187b      	adds	r3, r7, r1
 800182a:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3309      	adds	r3, #9
 8001836:	001a      	movs	r2, r3
 8001838:	2324      	movs	r3, #36	; 0x24
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	210c      	movs	r1, #12
 800183e:	1879      	adds	r1, r7, r1
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001842:	f000 fed3 	bl	80025ec <HAL_CAN_AddTxMessage>
	}
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b00a      	add	sp, #40	; 0x28
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000290 	.word	0x20000290

08001854 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3312      	adds	r3, #18
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f82a 	bl	80018ba <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8001866:	0003      	movs	r3, r0
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3312      	adds	r3, #18
 800187e:	240f      	movs	r4, #15
 8001880:	193a      	adds	r2, r7, r4
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f82d 	bl	80018e4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	781b      	ldrb	r3, [r3, #0]
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b005      	add	sp, #20
 8001894:	bd90      	pop	{r4, r7, pc}

08001896 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	831a      	strh	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	835a      	strh	r2, [r3, #26]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	771a      	strb	r2, [r3, #28]
    {}
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8b1a      	ldrh	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8b5b      	ldrh	r3, [r3, #26]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d105      	bne.n	80018da <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7f1b      	ldrb	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 80018da:	2300      	movs	r3, #0
    }
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8b5a      	ldrh	r2, [r3, #26]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8b1b      	ldrh	r3, [r3, #24]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10d      	bne.n	8001918 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	7f1b      	ldrb	r3, [r3, #28]
 8001900:	2201      	movs	r2, #1
 8001902:	4053      	eors	r3, r2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d025      	beq.n	800195c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
            if(success)
 8001916:	e021      	b.n	800195c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8b19      	ldrh	r1, [r3, #24]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0018      	movs	r0, r3
 800192e:	f000 f819 	bl	8001964 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8b1b      	ldrh	r3, [r3, #24]
 8001936:	3301      	adds	r3, #1
 8001938:	2103      	movs	r1, #3
 800193a:	0018      	movs	r0, r3
 800193c:	f7fe fd54 	bl	80003e8 <__aeabi_idivmod>
 8001940:	000b      	movs	r3, r1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8b1a      	ldrh	r2, [r3, #24]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8b5b      	ldrh	r3, [r3, #26]
 8001950:	429a      	cmp	r2, r3
 8001952:	d103      	bne.n	800195c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	771a      	strb	r2, [r3, #28]
    }
 800195a:	e7ff      	b.n	800195c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b004      	add	sp, #16
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	230a      	movs	r3, #10
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	1c0a      	adds	r2, r1, #0
 8001974:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8001976:	2316      	movs	r3, #22
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2200      	movs	r2, #0
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	2416      	movs	r4, #22
 8001980:	193b      	adds	r3, r7, r4
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b07      	cmp	r3, #7
 8001986:	d814      	bhi.n	80019b2 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8001988:	193b      	adds	r3, r7, r4
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	18d1      	adds	r1, r2, r3
 8001990:	230a      	movs	r3, #10
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	193b      	adds	r3, r7, r4
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	7808      	ldrb	r0, [r1, #0]
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	00d2      	lsls	r2, r2, #3
 80019a0:	188a      	adds	r2, r1, r2
 80019a2:	1c01      	adds	r1, r0, #0
 80019a4:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	3201      	adds	r2, #1
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	e7e5      	b.n	800197e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b007      	add	sp, #28
 80019b8:	bd90      	pop	{r4, r7, pc}
	...

080019bc <_Z41__static_initialization_and_destruction_0ii>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d103      	bne.n	80019dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 f814 	bl	8001a04 <_ZN14RX_BINARY_TREEC1Ev>
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	0000ffff 	.word	0x0000ffff
 80019e8:	20000218 	.word	0x20000218

080019ec <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80019f2:	0019      	movs	r1, r3
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff ffe1 	bl	80019bc <_Z41__static_initialization_and_destruction_0ii>
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	0000ffff 	.word	0x0000ffff

08001a04 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	671a      	str	r2, [r3, #112]	; 0x70
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2274      	movs	r2, #116	; 0x74
 8001a16:	2100      	movs	r1, #0
 8001a18:	5299      	strh	r1, [r3, r2]
{}
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

bool RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2274      	movs	r2, #116	; 0x74
 8001a32:	5a9b      	ldrh	r3, [r3, r2]
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d80e      	bhi.n	8001a56 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
    {
        root = insert(root,new_element);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 f9a9 	bl	8001d9e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	671a      	str	r2, [r3, #112]	; 0x70
        return true;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x34>
    }
    return false;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f80d 	bl	8001a92 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e001      	b.n	8001a8a <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	e034      	b.n	8001b12 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 f88b 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	1c19      	adds	r1, r3, #0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4293      	cmp	r3, r2
 8001abe:	db01      	blt.n	8001ac4 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	1c19      	adds	r1, r3, #0
 8001ac4:	b2cb      	uxtb	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	6859      	ldr	r1, [r3, #4]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7ff ffdd 	bl	8001a92 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	e01a      	b.n	8001b12 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 f871 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	2301      	movs	r3, #1
 8001aec:	1c19      	adds	r1, r3, #0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4293      	cmp	r3, r2
 8001af2:	dc01      	bgt.n	8001af8 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001af4:	2300      	movs	r3, #0
 8001af6:	1c19      	adds	r1, r3, #0
 8001af8:	b2cb      	uxtb	r3, r1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ffc3 	bl	8001a92 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	e000      	b.n	8001b12 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001b10:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2274      	movs	r2, #116	; 0x74
 8001b28:	5a9b      	ldrh	r3, [r3, r2]
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2274      	movs	r2, #116	; 0x74
 8001b38:	5a9b      	ldrh	r3, [r3, r2]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	18d3      	adds	r3, r2, r3
 8001b40:	3304      	adds	r3, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2274      	movs	r2, #116	; 0x74
 8001b4a:	5a9b      	ldrh	r3, [r3, r2]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	3308      	adds	r3, #8
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2274      	movs	r2, #116	; 0x74
 8001b5c:	5a9b      	ldrh	r3, [r3, r2]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	18d3      	adds	r3, r2, r3
 8001b64:	330c      	adds	r3, #12
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2274      	movs	r2, #116	; 0x74
 8001b6e:	5a9b      	ldrh	r3, [r3, r2]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	b290      	uxth	r0, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	2174      	movs	r1, #116	; 0x74
 8001b78:	5250      	strh	r0, [r2, r1]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	18d3      	adds	r3, r2, r3
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d901      	bls.n	8001ba0 <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	e000      	b.n	8001ba2 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
}  
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e001      	b.n	8001bc2 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	425b      	negs	r3, r3
 8001bde:	e009      	b.n	8001bf4 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001be8:	2301      	movs	r3, #1
 8001bea:	425b      	negs	r3, r3
 8001bec:	e002      	b.n	8001bf4 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	425b      	negs	r3, r3
 8001c10:	e001      	b.n	8001c16 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ffae 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0011      	movs	r1, r2
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7ff ffa5 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001c60:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001c62:	001a      	movs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0021      	movs	r1, r4
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff8d 	bl	8001b88 <_ZN14RX_BINARY_TREE3maxEmm>
 8001c6e:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff ff91 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff88 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001c9a:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0021      	movs	r1, r4
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff ff70 	bl	8001b88 <_ZN14RX_BINARY_TREE3maxEmm>
 8001ca8:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8001cb4:	68fb      	ldr	r3, [r7, #12]
} 
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b005      	add	sp, #20
 8001cbc:	bd90      	pop	{r4, r7, pc}

08001cbe <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 8001cbe:	b590      	push	{r4, r7, lr}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff5e 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff ff55 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001d00:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8001d02:	001a      	movs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0021      	movs	r1, r4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff ff3d 	bl	8001b88 <_ZN14RX_BINARY_TREE3maxEmm>
 8001d0e:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0011      	movs	r1, r2
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff41 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7ff ff38 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001d3a:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0021      	movs	r1, r4
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff ff20 	bl	8001b88 <_ZN14RX_BINARY_TREE3maxEmm>
 8001d48:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001d54:	68fb      	ldr	r3, [r7, #12]
}  
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b005      	add	sp, #20
 8001d5c:	bd90      	pop	{r4, r7, pc}

08001d5e <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 8001d5e:	b590      	push	{r4, r7, lr}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e011      	b.n	8001d96 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff15 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001d80:	0003      	movs	r3, r0
 8001d82:	001c      	movs	r4, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ff0c 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001d92:	0003      	movs	r3, r0
 8001d94:	1ae3      	subs	r3, r4, r3
}  
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b003      	add	sp, #12
 8001d9c:	bd90      	pop	{r4, r7, pc}

08001d9e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 8001d9e:	b590      	push	{r4, r7, lr}
 8001da0:	b087      	sub	sp, #28
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff feaf 	bl	8001b1a <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	e101      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff18 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001dcc:	0004      	movs	r4, r0
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fef8 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	2201      	movs	r2, #1
 8001dde:	429c      	cmp	r4, r3
 8001de0:	db01      	blt.n	8001de6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 8001de2:	2300      	movs	r3, #0
 8001de4:	1c1a      	adds	r2, r3, #0
 8001de6:	b2d3      	uxtb	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ffd2 	bl	8001d9e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	e022      	b.n	8001e48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff fef7 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001e0e:	0004      	movs	r4, r0
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	0011      	movs	r1, r2
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff fed7 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	2201      	movs	r2, #1
 8001e20:	429c      	cmp	r4, r3
 8001e22:	dc01      	bgt.n	8001e28 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 8001e24:	2300      	movs	r3, #0
 8001e26:	1c1a      	adds	r2, r3, #0
 8001e28:	b2d3      	uxtb	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6899      	ldr	r1, [r3, #8]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff ffb1 	bl	8001d9e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e001      	b.n	8001e48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	e0bd      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	0011      	movs	r1, r2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff feaa 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001e56:	0003      	movs	r3, r0
 8001e58:	001c      	movs	r4, r3
                        height(node->right));  
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0011      	movs	r1, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff fea1 	bl	8001baa <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001e68:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0021      	movs	r1, r4
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff fe89 	bl	8001b88 <_ZN14RX_BINARY_TREE3maxEmm>
 8001e76:	0003      	movs	r3, r0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff ff68 	bl	8001d5e <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	dd12      	ble.n	8001ebe <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0011      	movs	r1, r2
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff feac 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001ea4:	0004      	movs	r4, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0011      	movs	r1, r2
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff fe8b 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	429c      	cmp	r4, r3
 8001eb8:	da01      	bge.n	8001ebe <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0011      	movs	r1, r2
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff fea7 	bl	8001c1e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	e077      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	da12      	bge.n	8001f00 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	0011      	movs	r1, r2
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fe8b 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001ee6:	0004      	movs	r4, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fe6a 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	dd01      	ble.n	8001f00 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fed6 	bl	8001cbe <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001f12:	0003      	movs	r3, r0
 8001f14:	e056      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	dd12      	ble.n	8001f42 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7ff fe6a 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001f28:	0004      	movs	r4, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff fe49 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	dd01      	ble.n	8001f42 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8001f42:	2300      	movs	r3, #0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d011      	beq.n	8001f6c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff feb4 	bl	8001cbe <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001f56:	0002      	movs	r2, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fe5b 	bl	8001c1e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	e02b      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	da12      	bge.n	8001f98 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff fe3f 	bl	8001bfc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001f7e:	0004      	movs	r4, r0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fe1e 	bl	8001bca <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	429c      	cmp	r4, r3
 8001f92:	da01      	bge.n	8001f98 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d011      	beq.n	8001fc2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0011      	movs	r1, r2
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fe39 	bl	8001c1e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001fac:	0002      	movs	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fe80 	bl	8001cbe <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	e000      	b.n	8001fc4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 8001fc2:	68bb      	ldr	r3, [r7, #8]
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b007      	add	sp, #28
 8001fca:	bd90      	pop	{r4, r7, pc}

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ff6:	f7fe fd62 	bl	8000abe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f001 fef3 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7fe f9f9 	bl	80003f4 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002010:	08003fa8 	.word	0x08003fa8
  ldr r2, =_sbss
 8002014:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002018:	200002fc 	.word	0x200002fc

0800201c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_COMP_IRQHandler>
	...

08002020 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_Init+0x24>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_Init+0x24>)
 800202a:	2110      	movs	r1, #16
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f809 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002036:	f7fe fc8d 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_InitTick+0x5c>)
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_InitTick+0x60>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	0019      	movs	r1, r3
 800205a:	23fa      	movs	r3, #250	; 0xfa
 800205c:	0098      	lsls	r0, r3, #2
 800205e:	f7fe f853 	bl	8000108 <__udivsi3>
 8002062:	0003      	movs	r3, r0
 8002064:	0019      	movs	r1, r3
 8002066:	0020      	movs	r0, r4
 8002068:	f7fe f84e 	bl	8000108 <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	0018      	movs	r0, r3
 8002070:	f001 f835 	bl	80030de <HAL_SYSTICK_Config>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e00f      	b.n	800209c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d80b      	bhi.n	800209a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	2301      	movs	r3, #1
 8002086:	425b      	negs	r3, r3
 8002088:	2200      	movs	r2, #0
 800208a:	0018      	movs	r0, r3
 800208c:	f001 f802 	bl	8003094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_InitTick+0x64>)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b003      	add	sp, #12
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x1c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x20>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	18d2      	adds	r2, r2, r3
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_IncTick+0x20>)
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000008 	.word	0x20000008
 80020d0:	200002f4 	.word	0x200002f4

080020d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_GetTick+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	200002f4 	.word	0x200002f4

080020e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e11f      	b.n	800233a <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	5c9b      	ldrb	r3, [r3, r2]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d132      	bne.n	800216c <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a8e      	ldr	r2, [pc, #568]	; (8002344 <HAL_CAN_Init+0x25c>)
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a8e      	ldr	r2, [pc, #568]	; (8002348 <HAL_CAN_Init+0x260>)
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a8d      	ldr	r2, [pc, #564]	; (800234c <HAL_CAN_Init+0x264>)
 8002116:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a8d      	ldr	r2, [pc, #564]	; (8002350 <HAL_CAN_Init+0x268>)
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a8c      	ldr	r2, [pc, #560]	; (8002354 <HAL_CAN_Init+0x26c>)
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a8c      	ldr	r2, [pc, #560]	; (8002358 <HAL_CAN_Init+0x270>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a8b      	ldr	r2, [pc, #556]	; (800235c <HAL_CAN_Init+0x274>)
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <HAL_CAN_Init+0x278>)
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_CAN_Init+0x27c>)
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a8a      	ldr	r2, [pc, #552]	; (8002368 <HAL_CAN_Init+0x280>)
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a89      	ldr	r2, [pc, #548]	; (800236c <HAL_CAN_Init+0x284>)
 8002146:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a89      	ldr	r2, [pc, #548]	; (8002370 <HAL_CAN_Init+0x288>)
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a88      	ldr	r2, [pc, #544]	; (8002374 <HAL_CAN_Init+0x28c>)
 8002152:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a86      	ldr	r2, [pc, #536]	; (8002378 <HAL_CAN_Init+0x290>)
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	0010      	movs	r0, r2
 800216a:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800217c:	f7ff ffaa 	bl	80020d4 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002184:	e013      	b.n	80021ae <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002186:	f7ff ffa5 	bl	80020d4 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b0a      	cmp	r3, #10
 8002192:	d90c      	bls.n	80021ae <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	0292      	lsls	r2, r2, #10
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	2105      	movs	r1, #5
 80021a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0c5      	b.n	800233a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	d0e5      	beq.n	8002186 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2102      	movs	r1, #2
 80021c6:	438a      	bics	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ca:	f7ff ff83 	bl	80020d4 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021d2:	e013      	b.n	80021fc <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d4:	f7ff ff7e 	bl	80020d4 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d90c      	bls.n	80021fc <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0292      	lsls	r2, r2, #10
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	2105      	movs	r1, #5
 80021f6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e09e      	b.n	800233a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d1e5      	bne.n	80021d4 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7e5b      	ldrb	r3, [r3, #25]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2140      	movs	r1, #64	; 0x40
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2140      	movs	r1, #64	; 0x40
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e9b      	ldrb	r3, [r3, #26]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d108      	bne.n	8002276 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2120      	movs	r1, #32
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e007      	b.n	8002286 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2120      	movs	r1, #32
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7edb      	ldrb	r3, [r3, #27]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2110      	movs	r1, #16
 800229a:	438a      	bics	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2110      	movs	r1, #16
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7f1b      	ldrb	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2108      	movs	r1, #8
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e007      	b.n	80022da <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2108      	movs	r1, #8
 80022d6:	438a      	bics	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f5b      	ldrb	r3, [r3, #29]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d108      	bne.n	80022f4 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2104      	movs	r1, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2104      	movs	r1, #4
 8002300:	438a      	bics	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	431a      	orrs	r2, r3
 800231a:	0011      	movs	r1, r2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	08001499 	.word	0x08001499
 8002348:	08002edd 	.word	0x08002edd
 800234c:	08002eed 	.word	0x08002eed
 8002350:	08002efd 	.word	0x08002efd
 8002354:	08002e7d 	.word	0x08002e7d
 8002358:	08002e8d 	.word	0x08002e8d
 800235c:	08002e9d 	.word	0x08002e9d
 8002360:	08002ead 	.word	0x08002ead
 8002364:	08002ebd 	.word	0x08002ebd
 8002368:	08002ecd 	.word	0x08002ecd
 800236c:	08002f0d 	.word	0x08002f0d
 8002370:	08002f1d 	.word	0x08002f1d
 8002374:	08002f2d 	.word	0x08002f2d
 8002378:	0800099d 	.word	0x0800099d

0800237c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800238c:	2013      	movs	r0, #19
 800238e:	183b      	adds	r3, r7, r0
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2120      	movs	r1, #32
 8002394:	5c52      	ldrb	r2, [r2, r1]
 8002396:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002398:	0002      	movs	r2, r0
 800239a:	18bb      	adds	r3, r7, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d004      	beq.n	80023ac <HAL_CAN_ConfigFilter+0x30>
 80023a2:	18bb      	adds	r3, r7, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d000      	beq.n	80023ac <HAL_CAN_ConfigFilter+0x30>
 80023aa:	e0cd      	b.n	8002548 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	58d3      	ldr	r3, [r2, r3]
 80023b4:	2201      	movs	r2, #1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	0011      	movs	r1, r2
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	221f      	movs	r2, #31
 80023c8:	4013      	ands	r3, r2
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	0013      	movs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	2387      	movs	r3, #135	; 0x87
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	58d3      	ldr	r3, [r2, r3]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	43d2      	mvns	r2, r2
 80023de:	401a      	ands	r2, r3
 80023e0:	0011      	movs	r1, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	2387      	movs	r3, #135	; 0x87
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d129      	bne.n	8002446 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	2383      	movs	r3, #131	; 0x83
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	58d3      	ldr	r3, [r2, r3]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	43d2      	mvns	r2, r2
 80023fe:	401a      	ands	r2, r3
 8002400:	0011      	movs	r1, r2
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	2383      	movs	r3, #131	; 0x83
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800241c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3248      	adds	r2, #72	; 0x48
 8002422:	00d2      	lsls	r2, r2, #3
 8002424:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800243a:	6979      	ldr	r1, [r7, #20]
 800243c:	3348      	adds	r3, #72	; 0x48
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	18cb      	adds	r3, r1, r3
 8002442:	3304      	adds	r3, #4
 8002444:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d128      	bne.n	80024a0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	2383      	movs	r3, #131	; 0x83
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	58d2      	ldr	r2, [r2, r3]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	431a      	orrs	r2, r3
 800245a:	0011      	movs	r1, r2
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	2383      	movs	r3, #131	; 0x83
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002476:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3248      	adds	r2, #72	; 0x48
 800247c:	00d2      	lsls	r2, r2, #3
 800247e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002492:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	3348      	adds	r3, #72	; 0x48
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	18cb      	adds	r3, r1, r3
 800249c:	3304      	adds	r3, #4
 800249e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10c      	bne.n	80024c2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	2381      	movs	r3, #129	; 0x81
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	58d3      	ldr	r3, [r2, r3]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	401a      	ands	r2, r3
 80024b6:	0011      	movs	r1, r2
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	2381      	movs	r3, #129	; 0x81
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	50d1      	str	r1, [r2, r3]
 80024c0:	e00a      	b.n	80024d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	2381      	movs	r3, #129	; 0x81
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	58d2      	ldr	r2, [r2, r3]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	0011      	movs	r1, r2
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	2381      	movs	r3, #129	; 0x81
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	2385      	movs	r3, #133	; 0x85
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	58d3      	ldr	r3, [r2, r3]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	43d2      	mvns	r2, r2
 80024ec:	401a      	ands	r2, r3
 80024ee:	0011      	movs	r1, r2
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	2385      	movs	r3, #133	; 0x85
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	50d1      	str	r1, [r2, r3]
 80024f8:	e00a      	b.n	8002510 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	2385      	movs	r3, #133	; 0x85
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	58d2      	ldr	r2, [r2, r3]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	431a      	orrs	r2, r3
 8002506:	0011      	movs	r1, r2
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	2385      	movs	r3, #133	; 0x85
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10a      	bne.n	800252e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	2387      	movs	r3, #135	; 0x87
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	58d2      	ldr	r2, [r2, r3]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	431a      	orrs	r2, r3
 8002524:	0011      	movs	r1, r2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	2387      	movs	r3, #135	; 0x87
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	58d3      	ldr	r3, [r2, r3]
 8002536:	2201      	movs	r2, #1
 8002538:	4393      	bics	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e007      	b.n	8002558 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	02d2      	lsls	r2, r2, #11
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
  }
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b006      	add	sp, #24
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d12f      	bne.n	80025d4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	2102      	movs	r1, #2
 800257a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff fda2 	bl	80020d4 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002594:	e013      	b.n	80025be <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002596:	f7ff fd9d 	bl	80020d4 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b0a      	cmp	r3, #10
 80025a2:	d90c      	bls.n	80025be <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	0292      	lsls	r2, r2, #10
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	2105      	movs	r1, #5
 80025b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e012      	b.n	80025e4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d1e5      	bne.n	8002596 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e007      	b.n	80025e4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0312      	lsls	r2, r2, #12
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
  }
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025fa:	201f      	movs	r0, #31
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	2120      	movs	r1, #32
 8002602:	5c52      	ldrb	r2, [r2, r1]
 8002604:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d004      	beq.n	8002620 <HAL_CAN_AddTxMessage+0x34>
 8002616:	183b      	adds	r3, r7, r0
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d000      	beq.n	8002620 <HAL_CAN_AddTxMessage+0x34>
 800261e:	e0b7      	b.n	8002790 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	04db      	lsls	r3, r3, #19
 8002626:	4013      	ands	r3, r2
 8002628:	d10a      	bne.n	8002640 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	051b      	lsls	r3, r3, #20
 8002630:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002632:	d105      	bne.n	8002640 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	055b      	lsls	r3, r3, #21
 800263a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800263c:	d100      	bne.n	8002640 <HAL_CAN_AddTxMessage+0x54>
 800263e:	e09e      	b.n	800277e <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	0e1b      	lsrs	r3, r3, #24
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d908      	bls.n	8002662 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	0412      	lsls	r2, r2, #16
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e09e      	b.n	80027a0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10c      	bne.n	800268e <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4311      	orrs	r1, r2
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	3218      	adds	r2, #24
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	50d1      	str	r1, [r2, r3]
 800268c:	e00f      	b.n	80026ae <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002698:	431a      	orrs	r2, r3
 800269a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80026a4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	3218      	adds	r2, #24
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3318      	adds	r3, #24
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	18cb      	adds	r3, r1, r3
 80026be:	3304      	adds	r3, #4
 80026c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	7d1b      	ldrb	r3, [r3, #20]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d112      	bne.n	80026f0 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3318      	adds	r3, #24
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	18d3      	adds	r3, r2, r3
 80026d6:	3304      	adds	r3, #4
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3318      	adds	r3, #24
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	18cb      	adds	r3, r1, r3
 80026ec:	3304      	adds	r3, #4
 80026ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3307      	adds	r3, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	061a      	lsls	r2, r3, #24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3306      	adds	r3, #6
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3305      	adds	r3, #5
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	0019      	movs	r1, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	23c6      	movs	r3, #198	; 0xc6
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	1841      	adds	r1, r0, r1
 8002724:	18cb      	adds	r3, r1, r3
 8002726:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3303      	adds	r3, #3
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	061a      	lsls	r2, r3, #24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3302      	adds	r3, #2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3301      	adds	r3, #1
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	0019      	movs	r1, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	6979      	ldr	r1, [r7, #20]
 8002752:	23c4      	movs	r3, #196	; 0xc4
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	0109      	lsls	r1, r1, #4
 8002758:	1841      	adds	r1, r0, r1
 800275a:	18cb      	adds	r3, r1, r3
 800275c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	3218      	adds	r2, #24
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	58d2      	ldr	r2, [r2, r3]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	4311      	orrs	r1, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	3218      	adds	r2, #24
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e010      	b.n	80027a0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	0392      	lsls	r2, r2, #14
 8002786:	431a      	orrs	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	02d2      	lsls	r2, r2, #11
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
  }
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b008      	add	sp, #32
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027b4:	200b      	movs	r0, #11
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	2120      	movs	r1, #32
 80027bc:	5c52      	ldrb	r2, [r2, r1]
 80027be:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80027c0:	0002      	movs	r2, r0
 80027c2:	18bb      	adds	r3, r7, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d003      	beq.n	80027d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 80027ca:	18bb      	adds	r3, r7, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d11d      	bne.n	800280e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	04db      	lsls	r3, r3, #19
 80027dc:	4013      	ands	r3, r2
 80027de:	d002      	beq.n	80027e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	051b      	lsls	r3, r3, #20
 80027f0:	4013      	ands	r3, r2
 80027f2:	d002      	beq.n	80027fa <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3301      	adds	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	055b      	lsls	r3, r3, #21
 8002804:	4013      	ands	r3, r2
 8002806:	d002      	beq.n	800280e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3301      	adds	r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b004      	add	sp, #16
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002826:	2017      	movs	r0, #23
 8002828:	183b      	adds	r3, r7, r0
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	2120      	movs	r1, #32
 800282e:	5c52      	ldrb	r2, [r2, r1]
 8002830:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002832:	0002      	movs	r2, r0
 8002834:	18bb      	adds	r3, r7, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d004      	beq.n	8002846 <HAL_CAN_GetRxMessage+0x2e>
 800283c:	18bb      	adds	r3, r7, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d000      	beq.n	8002846 <HAL_CAN_GetRxMessage+0x2e>
 8002844:	e0f8      	b.n	8002a38 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10e      	bne.n	800286a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2203      	movs	r2, #3
 8002854:	4013      	ands	r3, r2
 8002856:	d117      	bne.n	8002888 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	0392      	lsls	r2, r2, #14
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0ee      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2203      	movs	r2, #3
 8002872:	4013      	ands	r3, r2
 8002874:	d108      	bne.n	8002888 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0392      	lsls	r2, r2, #14
 800287e:	431a      	orrs	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0df      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	321b      	adds	r2, #27
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	58d3      	ldr	r3, [r2, r3]
 8002894:	2204      	movs	r2, #4
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	321b      	adds	r2, #27
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	58d3      	ldr	r3, [r2, r3]
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	055b      	lsls	r3, r3, #21
 80028b4:	0d5a      	lsrs	r2, r3, #21
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00a      	b.n	80028d2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	321b      	adds	r2, #27
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	58d3      	ldr	r3, [r2, r3]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	321b      	adds	r2, #27
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	58d3      	ldr	r3, [r2, r3]
 80028de:	2202      	movs	r2, #2
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	331b      	adds	r3, #27
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	18d3      	adds	r3, r2, r3
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	220f      	movs	r2, #15
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	331b      	adds	r3, #27
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	18d3      	adds	r3, r2, r3
 800290a:	3304      	adds	r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	22ff      	movs	r2, #255	; 0xff
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	18d3      	adds	r3, r2, r3
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	0c1a      	lsrs	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	23dc      	movs	r3, #220	; 0xdc
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	188a      	adds	r2, r1, r2
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	23dc      	movs	r3, #220	; 0xdc
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	188a      	adds	r2, r1, r2
 8002958:	18d3      	adds	r3, r2, r3
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0a1a      	lsrs	r2, r3, #8
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	23dc      	movs	r3, #220	; 0xdc
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	188a      	adds	r2, r1, r2
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0c1a      	lsrs	r2, r3, #16
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3302      	adds	r3, #2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	23dc      	movs	r3, #220	; 0xdc
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	188a      	adds	r2, r1, r2
 8002990:	18d3      	adds	r3, r2, r3
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e1a      	lsrs	r2, r3, #24
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3303      	adds	r3, #3
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	23de      	movs	r3, #222	; 0xde
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	188a      	adds	r2, r1, r2
 80029ac:	18d3      	adds	r3, r2, r3
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	23de      	movs	r3, #222	; 0xde
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	188a      	adds	r2, r1, r2
 80029c6:	18d3      	adds	r3, r2, r3
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3305      	adds	r3, #5
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	23de      	movs	r3, #222	; 0xde
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	188a      	adds	r2, r1, r2
 80029e2:	18d3      	adds	r3, r2, r3
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1a      	lsrs	r2, r3, #16
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3306      	adds	r3, #6
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	23de      	movs	r3, #222	; 0xde
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	188a      	adds	r2, r1, r2
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e1a      	lsrs	r2, r3, #24
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	3307      	adds	r3, #7
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d108      	bne.n	8002a24 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	e007      	b.n	8002a34 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2120      	movs	r1, #32
 8002a30:	430a      	orrs	r2, r1
 8002a32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e007      	b.n	8002a48 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	02d2      	lsls	r2, r2, #11
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
  }
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b006      	add	sp, #24
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a5e:	200b      	movs	r0, #11
 8002a60:	183b      	adds	r3, r7, r0
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	2120      	movs	r1, #32
 8002a66:	5c52      	ldrb	r2, [r2, r1]
 8002a68:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	18bb      	adds	r3, r7, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d003      	beq.n	8002a7c <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002a74:	18bb      	adds	r3, r7, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d10f      	bne.n	8002a9c <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e005      	b.n	8002a9c <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2203      	movs	r2, #3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab0:	200f      	movs	r0, #15
 8002ab2:	183b      	adds	r3, r7, r0
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	5c52      	ldrb	r2, [r2, r1]
 8002aba:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002abc:	0002      	movs	r2, r0
 8002abe:	18bb      	adds	r3, r7, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d003      	beq.n	8002ace <HAL_CAN_ActivateNotification+0x28>
 8002ac6:	18bb      	adds	r3, r7, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d109      	bne.n	8002ae2 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6959      	ldr	r1, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e007      	b.n	8002af2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	02d2      	lsls	r2, r2, #11
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
  }
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d100      	bne.n	8002b40 <HAL_CAN_IRQHandler+0x46>
 8002b3e:	e08a      	b.n	8002c56 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d026      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d005      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	0010      	movs	r0, r2
 8002b60:	4798      	blx	r3
 8002b62:	e018      	b.n	8002b96 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d005      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	4313      	orrs	r3, r2
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	e00e      	b.n	8002b96 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d005      	beq.n	8002b8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	0152      	lsls	r2, r2, #5
 8002b86:	4313      	orrs	r3, r2
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	e004      	b.n	8002b96 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	0010      	movs	r0, r2
 8002b94:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d02a      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0052      	lsls	r2, r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d005      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	0010      	movs	r0, r2
 8002bbc:	4798      	blx	r3
 8002bbe:	e01a      	b.n	8002bf6 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d005      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0192      	lsls	r2, r2, #6
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	e00f      	b.n	8002bf6 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d005      	beq.n	8002bec <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	01d2      	lsls	r2, r2, #7
 8002be6:	4313      	orrs	r3, r2
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e004      	b.n	8002bf6 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	025b      	lsls	r3, r3, #9
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d02a      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0252      	lsls	r2, r2, #9
 8002c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	4013      	ands	r3, r2
 8002c12:	d005      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	4798      	blx	r3
 8002c1e:	e01a      	b.n	8002c56 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	02db      	lsls	r3, r3, #11
 8002c26:	4013      	ands	r3, r2
 8002c28:	d005      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0212      	lsls	r2, r2, #8
 8002c30:	4313      	orrs	r3, r2
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e00f      	b.n	8002c56 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	031b      	lsls	r3, r3, #12
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d005      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	0252      	lsls	r2, r2, #9
 8002c46:	4313      	orrs	r3, r2
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	0010      	movs	r0, r2
 8002c54:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d00c      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	d008      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2210      	movs	r2, #16
 8002c76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d00c      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2208      	movs	r2, #8
 8002c84:	4013      	ands	r3, r2
 8002c86:	d008      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	0010      	movs	r0, r2
 8002c98:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00c      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d008      	beq.n	8002cda <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	00d2      	lsls	r2, r2, #3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00c      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d008      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	2210      	movs	r2, #16
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00a      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	0010      	movs	r0, r2
 8002d18:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	029b      	lsls	r3, r3, #10
 8002d20:	4013      	ands	r3, r2
 8002d22:	d00c      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2210      	movs	r2, #16
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d008      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d3e:	6a3a      	ldr	r2, [r7, #32]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	4013      	ands	r3, r2
 8002d46:	d00c      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d008      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2208      	movs	r2, #8
 8002d56:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	0010      	movs	r0, r2
 8002d60:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <HAL_CAN_IRQHandler+0x274>
 8002d6c:	e074      	b.n	8002e58 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2204      	movs	r2, #4
 8002d72:	4013      	ands	r3, r2
 8002d74:	d100      	bne.n	8002d78 <HAL_CAN_IRQHandler+0x27e>
 8002d76:	e06b      	b.n	8002e50 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d88:	d003      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d007      	beq.n	8002dac <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002da2:	d003      	beq.n	8002dac <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2202      	movs	r2, #2
 8002da8:	4313      	orrs	r3, r2
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4013      	ands	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2204      	movs	r2, #4
 8002dba:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dbc:	d003      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc6:	6a3a      	ldr	r2, [r7, #32]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d03f      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2270      	movs	r2, #112	; 0x70
 8002dd4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dd6:	d03b      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2270      	movs	r2, #112	; 0x70
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b60      	cmp	r3, #96	; 0x60
 8002de0:	d027      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x338>
 8002de2:	d82c      	bhi.n	8002e3e <HAL_CAN_IRQHandler+0x344>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d01f      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x32e>
 8002de8:	d829      	bhi.n	8002e3e <HAL_CAN_IRQHandler+0x344>
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d017      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x324>
 8002dee:	d826      	bhi.n	8002e3e <HAL_CAN_IRQHandler+0x344>
 8002df0:	2b30      	cmp	r3, #48	; 0x30
 8002df2:	d00f      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x31a>
 8002df4:	d823      	bhi.n	8002e3e <HAL_CAN_IRQHandler+0x344>
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d002      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x306>
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d005      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002dfe:	e01e      	b.n	8002e3e <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2208      	movs	r2, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e08:	e01a      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e12:	e015      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	2220      	movs	r2, #32
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e1c:	e010      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	4313      	orrs	r3, r2
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e26:	e00b      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e30:	e006      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e3c:	e000      	b.n	8002e40 <HAL_CAN_IRQHandler+0x346>
            break;
 8002e3e:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2170      	movs	r1, #112	; 0x70
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	0010      	movs	r0, r2
 8002e72:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b00a      	add	sp, #40	; 0x28
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	0002      	movs	r2, r0
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4e:	d809      	bhi.n	8002f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	231f      	movs	r3, #31
 8002f58:	401a      	ands	r2, r3
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <__NVIC_EnableIRQ+0x30>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  }
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b7f      	cmp	r3, #127	; 0x7f
 8002f84:	d828      	bhi.n	8002fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f86:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <__NVIC_SetPriority+0xd4>)
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	33c0      	adds	r3, #192	; 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	589b      	ldr	r3, [r3, r2]
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	21ff      	movs	r1, #255	; 0xff
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	481f      	ldr	r0, [pc, #124]	; (8003044 <__NVIC_SetPriority+0xd4>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	33c0      	adds	r3, #192	; 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fd6:	e031      	b.n	800303c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <__NVIC_SetPriority+0xd8>)
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	3b08      	subs	r3, #8
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3306      	adds	r3, #6
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1dfa      	adds	r2, r7, #7
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	00d2      	lsls	r2, r2, #3
 8002ffe:	21ff      	movs	r1, #255	; 0xff
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	43d2      	mvns	r2, r2
 8003006:	401a      	ands	r2, r3
 8003008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	401a      	ands	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	2303      	movs	r3, #3
 800301a:	4003      	ands	r3, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <__NVIC_SetPriority+0xd8>)
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001c      	movs	r4, r3
 8003028:	230f      	movs	r3, #15
 800302a:	4023      	ands	r3, r4
 800302c:	3b08      	subs	r3, #8
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	430a      	orrs	r2, r1
 8003032:	3306      	adds	r3, #6
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	18c3      	adds	r3, r0, r3
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b003      	add	sp, #12
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	045b      	lsls	r3, r3, #17
 800305c:	429a      	cmp	r2, r3
 800305e:	d301      	bcc.n	8003064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003060:	2301      	movs	r3, #1
 8003062:	e010      	b.n	8003086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <SysTick_Config+0x44>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	3a01      	subs	r2, #1
 800306a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306c:	2301      	movs	r3, #1
 800306e:	425b      	negs	r3, r3
 8003070:	2103      	movs	r1, #3
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff7c 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x44>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x44>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	210f      	movs	r1, #15
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	1c02      	adds	r2, r0, #0
 80030a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	0002      	movs	r2, r0
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ff33 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ffaf 	bl	800304c <SysTick_Config>
 80030ee:	0003      	movs	r3, r0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003106:	e155      	b.n	80033b4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4091      	lsls	r1, r2
 8003112:	000a      	movs	r2, r1
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d100      	bne.n	8003120 <HAL_GPIO_Init+0x28>
 800311e:	e146      	b.n	80033ae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	4013      	ands	r3, r2
 8003128:	2b01      	cmp	r3, #1
 800312a:	d005      	beq.n	8003138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003134:	2b02      	cmp	r3, #2
 8003136:	d130      	bne.n	800319a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	43da      	mvns	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	2201      	movs	r2, #1
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d017      	beq.n	80031d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2203      	movs	r2, #3
 80031dc:	4013      	ands	r3, r2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d123      	bne.n	800322a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	58d3      	ldr	r3, [r2, r3]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2207      	movs	r2, #7
 80031f4:	4013      	ands	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	43da      	mvns	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2107      	movs	r1, #7
 800320e:	400b      	ands	r3, r1
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	409a      	lsls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	43da      	mvns	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	401a      	ands	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	23c0      	movs	r3, #192	; 0xc0
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	4013      	ands	r3, r2
 8003268:	d100      	bne.n	800326c <HAL_GPIO_Init+0x174>
 800326a:	e0a0      	b.n	80033ae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326c:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x2d4>)
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x2d4>)
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	4b54      	ldr	r3, [pc, #336]	; (80033cc <HAL_GPIO_Init+0x2d4>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_Init+0x2d8>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	589b      	ldr	r3, [r3, r2]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2203      	movs	r2, #3
 8003296:	4013      	ands	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	220f      	movs	r2, #15
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2390      	movs	r3, #144	; 0x90
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x1ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_GPIO_Init+0x2dc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x1ea>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x1e6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a45      	ldr	r2, [pc, #276]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x1e2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <HAL_GPIO_Init+0x2e8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x1de>
 80032d2:	2304      	movs	r3, #4
 80032d4:	e008      	b.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032d6:	2305      	movs	r3, #5
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032da:	2303      	movs	r3, #3
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x1f0>
 80032e6:	2300      	movs	r3, #0
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	2103      	movs	r1, #3
 80032ec:	400a      	ands	r2, r1
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	4093      	lsls	r3, r2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <HAL_GPIO_Init+0x2d8>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43da      	mvns	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	025b      	lsls	r3, r3, #9
 800331e:	4013      	ands	r3, r2
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43da      	mvns	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	029b      	lsls	r3, r3, #10
 8003348:	4013      	ands	r3, r2
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43da      	mvns	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	035b      	lsls	r3, r3, #13
 8003372:	4013      	ands	r3, r2
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43da      	mvns	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	039b      	lsls	r3, r3, #14
 800339c:	4013      	ands	r3, r2
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	40da      	lsrs	r2, r3
 80033bc:	1e13      	subs	r3, r2, #0
 80033be:	d000      	beq.n	80033c2 <HAL_GPIO_Init+0x2ca>
 80033c0:	e6a2      	b.n	8003108 <HAL_GPIO_Init+0x10>
  } 
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b006      	add	sp, #24
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	48000400 	.word	0x48000400
 80033d8:	48000800 	.word	0x48000800
 80033dc:	48000c00 	.word	0x48000c00
 80033e0:	48001000 	.word	0x48001000
 80033e4:	40010400 	.word	0x40010400

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f000 fb76 	bl	8003ae8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2201      	movs	r2, #1
 8003402:	4013      	ands	r3, r2
 8003404:	d100      	bne.n	8003408 <HAL_RCC_OscConfig+0x20>
 8003406:	e08e      	b.n	8003526 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003408:	4bc5      	ldr	r3, [pc, #788]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	220c      	movs	r2, #12
 800340e:	4013      	ands	r3, r2
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00e      	beq.n	8003432 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003414:	4bc2      	ldr	r3, [pc, #776]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	220c      	movs	r2, #12
 800341a:	4013      	ands	r3, r2
 800341c:	2b08      	cmp	r3, #8
 800341e:	d117      	bne.n	8003450 <HAL_RCC_OscConfig+0x68>
 8003420:	4bbf      	ldr	r3, [pc, #764]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	23c0      	movs	r3, #192	; 0xc0
 8003426:	025b      	lsls	r3, r3, #9
 8003428:	401a      	ands	r2, r3
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	429a      	cmp	r2, r3
 8003430:	d10e      	bne.n	8003450 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003432:	4bbb      	ldr	r3, [pc, #748]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	029b      	lsls	r3, r3, #10
 800343a:	4013      	ands	r3, r2
 800343c:	d100      	bne.n	8003440 <HAL_RCC_OscConfig+0x58>
 800343e:	e071      	b.n	8003524 <HAL_RCC_OscConfig+0x13c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d000      	beq.n	800344a <HAL_RCC_OscConfig+0x62>
 8003448:	e06c      	b.n	8003524 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f000 fb4c 	bl	8003ae8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x80>
 8003458:	4bb1      	ldr	r3, [pc, #708]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4bb0      	ldr	r3, [pc, #704]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	0249      	lsls	r1, r1, #9
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e02f      	b.n	80034c8 <HAL_RCC_OscConfig+0xe0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0xa2>
 8003470:	4bab      	ldr	r3, [pc, #684]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4baa      	ldr	r3, [pc, #680]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003476:	49ab      	ldr	r1, [pc, #684]	; (8003724 <HAL_RCC_OscConfig+0x33c>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4ba8      	ldr	r3, [pc, #672]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4ba7      	ldr	r3, [pc, #668]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003482:	49a9      	ldr	r1, [pc, #676]	; (8003728 <HAL_RCC_OscConfig+0x340>)
 8003484:	400a      	ands	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e01e      	b.n	80034c8 <HAL_RCC_OscConfig+0xe0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d10e      	bne.n	80034b0 <HAL_RCC_OscConfig+0xc8>
 8003492:	4ba3      	ldr	r3, [pc, #652]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4ba2      	ldr	r3, [pc, #648]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	02c9      	lsls	r1, r1, #11
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	4b9f      	ldr	r3, [pc, #636]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b9e      	ldr	r3, [pc, #632]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	0249      	lsls	r1, r1, #9
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0xe0>
 80034b0:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b9a      	ldr	r3, [pc, #616]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034b6:	499b      	ldr	r1, [pc, #620]	; (8003724 <HAL_RCC_OscConfig+0x33c>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	4b98      	ldr	r3, [pc, #608]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b97      	ldr	r3, [pc, #604]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034c2:	4999      	ldr	r1, [pc, #612]	; (8003728 <HAL_RCC_OscConfig+0x340>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d014      	beq.n	80034fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fe00 	bl	80020d4 <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034da:	f7fe fdfb 	bl	80020d4 <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e2fd      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	4013      	ands	r3, r2
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0xf2>
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fdeb 	bl	80020d4 <HAL_GetTick>
 80034fe:	0003      	movs	r3, r0
 8003500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe fde6 	bl	80020d4 <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e2e8      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	029b      	lsls	r3, r3, #10
 800351e:	4013      	ands	r3, r2
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x11c>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	d100      	bne.n	8003532 <HAL_RCC_OscConfig+0x14a>
 8003530:	e06c      	b.n	800360c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	220c      	movs	r2, #12
 8003538:	4013      	ands	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800353c:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	220c      	movs	r2, #12
 8003542:	4013      	ands	r3, r2
 8003544:	2b08      	cmp	r3, #8
 8003546:	d11f      	bne.n	8003588 <HAL_RCC_OscConfig+0x1a0>
 8003548:	4b75      	ldr	r3, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	23c0      	movs	r3, #192	; 0xc0
 800354e:	025b      	lsls	r3, r3, #9
 8003550:	401a      	ands	r2, r3
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	429a      	cmp	r2, r3
 8003558:	d116      	bne.n	8003588 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	4b71      	ldr	r3, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d005      	beq.n	8003570 <HAL_RCC_OscConfig+0x188>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e2bb      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	22f8      	movs	r2, #248	; 0xf8
 8003576:	4393      	bics	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00da      	lsls	r2, r3, #3
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	e041      	b.n	800360c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d024      	beq.n	80035da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003596:	2101      	movs	r1, #1
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fd9a 	bl	80020d4 <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fe fd95 	bl	80020d4 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e297      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d0f1      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	22f8      	movs	r2, #248	; 0xf8
 80035c8:	4393      	bics	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00da      	lsls	r2, r3, #3
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e018      	b.n	800360c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	438a      	bics	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fe fd75 	bl	80020d4 <HAL_GetTick>
 80035ea:	0003      	movs	r3, r0
 80035ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe fd70 	bl	80020d4 <HAL_GetTick>
 80035f4:	0002      	movs	r2, r0
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e272      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2202      	movs	r2, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d1f1      	bne.n	80035f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	4013      	ands	r3, r2
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003622:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003624:	2101      	movs	r1, #1
 8003626:	430a      	orrs	r2, r1
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fe fd53 	bl	80020d4 <HAL_GetTick>
 800362e:	0003      	movs	r3, r0
 8003630:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003634:	f7fe fd4e 	bl	80020d4 <HAL_GetTick>
 8003638:	0002      	movs	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e250      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d0f1      	beq.n	8003634 <HAL_RCC_OscConfig+0x24c>
 8003650:	e018      	b.n	8003684 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003656:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003658:	2101      	movs	r1, #1
 800365a:	438a      	bics	r2, r1
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe fd39 	bl	80020d4 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe fd34 	bl	80020d4 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e236      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2202      	movs	r2, #2
 8003680:	4013      	ands	r3, r2
 8003682:	d1f1      	bne.n	8003668 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2204      	movs	r2, #4
 800368a:	4013      	ands	r3, r2
 800368c:	d100      	bne.n	8003690 <HAL_RCC_OscConfig+0x2a8>
 800368e:	e0b5      	b.n	80037fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003690:	201f      	movs	r0, #31
 8003692:	183b      	adds	r3, r7, r0
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	055b      	lsls	r3, r3, #21
 80036a0:	4013      	ands	r3, r2
 80036a2:	d110      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	0549      	lsls	r1, r1, #21
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	055b      	lsls	r3, r3, #21
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036c0:	183b      	adds	r3, r7, r0
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_OscConfig+0x344>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4013      	ands	r3, r2
 80036d0:	d11a      	bne.n	8003708 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b16      	ldr	r3, [pc, #88]	; (800372c <HAL_RCC_OscConfig+0x344>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_OscConfig+0x344>)
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	0049      	lsls	r1, r1, #1
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e0:	f7fe fcf8 	bl	80020d4 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fe fcf3 	bl	80020d4 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e1f5      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x344>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4013      	ands	r3, r2
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10f      	bne.n	8003730 <HAL_RCC_OscConfig+0x348>
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <HAL_RCC_OscConfig+0x338>)
 8003716:	2101      	movs	r1, #1
 8003718:	430a      	orrs	r2, r1
 800371a:	621a      	str	r2, [r3, #32]
 800371c:	e036      	b.n	800378c <HAL_RCC_OscConfig+0x3a4>
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	fffeffff 	.word	0xfffeffff
 8003728:	fffbffff 	.word	0xfffbffff
 800372c:	40007000 	.word	0x40007000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x36a>
 8003738:	4bca      	ldr	r3, [pc, #808]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	4bc9      	ldr	r3, [pc, #804]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800373e:	2101      	movs	r1, #1
 8003740:	438a      	bics	r2, r1
 8003742:	621a      	str	r2, [r3, #32]
 8003744:	4bc7      	ldr	r3, [pc, #796]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	4bc6      	ldr	r3, [pc, #792]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800374a:	2104      	movs	r1, #4
 800374c:	438a      	bics	r2, r1
 800374e:	621a      	str	r2, [r3, #32]
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x3a4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x38c>
 800375a:	4bc2      	ldr	r3, [pc, #776]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	4bc1      	ldr	r3, [pc, #772]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003760:	2104      	movs	r1, #4
 8003762:	430a      	orrs	r2, r1
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	4bbf      	ldr	r3, [pc, #764]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	4bbe      	ldr	r3, [pc, #760]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800376c:	2101      	movs	r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x3a4>
 8003774:	4bbb      	ldr	r3, [pc, #748]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	4bba      	ldr	r3, [pc, #744]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800377a:	2101      	movs	r1, #1
 800377c:	438a      	bics	r2, r1
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	4bb8      	ldr	r3, [pc, #736]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	4bb7      	ldr	r3, [pc, #732]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003786:	2104      	movs	r1, #4
 8003788:	438a      	bics	r2, r1
 800378a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d014      	beq.n	80037be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7fe fc9e 	bl	80020d4 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	e009      	b.n	80037b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe fc99 	bl	80020d4 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4aaf      	ldr	r2, [pc, #700]	; (8003a68 <HAL_RCC_OscConfig+0x680>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e19a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4bac      	ldr	r3, [pc, #688]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2202      	movs	r2, #2
 80037b8:	4013      	ands	r3, r2
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x3b6>
 80037bc:	e013      	b.n	80037e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe fc89 	bl	80020d4 <HAL_GetTick>
 80037c2:	0003      	movs	r3, r0
 80037c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e009      	b.n	80037dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe fc84 	bl	80020d4 <HAL_GetTick>
 80037cc:	0002      	movs	r2, r0
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	4aa5      	ldr	r2, [pc, #660]	; (8003a68 <HAL_RCC_OscConfig+0x680>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e185      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	4ba1      	ldr	r3, [pc, #644]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	4b9b      	ldr	r3, [pc, #620]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80037f6:	499d      	ldr	r1, [pc, #628]	; (8003a6c <HAL_RCC_OscConfig+0x684>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2210      	movs	r2, #16
 8003802:	4013      	ands	r3, r2
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d12a      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800380e:	4b95      	ldr	r3, [pc, #596]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003812:	4b94      	ldr	r3, [pc, #592]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003814:	2104      	movs	r1, #4
 8003816:	430a      	orrs	r2, r1
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800381a:	4b92      	ldr	r3, [pc, #584]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800381c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381e:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003820:	2101      	movs	r1, #1
 8003822:	430a      	orrs	r2, r1
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fc55 	bl	80020d4 <HAL_GetTick>
 800382a:	0003      	movs	r3, r0
 800382c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003830:	f7fe fc50 	bl	80020d4 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e152      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	2202      	movs	r2, #2
 8003848:	4013      	ands	r3, r2
 800384a:	d0f1      	beq.n	8003830 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800384c:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	22f8      	movs	r2, #248	; 0xf8
 8003852:	4393      	bics	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800385e:	430a      	orrs	r2, r1
 8003860:	635a      	str	r2, [r3, #52]	; 0x34
 8003862:	e034      	b.n	80038ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	3305      	adds	r3, #5
 800386a:	d111      	bne.n	8003890 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800386c:	4b7d      	ldr	r3, [pc, #500]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800386e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003870:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003872:	2104      	movs	r1, #4
 8003874:	438a      	bics	r2, r1
 8003876:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003878:	4b7a      	ldr	r3, [pc, #488]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	22f8      	movs	r2, #248	; 0xf8
 800387e:	4393      	bics	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	00da      	lsls	r2, r3, #3
 8003888:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800388a:	430a      	orrs	r2, r1
 800388c:	635a      	str	r2, [r3, #52]	; 0x34
 800388e:	e01e      	b.n	80038ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003890:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003894:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003896:	2104      	movs	r1, #4
 8003898:	430a      	orrs	r2, r1
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800389c:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800389e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80038a2:	2101      	movs	r1, #1
 80038a4:	438a      	bics	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a8:	f7fe fc14 	bl	80020d4 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038b2:	f7fe fc0f 	bl	80020d4 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e111      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038c4:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	2202      	movs	r2, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d1f1      	bne.n	80038b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	4013      	ands	r3, r2
 80038d6:	d05c      	beq.n	8003992 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038d8:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	220c      	movs	r2, #12
 80038de:	4013      	ands	r3, r2
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d00e      	beq.n	8003902 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038e4:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	220c      	movs	r2, #12
 80038ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d114      	bne.n	800391a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038f0:	4b5c      	ldr	r3, [pc, #368]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	23c0      	movs	r3, #192	; 0xc0
 80038f6:	025b      	lsls	r3, r3, #9
 80038f8:	401a      	ands	r2, r3
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	429a      	cmp	r2, r3
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003902:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	4013      	ands	r3, r2
 800390c:	d040      	beq.n	8003990 <HAL_RCC_OscConfig+0x5a8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d03c      	beq.n	8003990 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e6      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01b      	beq.n	800395a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003922:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003926:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	0249      	lsls	r1, r1, #9
 800392c:	430a      	orrs	r2, r1
 800392e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fbd0 	bl	80020d4 <HAL_GetTick>
 8003934:	0003      	movs	r3, r0
 8003936:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393a:	f7fe fbcb 	bl	80020d4 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0cd      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800394e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	025b      	lsls	r3, r3, #9
 8003954:	4013      	ands	r3, r2
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x552>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003960:	4943      	ldr	r1, [pc, #268]	; (8003a70 <HAL_RCC_OscConfig+0x688>)
 8003962:	400a      	ands	r2, r1
 8003964:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fe fbb5 	bl	80020d4 <HAL_GetTick>
 800396a:	0003      	movs	r3, r0
 800396c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003970:	f7fe fbb0 	bl	80020d4 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0b2      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	025b      	lsls	r3, r3, #9
 800398a:	4013      	ands	r3, r2
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x588>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003990:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d100      	bne.n	800399c <HAL_RCC_OscConfig+0x5b4>
 800399a:	e0a4      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	220c      	movs	r2, #12
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d100      	bne.n	80039aa <HAL_RCC_OscConfig+0x5c2>
 80039a8:	e078      	b.n	8003a9c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d14c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039b8:	492e      	ldr	r1, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x68c>)
 80039ba:	400a      	ands	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe fb89 	bl	80020d4 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe fb84 	bl	80020d4 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e086      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	049b      	lsls	r3, r3, #18
 80039e2:	4013      	ands	r3, r2
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e6:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	220f      	movs	r2, #15
 80039ec:	4393      	bics	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_RCC_OscConfig+0x690>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	0449      	lsls	r1, r1, #17
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fe fb57 	bl	80020d4 <HAL_GetTick>
 8003a26:	0003      	movs	r3, r0
 8003a28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fe fb52 	bl	80020d4 <HAL_GetTick>
 8003a30:	0002      	movs	r2, r0
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e054      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	049b      	lsls	r3, r3, #18
 8003a46:	4013      	ands	r3, r2
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x644>
 8003a4a:	e04c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCC_OscConfig+0x67c>)
 8003a52:	4908      	ldr	r1, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x68c>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fb3c 	bl	80020d4 <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x6a6>
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	40021000 	.word	0x40021000
 8003a68:	00001388 	.word	0x00001388
 8003a6c:	efffffff 	.word	0xefffffff
 8003a70:	fffeffff 	.word	0xfffeffff
 8003a74:	feffffff 	.word	0xfeffffff
 8003a78:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fe fb2a 	bl	80020d4 <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e02c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <HAL_RCC_OscConfig+0x708>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	049b      	lsls	r3, r3, #18
 8003a96:	4013      	ands	r3, r2
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x694>
 8003a9a:	e024      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e01f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x708>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x708>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	23c0      	movs	r3, #192	; 0xc0
 8003ab8:	025b      	lsls	r3, r3, #9
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d10e      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	401a      	ands	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	23f0      	movs	r3, #240	; 0xf0
 8003ad6:	039b      	lsls	r3, r3, #14
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b008      	add	sp, #32
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0bf      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d911      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b28:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4013      	ands	r3, r2
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0a6      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	4013      	ands	r3, r2
 8003b42:	d015      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b54:	21e0      	movs	r1, #224	; 0xe0
 8003b56:	00c9      	lsls	r1, r1, #3
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	22f0      	movs	r2, #240	; 0xf0
 8003b62:	4393      	bics	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d04c      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	029b      	lsls	r3, r3, #10
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d120      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e07a      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	049b      	lsls	r3, r3, #18
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d114      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06e      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	025b      	lsls	r3, r3, #9
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e062      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e05b      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd0:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fe fa76 	bl	80020d4 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bec:	e009      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bee:	f7fe fa71 	bl	80020d4 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x1a4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e042      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	220c      	movs	r2, #12
 8003c08:	401a      	ands	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1ec      	bne.n	8003bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d211      	bcs.n	8003c46 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	4393      	bics	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_RCC_ClockConfig+0x19c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e020      	b.n	8003c88 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <HAL_RCC_ClockConfig+0x1a8>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c64:	f000 f820 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c68:	0001      	movs	r1, r0
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x1a0>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	220f      	movs	r2, #15
 8003c72:	4013      	ands	r3, r2
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ac>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	000a      	movs	r2, r1
 8003c7a:	40da      	lsrs	r2, r3
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7fe f9e1 	bl	8002048 <HAL_InitTick>
  
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b004      	add	sp, #16
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40021000 	.word	0x40021000
 8003c98:	00001388 	.word	0x00001388
 8003c9c:	fffff8ff 	.word	0xfffff8ff
 8003ca0:	08003f1c 	.word	0x08003f1c
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b08f      	sub	sp, #60	; 0x3c
 8003cac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003cae:	2314      	movs	r3, #20
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xec>)
 8003cb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003cb6:	c313      	stmia	r3!, {r0, r1, r4}
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003cc2:	c313      	stmia	r3!, {r0, r1, r4}
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	220c      	movs	r2, #12
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d047      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0xd4>
 8003cec:	d849      	bhi.n	8003d82 <HAL_RCC_GetSysClockFreq+0xda>
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x50>
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x56>
 8003cf6:	e044      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cfc:	e044      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	220f      	movs	r2, #15
 8003d04:	4013      	ands	r3, r2
 8003d06:	2214      	movs	r2, #20
 8003d08:	18ba      	adds	r2, r7, r2
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d0e:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	220f      	movs	r2, #15
 8003d14:	4013      	ands	r3, r2
 8003d16:	1d3a      	adds	r2, r7, #4
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	23c0      	movs	r3, #192	; 0xc0
 8003d20:	025b      	lsls	r3, r3, #9
 8003d22:	401a      	ands	r2, r3
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	025b      	lsls	r3, r3, #9
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d2e:	481c      	ldr	r0, [pc, #112]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d30:	f7fc f9ea 	bl	8000108 <__udivsi3>
 8003d34:	0003      	movs	r3, r0
 8003d36:	001a      	movs	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	4353      	muls	r3, r2
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	e01a      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	23c0      	movs	r3, #192	; 0xc0
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	401a      	ands	r2, r3
 8003d48:	23c0      	movs	r3, #192	; 0xc0
 8003d4a:	025b      	lsls	r3, r3, #9
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d52:	4814      	ldr	r0, [pc, #80]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d54:	f7fc f9d8 	bl	8000108 <__udivsi3>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	4353      	muls	r3, r2
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d66:	480e      	ldr	r0, [pc, #56]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d68:	f7fc f9ce 	bl	8000108 <__udivsi3>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	001a      	movs	r2, r3
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	4353      	muls	r3, r2
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d7a:	e005      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d80:	e002      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b00f      	add	sp, #60	; 0x3c
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	08003efc 	.word	0x08003efc
 8003d98:	08003f0c 	.word	0x08003f0c
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	007a1200 	.word	0x007a1200
 8003da4:	02dc6c00 	.word	0x02dc6c00

08003da8 <__cxa_pure_virtual>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	f000 f805 	bl	8003db8 <_ZSt9terminatev>

08003dae <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4780      	blx	r0
 8003db2:	f000 f809 	bl	8003dc8 <abort>
	...

08003db8 <_ZSt9terminatev>:
 8003db8:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <_ZSt9terminatev+0xc>)
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	f7ff fff6 	bl	8003dae <_ZN10__cxxabiv111__terminateEPFvvE>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <abort>:
 8003dc8:	2006      	movs	r0, #6
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	f000 f86a 	bl	8003ea4 <raise>
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fc fe68 	bl	8000aa6 <_exit>
	...

08003dd8 <__errno>:
 8003dd8:	4b01      	ldr	r3, [pc, #4]	; (8003de0 <__errno+0x8>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	4770      	bx	lr
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000010 	.word	0x20000010

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2600      	movs	r6, #0
 8003de8:	4d0c      	ldr	r5, [pc, #48]	; (8003e1c <__libc_init_array+0x38>)
 8003dea:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	2600      	movs	r6, #0
 8003df6:	f000 f875 	bl	8003ee4 <_init>
 8003dfa:	4d0a      	ldr	r5, [pc, #40]	; (8003e24 <__libc_init_array+0x40>)
 8003dfc:	4c0a      	ldr	r4, [pc, #40]	; (8003e28 <__libc_init_array+0x44>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	00b3      	lsls	r3, r6, #2
 8003e0a:	58eb      	ldr	r3, [r5, r3]
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	00b3      	lsls	r3, r6, #2
 8003e14:	58eb      	ldr	r3, [r5, r3]
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003f98 	.word	0x08003f98
 8003e20:	08003f98 	.word	0x08003f98
 8003e24:	08003f98 	.word	0x08003f98
 8003e28:	08003fa4 	.word	0x08003fa4

08003e2c <memcpy>:
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d100      	bne.n	8003e36 <memcpy+0xa>
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	5ccc      	ldrb	r4, [r1, r3]
 8003e38:	54c4      	strb	r4, [r0, r3]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	e7f8      	b.n	8003e30 <memcpy+0x4>

08003e3e <memset>:
 8003e3e:	0003      	movs	r3, r0
 8003e40:	1882      	adds	r2, r0, r2
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d100      	bne.n	8003e48 <memset+0xa>
 8003e46:	4770      	bx	lr
 8003e48:	7019      	strb	r1, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	e7f9      	b.n	8003e42 <memset+0x4>

08003e4e <_raise_r>:
 8003e4e:	b570      	push	{r4, r5, r6, lr}
 8003e50:	0004      	movs	r4, r0
 8003e52:	000d      	movs	r5, r1
 8003e54:	291f      	cmp	r1, #31
 8003e56:	d904      	bls.n	8003e62 <_raise_r+0x14>
 8003e58:	2316      	movs	r3, #22
 8003e5a:	6003      	str	r3, [r0, #0]
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	4240      	negs	r0, r0
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <_raise_r+0x24>
 8003e68:	008a      	lsls	r2, r1, #2
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	d108      	bne.n	8003e84 <_raise_r+0x36>
 8003e72:	0020      	movs	r0, r4
 8003e74:	f000 f832 	bl	8003edc <_getpid_r>
 8003e78:	002a      	movs	r2, r5
 8003e7a:	0001      	movs	r1, r0
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f000 f81b 	bl	8003eb8 <_kill_r>
 8003e82:	e7ed      	b.n	8003e60 <_raise_r+0x12>
 8003e84:	2000      	movs	r0, #0
 8003e86:	2a01      	cmp	r2, #1
 8003e88:	d0ea      	beq.n	8003e60 <_raise_r+0x12>
 8003e8a:	1c51      	adds	r1, r2, #1
 8003e8c:	d103      	bne.n	8003e96 <_raise_r+0x48>
 8003e8e:	2316      	movs	r3, #22
 8003e90:	3001      	adds	r0, #1
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	e7e4      	b.n	8003e60 <_raise_r+0x12>
 8003e96:	2400      	movs	r4, #0
 8003e98:	0028      	movs	r0, r5
 8003e9a:	601c      	str	r4, [r3, #0]
 8003e9c:	4790      	blx	r2
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	e7de      	b.n	8003e60 <_raise_r+0x12>
	...

08003ea4 <raise>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <raise+0x10>)
 8003ea8:	0001      	movs	r1, r0
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	f7ff ffcf 	bl	8003e4e <_raise_r>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	20000010 	.word	0x20000010

08003eb8 <_kill_r>:
 8003eb8:	2300      	movs	r3, #0
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	4d06      	ldr	r5, [pc, #24]	; (8003ed8 <_kill_r+0x20>)
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	0008      	movs	r0, r1
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	f7fc fdde 	bl	8000a86 <_kill>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	d103      	bne.n	8003ed6 <_kill_r+0x1e>
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d000      	beq.n	8003ed6 <_kill_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	200002f8 	.word	0x200002f8

08003edc <_getpid_r>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f7fc fdcc 	bl	8000a7a <_getpid>
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
