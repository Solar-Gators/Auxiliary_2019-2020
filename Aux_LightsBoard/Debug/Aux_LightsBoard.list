
Aux_LightsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003840  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003930  08003930  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003930  08003930  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08003944  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003944  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aadd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001777  00000000  00000000  0002ab11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002c288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a102  00000000  00000000  0002d840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009158  00000000  00000000  00047942  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095486  00000000  00000000  00050a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000e5f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038e8 	.word	0x080038e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080038e8 	.word	0x080038e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:
void CAN_init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc2) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	adc_flag = 0x01;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_ADC_ConvCpltCallback+0x24>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
	value_adc = HAL_ADC_GetValue(&hadc);
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <HAL_ADC_ConvCpltCallback+0x28>)
 8000230:	0018      	movs	r0, r3
 8000232:	f000 ff81 	bl	8001138 <HAL_ADC_GetValue>
 8000236:	0002      	movs	r2, r0
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <HAL_ADC_ConvCpltCallback+0x2c>)
 800023a:	601a      	str	r2, [r3, #0]

}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000188 	.word	0x20000188
 8000248:	200000e0 	.word	0x200000e0
 800024c:	2000018c 	.word	0x2000018c

08000250 <_Z8CAN_initv>:
//
//	__NOP();
//
//}

void CAN_init(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	// configure the outgoing message
	pHeader.DLC = 1;
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <_Z8CAN_initv+0x70>)
 8000256:	2201      	movs	r2, #1
 8000258:	611a      	str	r2, [r3, #16]
	  pHeader.IDE = CAN_ID_STD;
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <_Z8CAN_initv+0x70>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
	  pHeader.RTR = CAN_RTR_DATA;
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <_Z8CAN_initv+0x70>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]

	// this is the Aux team's CAN ID
	  pHeader.StdId = 0x3FF;
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <_Z8CAN_initv+0x70>)
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <_Z8CAN_initv+0x74>)
 800026a:	601a      	str	r2, [r3, #0]
//	  pRxHeader.DLC = 1;
//	  	  pRxHeader.IDE = CAN_ID_STD;
//	  	  pRxHeader.RTR = CAN_RTR_DATA;
//	  	pRxHeader.StdId = 0x3FF;

	  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800026c:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <_Z8CAN_initv+0x78>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]

	  // The CAN filter is set to only receive from CAN messages of identifier 0x3FF, or 1023.
	  // This is the auxiliary CAN identifier for Sunbreaker.
	  sFilterConfig.FilterIdHigh=0;
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <_Z8CAN_initv+0x78>)
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0x3FF;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <_Z8CAN_initv+0x78>)
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <_Z8CAN_initv+0x74>)
 800027c:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0x0;
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <_Z8CAN_initv+0x78>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0x0;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <_Z8CAN_initv+0x78>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <_Z8CAN_initv+0x78>)
 800028c:	2201      	movs	r2, #1
 800028e:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <_Z8CAN_initv+0x78>)
 8000292:	2200      	movs	r2, #0
 8000294:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterActivation=ENABLE;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <_Z8CAN_initv+0x78>)
 8000298:	2201      	movs	r2, #1
 800029a:	621a      	str	r2, [r3, #32]
	  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <_Z8CAN_initv+0x78>)
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <_Z8CAN_initv+0x7c>)
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 faa4 	bl	80017f0 <HAL_CAN_ConfigFilter>

	  HAL_CAN_Start(&hcan);
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <_Z8CAN_initv+0x7c>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fb92 	bl	80019d4 <HAL_CAN_Start>
	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <_Z8CAN_initv+0x7c>)
 80002b2:	2102      	movs	r1, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fcef 	bl	8001c98 <HAL_CAN_ActivateNotification>
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000120 	.word	0x20000120
 80002c4:	000003ff 	.word	0x000003ff
 80002c8:	20000158 	.word	0x20000158
 80002cc:	20000028 	.word	0x20000028

080002d0 <HAL_TIM_PeriodElapsedCallback>:
//            user file
//   */
//}

//For timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002dc:	429a      	cmp	r2, r3
 80002de:	d12a      	bne.n	8000336 <HAL_TIM_PeriodElapsedCallback+0x66>

		// turn signal timer, timer 2
		if (hazardsOn) {
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00e      	beq.n	8000306 <HAL_TIM_PeriodElapsedCallback+0x36>

			// hazards
			HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	4a18      	ldr	r2, [pc, #96]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ee:	0019      	movs	r1, r3
 80002f0:	0010      	movs	r0, r2
 80002f2:	f002 f988 	bl	8002606 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002fc:	0019      	movs	r1, r3
 80002fe:	0010      	movs	r0, r2
 8000300:	f002 f981 	bl	8002606 <HAL_GPIO_TogglePin>

		HAL_ADC_Start_IT(&hadc);

	}

}
 8000304:	e01b      	b.n	800033e <HAL_TIM_PeriodElapsedCallback+0x6e>
		} else if (leftOn) {
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d007      	beq.n	800031e <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000314:	0019      	movs	r1, r3
 8000316:	0010      	movs	r0, r2
 8000318:	f002 f975 	bl	8002606 <HAL_GPIO_TogglePin>
}
 800031c:	e00f      	b.n	800033e <HAL_TIM_PeriodElapsedCallback+0x6e>
		} else if (rightOn) {
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d00b      	beq.n	800033e <HAL_TIM_PeriodElapsedCallback+0x6e>
			HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800032c:	0019      	movs	r1, r3
 800032e:	0010      	movs	r0, r2
 8000330:	f002 f969 	bl	8002606 <HAL_GPIO_TogglePin>
}
 8000334:	e003      	b.n	800033e <HAL_TIM_PeriodElapsedCallback+0x6e>
		HAL_ADC_Start_IT(&hadc);
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fe8b 	bl	8001054 <HAL_ADC_Start_IT>
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	20000050 	.word	0x20000050
 800034c:	20000181 	.word	0x20000181
 8000350:	48000800 	.word	0x48000800
 8000354:	20000183 	.word	0x20000183
 8000358:	20000184 	.word	0x20000184
 800035c:	200000e0 	.word	0x200000e0

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fcd2 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f910 	bl	800058c <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  CAN_init();
 800036c:	f7ff ff70 	bl	8000250 <_Z8CAN_initv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 fac4 	bl	80008fc <_ZL12MX_GPIO_Initv>
	//MX_DMA_Init();
	MX_CAN_Init();
 8000374:	f000 f9c2 	bl	80006fc <_ZL11MX_CAN_Initv>
	MX_TIM2_Init();
 8000378:	f000 f9fc 	bl	8000774 <_ZL12MX_TIM2_Initv>
	MX_ADC_Init();
 800037c:	f000 f94a 	bl	8000614 <_ZL11MX_ADC_Initv>
	MX_TIM3_Init();
 8000380:	f000 fa5a 	bl	8000838 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */


  // clear all outputs at startup
  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	4871      	ldr	r0, [pc, #452]	; (8000550 <main+0x1f0>)
 800038a:	2200      	movs	r2, #0
 800038c:	0019      	movs	r1, r3
 800038e:	f002 f91d 	bl	80025cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	486e      	ldr	r0, [pc, #440]	; (8000550 <main+0x1f0>)
 8000398:	2200      	movs	r2, #0
 800039a:	0019      	movs	r1, r3
 800039c:	f002 f916 	bl	80025cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 80003a0:	4b6c      	ldr	r3, [pc, #432]	; (8000554 <main+0x1f4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	0018      	movs	r0, r3
 80003a8:	f002 f910 	bl	80025cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Brake_out_GPIO_Port, Brake_out_Pin, GPIO_PIN_RESET);
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	01db      	lsls	r3, r3, #7
 80003b0:	4868      	ldr	r0, [pc, #416]	; (8000554 <main+0x1f4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	0019      	movs	r1, r3
 80003b6:	f002 f909 	bl	80025cc <HAL_GPIO_WritePin>

  // start timer 3
  HAL_TIM_Base_Start_IT(&htim3);
 80003ba:	4b67      	ldr	r3, [pc, #412]	; (8000558 <main+0x1f8>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f002 fe6b 	bl	8003098 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // trigger ADC
	  if (adc_flag) {
 80003c2:	4b66      	ldr	r3, [pc, #408]	; (800055c <main+0x1fc>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d002      	beq.n	80003d0 <main+0x70>

		  adc_flag = 0x00;
 80003ca:	4b64      	ldr	r3, [pc, #400]	; (800055c <main+0x1fc>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
	  //raw = HAL_ADC_GetValue(&hadc);
	  // polling
	  // while (!HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0));

	  // read the ADC value from brake sensor
	  if (value_adc > 40) {
 80003d0:	4b63      	ldr	r3, [pc, #396]	; (8000560 <main+0x200>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b28      	cmp	r3, #40	; 0x28
 80003d6:	d90a      	bls.n	80003ee <main+0x8e>

		  mechBrakesOn = 0x01;
 80003d8:	4b62      	ldr	r3, [pc, #392]	; (8000564 <main+0x204>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(Brake_out_GPIO_Port, Brake_out_Pin, GPIO_PIN_SET);
 80003de:	2380      	movs	r3, #128	; 0x80
 80003e0:	01db      	lsls	r3, r3, #7
 80003e2:	485c      	ldr	r0, [pc, #368]	; (8000554 <main+0x1f4>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	f002 f8f0 	bl	80025cc <HAL_GPIO_WritePin>
 80003ec:	e002      	b.n	80003f4 <main+0x94>


	  } else {

		  mechBrakesOn = 0x00;
 80003ee:	4b5d      	ldr	r3, [pc, #372]	; (8000564 <main+0x204>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]

	  }

	  if (canFlag) {
 80003f4:	4b5c      	ldr	r3, [pc, #368]	; (8000568 <main+0x208>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d100      	bne.n	80003fe <main+0x9e>
 80003fc:	e096      	b.n	800052c <main+0x1cc>

		  // clear the flag
		  canFlag = 0x00;
 80003fe:	4b5a      	ldr	r3, [pc, #360]	; (8000568 <main+0x208>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]

		  // update variables
		  hazardsOn = inData & hazardsBm;
 8000404:	4b59      	ldr	r3, [pc, #356]	; (800056c <main+0x20c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2201      	movs	r2, #1
 800040a:	4013      	ands	r3, r2
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b58      	ldr	r3, [pc, #352]	; (8000570 <main+0x210>)
 8000410:	701a      	strb	r2, [r3, #0]
		  headlightsOn = inData & headlightsBm;
 8000412:	4b56      	ldr	r3, [pc, #344]	; (800056c <main+0x20c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2202      	movs	r2, #2
 8000418:	4013      	ands	r3, r2
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b55      	ldr	r3, [pc, #340]	; (8000574 <main+0x214>)
 800041e:	701a      	strb	r2, [r3, #0]
		  leftOn = inData & leftBm;
 8000420:	4b52      	ldr	r3, [pc, #328]	; (800056c <main+0x20c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2204      	movs	r2, #4
 8000426:	4013      	ands	r3, r2
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b53      	ldr	r3, [pc, #332]	; (8000578 <main+0x218>)
 800042c:	701a      	strb	r2, [r3, #0]
		  rightOn = inData & rightBm;
 800042e:	4b4f      	ldr	r3, [pc, #316]	; (800056c <main+0x20c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2208      	movs	r2, #8
 8000434:	4013      	ands	r3, r2
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b50      	ldr	r3, [pc, #320]	; (800057c <main+0x21c>)
 800043a:	701a      	strb	r2, [r3, #0]
		  regenOn = inData & regenBm;
 800043c:	4b4b      	ldr	r3, [pc, #300]	; (800056c <main+0x20c>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	227f      	movs	r2, #127	; 0x7f
 8000442:	4393      	bics	r3, r2
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b4e      	ldr	r3, [pc, #312]	; (8000580 <main+0x220>)
 8000448:	701a      	strb	r2, [r3, #0]

		  // turn on the brake lights if regen braking is enabled
		  if (regenOn) {
 800044a:	4b4d      	ldr	r3, [pc, #308]	; (8000580 <main+0x220>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d006      	beq.n	8000460 <main+0x100>

			  HAL_GPIO_WritePin(Brake_out_GPIO_Port, Brake_out_Pin, GPIO_PIN_SET);
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	01db      	lsls	r3, r3, #7
 8000456:	483f      	ldr	r0, [pc, #252]	; (8000554 <main+0x1f4>)
 8000458:	2201      	movs	r2, #1
 800045a:	0019      	movs	r1, r3
 800045c:	f002 f8b6 	bl	80025cc <HAL_GPIO_WritePin>

		  }

		  if (hazardsOn) {
 8000460:	4b43      	ldr	r3, [pc, #268]	; (8000570 <main+0x210>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d019      	beq.n	800049c <main+0x13c>

			  // check to see if the timer is running
			  if (!timerRunning) {
 8000468:	4b46      	ldr	r3, [pc, #280]	; (8000584 <main+0x224>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d14c      	bne.n	800050a <main+0x1aa>

				  // clear turn signals
				  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	011b      	lsls	r3, r3, #4
 8000474:	4836      	ldr	r0, [pc, #216]	; (8000550 <main+0x1f0>)
 8000476:	2200      	movs	r2, #0
 8000478:	0019      	movs	r1, r3
 800047a:	f002 f8a7 	bl	80025cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 800047e:	2380      	movs	r3, #128	; 0x80
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	4833      	ldr	r0, [pc, #204]	; (8000550 <main+0x1f0>)
 8000484:	2200      	movs	r2, #0
 8000486:	0019      	movs	r1, r3
 8000488:	f002 f8a0 	bl	80025cc <HAL_GPIO_WritePin>

				  timerRunning = 0x01;
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <main+0x224>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
				  // start the timer
				  HAL_TIM_Base_Start_IT(&htim2);
 8000492:	4b3d      	ldr	r3, [pc, #244]	; (8000588 <main+0x228>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 fdff 	bl	8003098 <HAL_TIM_Base_Start_IT>
 800049a:	e036      	b.n	800050a <main+0x1aa>

			  }

		  } else if (leftOn | rightOn) {
 800049c:	4b36      	ldr	r3, [pc, #216]	; (8000578 <main+0x218>)
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	4b36      	ldr	r3, [pc, #216]	; (800057c <main+0x21c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d019      	beq.n	80004e0 <main+0x180>

			  if (!timerRunning) {
 80004ac:	4b35      	ldr	r3, [pc, #212]	; (8000584 <main+0x224>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d12a      	bne.n	800050a <main+0x1aa>

				  // clear turn signals
				  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	4825      	ldr	r0, [pc, #148]	; (8000550 <main+0x1f0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	0019      	movs	r1, r3
 80004be:	f002 f885 	bl	80025cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	4822      	ldr	r0, [pc, #136]	; (8000550 <main+0x1f0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 f87e 	bl	80025cc <HAL_GPIO_WritePin>

				  timerRunning = 0x01;
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <main+0x224>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
				  // start the timer
				  HAL_TIM_Base_Start_IT(&htim2);
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <main+0x228>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 fddd 	bl	8003098 <HAL_TIM_Base_Start_IT>
 80004de:	e014      	b.n	800050a <main+0x1aa>
			  }

		  } else {

			  // stop the timer
			  HAL_TIM_Base_Stop_IT(&htim2);
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <main+0x228>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fe2a 	bl	800313c <HAL_TIM_Base_Stop_IT>
			  timerRunning = 0x00;
 80004e8:	4b26      	ldr	r3, [pc, #152]	; (8000584 <main+0x224>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]

			  // clear turn signals
			  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	4817      	ldr	r0, [pc, #92]	; (8000550 <main+0x1f0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	0019      	movs	r1, r3
 80004f8:	f002 f868 	bl	80025cc <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <main+0x1f0>)
 8000502:	2200      	movs	r2, #0
 8000504:	0019      	movs	r1, r3
 8000506:	f002 f861 	bl	80025cc <HAL_GPIO_WritePin>

		  }

		  // update headlights
		  if (headlightsOn) {
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <main+0x214>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <main+0x1c0>

			  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x1f4>)
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	0018      	movs	r0, r3
 800051a:	f002 f857 	bl	80025cc <HAL_GPIO_WritePin>
 800051e:	e005      	b.n	800052c <main+0x1cc>

		  } else {

			  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <main+0x1f4>)
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	0018      	movs	r0, r3
 8000528:	f002 f850 	bl	80025cc <HAL_GPIO_WritePin>
		  }

	  }

	  // check to see if brakes are released
	  if (!mechBrakesOn && !regenOn) {
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <main+0x204>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d000      	beq.n	8000536 <main+0x1d6>
 8000534:	e745      	b.n	80003c2 <main+0x62>
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x220>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d000      	beq.n	8000540 <main+0x1e0>
 800053e:	e740      	b.n	80003c2 <main+0x62>

		  HAL_GPIO_WritePin(Brake_out_GPIO_Port, Brake_out_Pin, GPIO_PIN_RESET);
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x1f4>)
 8000546:	2200      	movs	r2, #0
 8000548:	0019      	movs	r1, r3
 800054a:	f002 f83f 	bl	80025cc <HAL_GPIO_WritePin>
	  if (adc_flag) {
 800054e:	e738      	b.n	80003c2 <main+0x62>
 8000550:	48000800 	.word	0x48000800
 8000554:	48000400 	.word	0x48000400
 8000558:	20000098 	.word	0x20000098
 800055c:	20000188 	.word	0x20000188
 8000560:	2000018c 	.word	0x2000018c
 8000564:	20000186 	.word	0x20000186
 8000568:	20000180 	.word	0x20000180
 800056c:	20000154 	.word	0x20000154
 8000570:	20000181 	.word	0x20000181
 8000574:	20000182 	.word	0x20000182
 8000578:	20000183 	.word	0x20000183
 800057c:	20000184 	.word	0x20000184
 8000580:	20000187 	.word	0x20000187
 8000584:	20000185 	.word	0x20000185
 8000588:	20000050 	.word	0x20000050

0800058c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b093      	sub	sp, #76	; 0x4c
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	2414      	movs	r4, #20
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2334      	movs	r3, #52	; 0x34
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 f99b 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2310      	movs	r3, #16
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 f994 	bl	80038d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2220      	movs	r2, #32
 80005b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2201      	movs	r2, #1
 80005ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 f839 	bl	800263c <HAL_RCC_OscConfig>
 80005ca:	0003      	movs	r3, r0
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	4193      	sbcs	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 80005d6:	f000 fa07 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2203      	movs	r2, #3
 80005e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2101      	movs	r1, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fba6 	bl	8002d48 <HAL_RCC_ClockConfig>
 80005fc:	0003      	movs	r3, r0
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4193      	sbcs	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000608:	f000 f9ee 	bl	80009e8 <Error_Handler>
  }
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b013      	add	sp, #76	; 0x4c
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	0018      	movs	r0, r3
 800061e:	230c      	movs	r3, #12
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f003 f958 	bl	80038d8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000628:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <_ZL11MX_ADC_Initv+0xe4>)
 800062c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0612      	lsls	r2, r2, #24
 8000634:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_6B;
 8000636:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000638:	2218      	movs	r2, #24
 800063a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000644:	2201      	movs	r2, #1
 8000646:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 800064a:	2204      	movs	r2, #4
 800064c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000668:	22c2      	movs	r2, #194	; 0xc2
 800066a:	32ff      	adds	r2, #255	; 0xff
 800066c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000676:	2224      	movs	r2, #36	; 0x24
 8000678:	2100      	movs	r1, #0
 800067a:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 800067e:	2201      	movs	r2, #1
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fba5 	bl	8000dd4 <HAL_ADC_Init>
 800068a:	0003      	movs	r3, r0
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	4193      	sbcs	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_ZL11MX_ADC_Initv+0x86>
  {
    Error_Handler();
 8000696:	f000 f9a7 	bl	80009e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0152      	lsls	r2, r2, #5
 80006a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2206      	movs	r2, #6
 80006ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fe13 	bl	80012e0 <HAL_ADC_ConfigChannel>
 80006ba:	0003      	movs	r3, r0
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	4193      	sbcs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 80006c6:	f000 f98f 	bl	80009e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2211      	movs	r2, #17
 80006ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d0:	1d3a      	adds	r2, r7, #4
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <_ZL11MX_ADC_Initv+0xe0>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fe02 	bl	80012e0 <HAL_ADC_ConfigChannel>
 80006dc:	0003      	movs	r3, r0
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	4193      	sbcs	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <_ZL11MX_ADC_Initv+0xd8>
  {
    Error_Handler();
 80006e8:	f000 f97e 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000e0 	.word	0x200000e0
 80006f8:	40012400 	.word	0x40012400

080006fc <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000702:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <_ZL11MX_CAN_Initv+0x74>)
 8000704:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000708:	2206      	movs	r2, #6
 800070a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 800071a:	22c0      	movs	r2, #192	; 0xc0
 800071c:	0312      	lsls	r2, r2, #12
 800071e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0352      	lsls	r2, r2, #13
 8000726:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000730:	2200      	movs	r2, #0
 8000732:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000736:	2201      	movs	r2, #1
 8000738:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 800073c:	2200      	movs	r2, #0
 800073e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000742:	2200      	movs	r2, #0
 8000744:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 8000748:	2200      	movs	r2, #0
 800074a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <_ZL11MX_CAN_Initv+0x70>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 ff50 	bl	80015f4 <HAL_CAN_Init>
 8000754:	0003      	movs	r3, r0
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	4193      	sbcs	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8000760:	f000 f942 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000028 	.word	0x20000028
 8000770:	40006400 	.word	0x40006400

08000774 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	2308      	movs	r3, #8
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	0018      	movs	r0, r3
 8000780:	2310      	movs	r3, #16
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f003 f8a7 	bl	80038d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	003b      	movs	r3, r7
 800078c:	0018      	movs	r0, r3
 800078e:	2308      	movs	r3, #8
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f003 f8a0 	bl	80038d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	05d2      	lsls	r2, r2, #23
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	00d2      	lsls	r2, r2, #3
 80007a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 26000;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <_ZL12MX_TIM2_Initv+0xc0>)
 80007b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fc18 	bl	8002ff8 <HAL_TIM_Base_Init>
 80007c8:	0003      	movs	r3, r0
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	4193      	sbcs	r3, r2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80007d4:	f000 f908 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d8:	2108      	movs	r1, #8
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0152      	lsls	r2, r2, #5
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fdeb 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 80007ee:	0003      	movs	r3, r0
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	4193      	sbcs	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80007fa:	f000 f8f5 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080a:	003a      	movs	r2, r7
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_ZL12MX_TIM2_Initv+0xbc>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f002 ffcf 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	0003      	movs	r3, r0
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4193      	sbcs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000822:	f000 f8e1 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b006      	add	sp, #24
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000050 	.word	0x20000050
 8000834:	00006590 	.word	0x00006590

08000838 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	2308      	movs	r3, #8
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2310      	movs	r3, #16
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 f845 	bl	80038d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	003b      	movs	r3, r7
 8000850:	0018      	movs	r0, r3
 8000852:	2308      	movs	r3, #8
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 f83e 	bl	80038d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <_ZL12MX_TIM3_Initv+0xbc>)
 8000860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000864:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <_ZL12MX_TIM3_Initv+0xc0>)
 8000866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000870:	2264      	movs	r2, #100	; 0x64
 8000872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000882:	0018      	movs	r0, r3
 8000884:	f002 fbb8 	bl	8002ff8 <HAL_TIM_Base_Init>
 8000888:	0003      	movs	r3, r0
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	4193      	sbcs	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000894:	f000 f8a8 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	2108      	movs	r1, #8
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0152      	lsls	r2, r2, #5
 80008a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 fd8b 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 80008ae:	0003      	movs	r3, r0
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	4193      	sbcs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80008ba:	f000 f895 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ca:	003a      	movs	r2, r7
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_ZL12MX_TIM3_Initv+0xb8>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 ff6f 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	0003      	movs	r3, r0
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	4193      	sbcs	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80008e2:	f000 f881 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b006      	add	sp, #24
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	20000098 	.word	0x20000098
 80008f4:	40000400 	.word	0x40000400
 80008f8:	0000bb80 	.word	0x0000bb80

080008fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	240c      	movs	r4, #12
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2314      	movs	r3, #20
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f002 ffe3 	bl	80038d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0289      	lsls	r1, r1, #10
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	029b      	lsls	r3, r3, #10
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	02c9      	lsls	r1, r1, #11
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	02db      	lsls	r3, r3, #11
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0309      	lsls	r1, r1, #12
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <_ZL12MX_GPIO_Initv+0xdc>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	031b      	lsls	r3, r3, #12
 8000960:	4013      	ands	r3, r2
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Brake_out_Pin|Headlights_out_Pin, GPIO_PIN_RESET);
 8000966:	491d      	ldr	r1, [pc, #116]	; (80009dc <_ZL12MX_GPIO_Initv+0xe0>)
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <_ZL12MX_GPIO_Initv+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fe2d 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LT_out_Pin|RT_out_Pin, GPIO_PIN_RESET);
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <_ZL12MX_GPIO_Initv+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	0019      	movs	r1, r3
 800097c:	f001 fe26 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Brake_out_Pin Headlights_out_Pin */
  GPIO_InitStruct.Pin = Brake_out_Pin|Headlights_out_Pin;
 8000980:	0021      	movs	r1, r4
 8000982:	187b      	adds	r3, r7, r1
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <_ZL12MX_GPIO_Initv+0xe0>)
 8000986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2201      	movs	r2, #1
 800098c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	000c      	movs	r4, r1
 800099c:	187b      	adds	r3, r7, r1
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <_ZL12MX_GPIO_Initv+0xe4>)
 80009a0:	0019      	movs	r1, r3
 80009a2:	0010      	movs	r0, r2
 80009a4:	f001 fc9a 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LT_out_Pin RT_out_Pin */
  GPIO_InitStruct.Pin = LT_out_Pin|RT_out_Pin;
 80009a8:	0021      	movs	r1, r4
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	22c0      	movs	r2, #192	; 0xc0
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2201      	movs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <_ZL12MX_GPIO_Initv+0xe8>)
 80009c8:	0019      	movs	r1, r3
 80009ca:	0010      	movs	r0, r2
 80009cc:	f001 fc86 	bl	80022dc <HAL_GPIO_Init>

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b009      	add	sp, #36	; 0x24
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	00004020 	.word	0x00004020
 80009e0:	48000400 	.word	0x48000400
 80009e4:	48000800 	.word	0x48000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <Error_Handler+0x6>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x44>)
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_MspInit+0x44>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	619a      	str	r2, [r3, #24]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x44>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x44>)
 8000a10:	69da      	ldr	r2, [r3, #28]
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x44>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0549      	lsls	r1, r1, #21
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	61da      	str	r2, [r3, #28]
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_MspInit+0x44>)
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	055b      	lsls	r3, r3, #21
 8000a24:	4013      	ands	r3, r2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	2314      	movs	r3, #20
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	0018      	movs	r0, r3
 8000a46:	2314      	movs	r3, #20
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f002 ff44 	bl	80038d8 <memset>
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <HAL_ADC_MspInit+0x94>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d134      	bne.n	8000ac4 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a5c:	699a      	ldr	r2, [r3, #24]
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0089      	lsls	r1, r1, #2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	619a      	str	r2, [r3, #24]
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a6a:	699a      	ldr	r2, [r3, #24]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0289      	lsls	r1, r1, #10
 8000a80:	430a      	orrs	r2, r1
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_ADC_MspInit+0x98>)
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2114      	movs	r1, #20
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	187a      	adds	r2, r7, r1
 8000aa8:	2390      	movs	r3, #144	; 0x90
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 fc14 	bl	80022dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f001 fbdd 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000abe:	200c      	movs	r0, #12
 8000ac0:	f001 fbef 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b00a      	add	sp, #40	; 0x28
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40012400 	.word	0x40012400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	2314      	movs	r3, #20
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2314      	movs	r3, #20
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 fef6 	bl	80038d8 <memset>
  if(hcan->Instance==CAN)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <HAL_CAN_MspInit+0xa4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d13b      	bne.n	8000b6e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000af8:	69da      	ldr	r2, [r3, #28]
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0489      	lsls	r1, r1, #18
 8000b00:	430a      	orrs	r2, r1
 8000b02:	61da      	str	r2, [r3, #28]
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000b06:	69da      	ldr	r2, [r3, #28]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	049b      	lsls	r3, r3, #18
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0289      	lsls	r1, r1, #10
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_CAN_MspInit+0xa8>)
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	029b      	lsls	r3, r3, #10
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b2e:	2114      	movs	r1, #20
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	22c0      	movs	r2, #192	; 0xc0
 8000b34:	0152      	lsls	r2, r2, #5
 8000b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2203      	movs	r2, #3
 8000b48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fbbf 	bl	80022dc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	201e      	movs	r0, #30
 8000b64:	f001 fb88 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000b68:	201e      	movs	r0, #30
 8000b6a:	f001 fb9a 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b00a      	add	sp, #40	; 0x28
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40006400 	.word	0x40006400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d114      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000b96:	69da      	ldr	r2, [r3, #28]
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	f001 fb61 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f001 fb73 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bbc:	e018      	b.n	8000bf0 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_TIM_Base_MspInit+0x7c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d113      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000bce:	2102      	movs	r1, #2
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_TIM_Base_MspInit+0x78>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2010      	movs	r0, #16
 8000be6:	f001 fb47 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bea:	2010      	movs	r0, #16
 8000bec:	f001 fb59 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40000400 	.word	0x40000400

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f8ba 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <ADC1_COMP_IRQHandler+0x14>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fa8a 	bl	8001150 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	200000e0 	.word	0x200000e0

08000c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <TIM2_IRQHandler+0x14>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f002 faa2 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000050 	.word	0x20000050

08000c60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <TIM3_IRQHandler+0x14>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fa96 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000098 	.word	0x20000098

08000c78 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <CEC_CAN_IRQHandler+0x24>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 f834 	bl	8001cec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, &inData);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <CEC_CAN_IRQHandler+0x28>)
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <CEC_CAN_IRQHandler+0x2c>)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <CEC_CAN_IRQHandler+0x24>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f000 fee8 	bl	8001a60 <HAL_CAN_GetRxMessage>
  canFlag = 0x01;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <CEC_CAN_IRQHandler+0x30>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000154 	.word	0x20000154
 8000ca4:	20000138 	.word	0x20000138
 8000ca8:	20000180 	.word	0x20000180

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ce2:	f7ff ffe3 	bl	8000cac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ce6:	f002 fdd3 	bl	8003890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fb39 	bl	8000360 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   r0, =_estack
 8000cf0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	20000194 	.word	0x20000194

08000d08 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <DMA1_Channel1_IRQHandler>
	...

08000d0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_Init+0x24>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_Init+0x24>)
 8000d16:	2110      	movs	r1, #16
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f809 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fe65 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_InitTick+0x60>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	0019      	movs	r1, r3
 8000d46:	23fa      	movs	r3, #250	; 0xfa
 8000d48:	0098      	lsls	r0, r3, #2
 8000d4a:	f7ff f9dd 	bl	8000108 <__udivsi3>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff f9d8 	bl	8000108 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 fab1 	bl	80022c2 <HAL_SYSTICK_Config>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e00f      	b.n	8000d88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d80b      	bhi.n	8000d86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fa7e 	bl	8002278 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_InitTick+0x64>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	001a      	movs	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	18d2      	adds	r2, r2, r3
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_IncTick+0x20>)
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000190 	.word	0x20000190

08000dc0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000190 	.word	0x20000190

08000dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e125      	b.n	800103e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10a      	bne.n	8000e10 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2234      	movs	r2, #52	; 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fe14 	bl	8000a38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	2210      	movs	r2, #16
 8000e16:	4013      	ands	r3, r2
 8000e18:	d000      	beq.n	8000e1c <HAL_ADC_Init+0x48>
 8000e1a:	e103      	b.n	8001024 <HAL_ADC_Init+0x250>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d000      	beq.n	8000e28 <HAL_ADC_Init+0x54>
 8000e26:	e0fd      	b.n	8001024 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e32:	d000      	beq.n	8000e36 <HAL_ADC_Init+0x62>
 8000e34:	e0f6      	b.n	8001024 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	4a83      	ldr	r2, [pc, #524]	; (8001048 <HAL_ADC_Init+0x274>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2202      	movs	r2, #2
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d112      	bne.n	8000e7a <HAL_ADC_Init+0xa6>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d009      	beq.n	8000e76 <HAL_ADC_Init+0xa2>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	021b      	lsls	r3, r3, #8
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Init+0xa6>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_ADC_Init+0xa8>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d116      	bne.n	8000eae <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2218      	movs	r2, #24
 8000e88:	4393      	bics	r3, r2
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	0899      	lsrs	r1, r3, #2
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4964      	ldr	r1, [pc, #400]	; (800104c <HAL_ADC_Init+0x278>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7e1b      	ldrb	r3, [r3, #24]
 8000ec2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7e5b      	ldrb	r3, [r3, #25]
 8000ec8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eca:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7e9b      	ldrb	r3, [r3, #26]
 8000ed0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ed2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d002      	beq.n	8000ee2 <HAL_ADC_Init+0x10e>
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	e000      	b.n	8000ee4 <HAL_ADC_Init+0x110>
 8000ee2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ee4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000eea:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_Init+0x124>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_Init+0x126>
 8000ef8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000efa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2124      	movs	r1, #36	; 0x24
 8000f00:	5c5b      	ldrb	r3, [r3, r1]
 8000f02:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f04:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7edb      	ldrb	r3, [r3, #27]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d115      	bne.n	8000f40 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e9b      	ldrb	r3, [r3, #26]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d105      	bne.n	8000f28 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	0252      	lsls	r2, r2, #9
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	2201      	movs	r2, #1
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	23c2      	movs	r3, #194	; 0xc2
 8000f46:	33ff      	adds	r3, #255	; 0xff
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d007      	beq.n	8000f5c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f54:	4313      	orrs	r3, r2
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68d9      	ldr	r1, [r3, #12]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	055b      	lsls	r3, r3, #21
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d01b      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d017      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d013      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d00f      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00b      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d007      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d003      	beq.n	8000fb0 <HAL_ADC_Init+0x1dc>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d112      	bne.n	8000fd6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2107      	movs	r1, #7
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6959      	ldr	r1, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	2207      	movs	r2, #7
 8000fcc:	401a      	ands	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <HAL_ADC_Init+0x27c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d10b      	bne.n	8000ffe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	4393      	bics	r3, r2
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ffc:	e01c      	b.n	8001038 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001002:	2212      	movs	r2, #18
 8001004:	4393      	bics	r3, r2
 8001006:	2210      	movs	r2, #16
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001012:	2201      	movs	r2, #1
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001022:	e009      	b.n	8001038 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	2210      	movs	r2, #16
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	781b      	ldrb	r3, [r3, #0]
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	fffffefd 	.word	0xfffffefd
 800104c:	fffe0219 	.word	0xfffe0219
 8001050:	833fffe7 	.word	0x833fffe7

08001054 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	d156      	bne.n	800111e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2234      	movs	r2, #52	; 0x34
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Start_IT+0x2a>
 800107a:	2302      	movs	r3, #2
 800107c:	e056      	b.n	800112c <HAL_ADC_Start_IT+0xd8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2234      	movs	r2, #52	; 0x34
 8001082:	2101      	movs	r1, #1
 8001084:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7e5b      	ldrb	r3, [r3, #25]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d007      	beq.n	800109e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800108e:	230f      	movs	r3, #15
 8001090:	18fc      	adds	r4, r7, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fa31 	bl	80014fc <ADC_Enable>
 800109a:	0003      	movs	r3, r0
 800109c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800109e:	230f      	movs	r3, #15
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d13e      	bne.n	8001126 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <HAL_ADC_Start_IT+0xe0>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2234      	movs	r2, #52	; 0x34
 80010c4:	2100      	movs	r1, #0
 80010c6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	221c      	movs	r2, #28
 80010ce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d110      	bne.n	80010fa <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2104      	movs	r1, #4
 80010e4:	438a      	bics	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2118      	movs	r1, #24
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
          break;
 80010f8:	e008      	b.n	800110c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	211c      	movs	r1, #28
 8001106:	430a      	orrs	r2, r1
 8001108:	605a      	str	r2, [r3, #4]
          break;
 800110a:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2104      	movs	r1, #4
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e003      	b.n	8001126 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800111e:	230f      	movs	r3, #15
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b005      	add	sp, #20
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	fffff0fe 	.word	0xfffff0fe

08001138 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2204      	movs	r2, #4
 8001160:	4013      	ands	r3, r2
 8001162:	2b04      	cmp	r3, #4
 8001164:	d106      	bne.n	8001174 <HAL_ADC_IRQHandler+0x24>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2204      	movs	r2, #4
 800116e:	4013      	ands	r3, r2
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00d      	beq.n	8001190 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2208      	movs	r2, #8
 800117c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800117e:	2b08      	cmp	r3, #8
 8001180:	d14f      	bne.n	8001222 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2208      	movs	r2, #8
 800118a:	4013      	ands	r3, r2
 800118c:	2b08      	cmp	r3, #8
 800118e:	d148      	bne.n	8001222 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	2210      	movs	r2, #16
 8001196:	4013      	ands	r3, r2
 8001198:	d106      	bne.n	80011a8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d12d      	bne.n	8001212 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d129      	bne.n	8001212 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d122      	bne.n	8001212 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d110      	bne.n	80011fa <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	210c      	movs	r1, #12
 80011e4:	438a      	bics	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ec:	4a33      	ldr	r2, [pc, #204]	; (80012bc <HAL_ADC_IRQHandler+0x16c>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
 80011f8:	e00b      	b.n	8001212 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	2220      	movs	r2, #32
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	2201      	movs	r2, #1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff f803 	bl	8000220 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	4013      	ands	r3, r2
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	d115      	bne.n	800125c <HAL_ADC_IRQHandler+0x10c>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4013      	ands	r3, r2
 800123a:	2b80      	cmp	r3, #128	; 0x80
 800123c:	d10e      	bne.n	800125c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0252      	lsls	r2, r2, #9
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f836 	bl	80012c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2210      	movs	r2, #16
 8001264:	4013      	ands	r3, r2
 8001266:	2b10      	cmp	r3, #16
 8001268:	d123      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x162>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2210      	movs	r2, #16
 8001272:	4013      	ands	r3, r2
 8001274:	2b10      	cmp	r3, #16
 8001276:	d11c      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	2b01      	cmp	r3, #1
 800127e:	d006      	beq.n	800128e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10d      	bne.n	80012aa <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	2202      	movs	r2, #2
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2210      	movs	r2, #16
 80012a0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 f813 	bl	80012d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2210      	movs	r2, #16
 80012b0:	601a      	str	r2, [r3, #0]
  }

}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	fffffefe 	.word	0xfffffefe

080012c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ea:	230f      	movs	r3, #15
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	055b      	lsls	r3, r3, #21
 80012fe:	429a      	cmp	r2, r3
 8001300:	d011      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d00d      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	2b02      	cmp	r3, #2
 8001310:	d009      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2b03      	cmp	r3, #3
 8001318:	d005      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	2b04      	cmp	r3, #4
 8001320:	d001      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x46>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2234      	movs	r2, #52	; 0x34
 800132a:	5c9b      	ldrb	r3, [r3, r2]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x54>
 8001330:	2302      	movs	r3, #2
 8001332:	e0d0      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x1f6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2234      	movs	r2, #52	; 0x34
 8001338:	2101      	movs	r1, #1
 800133a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
 8001346:	d000      	beq.n	800134a <HAL_ADC_ConfigChannel+0x6a>
 8001348:	e0b4      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a64      	ldr	r2, [pc, #400]	; (80014e0 <HAL_ADC_ConfigChannel+0x200>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d100      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x76>
 8001354:	e082      	b.n	800145c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	055b      	lsls	r3, r3, #21
 8001374:	429a      	cmp	r2, r3
 8001376:	d037      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b01      	cmp	r3, #1
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b02      	cmp	r3, #2
 8001386:	d02f      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b03      	cmp	r3, #3
 800138e:	d02b      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2b04      	cmp	r3, #4
 8001396:	d027      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b05      	cmp	r3, #5
 800139e:	d023      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	d01f      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d01b      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2107      	movs	r1, #7
 80013bc:	400b      	ands	r3, r1
 80013be:	429a      	cmp	r2, r3
 80013c0:	d012      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2107      	movs	r1, #7
 80013ce:	438a      	bics	r2, r1
 80013d0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6959      	ldr	r1, [r3, #20]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2207      	movs	r2, #7
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b10      	cmp	r3, #16
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x120>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b11      	cmp	r3, #17
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x120>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b12      	cmp	r3, #18
 80013fe:	d163      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_ADC_ConfigChannel+0x204>)
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b10      	cmp	r3, #16
 800140a:	d009      	beq.n	8001420 <HAL_ADC_ConfigChannel+0x140>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b11      	cmp	r3, #17
 8001412:	d102      	bne.n	800141a <HAL_ADC_ConfigChannel+0x13a>
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	03db      	lsls	r3, r3, #15
 8001418:	e004      	b.n	8001424 <HAL_ADC_ConfigChannel+0x144>
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	045b      	lsls	r3, r3, #17
 800141e:	e001      	b.n	8001424 <HAL_ADC_ConfigChannel+0x144>
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <HAL_ADC_ConfigChannel+0x204>)
 8001426:	430b      	orrs	r3, r1
 8001428:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d14a      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_ADC_ConfigChannel+0x208>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	492d      	ldr	r1, [pc, #180]	; (80014ec <HAL_ADC_ConfigChannel+0x20c>)
 8001438:	0018      	movs	r0, r3
 800143a:	f7fe fe65 	bl	8000108 <__udivsi3>
 800143e:	0003      	movs	r3, r0
 8001440:	001a      	movs	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	189b      	adds	r3, r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144c:	e002      	b.n	8001454 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f9      	bne.n	800144e <HAL_ADC_ConfigChannel+0x16e>
 800145a:	e035      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2101      	movs	r1, #1
 8001468:	4099      	lsls	r1, r3
 800146a:	000b      	movs	r3, r1
 800146c:	43d9      	mvns	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b10      	cmp	r3, #16
 800147c:	d007      	beq.n	800148e <HAL_ADC_ConfigChannel+0x1ae>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b11      	cmp	r3, #17
 8001484:	d003      	beq.n	800148e <HAL_ADC_ConfigChannel+0x1ae>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b12      	cmp	r3, #18
 800148c:	d11c      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_ADC_ConfigChannel+0x204>)
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b10      	cmp	r3, #16
 8001498:	d007      	beq.n	80014aa <HAL_ADC_ConfigChannel+0x1ca>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b11      	cmp	r3, #17
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x1c6>
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_ADC_ConfigChannel+0x210>)
 80014a4:	e002      	b.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_ADC_ConfigChannel+0x214>)
 80014a8:	e000      	b.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_ADC_ConfigChannel+0x218>)
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_ADC_ConfigChannel+0x204>)
 80014ae:	400b      	ands	r3, r1
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e009      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b8:	2220      	movs	r2, #32
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2234      	movs	r2, #52	; 0x34
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014d0:	230f      	movs	r3, #15
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	781b      	ldrb	r3, [r3, #0]
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	00001001 	.word	0x00001001
 80014e4:	40012708 	.word	0x40012708
 80014e8:	20000000 	.word	0x20000000
 80014ec:	000f4240 	.word	0x000f4240
 80014f0:	ffbfffff 	.word	0xffbfffff
 80014f4:	feffffff 	.word	0xfeffffff
 80014f8:	ff7fffff 	.word	0xff7fffff

080014fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b01      	cmp	r3, #1
 8001518:	d112      	bne.n	8001540 <ADC_Enable+0x44>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d009      	beq.n	800153c <ADC_Enable+0x40>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	401a      	ands	r2, r3
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	429a      	cmp	r2, r3
 800153a:	d101      	bne.n	8001540 <ADC_Enable+0x44>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <ADC_Enable+0x46>
 8001540:	2300      	movs	r3, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d14b      	bne.n	80015de <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <ADC_Enable+0xec>)
 800154e:	4013      	ands	r3, r2
 8001550:	d00d      	beq.n	800156e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	2210      	movs	r2, #16
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001562:	2201      	movs	r2, #1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e038      	b.n	80015e0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <ADC_Enable+0xf0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <ADC_Enable+0xf4>)
 8001584:	0018      	movs	r0, r3
 8001586:	f7fe fdbf 	bl	8000108 <__udivsi3>
 800158a:	0003      	movs	r3, r0
 800158c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800158e:	e002      	b.n	8001596 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3b01      	subs	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800159c:	f7ff fc10 	bl	8000dc0 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015a4:	e014      	b.n	80015d0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015a6:	f7ff fc0b 	bl	8000dc0 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d90d      	bls.n	80015d0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	2210      	movs	r2, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	2201      	movs	r2, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e007      	b.n	80015e0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d1e3      	bne.n	80015a6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	80000017 	.word	0x80000017
 80015ec:	20000000 	.word	0x20000000
 80015f0:	000f4240 	.word	0x000f4240

080015f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0f0      	b.n	80017e8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2220      	movs	r2, #32
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fa5d 	bl	8000ad4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2102      	movs	r1, #2
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162a:	f7ff fbc9 	bl	8000dc0 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001632:	e013      	b.n	800165c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001634:	f7ff fbc4 	bl	8000dc0 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d90c      	bls.n	800165c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0292      	lsls	r2, r2, #10
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	2105      	movs	r1, #5
 8001656:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0c5      	b.n	80017e8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d1e5      	bne.n	8001634 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff fba2 	bl	8000dc0 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001680:	e013      	b.n	80016aa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001682:	f7ff fb9d 	bl	8000dc0 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b0a      	cmp	r3, #10
 800168e:	d90c      	bls.n	80016aa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	0292      	lsls	r2, r2, #10
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	2105      	movs	r1, #5
 80016a4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e09e      	b.n	80017e8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0e5      	beq.n	8001682 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7e1b      	ldrb	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	438a      	bics	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e5b      	ldrb	r3, [r3, #25]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2140      	movs	r1, #64	; 0x40
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	438a      	bics	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e9b      	ldrb	r3, [r3, #26]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2120      	movs	r1, #32
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2120      	movs	r1, #32
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7edb      	ldrb	r3, [r3, #27]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2110      	movs	r1, #16
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e007      	b.n	800175e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2110      	movs	r1, #16
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7f1b      	ldrb	r3, [r3, #28]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2108      	movs	r1, #8
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e007      	b.n	8001788 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2108      	movs	r1, #8
 8001784:	438a      	bics	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7f5b      	ldrb	r3, [r3, #29]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2104      	movs	r1, #4
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e007      	b.n	80017b2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2104      	movs	r1, #4
 80017ae:	438a      	bics	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	0011      	movs	r1, r2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2220      	movs	r2, #32
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001800:	2013      	movs	r0, #19
 8001802:	183b      	adds	r3, r7, r0
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	2120      	movs	r1, #32
 8001808:	5c52      	ldrb	r2, [r2, r1]
 800180a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800180c:	183b      	adds	r3, r7, r0
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d005      	beq.n	8001820 <HAL_CAN_ConfigFilter+0x30>
 8001814:	2313      	movs	r3, #19
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d000      	beq.n	8001820 <HAL_CAN_ConfigFilter+0x30>
 800181e:	e0cd      	b.n	80019bc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	58d3      	ldr	r3, [r2, r3]
 8001828:	2201      	movs	r2, #1
 800182a:	431a      	orrs	r2, r3
 800182c:	0011      	movs	r1, r2
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	221f      	movs	r2, #31
 800183c:	4013      	ands	r3, r2
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	0013      	movs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	2387      	movs	r3, #135	; 0x87
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	58d3      	ldr	r3, [r2, r3]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	0011      	movs	r1, r2
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	2387      	movs	r3, #135	; 0x87
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d129      	bne.n	80018ba <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	2383      	movs	r3, #131	; 0x83
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	43d2      	mvns	r2, r2
 8001872:	401a      	ands	r2, r3
 8001874:	0011      	movs	r1, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	2383      	movs	r3, #131	; 0x83
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001890:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3248      	adds	r2, #72	; 0x48
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ae:	6979      	ldr	r1, [r7, #20]
 80018b0:	3348      	adds	r3, #72	; 0x48
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	18cb      	adds	r3, r1, r3
 80018b6:	3304      	adds	r3, #4
 80018b8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d128      	bne.n	8001914 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	2383      	movs	r3, #131	; 0x83
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	58d2      	ldr	r2, [r2, r3]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	0011      	movs	r1, r2
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	2383      	movs	r3, #131	; 0x83
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ea:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3248      	adds	r2, #72	; 0x48
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001906:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001908:	6979      	ldr	r1, [r7, #20]
 800190a:	3348      	adds	r3, #72	; 0x48
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	18cb      	adds	r3, r1, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	2381      	movs	r3, #129	; 0x81
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	58d3      	ldr	r3, [r2, r3]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	43d2      	mvns	r2, r2
 8001928:	401a      	ands	r2, r3
 800192a:	0011      	movs	r1, r2
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	2381      	movs	r3, #129	; 0x81
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	50d1      	str	r1, [r2, r3]
 8001934:	e00a      	b.n	800194c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	2381      	movs	r3, #129	; 0x81
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	58d2      	ldr	r2, [r2, r3]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	0011      	movs	r1, r2
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2381      	movs	r3, #129	; 0x81
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10c      	bne.n	800196e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	2385      	movs	r3, #133	; 0x85
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	58d3      	ldr	r3, [r2, r3]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	43d2      	mvns	r2, r2
 8001960:	401a      	ands	r2, r3
 8001962:	0011      	movs	r1, r2
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	2385      	movs	r3, #133	; 0x85
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	50d1      	str	r1, [r2, r3]
 800196c:	e00a      	b.n	8001984 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	2385      	movs	r3, #133	; 0x85
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	58d2      	ldr	r2, [r2, r3]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	431a      	orrs	r2, r3
 800197a:	0011      	movs	r1, r2
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	2385      	movs	r3, #133	; 0x85
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10a      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	2387      	movs	r3, #135	; 0x87
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	58d2      	ldr	r2, [r2, r3]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	431a      	orrs	r2, r3
 8001998:	0011      	movs	r1, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	2387      	movs	r3, #135	; 0x87
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	58d3      	ldr	r3, [r2, r3]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e007      	b.n	80019cc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	02d2      	lsls	r2, r2, #11
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
  }
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b006      	add	sp, #24
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12f      	bne.n	8001a48 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	2102      	movs	r1, #2
 80019ee:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff f9de 	bl	8000dc0 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a08:	e013      	b.n	8001a32 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a0a:	f7ff f9d9 	bl	8000dc0 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b0a      	cmp	r3, #10
 8001a16:	d90c      	bls.n	8001a32 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	0292      	lsls	r2, r2, #10
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	2105      	movs	r1, #5
 8001a2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e012      	b.n	8001a58 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1e5      	bne.n	8001a0a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e007      	b.n	8001a58 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0312      	lsls	r2, r2, #12
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
  }
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6e:	2017      	movs	r0, #23
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	2120      	movs	r1, #32
 8001a76:	5c52      	ldrb	r2, [r2, r1]
 8001a78:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_CAN_GetRxMessage+0x2e>
 8001a82:	2317      	movs	r3, #23
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d000      	beq.n	8001a8e <HAL_CAN_GetRxMessage+0x2e>
 8001a8c:	e0f8      	b.n	8001c80 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10e      	bne.n	8001ab2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d117      	bne.n	8001ad0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	0392      	lsls	r2, r2, #14
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0ee      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	d108      	bne.n	8001ad0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	0392      	lsls	r2, r2, #14
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0df      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	321b      	adds	r2, #27
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	58d3      	ldr	r3, [r2, r3]
 8001adc:	2204      	movs	r2, #4
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	321b      	adds	r2, #27
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	58d3      	ldr	r3, [r2, r3]
 8001af8:	0d5b      	lsrs	r3, r3, #21
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	0d5a      	lsrs	r2, r3, #21
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00a      	b.n	8001b1a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	321b      	adds	r2, #27
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	58d3      	ldr	r3, [r2, r3]
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	321b      	adds	r2, #27
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	58d3      	ldr	r3, [r2, r3]
 8001b26:	2202      	movs	r2, #2
 8001b28:	401a      	ands	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	331b      	adds	r3, #27
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	18d3      	adds	r3, r2, r3
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	220f      	movs	r2, #15
 8001b40:	401a      	ands	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	331b      	adds	r3, #27
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	331b      	adds	r3, #27
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	18d3      	adds	r3, r2, r3
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	0c1a      	lsrs	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	23dc      	movs	r3, #220	; 0xdc
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	188a      	adds	r2, r1, r2
 8001b88:	18d3      	adds	r3, r2, r3
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	23dc      	movs	r3, #220	; 0xdc
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	188a      	adds	r2, r1, r2
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0a1a      	lsrs	r2, r3, #8
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	23dc      	movs	r3, #220	; 0xdc
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	188a      	adds	r2, r1, r2
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0c1a      	lsrs	r2, r3, #16
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	23dc      	movs	r3, #220	; 0xdc
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	188a      	adds	r2, r1, r2
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e1a      	lsrs	r2, r3, #24
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3303      	adds	r3, #3
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	23de      	movs	r3, #222	; 0xde
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	188a      	adds	r2, r1, r2
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	23de      	movs	r3, #222	; 0xde
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	188a      	adds	r2, r1, r2
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0a1a      	lsrs	r2, r3, #8
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3305      	adds	r3, #5
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	23de      	movs	r3, #222	; 0xde
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	188a      	adds	r2, r1, r2
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0c1a      	lsrs	r2, r3, #16
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	3306      	adds	r3, #6
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	23de      	movs	r3, #222	; 0xde
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	188a      	adds	r2, r1, r2
 8001c46:	18d3      	adds	r3, r2, r3
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0e1a      	lsrs	r2, r3, #24
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3307      	adds	r3, #7
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2120      	movs	r1, #32
 8001c66:	430a      	orrs	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	e007      	b.n	8001c7c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2120      	movs	r1, #32
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e007      	b.n	8001c90 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	02d2      	lsls	r2, r2, #11
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b006      	add	sp, #24
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	2120      	movs	r1, #32
 8001caa:	5c52      	ldrb	r2, [r2, r1]
 8001cac:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d004      	beq.n	8001cc0 <HAL_CAN_ActivateNotification+0x28>
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d109      	bne.n	8001cd4 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6959      	ldr	r1, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e007      	b.n	8001ce4 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	02d2      	lsls	r2, r2, #11
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
  }
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_CAN_IRQHandler+0x46>
 8001d30:	e084      	b.n	8001e3c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d024      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f97e 	bl	800204e <HAL_CAN_TxMailbox0CompleteCallback>
 8001d52:	e017      	b.n	8001d84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d005      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	4313      	orrs	r3, r2
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e00d      	b.n	8001d84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0152      	lsls	r2, r2, #5
 8001d76:	4313      	orrs	r3, r2
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e003      	b.n	8001d84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 f97d 	bl	800207e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d028      	beq.n	8001de0 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f95a 	bl	800205e <HAL_CAN_TxMailbox1CompleteCallback>
 8001daa:	e019      	b.n	8001de0 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4013      	ands	r3, r2
 8001db4:	d005      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	0192      	lsls	r2, r2, #6
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	e00e      	b.n	8001de0 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d005      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	01d2      	lsls	r2, r2, #7
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	e003      	b.n	8001de0 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f957 	bl	800208e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	4013      	ands	r3, r2
 8001de8:	d028      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	0252      	lsls	r2, r2, #9
 8001df2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f934 	bl	800206e <HAL_CAN_TxMailbox2CompleteCallback>
 8001e06:	e019      	b.n	8001e3c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	02db      	lsls	r3, r3, #11
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d005      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	0212      	lsls	r2, r2, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e00e      	b.n	8001e3c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	031b      	lsls	r3, r3, #12
 8001e24:	4013      	ands	r3, r2
 8001e26:	d005      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	0252      	lsls	r2, r2, #9
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e003      	b.n	8001e3c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f931 	bl	800209e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00c      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2210      	movs	r2, #16
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d008      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4313      	orrs	r3, r2
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2204      	movs	r2, #4
 8001e62:	4013      	ands	r3, r2
 8001e64:	d00b      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f920 	bl	80020be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d003      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f90a 	bl	80020ae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d00c      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d008      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	00d2      	lsls	r2, r2, #3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d007      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f901 	bl	80020de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2210      	movs	r2, #16
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f8eb 	bl	80020ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	4013      	ands	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	2210      	movs	r2, #16
 8001f06:	4013      	ands	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f8ea 	bl	80020ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	4013      	ands	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2208      	movs	r2, #8
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 f8e1 	bl	80020fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f3c:	6a3a      	ldr	r2, [r7, #32]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	4013      	ands	r3, r2
 8001f44:	d100      	bne.n	8001f48 <HAL_CAN_IRQHandler+0x25c>
 8001f46:	e071      	b.n	800202c <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_CAN_IRQHandler+0x266>
 8001f50:	e068      	b.n	8002024 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f62:	d003      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	2201      	movs	r2, #1
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f6c:	6a3a      	ldr	r2, [r7, #32]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f7c:	d003      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	2202      	movs	r2, #2
 8001f82:	4313      	orrs	r3, r2
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f96:	d003      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d03c      	beq.n	8002024 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2270      	movs	r2, #112	; 0x70
 8001fae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fb0:	d038      	beq.n	8002024 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2270      	movs	r2, #112	; 0x70
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d016      	beq.n	8001fea <HAL_CAN_IRQHandler+0x2fe>
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_CAN_IRQHandler+0x2dc>
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d009      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x2ea>
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc6:	e025      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001fc8:	2b50      	cmp	r3, #80	; 0x50
 8001fca:	d018      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x312>
 8001fcc:	2b60      	cmp	r3, #96	; 0x60
 8001fce:	d01b      	beq.n	8002008 <HAL_CAN_IRQHandler+0x31c>
 8001fd0:	2b40      	cmp	r3, #64	; 0x40
 8001fd2:	d00f      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x308>
            break;
 8001fd4:	e01e      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fde:	e019      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe8:	e014      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	2220      	movs	r2, #32
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff2:	e00f      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffc:	e00a      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	4313      	orrs	r3, r2
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002006:	e005      	b.n	8002014 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0052      	lsls	r2, r2, #1
 800200e:	4313      	orrs	r3, r2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002012:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2170      	movs	r1, #112	; 0x70
 8002020:	438a      	bics	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2204      	movs	r2, #4
 800202a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f000 f864 	bl	800210e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b00a      	add	sp, #40	; 0x28
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	0002      	movs	r2, r0
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b7f      	cmp	r3, #127	; 0x7f
 8002132:	d809      	bhi.n	8002148 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	001a      	movs	r2, r3
 800213a:	231f      	movs	r3, #31
 800213c:	401a      	ands	r2, r3
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_EnableIRQ+0x30>)
 8002140:	2101      	movs	r1, #1
 8002142:	4091      	lsls	r1, r2
 8002144:	000a      	movs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
  }
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	0002      	movs	r2, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b7f      	cmp	r3, #127	; 0x7f
 8002168:	d828      	bhi.n	80021bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <__NVIC_SetPriority+0xd4>)
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	33c0      	adds	r3, #192	; 0xc0
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	589b      	ldr	r3, [r3, r2]
 800217a:	1dfa      	adds	r2, r7, #7
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	0011      	movs	r1, r2
 8002180:	2203      	movs	r2, #3
 8002182:	400a      	ands	r2, r1
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	21ff      	movs	r1, #255	; 0xff
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	43d2      	mvns	r2, r2
 800218e:	401a      	ands	r2, r3
 8002190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	22ff      	movs	r2, #255	; 0xff
 8002198:	401a      	ands	r2, r3
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	0018      	movs	r0, r3
 80021a0:	2303      	movs	r3, #3
 80021a2:	4003      	ands	r3, r0
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a8:	481f      	ldr	r0, [pc, #124]	; (8002228 <__NVIC_SetPriority+0xd4>)
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	430a      	orrs	r2, r1
 80021b4:	33c0      	adds	r3, #192	; 0xc0
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021ba:	e031      	b.n	8002220 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0019      	movs	r1, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	400b      	ands	r3, r1
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3306      	adds	r3, #6
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	18d3      	adds	r3, r2, r3
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1dfa      	adds	r2, r7, #7
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	0011      	movs	r1, r2
 80021dc:	2203      	movs	r2, #3
 80021de:	400a      	ands	r2, r1
 80021e0:	00d2      	lsls	r2, r2, #3
 80021e2:	21ff      	movs	r1, #255	; 0xff
 80021e4:	4091      	lsls	r1, r2
 80021e6:	000a      	movs	r2, r1
 80021e8:	43d2      	mvns	r2, r2
 80021ea:	401a      	ands	r2, r3
 80021ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	22ff      	movs	r2, #255	; 0xff
 80021f4:	401a      	ands	r2, r3
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	0018      	movs	r0, r3
 80021fc:	2303      	movs	r3, #3
 80021fe:	4003      	ands	r3, r0
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <__NVIC_SetPriority+0xd8>)
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	001c      	movs	r4, r3
 800220c:	230f      	movs	r3, #15
 800220e:	4023      	ands	r3, r4
 8002210:	3b08      	subs	r3, #8
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	430a      	orrs	r2, r1
 8002216:	3306      	adds	r3, #6
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	18c3      	adds	r3, r0, r3
 800221c:	3304      	adds	r3, #4
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b003      	add	sp, #12
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <SysTick_Config+0x40>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e010      	b.n	8002268 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <SysTick_Config+0x44>)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	3a01      	subs	r2, #1
 800224c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	2301      	movs	r3, #1
 8002250:	425b      	negs	r3, r3
 8002252:	2103      	movs	r1, #3
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff7d 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SysTick_Config+0x44>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x44>)
 8002262:	2207      	movs	r2, #7
 8002264:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}
 8002270:	00ffffff 	.word	0x00ffffff
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	210f      	movs	r1, #15
 8002284:	187b      	adds	r3, r7, r1
 8002286:	1c02      	adds	r2, r0, #0
 8002288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	187b      	adds	r3, r7, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	0002      	movs	r2, r0
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ff33 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ffaf 	bl	8002230 <SysTick_Config>
 80022d2:	0003      	movs	r3, r0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e155      	b.n	8002598 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4091      	lsls	r1, r2
 80022f6:	000a      	movs	r2, r1
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d100      	bne.n	8002304 <HAL_GPIO_Init+0x28>
 8002302:	e146      	b.n	8002592 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d00b      	beq.n	8002324 <HAL_GPIO_Init+0x48>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d007      	beq.n	8002324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002318:	2b11      	cmp	r3, #17
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b12      	cmp	r3, #18
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	409a      	lsls	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	2201      	movs	r2, #1
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0xea>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d123      	bne.n	800240e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	58d3      	ldr	r3, [r2, r3]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2207      	movs	r2, #7
 80023d8:	4013      	ands	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2107      	movs	r1, #7
 80023f2:	400b      	ands	r3, r1
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	401a      	ands	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	055b      	lsls	r3, r3, #21
 800244a:	4013      	ands	r3, r2
 800244c:	d100      	bne.n	8002450 <HAL_GPIO_Init+0x174>
 800244e:	e0a0      	b.n	8002592 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x2d4>)
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_GPIO_Init+0x2d4>)
 8002456:	2101      	movs	r1, #1
 8002458:	430a      	orrs	r2, r1
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x2d4>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_GPIO_Init+0x2d8>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	589b      	ldr	r3, [r3, r2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2203      	movs	r2, #3
 800247a:	4013      	ands	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	409a      	lsls	r2, r3
 8002482:	0013      	movs	r3, r2
 8002484:	43da      	mvns	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	2390      	movs	r3, #144	; 0x90
 8002490:	05db      	lsls	r3, r3, #23
 8002492:	429a      	cmp	r2, r3
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x1ee>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_GPIO_Init+0x2dc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x1ea>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a46      	ldr	r2, [pc, #280]	; (80025bc <HAL_GPIO_Init+0x2e0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x1e6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a45      	ldr	r2, [pc, #276]	; (80025c0 <HAL_GPIO_Init+0x2e4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x1e2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_GPIO_Init+0x2e8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x1de>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x1f0>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x1f0>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x1f0>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x1f0>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x1f0>
 80024ca:	2300      	movs	r3, #0
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	2103      	movs	r1, #3
 80024d0:	400a      	ands	r2, r1
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	; (80025b4 <HAL_GPIO_Init+0x2d8>)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4013      	ands	r3, r2
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43da      	mvns	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	4013      	ands	r3, r2
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43da      	mvns	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	035b      	lsls	r3, r3, #13
 8002556:	4013      	ands	r3, r2
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43da      	mvns	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	039b      	lsls	r3, r3, #14
 8002580:	4013      	ands	r3, r2
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	40da      	lsrs	r2, r3
 80025a0:	1e13      	subs	r3, r2, #0
 80025a2:	d000      	beq.n	80025a6 <HAL_GPIO_Init+0x2ca>
 80025a4:	e6a2      	b.n	80022ec <HAL_GPIO_Init+0x10>
  } 
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b006      	add	sp, #24
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	48000800 	.word	0x48000800
 80025c0:	48000c00 	.word	0x48000c00
 80025c4:	48001000 	.word	0x48001000
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	0008      	movs	r0, r1
 80025d6:	0011      	movs	r1, r2
 80025d8:	1cbb      	adds	r3, r7, #2
 80025da:	1c02      	adds	r2, r0, #0
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	1c7b      	adds	r3, r7, #1
 80025e0:	1c0a      	adds	r2, r1, #0
 80025e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e4:	1c7b      	adds	r3, r7, #1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ec:	1cbb      	adds	r3, r7, #2
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025f6:	1cbb      	adds	r3, r7, #2
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	000a      	movs	r2, r1
 8002610:	1cbb      	adds	r3, r7, #2
 8002612:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261a:	1cbb      	adds	r3, r7, #2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	1cb9      	adds	r1, r7, #2
 800262a:	8809      	ldrh	r1, [r1, #0]
 800262c:	400b      	ands	r3, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f000 fb76 	bl	8002d3c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d100      	bne.n	800265c <HAL_RCC_OscConfig+0x20>
 800265a:	e08e      	b.n	800277a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800265c:	4bc5      	ldr	r3, [pc, #788]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	220c      	movs	r2, #12
 8002662:	4013      	ands	r3, r2
 8002664:	2b04      	cmp	r3, #4
 8002666:	d00e      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002668:	4bc2      	ldr	r3, [pc, #776]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	220c      	movs	r2, #12
 800266e:	4013      	ands	r3, r2
 8002670:	2b08      	cmp	r3, #8
 8002672:	d117      	bne.n	80026a4 <HAL_RCC_OscConfig+0x68>
 8002674:	4bbf      	ldr	r3, [pc, #764]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	401a      	ands	r2, r3
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	429a      	cmp	r2, r3
 8002684:	d10e      	bne.n	80026a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4bbb      	ldr	r3, [pc, #748]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d100      	bne.n	8002694 <HAL_RCC_OscConfig+0x58>
 8002692:	e071      	b.n	8002778 <HAL_RCC_OscConfig+0x13c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d000      	beq.n	800269e <HAL_RCC_OscConfig+0x62>
 800269c:	e06c      	b.n	8002778 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f000 fb4c 	bl	8002d3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x80>
 80026ac:	4bb1      	ldr	r3, [pc, #708]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4bb0      	ldr	r3, [pc, #704]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0249      	lsls	r1, r1, #9
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e02f      	b.n	800271c <HAL_RCC_OscConfig+0xe0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10c      	bne.n	80026de <HAL_RCC_OscConfig+0xa2>
 80026c4:	4bab      	ldr	r3, [pc, #684]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4baa      	ldr	r3, [pc, #680]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026ca:	49ab      	ldr	r1, [pc, #684]	; (8002978 <HAL_RCC_OscConfig+0x33c>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4ba8      	ldr	r3, [pc, #672]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4ba7      	ldr	r3, [pc, #668]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026d6:	49a9      	ldr	r1, [pc, #676]	; (800297c <HAL_RCC_OscConfig+0x340>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e01e      	b.n	800271c <HAL_RCC_OscConfig+0xe0>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10e      	bne.n	8002704 <HAL_RCC_OscConfig+0xc8>
 80026e6:	4ba3      	ldr	r3, [pc, #652]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4ba2      	ldr	r3, [pc, #648]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	02c9      	lsls	r1, r1, #11
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b9f      	ldr	r3, [pc, #636]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b9e      	ldr	r3, [pc, #632]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	0249      	lsls	r1, r1, #9
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xe0>
 8002704:	4b9b      	ldr	r3, [pc, #620]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b9a      	ldr	r3, [pc, #616]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800270a:	499b      	ldr	r1, [pc, #620]	; (8002978 <HAL_RCC_OscConfig+0x33c>)
 800270c:	400a      	ands	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b98      	ldr	r3, [pc, #608]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b97      	ldr	r3, [pc, #604]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002716:	4999      	ldr	r1, [pc, #612]	; (800297c <HAL_RCC_OscConfig+0x340>)
 8002718:	400a      	ands	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fb4c 	bl	8000dc0 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272e:	f7fe fb47 	bl	8000dc0 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e2fd      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	4013      	ands	r3, r2
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0xf2>
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe fb37 	bl	8000dc0 <HAL_GetTick>
 8002752:	0003      	movs	r3, r0
 8002754:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fb32 	bl	8000dc0 <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e2e8      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	4013      	ands	r3, r2
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x11c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d100      	bne.n	8002786 <HAL_RCC_OscConfig+0x14a>
 8002784:	e06c      	b.n	8002860 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	220c      	movs	r2, #12
 800278c:	4013      	ands	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	220c      	movs	r2, #12
 8002796:	4013      	ands	r3, r2
 8002798:	2b08      	cmp	r3, #8
 800279a:	d11f      	bne.n	80027dc <HAL_RCC_OscConfig+0x1a0>
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	401a      	ands	r2, r3
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x188>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e2bb      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	22f8      	movs	r2, #248	; 0xf8
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00da      	lsls	r2, r3, #3
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e041      	b.n	8002860 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d024      	beq.n	800282e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fae6 	bl	8000dc0 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fae1 	bl	8000dc0 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e297      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2202      	movs	r2, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d0f1      	beq.n	80027fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	22f8      	movs	r2, #248	; 0xf8
 800281c:	4393      	bics	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00da      	lsls	r2, r3, #3
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e018      	b.n	8002860 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002834:	2101      	movs	r1, #1
 8002836:	438a      	bics	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe fac1 	bl	8000dc0 <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe fabc 	bl	8000dc0 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e272      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d1f1      	bne.n	8002844 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	4013      	ands	r3, r2
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002878:	2101      	movs	r1, #1
 800287a:	430a      	orrs	r2, r1
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fa9f 	bl	8000dc0 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fa9a 	bl	8000dc0 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e250      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0f1      	beq.n	8002888 <HAL_RCC_OscConfig+0x24c>
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028aa:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028ac:	2101      	movs	r1, #1
 80028ae:	438a      	bics	r2, r1
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fa85 	bl	8000dc0 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7fe fa80 	bl	8000dc0 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e236      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d1f1      	bne.n	80028bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2204      	movs	r2, #4
 80028de:	4013      	ands	r3, r2
 80028e0:	d100      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2a8>
 80028e2:	e0b5      	b.n	8002a50 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e4:	231f      	movs	r3, #31
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	4013      	ands	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0549      	lsls	r1, r1, #21
 8002902:	430a      	orrs	r2, r1
 8002904:	61da      	str	r2, [r3, #28]
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	055b      	lsls	r3, r3, #21
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002914:	231f      	movs	r3, #31
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_RCC_OscConfig+0x344>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4013      	ands	r3, r2
 8002926:	d11a      	bne.n	800295e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_RCC_OscConfig+0x344>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_OscConfig+0x344>)
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0049      	lsls	r1, r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe fa43 	bl	8000dc0 <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fa3e 	bl	8000dc0 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1f4      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x344>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4013      	ands	r3, r2
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10e      	bne.n	8002984 <HAL_RCC_OscConfig+0x348>
 8002966:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	4b02      	ldr	r3, [pc, #8]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e035      	b.n	80029e0 <HAL_RCC_OscConfig+0x3a4>
 8002974:	40021000 	.word	0x40021000
 8002978:	fffeffff 	.word	0xfffeffff
 800297c:	fffbffff 	.word	0xfffbffff
 8002980:	40007000 	.word	0x40007000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x36a>
 800298c:	4bca      	ldr	r3, [pc, #808]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4bc9      	ldr	r3, [pc, #804]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	621a      	str	r2, [r3, #32]
 8002998:	4bc7      	ldr	r3, [pc, #796]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	4bc6      	ldr	r3, [pc, #792]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 800299e:	2104      	movs	r1, #4
 80029a0:	438a      	bics	r2, r1
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e01c      	b.n	80029e0 <HAL_RCC_OscConfig+0x3a4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x38c>
 80029ae:	4bc2      	ldr	r3, [pc, #776]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	4bc1      	ldr	r3, [pc, #772]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	2104      	movs	r1, #4
 80029b6:	430a      	orrs	r2, r1
 80029b8:	621a      	str	r2, [r3, #32]
 80029ba:	4bbf      	ldr	r3, [pc, #764]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	4bbe      	ldr	r3, [pc, #760]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	621a      	str	r2, [r3, #32]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x3a4>
 80029c8:	4bbb      	ldr	r3, [pc, #748]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	4bba      	ldr	r3, [pc, #744]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	438a      	bics	r2, r1
 80029d2:	621a      	str	r2, [r3, #32]
 80029d4:	4bb8      	ldr	r3, [pc, #736]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029d6:	6a1a      	ldr	r2, [r3, #32]
 80029d8:	4bb7      	ldr	r3, [pc, #732]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 80029da:	2104      	movs	r1, #4
 80029dc:	438a      	bics	r2, r1
 80029de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d014      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe f9ea 	bl	8000dc0 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe f9e5 	bl	8000dc0 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	4aaf      	ldr	r2, [pc, #700]	; (8002cbc <HAL_RCC_OscConfig+0x680>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e19a      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	4bac      	ldr	r3, [pc, #688]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3b6>
 8002a10:	e013      	b.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe f9d5 	bl	8000dc0 <HAL_GetTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe f9d0 	bl	8000dc0 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	4aa5      	ldr	r2, [pc, #660]	; (8002cbc <HAL_RCC_OscConfig+0x680>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e185      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4ba1      	ldr	r3, [pc, #644]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a3a:	231f      	movs	r3, #31
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a44:	4b9c      	ldr	r3, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a4a:	499d      	ldr	r1, [pc, #628]	; (8002cc0 <HAL_RCC_OscConfig+0x684>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d12a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a62:	4b95      	ldr	r3, [pc, #596]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a66:	4b94      	ldr	r3, [pc, #592]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a68:	2104      	movs	r1, #4
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a6e:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a72:	4b91      	ldr	r3, [pc, #580]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	430a      	orrs	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f9a1 	bl	8000dc0 <HAL_GetTick>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a84:	f7fe f99c 	bl	8000dc0 <HAL_GetTick>
 8002a88:	0002      	movs	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e152      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a96:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d0f1      	beq.n	8002a84 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aa0:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	22f8      	movs	r2, #248	; 0xf8
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	00da      	lsls	r2, r3, #3
 8002ab0:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab6:	e034      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	3305      	adds	r3, #5
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ac0:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac4:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	438a      	bics	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002acc:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	22f8      	movs	r2, #248	; 0xf8
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	00da      	lsls	r2, r3, #3
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ae2:	e01e      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ae4:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae8:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002af0:	4b71      	ldr	r3, [pc, #452]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe f960 	bl	8000dc0 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b06:	f7fe f95b 	bl	8000dc0 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e111      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b18:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d1f1      	bne.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d05c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	220c      	movs	r2, #12
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d00e      	beq.n	8002b56 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b38:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	220c      	movs	r2, #12
 8002b3e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d114      	bne.n	8002b6e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b44:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	23c0      	movs	r3, #192	; 0xc0
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	025b      	lsls	r3, r3, #9
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10b      	bne.n	8002b6e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b56:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	025b      	lsls	r3, r3, #9
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d040      	beq.n	8002be4 <HAL_RCC_OscConfig+0x5a8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d03c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0e6      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01b      	beq.n	8002bae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0249      	lsls	r1, r1, #9
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f91c 	bl	8000dc0 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b8e:	f7fe f917 	bl	8000dc0 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0cd      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ba0:	4b45      	ldr	r3, [pc, #276]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x552>
 8002bac:	e01b      	b.n	8002be6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bae:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002bb4:	4943      	ldr	r1, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x688>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7fe f901 	bl	8000dc0 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bc4:	f7fe f8fc 	bl	8000dc0 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0b2      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	025b      	lsls	r3, r3, #9
 8002bde:	4013      	ands	r3, r2
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x588>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002be4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5b4>
 8002bee:	e0a4      	b.n	8002d3a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	220c      	movs	r2, #12
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d100      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5c2>
 8002bfc:	e078      	b.n	8002cf0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d14c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c0c:	492e      	ldr	r1, [pc, #184]	; (8002cc8 <HAL_RCC_OscConfig+0x68c>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe f8d5 	bl	8000dc0 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f8d0 	bl	8000dc0 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e086      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	049b      	lsls	r3, r3, #18
 8002c36:	4013      	ands	r3, r2
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	220f      	movs	r2, #15
 8002c40:	4393      	bics	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_RCC_OscConfig+0x690>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	431a      	orrs	r2, r3
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0449      	lsls	r1, r1, #17
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe f8a3 	bl	8000dc0 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe f89e 	bl	8000dc0 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	049b      	lsls	r3, r3, #18
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x644>
 8002c9e:	e04c      	b.n	8002d3a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x68c>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe f888 	bl	8000dc0 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6a6>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	00001388 	.word	0x00001388
 8002cc0:	efffffff 	.word	0xefffffff
 8002cc4:	fffeffff 	.word	0xfffeffff
 8002cc8:	feffffff 	.word	0xfeffffff
 8002ccc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe f876 	bl	8000dc0 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e02c      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x708>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	049b      	lsls	r3, r3, #18
 8002cea:	4013      	ands	r3, r2
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x694>
 8002cee:	e024      	b.n	8002d3a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01f      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCC_OscConfig+0x708>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x708>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	23c0      	movs	r3, #192	; 0xc0
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	401a      	ands	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d10e      	bne.n	8002d36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	23f0      	movs	r3, #240	; 0xf0
 8002d2a:	039b      	lsls	r3, r3, #14
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b008      	add	sp, #32
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0bf      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d911      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4393      	bics	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0a6      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d015      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d006      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002da8:	21e0      	movs	r1, #224	; 0xe0
 8002daa:	00c9      	lsls	r1, r1, #3
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	22f0      	movs	r2, #240	; 0xf0
 8002db6:	4393      	bics	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d04c      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	4013      	ands	r3, r2
 8002de0:	d120      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07a      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	049b      	lsls	r3, r3, #18
 8002df6:	4013      	ands	r3, r2
 8002df8:	d114      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06e      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	025b      	lsls	r3, r3, #9
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d108      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e062      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e05b      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2203      	movs	r2, #3
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fd ffc2 	bl	8000dc0 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e40:	e009      	b.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e42:	f7fd ffbd 	bl	8000dc0 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_RCC_ClockConfig+0x1a4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e042      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1ec      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d211      	bcs.n	8002e9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_RCC_ClockConfig+0x19c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e020      	b.n	8002edc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a8>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eb8:	f000 f820 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002ebc:	0001      	movs	r1, r0
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1ac>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	000a      	movs	r2, r1
 8002ece:	40da      	lsrs	r2, r3
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd ff2d 	bl	8000d34 <HAL_InitTick>
  
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	00001388 	.word	0x00001388
 8002ef0:	fffff8ff 	.word	0xfffff8ff
 8002ef4:	08003920 	.word	0x08003920
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08f      	sub	sp, #60	; 0x3c
 8002f00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f02:	2314      	movs	r3, #20
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002f08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f0a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002f14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f16:	c313      	stmia	r3!, {r0, r1, r4}
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f20:	2300      	movs	r3, #0
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f24:	2300      	movs	r3, #0
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	220c      	movs	r2, #12
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x52>
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d043      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0xd0>
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d144      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f48:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f4c:	e044      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	220f      	movs	r2, #15
 8002f54:	4013      	ands	r3, r2
 8002f56:	2214      	movs	r2, #20
 8002f58:	18ba      	adds	r2, r7, r2
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	220f      	movs	r2, #15
 8002f64:	4013      	ands	r3, r2
 8002f66:	1d3a      	adds	r2, r7, #4
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6e:	23c0      	movs	r3, #192	; 0xc0
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f7e:	481c      	ldr	r0, [pc, #112]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f80:	f7fd f8c2 	bl	8000108 <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	001a      	movs	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	4353      	muls	r3, r2
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	e01a      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	401a      	ands	r2, r3
 8002f98:	23c0      	movs	r3, #192	; 0xc0
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa2:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa4:	f7fd f8b0 	bl	8000108 <__udivsi3>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	001a      	movs	r2, r3
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	4353      	muls	r3, r2
 8002fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fb8:	f7fd f8a6 	bl	8000108 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	4353      	muls	r3, r2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b00f      	add	sp, #60	; 0x3c
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	08003900 	.word	0x08003900
 8002fe8:	08003910 	.word	0x08003910
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	02dc6c00 	.word	0x02dc6c00

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e042      	b.n	8003090 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	223d      	movs	r2, #61	; 0x3d
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223c      	movs	r2, #60	; 0x3c
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd fdad 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	223d      	movs	r2, #61	; 0x3d
 800302a:	2102      	movs	r1, #2
 800302c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	0019      	movs	r1, r3
 8003038:	0010      	movs	r0, r2
 800303a:	f000 faa1 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2246      	movs	r2, #70	; 0x46
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223e      	movs	r2, #62	; 0x3e
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	223f      	movs	r2, #63	; 0x3f
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2241      	movs	r2, #65	; 0x41
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2242      	movs	r2, #66	; 0x42
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2243      	movs	r2, #67	; 0x43
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2244      	movs	r2, #68	; 0x44
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2245      	movs	r2, #69	; 0x45
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223d      	movs	r2, #61	; 0x3d
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	223d      	movs	r2, #61	; 0x3d
 80030a4:	5c9b      	ldrb	r3, [r3, r2]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e03b      	b.n	8003128 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	223d      	movs	r2, #61	; 0x3d
 80030b4:	2102      	movs	r1, #2
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_TIM_Base_Start_IT+0x98>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <HAL_TIM_Base_Start_IT+0x5a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	429a      	cmp	r2, r3
 80030dc:	d009      	beq.n	80030f2 <HAL_TIM_Base_Start_IT+0x5a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_TIM_Base_Start_IT+0x9c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIM_Base_Start_IT+0x5a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <HAL_TIM_Base_Start_IT+0xa0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d111      	bne.n	8003116 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2207      	movs	r2, #7
 80030fa:	4013      	ands	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d010      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	e007      	b.n	8003126 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40014000 	.word	0x40014000

0800313c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	438a      	bics	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <HAL_TIM_Base_Stop_IT+0x54>)
 800315c:	4013      	ands	r3, r2
 800315e:	d10d      	bne.n	800317c <HAL_TIM_Base_Stop_IT+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_TIM_Base_Stop_IT+0x58>)
 8003168:	4013      	ands	r3, r2
 800316a:	d107      	bne.n	800317c <HAL_TIM_Base_Stop_IT+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	438a      	bics	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	223d      	movs	r2, #61	; 0x3d
 8003180:	2101      	movs	r1, #1
 8003182:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	00001111 	.word	0x00001111
 8003194:	00000444 	.word	0x00000444

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d124      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11d      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2203      	movs	r2, #3
 80031c2:	4252      	negs	r2, r2
 80031c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2203      	movs	r2, #3
 80031d4:	4013      	ands	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f9b8 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e007      	b.n	80031f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f9ab 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f9b7 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	2b04      	cmp	r3, #4
 8003204:	d125      	bne.n	8003252 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2204      	movs	r2, #4
 800320e:	4013      	ands	r3, r2
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11e      	bne.n	8003252 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2205      	movs	r2, #5
 800321a:	4252      	negs	r2, r2
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f98b 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 800323a:	e007      	b.n	800324c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f97e 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f98a 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2208      	movs	r2, #8
 800325a:	4013      	ands	r3, r2
 800325c:	2b08      	cmp	r3, #8
 800325e:	d124      	bne.n	80032aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2208      	movs	r2, #8
 8003268:	4013      	ands	r3, r2
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11d      	bne.n	80032aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2209      	movs	r2, #9
 8003274:	4252      	negs	r2, r2
 8003276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2204      	movs	r2, #4
 800327c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2203      	movs	r2, #3
 8003286:	4013      	ands	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f000 f95f 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003292:	e007      	b.n	80032a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 f952 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f95e 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2210      	movs	r2, #16
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d125      	bne.n	8003304 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2210      	movs	r2, #16
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d11e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2211      	movs	r2, #17
 80032cc:	4252      	negs	r2, r2
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2208      	movs	r2, #8
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 f932 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e007      	b.n	80032fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 f925 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 f931 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10f      	bne.n	8003332 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	2b01      	cmp	r3, #1
 800331e:	d108      	bne.n	8003332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2202      	movs	r2, #2
 8003326:	4252      	negs	r2, r2
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f7fc ffcf 	bl	80002d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	4013      	ands	r3, r2
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d10f      	bne.n	8003360 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	4013      	ands	r3, r2
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d108      	bne.n	8003360 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2281      	movs	r2, #129	; 0x81
 8003354:	4252      	negs	r2, r2
 8003356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fa90 	bl	8003880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	4013      	ands	r3, r2
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d10f      	bne.n	800338e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d108      	bne.n	800338e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2241      	movs	r2, #65	; 0x41
 8003382:	4252      	negs	r2, r2
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f8f1 	bl	8003570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2220      	movs	r2, #32
 8003396:	4013      	ands	r3, r2
 8003398:	2b20      	cmp	r3, #32
 800339a:	d10f      	bne.n	80033bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d108      	bne.n	80033bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2221      	movs	r2, #33	; 0x21
 80033b0:	4252      	negs	r2, r2
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fa5a 	bl	8003870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223c      	movs	r2, #60	; 0x3c
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_ConfigClockSource+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0ab      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x170>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	223c      	movs	r2, #60	; 0x3c
 80033e0:	2101      	movs	r1, #1
 80033e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	223d      	movs	r2, #61	; 0x3d
 80033e8:	2102      	movs	r1, #2
 80033ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2277      	movs	r2, #119	; 0x77
 80033f8:	4393      	bics	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_TIM_ConfigClockSource+0x178>)
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b40      	cmp	r3, #64	; 0x40
 8003412:	d100      	bne.n	8003416 <HAL_TIM_ConfigClockSource+0x52>
 8003414:	e06b      	b.n	80034ee <HAL_TIM_ConfigClockSource+0x12a>
 8003416:	d80e      	bhi.n	8003436 <HAL_TIM_ConfigClockSource+0x72>
 8003418:	2b10      	cmp	r3, #16
 800341a:	d100      	bne.n	800341e <HAL_TIM_ConfigClockSource+0x5a>
 800341c:	e077      	b.n	800350e <HAL_TIM_ConfigClockSource+0x14a>
 800341e:	d803      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x64>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d100      	bne.n	8003426 <HAL_TIM_ConfigClockSource+0x62>
 8003424:	e073      	b.n	800350e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003426:	e07c      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003428:	2b20      	cmp	r3, #32
 800342a:	d100      	bne.n	800342e <HAL_TIM_ConfigClockSource+0x6a>
 800342c:	e06f      	b.n	800350e <HAL_TIM_ConfigClockSource+0x14a>
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d100      	bne.n	8003434 <HAL_TIM_ConfigClockSource+0x70>
 8003432:	e06c      	b.n	800350e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003434:	e075      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003436:	2b70      	cmp	r3, #112	; 0x70
 8003438:	d00e      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0x94>
 800343a:	d804      	bhi.n	8003446 <HAL_TIM_ConfigClockSource+0x82>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d036      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xea>
 8003440:	2b60      	cmp	r3, #96	; 0x60
 8003442:	d044      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003444:	e06d      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	0152      	lsls	r2, r2, #5
 800344a:	4293      	cmp	r3, r2
 800344c:	d068      	beq.n	8003520 <HAL_TIM_ConfigClockSource+0x15c>
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	0192      	lsls	r2, r2, #6
 8003452:	4293      	cmp	r3, r2
 8003454:	d017      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003456:	e064      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f000 f984 	bl	8003774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2277      	movs	r2, #119	; 0x77
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]
      break;
 8003484:	e04d      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f000 f96d 	bl	8003774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	01c9      	lsls	r1, r1, #7
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
      break;
 80034ac:	e039      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	001a      	movs	r2, r3
 80034bc:	f000 f8e0 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2150      	movs	r1, #80	; 0x50
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 f93a 	bl	8003740 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e029      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	001a      	movs	r2, r3
 80034dc:	f000 f8fe 	bl	80036dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2160      	movs	r1, #96	; 0x60
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f92a 	bl	8003740 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e019      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	001a      	movs	r2, r3
 80034fc:	f000 f8c0 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f91a 	bl	8003740 <TIM_ITRx_SetConfig>
      break;
 800350c:	e009      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	0019      	movs	r1, r3
 8003518:	0010      	movs	r0, r2
 800351a:	f000 f911 	bl	8003740 <TIM_ITRx_SetConfig>
        break;
 800351e:	e000      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003520:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223d      	movs	r2, #61	; 0x3d
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	223c      	movs	r2, #60	; 0x3c
 800352e:	2100      	movs	r1, #0
 8003530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	ffff00ff 	.word	0xffff00ff

08003540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a34      	ldr	r2, [pc, #208]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d008      	beq.n	80035aa <TIM_Base_SetConfig+0x2a>
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	05db      	lsls	r3, r3, #23
 800359e:	429a      	cmp	r2, r3
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0x2a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a30      	ldr	r2, [pc, #192]	; (8003668 <TIM_Base_SetConfig+0xe8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2270      	movs	r2, #112	; 0x70
 80035ae:	4393      	bics	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	05db      	lsls	r3, r3, #23
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d013      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00f      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <TIM_Base_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <TIM_Base_SetConfig+0xf0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a22      	ldr	r2, [pc, #136]	; (8003674 <TIM_Base_SetConfig+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0x76>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <TIM_Base_SetConfig+0xf8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <TIM_Base_SetConfig+0xfc>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	4393      	bics	r3, r2
 800360e:	001a      	movs	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <TIM_Base_SetConfig+0xe4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0xce>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <TIM_Base_SetConfig+0xf0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0xce>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <TIM_Base_SetConfig+0xf4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0xce>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <TIM_Base_SetConfig+0xf8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d103      	bne.n	8003656 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	615a      	str	r2, [r3, #20]
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b004      	add	sp, #16
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40002000 	.word	0x40002000
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800
 800367c:	fffffcff 	.word	0xfffffcff

08003680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	2201      	movs	r2, #1
 8003698:	4393      	bics	r3, r2
 800369a:	001a      	movs	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	22f0      	movs	r2, #240	; 0xf0
 80036aa:	4393      	bics	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	220a      	movs	r2, #10
 80036bc:	4393      	bics	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b006      	add	sp, #24
 80036da:	bd80      	pop	{r7, pc}

080036dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	2210      	movs	r2, #16
 80036ee:	4393      	bics	r3, r2
 80036f0:	001a      	movs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <TIM_TI2_ConfigInputStage+0x60>)
 8003706:	4013      	ands	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	22a0      	movs	r2, #160	; 0xa0
 8003718:	4393      	bics	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b006      	add	sp, #24
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	ffff0fff 	.word	0xffff0fff

08003740 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2270      	movs	r2, #112	; 0x70
 8003754:	4393      	bics	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	2207      	movs	r2, #7
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <TIM_ETR_SetConfig+0x3c>)
 800378c:	4013      	ands	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	431a      	orrs	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b006      	add	sp, #24
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	ffff00ff 	.word	0xffff00ff

080037b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223c      	movs	r2, #60	; 0x3c
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e047      	b.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223c      	movs	r2, #60	; 0x3c
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223d      	movs	r2, #61	; 0x3d
 80037d8:	2102      	movs	r1, #2
 80037da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2270      	movs	r2, #112	; 0x70
 80037f0:	4393      	bics	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00f      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	05db      	lsls	r3, r3, #23
 8003818:	429a      	cmp	r2, r3
 800381a:	d009      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10c      	bne.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	4393      	bics	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223d      	movs	r2, #61	; 0x3d
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223c      	movs	r2, #60	; 0x3c
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40000400 	.word	0x40000400
 800386c:	40014000 	.word	0x40014000

08003870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <__libc_init_array>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	2600      	movs	r6, #0
 8003894:	4d0c      	ldr	r5, [pc, #48]	; (80038c8 <__libc_init_array+0x38>)
 8003896:	4c0d      	ldr	r4, [pc, #52]	; (80038cc <__libc_init_array+0x3c>)
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	42a6      	cmp	r6, r4
 800389e:	d109      	bne.n	80038b4 <__libc_init_array+0x24>
 80038a0:	2600      	movs	r6, #0
 80038a2:	f000 f821 	bl	80038e8 <_init>
 80038a6:	4d0a      	ldr	r5, [pc, #40]	; (80038d0 <__libc_init_array+0x40>)
 80038a8:	4c0a      	ldr	r4, [pc, #40]	; (80038d4 <__libc_init_array+0x44>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	42a6      	cmp	r6, r4
 80038b0:	d105      	bne.n	80038be <__libc_init_array+0x2e>
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	00b3      	lsls	r3, r6, #2
 80038b6:	58eb      	ldr	r3, [r5, r3]
 80038b8:	4798      	blx	r3
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7ee      	b.n	800389c <__libc_init_array+0xc>
 80038be:	00b3      	lsls	r3, r6, #2
 80038c0:	58eb      	ldr	r3, [r5, r3]
 80038c2:	4798      	blx	r3
 80038c4:	3601      	adds	r6, #1
 80038c6:	e7f2      	b.n	80038ae <__libc_init_array+0x1e>
 80038c8:	08003930 	.word	0x08003930
 80038cc:	08003930 	.word	0x08003930
 80038d0:	08003930 	.word	0x08003930
 80038d4:	08003934 	.word	0x08003934

080038d8 <memset>:
 80038d8:	0003      	movs	r3, r0
 80038da:	1812      	adds	r2, r2, r0
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	7019      	strb	r1, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
