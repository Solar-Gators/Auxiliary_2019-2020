
Aux_LightsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d64  08002d64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d64  08002d64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002d78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002d78  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009671  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001547  00000000  00000000  000296a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002b600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a13  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081d6  00000000  00000000  0004596b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000925dd  00000000  00000000  0004db41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e011e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  000e019c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d1c 	.word	0x08002d1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d1c 	.word	0x08002d1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_Z8CAN_initv>:
void CAN_init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	// configure the outgoing message
	pHeader.DLC = 1;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <_Z8CAN_initv+0x70>)
 8000226:	2201      	movs	r2, #1
 8000228:	611a      	str	r2, [r3, #16]
	  pHeader.IDE = CAN_ID_STD;
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <_Z8CAN_initv+0x70>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
	  pHeader.RTR = CAN_RTR_DATA;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <_Z8CAN_initv+0x70>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]

	// this is the Aux team's CAN ID
	  pHeader.StdId = 0x3FF;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <_Z8CAN_initv+0x70>)
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <_Z8CAN_initv+0x74>)
 800023a:	601a      	str	r2, [r3, #0]
//	  pRxHeader.DLC = 1;
//	  	  pRxHeader.IDE = CAN_ID_STD;
//	  	  pRxHeader.RTR = CAN_RTR_DATA;
//	  	pRxHeader.StdId = 0x3FF;

	  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <_Z8CAN_initv+0x78>)
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]

	  // The CAN filter is set to only receive from CAN messages of identifier 0x3FF, or 1023.
	  // This is the auxiliary CAN identifier for Sunbreaker.
	  sFilterConfig.FilterIdHigh=0;
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <_Z8CAN_initv+0x78>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0x3FF;
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <_Z8CAN_initv+0x78>)
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <_Z8CAN_initv+0x74>)
 800024c:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0x0;
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <_Z8CAN_initv+0x78>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0x0;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <_Z8CAN_initv+0x78>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <_Z8CAN_initv+0x78>)
 800025c:	2201      	movs	r2, #1
 800025e:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <_Z8CAN_initv+0x78>)
 8000262:	2200      	movs	r2, #0
 8000264:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterActivation=ENABLE;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <_Z8CAN_initv+0x78>)
 8000268:	2201      	movs	r2, #1
 800026a:	621a      	str	r2, [r3, #32]
	  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <_Z8CAN_initv+0x78>)
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <_Z8CAN_initv+0x7c>)
 8000270:	0011      	movs	r1, r2
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fcd6 	bl	8000c24 <HAL_CAN_ConfigFilter>

	  HAL_CAN_Start(&hcan);
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <_Z8CAN_initv+0x7c>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fdc4 	bl	8000e08 <HAL_CAN_Start>
	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <_Z8CAN_initv+0x7c>)
 8000282:	2102      	movs	r1, #2
 8000284:	0018      	movs	r0, r3
 8000286:	f000 ff21 	bl	80010cc <HAL_CAN_ActivateNotification>
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000098 	.word	0x20000098
 8000294:	000003ff 	.word	0x000003ff
 8000298:	200000d0 	.word	0x200000d0
 800029c:	20000028 	.word	0x20000028

080002a0 <HAL_TIM_PeriodElapsedCallback>:
//            user file
//   */
//}

//For timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

	// turn signal timer, timer 2
	if (hazardsOn) {
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d00e      	beq.n	80002ce <HAL_TIM_PeriodElapsedCallback+0x2e>

		// hazards
		HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	4a14      	ldr	r2, [pc, #80]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002b6:	0019      	movs	r1, r3
 80002b8:	0010      	movs	r0, r2
 80002ba:	f001 fbbe 	bl	8001a3a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 80002be:	2380      	movs	r3, #128	; 0x80
 80002c0:	011b      	lsls	r3, r3, #4
 80002c2:	4a11      	ldr	r2, [pc, #68]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002c4:	0019      	movs	r1, r3
 80002c6:	0010      	movs	r0, r2
 80002c8:	f001 fbb7 	bl	8001a3a <HAL_GPIO_TogglePin>
		// right turn
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);

	}

}
 80002cc:	e016      	b.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (leftOn) {
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d007      	beq.n	80002e6 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002dc:	0019      	movs	r1, r3
 80002de:	0010      	movs	r0, r2
 80002e0:	f001 fbab 	bl	8001a3a <HAL_GPIO_TogglePin>
}
 80002e4:	e00a      	b.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (rightOn) {
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d006      	beq.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x5c>
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 80002ee:	2380      	movs	r3, #128	; 0x80
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002f4:	0019      	movs	r1, r3
 80002f6:	0010      	movs	r0, r2
 80002f8:	f001 fb9f 	bl	8001a3a <HAL_GPIO_TogglePin>
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b002      	add	sp, #8
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200000f9 	.word	0x200000f9
 8000308:	48000800 	.word	0x48000800
 800030c:	200000fb 	.word	0x200000fb
 8000310:	200000fc 	.word	0x200000fc

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 fb22 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f8ba 	bl	8000494 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  CAN_init();
 8000320:	f7ff ff7e 	bl	8000220 <_Z8CAN_initv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 f998 	bl	8000658 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000328:	f000 f8f8 	bl	800051c <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 800032c:	f000 f932 	bl	8000594 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */


  // clear all outputs at startup
  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	011b      	lsls	r3, r3, #4
 8000334:	484d      	ldr	r0, [pc, #308]	; (800046c <main+0x158>)
 8000336:	2200      	movs	r2, #0
 8000338:	0019      	movs	r1, r3
 800033a:	f001 fb61 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	484a      	ldr	r0, [pc, #296]	; (800046c <main+0x158>)
 8000344:	2200      	movs	r2, #0
 8000346:	0019      	movs	r1, r3
 8000348:	f001 fb5a 	bl	8001a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 800034c:	4b48      	ldr	r3, [pc, #288]	; (8000470 <main+0x15c>)
 800034e:	2200      	movs	r2, #0
 8000350:	2120      	movs	r1, #32
 8000352:	0018      	movs	r0, r3
 8000354:	f001 fb54 	bl	8001a00 <HAL_GPIO_WritePin>
  {

	  // polling
	  // while (!HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0));

	  if (canFlag) {
 8000358:	4b46      	ldr	r3, [pc, #280]	; (8000474 <main+0x160>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0fb      	beq.n	8000358 <main+0x44>

		  // clear the flag
		  canFlag = 0x00;
 8000360:	4b44      	ldr	r3, [pc, #272]	; (8000474 <main+0x160>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]

		  // update variables
		  hazardsOn = inData & hazardsBm;
 8000366:	4b44      	ldr	r3, [pc, #272]	; (8000478 <main+0x164>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2201      	movs	r2, #1
 800036c:	4013      	ands	r3, r2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b42      	ldr	r3, [pc, #264]	; (800047c <main+0x168>)
 8000372:	701a      	strb	r2, [r3, #0]
		  headlightsOn = inData & headlightsBm;
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <main+0x164>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2202      	movs	r2, #2
 800037a:	4013      	ands	r3, r2
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b40      	ldr	r3, [pc, #256]	; (8000480 <main+0x16c>)
 8000380:	701a      	strb	r2, [r3, #0]
		  leftOn = inData & leftBm;
 8000382:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <main+0x164>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2204      	movs	r2, #4
 8000388:	4013      	ands	r3, r2
 800038a:	b2da      	uxtb	r2, r3
 800038c:	4b3d      	ldr	r3, [pc, #244]	; (8000484 <main+0x170>)
 800038e:	701a      	strb	r2, [r3, #0]
		  rightOn = inData & rightBm;
 8000390:	4b39      	ldr	r3, [pc, #228]	; (8000478 <main+0x164>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2208      	movs	r2, #8
 8000396:	4013      	ands	r3, r2
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <main+0x174>)
 800039c:	701a      	strb	r2, [r3, #0]

		  if (hazardsOn) {
 800039e:	4b37      	ldr	r3, [pc, #220]	; (800047c <main+0x168>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d019      	beq.n	80003da <main+0xc6>

			  // check to see if the timer is running
			  if (!timerRunning) {
 80003a6:	4b39      	ldr	r3, [pc, #228]	; (800048c <main+0x178>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d14c      	bne.n	8000448 <main+0x134>

				  // clear turn signals
				  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	482e      	ldr	r0, [pc, #184]	; (800046c <main+0x158>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	0019      	movs	r1, r3
 80003b8:	f001 fb22 	bl	8001a00 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	482a      	ldr	r0, [pc, #168]	; (800046c <main+0x158>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	0019      	movs	r1, r3
 80003c6:	f001 fb1b 	bl	8001a00 <HAL_GPIO_WritePin>

				  timerRunning = 0x01;
 80003ca:	4b30      	ldr	r3, [pc, #192]	; (800048c <main+0x178>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
				  // start the timer
				  HAL_TIM_Base_Start_IT(&htim2);
 80003d0:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <main+0x17c>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f002 f87a 	bl	80024cc <HAL_TIM_Base_Start_IT>
 80003d8:	e036      	b.n	8000448 <main+0x134>

			  }

		  } else if (leftOn | rightOn) {
 80003da:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <main+0x170>)
 80003dc:	781a      	ldrb	r2, [r3, #0]
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <main+0x174>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d019      	beq.n	800041e <main+0x10a>

			  if (!timerRunning) {
 80003ea:	4b28      	ldr	r3, [pc, #160]	; (800048c <main+0x178>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d12a      	bne.n	8000448 <main+0x134>

				  // clear turn signals
				  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	011b      	lsls	r3, r3, #4
 80003f6:	481d      	ldr	r0, [pc, #116]	; (800046c <main+0x158>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	0019      	movs	r1, r3
 80003fc:	f001 fb00 	bl	8001a00 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	4819      	ldr	r0, [pc, #100]	; (800046c <main+0x158>)
 8000406:	2200      	movs	r2, #0
 8000408:	0019      	movs	r1, r3
 800040a:	f001 faf9 	bl	8001a00 <HAL_GPIO_WritePin>

				  timerRunning = 0x01;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <main+0x178>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
				  // start the timer
				  HAL_TIM_Base_Start_IT(&htim2);
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <main+0x17c>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 f858 	bl	80024cc <HAL_TIM_Base_Start_IT>
 800041c:	e014      	b.n	8000448 <main+0x134>
			  }

		  } else {

			  // stop the timer
			  HAL_TIM_Base_Stop_IT(&htim2);
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <main+0x17c>)
 8000420:	0018      	movs	r0, r3
 8000422:	f002 f8a5 	bl	8002570 <HAL_TIM_Base_Stop_IT>
			  timerRunning = 0x00;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <main+0x178>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]

			  // clear turn signals
			  HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <main+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	0019      	movs	r1, r3
 8000436:	f001 fae3 	bl	8001a00 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <main+0x158>)
 8000440:	2200      	movs	r2, #0
 8000442:	0019      	movs	r1, r3
 8000444:	f001 fadc 	bl	8001a00 <HAL_GPIO_WritePin>

		  }

		  // update headlights
		  if (headlightsOn) {
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <main+0x16c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d006      	beq.n	800045e <main+0x14a>

			  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <main+0x15c>)
 8000452:	2201      	movs	r2, #1
 8000454:	2120      	movs	r1, #32
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fad2 	bl	8001a00 <HAL_GPIO_WritePin>
 800045c:	e77c      	b.n	8000358 <main+0x44>

		  } else {

			  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <main+0x15c>)
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	0018      	movs	r0, r3
 8000466:	f001 facb 	bl	8001a00 <HAL_GPIO_WritePin>
	  if (canFlag) {
 800046a:	e775      	b.n	8000358 <main+0x44>
 800046c:	48000800 	.word	0x48000800
 8000470:	48000400 	.word	0x48000400
 8000474:	200000f8 	.word	0x200000f8
 8000478:	200000cc 	.word	0x200000cc
 800047c:	200000f9 	.word	0x200000f9
 8000480:	200000fa 	.word	0x200000fa
 8000484:	200000fb 	.word	0x200000fb
 8000488:	200000fc 	.word	0x200000fc
 800048c:	200000fd 	.word	0x200000fd
 8000490:	20000050 	.word	0x20000050

08000494 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b093      	sub	sp, #76	; 0x4c
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	2414      	movs	r4, #20
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2334      	movs	r3, #52	; 0x34
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 fc31 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2310      	movs	r3, #16
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f002 fc2a 	bl	8002d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2220      	movs	r2, #32
 80004bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2201      	movs	r2, #1
 80004c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 facf 	bl	8001a70 <HAL_RCC_OscConfig>
 80004d2:	0003      	movs	r3, r0
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	4193      	sbcs	r3, r2
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 80004de:	f000 f92f 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2207      	movs	r2, #7
 80004e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2203      	movs	r2, #3
 80004ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2101      	movs	r1, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fe3c 	bl	800217c <HAL_RCC_ClockConfig>
 8000504:	0003      	movs	r3, r0
 8000506:	1e5a      	subs	r2, r3, #1
 8000508:	4193      	sbcs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000510:	f000 f916 	bl	8000740 <Error_Handler>
  }
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b013      	add	sp, #76	; 0x4c
 800051a:	bd90      	pop	{r4, r7, pc}

0800051c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000522:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <_ZL11MX_CAN_Initv+0x74>)
 8000524:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000528:	2206      	movs	r2, #6
 800052a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 800053a:	22c0      	movs	r2, #192	; 0xc0
 800053c:	0312      	lsls	r2, r2, #12
 800053e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	0352      	lsls	r2, r2, #13
 8000546:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000556:	2201      	movs	r2, #1
 8000558:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 800055c:	2200      	movs	r2, #0
 800055e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <_ZL11MX_CAN_Initv+0x70>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fa5a 	bl	8000a28 <HAL_CAN_Init>
 8000574:	0003      	movs	r3, r0
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	4193      	sbcs	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8000580:	f000 f8de 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	20000028 	.word	0x20000028
 8000590:	40006400 	.word	0x40006400

08000594 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	2308      	movs	r3, #8
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2310      	movs	r3, #16
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f002 fbb1 	bl	8002d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	2308      	movs	r3, #8
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 fbaa 	bl	8002d0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	05d2      	lsls	r2, r2, #23
 80005be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	00d2      	lsls	r2, r2, #3
 80005c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 26000;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <_ZL12MX_TIM2_Initv+0xc0>)
 80005d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 ff22 	bl	800242c <HAL_TIM_Base_Init>
 80005e8:	0003      	movs	r3, r0
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	4193      	sbcs	r3, r2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80005f4:	f000 f8a4 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	2108      	movs	r1, #8
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0152      	lsls	r2, r2, #5
 8000600:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000602:	187a      	adds	r2, r7, r1
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f002 f8f5 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 800060e:	0003      	movs	r3, r0
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	4193      	sbcs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 800061a:	f000 f891 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062a:	003a      	movs	r2, r7
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <_ZL12MX_TIM2_Initv+0xbc>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fad9 	bl	8002be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	0003      	movs	r3, r0
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	4193      	sbcs	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000642:	f000 f87d 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b006      	add	sp, #24
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000050 	.word	0x20000050
 8000654:	00006590 	.word	0x00006590

08000658 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	240c      	movs	r4, #12
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fb4f 	bl	8002d0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0309      	lsls	r1, r1, #12
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	031b      	lsls	r3, r3, #12
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	02c9      	lsls	r1, r1, #11
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	02db      	lsls	r3, r3, #11
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LT_out_Pin|RT_out_Pin, GPIO_PIN_RESET);
 80006c2:	23c0      	movs	r3, #192	; 0xc0
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	481c      	ldr	r0, [pc, #112]	; (8000738 <_ZL12MX_GPIO_Initv+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	0019      	movs	r1, r3
 80006cc:	f001 f998 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <_ZL12MX_GPIO_Initv+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 f992 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LT_out_Pin RT_out_Pin */
  GPIO_InitStruct.Pin = LT_out_Pin|RT_out_Pin;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	22c0      	movs	r2, #192	; 0xc0
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2201      	movs	r2, #1
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	0021      	movs	r1, r4
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	000c      	movs	r4, r1
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <_ZL12MX_GPIO_Initv+0xe0>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f001 f805 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Headlights_out_Pin */
  GPIO_InitStruct.Pin = Headlights_out_Pin;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2220      	movs	r2, #32
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Headlights_out_GPIO_Port, &GPIO_InitStruct);
 8000720:	187b      	adds	r3, r7, r1
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <_ZL12MX_GPIO_Initv+0xe4>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f000 fff2 	bl	8001710 <HAL_GPIO_Init>

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b009      	add	sp, #36	; 0x24
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	48000800 	.word	0x48000800
 800073c:	48000400 	.word	0x48000400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000746:	e7fe      	b.n	8000746 <Error_Handler+0x6>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x44>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_MspInit+0x44>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	619a      	str	r2, [r3, #24]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x44>)
 8000768:	69da      	ldr	r2, [r3, #28]
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x44>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0549      	lsls	r1, r1, #21
 8000770:	430a      	orrs	r2, r1
 8000772:	61da      	str	r2, [r3, #28]
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_MspInit+0x44>)
 8000776:	69da      	ldr	r2, [r3, #28]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	055b      	lsls	r3, r3, #21
 800077c:	4013      	ands	r3, r2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	2314      	movs	r3, #20
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	0018      	movs	r0, r3
 800079e:	2314      	movs	r3, #20
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f002 fab2 	bl	8002d0c <memset>
  if(hcan->Instance==CAN)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <HAL_CAN_MspInit+0xa4>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d13b      	bne.n	800082a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007b4:	69da      	ldr	r2, [r3, #28]
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0489      	lsls	r1, r1, #18
 80007bc:	430a      	orrs	r2, r1
 80007be:	61da      	str	r2, [r3, #28]
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	049b      	lsls	r3, r3, #18
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_CAN_MspInit+0xa8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ea:	2114      	movs	r1, #20
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	22c0      	movs	r2, #192	; 0xc0
 80007f0:	0152      	lsls	r2, r2, #5
 80007f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2202      	movs	r2, #2
 80007f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2203      	movs	r2, #3
 8000804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2204      	movs	r2, #4
 800080a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	187a      	adds	r2, r7, r1
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 ff7b 	bl	8001710 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	201e      	movs	r0, #30
 8000820:	f000 ff44 	bl	80016ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000824:	201e      	movs	r0, #30
 8000826:	f000 ff56 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b00a      	add	sp, #40	; 0x28
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40006400 	.word	0x40006400
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	429a      	cmp	r2, r3
 800084e:	d113      	bne.n	8000878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	61da      	str	r2, [r3, #28]
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	200f      	movs	r0, #15
 800086e:	f000 ff1d 	bl	80016ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 ff2f 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f8a2 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <TIM2_IRQHandler+0x14>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fe86 	bl	80025cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000050 	.word	0x20000050

080008cc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <CEC_CAN_IRQHandler+0x24>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fc24 	bl	8001120 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, &inData);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <CEC_CAN_IRQHandler+0x28>)
 80008da:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <CEC_CAN_IRQHandler+0x2c>)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <CEC_CAN_IRQHandler+0x24>)
 80008de:	2100      	movs	r1, #0
 80008e0:	f000 fad8 	bl	8000e94 <HAL_CAN_GetRxMessage>
  canFlag = 0x01;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <CEC_CAN_IRQHandler+0x30>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000028 	.word	0x20000028
 80008f4:	200000cc 	.word	0x200000cc
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	200000f8 	.word	0x200000f8

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000936:	f7ff ffe3 	bl	8000900 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800093a:	f002 f9c3 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fce9 	bl	8000314 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000950:	08002d6c 	.word	0x08002d6c
  ldr r2, =_sbss
 8000954:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000958:	20000104 	.word	0x20000104

0800095c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_COMP_IRQHandler>
	...

08000960 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_Init+0x24>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_Init+0x24>)
 800096a:	2110      	movs	r1, #16
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000970:	2000      	movs	r0, #0
 8000972:	f000 f809 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000976:	f7ff fee7 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_InitTick+0x5c>)
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	0019      	movs	r1, r3
 800099a:	23fa      	movs	r3, #250	; 0xfa
 800099c:	0098      	lsls	r0, r3, #2
 800099e:	f7ff fbb3 	bl	8000108 <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	0019      	movs	r1, r3
 80009a6:	0020      	movs	r0, r4
 80009a8:	f7ff fbae 	bl	8000108 <__udivsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fea1 	bl	80016f6 <HAL_SYSTICK_Config>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e00f      	b.n	80009dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d80b      	bhi.n	80009da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	2200      	movs	r2, #0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fe6e 	bl	80016ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_InitTick+0x64>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b003      	add	sp, #12
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x20>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	18d2      	adds	r2, r2, r3
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_IncTick+0x20>)
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000100 	.word	0x20000100

08000a14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_GetTick+0x10>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000100 	.word	0x20000100

08000a28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0f0      	b.n	8000c1c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fea1 	bl	8000790 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2102      	movs	r1, #2
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a5e:	f7ff ffd9 	bl	8000a14 <HAL_GetTick>
 8000a62:	0003      	movs	r3, r0
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a66:	e013      	b.n	8000a90 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a68:	f7ff ffd4 	bl	8000a14 <HAL_GetTick>
 8000a6c:	0002      	movs	r2, r0
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d90c      	bls.n	8000a90 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	0292      	lsls	r2, r2, #10
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2220      	movs	r2, #32
 8000a88:	2105      	movs	r1, #5
 8000a8a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e0c5      	b.n	8000c1c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d1e5      	bne.n	8000a68 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aac:	f7ff ffb2 	bl	8000a14 <HAL_GetTick>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ab4:	e013      	b.n	8000ade <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab6:	f7ff ffad 	bl	8000a14 <HAL_GetTick>
 8000aba:	0002      	movs	r2, r0
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d90c      	bls.n	8000ade <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0292      	lsls	r2, r2, #10
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e09e      	b.n	8000c1c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d0e5      	beq.n	8000ab6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e1b      	ldrb	r3, [r3, #24]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d108      	bne.n	8000b04 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	438a      	bics	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7e5b      	ldrb	r3, [r3, #25]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d108      	bne.n	8000b2e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7e9b      	ldrb	r3, [r3, #26]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2120      	movs	r1, #32
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2120      	movs	r1, #32
 8000b64:	438a      	bics	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7edb      	ldrb	r3, [r3, #27]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e007      	b.n	8000b92 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7f1b      	ldrb	r3, [r3, #28]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e007      	b.n	8000bbc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	438a      	bics	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7f5b      	ldrb	r3, [r3, #29]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d108      	bne.n	8000bd6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2104      	movs	r1, #4
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2104      	movs	r1, #4
 8000be2:	438a      	bics	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2220      	movs	r2, #32
 8000c16:	2101      	movs	r1, #1
 8000c18:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c34:	2013      	movs	r0, #19
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	5c52      	ldrb	r2, [r2, r1]
 8000c3e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c40:	183b      	adds	r3, r7, r0
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_CAN_ConfigFilter+0x30>
 8000c48:	2313      	movs	r3, #19
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d000      	beq.n	8000c54 <HAL_CAN_ConfigFilter+0x30>
 8000c52:	e0cd      	b.n	8000df0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	58d3      	ldr	r3, [r2, r3]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	0011      	movs	r1, r2
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	221f      	movs	r2, #31
 8000c70:	4013      	ands	r3, r2
 8000c72:	2201      	movs	r2, #1
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	2387      	movs	r3, #135	; 0x87
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	58d3      	ldr	r3, [r2, r3]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	0011      	movs	r1, r2
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	2387      	movs	r3, #135	; 0x87
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d129      	bne.n	8000cee <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	2383      	movs	r3, #131	; 0x83
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	58d3      	ldr	r3, [r2, r3]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	2383      	movs	r3, #131	; 0x83
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	041b      	lsls	r3, r3, #16
 8000cbe:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cc4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3248      	adds	r2, #72	; 0x48
 8000cca:	00d2      	lsls	r2, r2, #3
 8000ccc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	041b      	lsls	r3, r3, #16
 8000cda:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ce2:	6979      	ldr	r1, [r7, #20]
 8000ce4:	3348      	adds	r3, #72	; 0x48
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	18cb      	adds	r3, r1, r3
 8000cea:	3304      	adds	r3, #4
 8000cec:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d128      	bne.n	8000d48 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	2383      	movs	r3, #131	; 0x83
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58d2      	ldr	r2, [r2, r3]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	2383      	movs	r3, #131	; 0x83
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d1e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3248      	adds	r2, #72	; 0x48
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d3c:	6979      	ldr	r1, [r7, #20]
 8000d3e:	3348      	adds	r3, #72	; 0x48
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	18cb      	adds	r3, r1, r3
 8000d44:	3304      	adds	r3, #4
 8000d46:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	2381      	movs	r3, #129	; 0x81
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	58d3      	ldr	r3, [r2, r3]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	43d2      	mvns	r2, r2
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	0011      	movs	r1, r2
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	2381      	movs	r3, #129	; 0x81
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	50d1      	str	r1, [r2, r3]
 8000d68:	e00a      	b.n	8000d80 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	2381      	movs	r3, #129	; 0x81
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	58d2      	ldr	r2, [r2, r3]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	0011      	movs	r1, r2
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2381      	movs	r3, #129	; 0x81
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10c      	bne.n	8000da2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	2385      	movs	r3, #133	; 0x85
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	58d3      	ldr	r3, [r2, r3]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	401a      	ands	r2, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	2385      	movs	r3, #133	; 0x85
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	50d1      	str	r1, [r2, r3]
 8000da0:	e00a      	b.n	8000db8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	2385      	movs	r3, #133	; 0x85
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	58d2      	ldr	r2, [r2, r3]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	0011      	movs	r1, r2
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2385      	movs	r3, #133	; 0x85
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d10a      	bne.n	8000dd6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	2387      	movs	r3, #135	; 0x87
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	58d2      	ldr	r2, [r2, r3]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	0011      	movs	r1, r2
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	2387      	movs	r3, #135	; 0x87
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	58d3      	ldr	r3, [r2, r3]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4393      	bics	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e007      	b.n	8000e00 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	02d2      	lsls	r2, r2, #11
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
  }
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b006      	add	sp, #24
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	5c9b      	ldrb	r3, [r3, r2]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d12f      	bne.n	8000e7c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2102      	movs	r1, #2
 8000e22:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	438a      	bics	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e34:	f7ff fdee 	bl	8000a14 <HAL_GetTick>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e3c:	e013      	b.n	8000e66 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e3e:	f7ff fde9 	bl	8000a14 <HAL_GetTick>
 8000e42:	0002      	movs	r2, r0
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d90c      	bls.n	8000e66 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0292      	lsls	r2, r2, #10
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	2105      	movs	r1, #5
 8000e60:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e012      	b.n	8000e8c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d1e5      	bne.n	8000e3e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e007      	b.n	8000e8c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	0312      	lsls	r2, r2, #12
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
  }
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea2:	2017      	movs	r0, #23
 8000ea4:	183b      	adds	r3, r7, r0
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	5c52      	ldrb	r2, [r2, r1]
 8000eac:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_CAN_GetRxMessage+0x2e>
 8000eb6:	2317      	movs	r3, #23
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d000      	beq.n	8000ec2 <HAL_CAN_GetRxMessage+0x2e>
 8000ec0:	e0f8      	b.n	80010b4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10e      	bne.n	8000ee6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d117      	bne.n	8000f04 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	0392      	lsls	r2, r2, #14
 8000edc:	431a      	orrs	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0ee      	b.n	80010c4 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d108      	bne.n	8000f04 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0392      	lsls	r2, r2, #14
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0df      	b.n	80010c4 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	321b      	adds	r2, #27
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	58d3      	ldr	r3, [r2, r3]
 8000f10:	2204      	movs	r2, #4
 8000f12:	401a      	ands	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10b      	bne.n	8000f38 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	321b      	adds	r2, #27
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	58d3      	ldr	r3, [r2, r3]
 8000f2c:	0d5b      	lsrs	r3, r3, #21
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	0d5a      	lsrs	r2, r3, #21
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e00a      	b.n	8000f4e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	321b      	adds	r2, #27
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	321b      	adds	r2, #27
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	58d3      	ldr	r3, [r2, r3]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	331b      	adds	r3, #27
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	18d3      	adds	r3, r2, r3
 8000f6e:	3304      	adds	r3, #4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	220f      	movs	r2, #15
 8000f74:	401a      	ands	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	331b      	adds	r3, #27
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	331b      	adds	r3, #27
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	18d3      	adds	r3, r2, r3
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	0c1a      	lsrs	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6819      	ldr	r1, [r3, #0]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	23dc      	movs	r3, #220	; 0xdc
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	188a      	adds	r2, r1, r2
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	23dc      	movs	r3, #220	; 0xdc
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	188a      	adds	r2, r1, r2
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0a1a      	lsrs	r2, r3, #8
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	23dc      	movs	r3, #220	; 0xdc
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	188a      	adds	r2, r1, r2
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0c1a      	lsrs	r2, r3, #16
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	23dc      	movs	r3, #220	; 0xdc
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	188a      	adds	r2, r1, r2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0e1a      	lsrs	r2, r3, #24
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3303      	adds	r3, #3
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	23de      	movs	r3, #222	; 0xde
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	188a      	adds	r2, r1, r2
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3304      	adds	r3, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	23de      	movs	r3, #222	; 0xde
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	188a      	adds	r2, r1, r2
 8001042:	18d3      	adds	r3, r2, r3
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0a1a      	lsrs	r2, r3, #8
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3305      	adds	r3, #5
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	23de      	movs	r3, #222	; 0xde
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	188a      	adds	r2, r1, r2
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0c1a      	lsrs	r2, r3, #16
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3306      	adds	r3, #6
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	23de      	movs	r3, #222	; 0xde
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	188a      	adds	r2, r1, r2
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0e1a      	lsrs	r2, r3, #24
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3307      	adds	r3, #7
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d108      	bne.n	80010a0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2120      	movs	r1, #32
 800109a:	430a      	orrs	r2, r1
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	e007      	b.n	80010b0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2120      	movs	r1, #32
 80010ac:	430a      	orrs	r2, r1
 80010ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e007      	b.n	80010c4 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	02d2      	lsls	r2, r2, #11
 80010bc:	431a      	orrs	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
  }
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d6:	200f      	movs	r0, #15
 80010d8:	183b      	adds	r3, r7, r0
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	2120      	movs	r1, #32
 80010de:	5c52      	ldrb	r2, [r2, r1]
 80010e0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d004      	beq.n	80010f4 <HAL_CAN_ActivateNotification+0x28>
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d109      	bne.n	8001108 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6959      	ldr	r1, [r3, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e007      	b.n	8001118 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	02d2      	lsls	r2, r2, #11
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
  }
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	d100      	bne.n	8001166 <HAL_CAN_IRQHandler+0x46>
 8001164:	e084      	b.n	8001270 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2201      	movs	r2, #1
 800116a:	4013      	ands	r3, r2
 800116c:	d024      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2201      	movs	r2, #1
 8001174:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 f97e 	bl	8001482 <HAL_CAN_TxMailbox0CompleteCallback>
 8001186:	e017      	b.n	80011b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	d005      	beq.n	800119c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	4313      	orrs	r3, r2
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
 800119a:	e00d      	b.n	80011b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2208      	movs	r2, #8
 80011a0:	4013      	ands	r3, r2
 80011a2:	d005      	beq.n	80011b0 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0152      	lsls	r2, r2, #5
 80011aa:	4313      	orrs	r3, r2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
 80011ae:	e003      	b.n	80011b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f97d 	bl	80014b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4013      	ands	r3, r2
 80011c0:	d028      	beq.n	8001214 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0052      	lsls	r2, r2, #1
 80011ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d004      	beq.n	80011e0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 f95a 	bl	8001492 <HAL_CAN_TxMailbox1CompleteCallback>
 80011de:	e019      	b.n	8001214 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4013      	ands	r3, r2
 80011e8:	d005      	beq.n	80011f6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	0192      	lsls	r2, r2, #6
 80011f0:	4313      	orrs	r3, r2
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
 80011f4:	e00e      	b.n	8001214 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4013      	ands	r3, r2
 80011fe:	d005      	beq.n	800120c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	01d2      	lsls	r2, r2, #7
 8001206:	4313      	orrs	r3, r2
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e003      	b.n	8001214 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f957 	bl	80014c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	d028      	beq.n	8001270 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	0252      	lsls	r2, r2, #9
 8001226:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d004      	beq.n	800123c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	0018      	movs	r0, r3
 8001236:	f000 f934 	bl	80014a2 <HAL_CAN_TxMailbox2CompleteCallback>
 800123a:	e019      	b.n	8001270 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	02db      	lsls	r3, r3, #11
 8001242:	4013      	ands	r3, r2
 8001244:	d005      	beq.n	8001252 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0212      	lsls	r2, r2, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	e00e      	b.n	8001270 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	031b      	lsls	r3, r3, #12
 8001258:	4013      	ands	r3, r2
 800125a:	d005      	beq.n	8001268 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	0252      	lsls	r2, r2, #9
 8001262:	4313      	orrs	r3, r2
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	e003      	b.n	8001270 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f931 	bl	80014d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2208      	movs	r2, #8
 8001274:	4013      	ands	r3, r2
 8001276:	d00c      	beq.n	8001292 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2210      	movs	r2, #16
 800127c:	4013      	ands	r3, r2
 800127e:	d008      	beq.n	8001292 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4313      	orrs	r3, r2
 8001288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	2204      	movs	r2, #4
 8001296:	4013      	ands	r3, r2
 8001298:	d00b      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2208      	movs	r2, #8
 800129e:	4013      	ands	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2208      	movs	r2, #8
 80012a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 f920 	bl	80014f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d009      	beq.n	80012ce <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2203      	movs	r2, #3
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f90a 	bl	80014e2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	4013      	ands	r3, r2
 80012d4:	d00c      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2210      	movs	r2, #16
 80012da:	4013      	ands	r3, r2
 80012dc:	d008      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	00d2      	lsls	r2, r2, #3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2210      	movs	r2, #16
 80012ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2220      	movs	r2, #32
 80012f4:	4013      	ands	r3, r2
 80012f6:	d00b      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2208      	movs	r2, #8
 80012fc:	4013      	ands	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f901 	bl	8001512 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	d009      	beq.n	800132c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8eb 	bl	8001502 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800132c:	6a3a      	ldr	r2, [r7, #32]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d00b      	beq.n	800134e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2210      	movs	r2, #16
 800133a:	4013      	ands	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2210      	movs	r2, #16
 8001344:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f000 f8ea 	bl	8001522 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	4013      	ands	r3, r2
 8001356:	d00b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2208      	movs	r2, #8
 800135c:	4013      	ands	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2208      	movs	r2, #8
 8001366:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	0018      	movs	r0, r3
 800136c:	f000 f8e1 	bl	8001532 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_CAN_IRQHandler+0x25c>
 800137a:	e071      	b.n	8001460 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2204      	movs	r2, #4
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_CAN_IRQHandler+0x266>
 8001384:	e068      	b.n	8001458 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4013      	ands	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	2201      	movs	r2, #1
 800139c:	4313      	orrs	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b0:	d003      	beq.n	80013ba <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	2202      	movs	r2, #2
 80013b6:	4313      	orrs	r3, r2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ca:	d003      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	2204      	movs	r2, #4
 80013d0:	4313      	orrs	r3, r2
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4013      	ands	r3, r2
 80013dc:	d03c      	beq.n	8001458 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2270      	movs	r2, #112	; 0x70
 80013e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013e4:	d038      	beq.n	8001458 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2270      	movs	r2, #112	; 0x70
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b30      	cmp	r3, #48	; 0x30
 80013ee:	d016      	beq.n	800141e <HAL_CAN_IRQHandler+0x2fe>
 80013f0:	d804      	bhi.n	80013fc <HAL_CAN_IRQHandler+0x2dc>
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d009      	beq.n	800140a <HAL_CAN_IRQHandler+0x2ea>
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d00c      	beq.n	8001414 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013fa:	e025      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80013fc:	2b50      	cmp	r3, #80	; 0x50
 80013fe:	d018      	beq.n	8001432 <HAL_CAN_IRQHandler+0x312>
 8001400:	2b60      	cmp	r3, #96	; 0x60
 8001402:	d01b      	beq.n	800143c <HAL_CAN_IRQHandler+0x31c>
 8001404:	2b40      	cmp	r3, #64	; 0x40
 8001406:	d00f      	beq.n	8001428 <HAL_CAN_IRQHandler+0x308>
            break;
 8001408:	e01e      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	2208      	movs	r2, #8
 800140e:	4313      	orrs	r3, r2
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001412:	e019      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	2210      	movs	r2, #16
 8001418:	4313      	orrs	r3, r2
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800141c:	e014      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	2220      	movs	r2, #32
 8001422:	4313      	orrs	r3, r2
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001426:	e00f      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	4313      	orrs	r3, r2
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001430:	e00a      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	4313      	orrs	r3, r2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800143a:	e005      	b.n	8001448 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	0052      	lsls	r2, r2, #1
 8001442:	4313      	orrs	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001446:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2170      	movs	r1, #112	; 0x70
 8001454:	438a      	bics	r2, r1
 8001456:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2204      	movs	r2, #4
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	f000 f864 	bl	8001542 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b00a      	add	sp, #40	; 0x28
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	0002      	movs	r2, r0
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b7f      	cmp	r3, #127	; 0x7f
 8001566:	d809      	bhi.n	800157c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	001a      	movs	r2, r3
 800156e:	231f      	movs	r3, #31
 8001570:	401a      	ands	r2, r3
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_EnableIRQ+0x30>)
 8001574:	2101      	movs	r1, #1
 8001576:	4091      	lsls	r1, r2
 8001578:	000a      	movs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
  }
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	0002      	movs	r2, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b7f      	cmp	r3, #127	; 0x7f
 800159c:	d828      	bhi.n	80015f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159e:	4a2f      	ldr	r2, [pc, #188]	; (800165c <__NVIC_SetPriority+0xd4>)
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	33c0      	adds	r3, #192	; 0xc0
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	589b      	ldr	r3, [r3, r2]
 80015ae:	1dfa      	adds	r2, r7, #7
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	0011      	movs	r1, r2
 80015b4:	2203      	movs	r2, #3
 80015b6:	400a      	ands	r2, r1
 80015b8:	00d2      	lsls	r2, r2, #3
 80015ba:	21ff      	movs	r1, #255	; 0xff
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	43d2      	mvns	r2, r2
 80015c2:	401a      	ands	r2, r3
 80015c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	22ff      	movs	r2, #255	; 0xff
 80015cc:	401a      	ands	r2, r3
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	2303      	movs	r3, #3
 80015d6:	4003      	ands	r3, r0
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015dc:	481f      	ldr	r0, [pc, #124]	; (800165c <__NVIC_SetPriority+0xd4>)
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	430a      	orrs	r2, r1
 80015e8:	33c0      	adds	r3, #192	; 0xc0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ee:	e031      	b.n	8001654 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <__NVIC_SetPriority+0xd8>)
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0019      	movs	r1, r3
 80015f8:	230f      	movs	r3, #15
 80015fa:	400b      	ands	r3, r1
 80015fc:	3b08      	subs	r3, #8
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3306      	adds	r3, #6
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	3304      	adds	r3, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	1dfa      	adds	r2, r7, #7
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	0011      	movs	r1, r2
 8001610:	2203      	movs	r2, #3
 8001612:	400a      	ands	r2, r1
 8001614:	00d2      	lsls	r2, r2, #3
 8001616:	21ff      	movs	r1, #255	; 0xff
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	43d2      	mvns	r2, r2
 800161e:	401a      	ands	r2, r3
 8001620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	401a      	ands	r2, r3
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	2303      	movs	r3, #3
 8001632:	4003      	ands	r3, r0
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <__NVIC_SetPriority+0xd8>)
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	001c      	movs	r4, r3
 8001640:	230f      	movs	r3, #15
 8001642:	4023      	ands	r3, r4
 8001644:	3b08      	subs	r3, #8
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	430a      	orrs	r2, r1
 800164a:	3306      	adds	r3, #6
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	18c3      	adds	r3, r0, r3
 8001650:	3304      	adds	r3, #4
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b003      	add	sp, #12
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <SysTick_Config+0x40>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e010      	b.n	800169c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <SysTick_Config+0x44>)
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	3a01      	subs	r2, #1
 8001680:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	2301      	movs	r3, #1
 8001684:	425b      	negs	r3, r3
 8001686:	2103      	movs	r1, #3
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff7d 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SysTick_Config+0x44>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x44>)
 8001696:	2207      	movs	r2, #7
 8001698:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	00ffffff 	.word	0x00ffffff
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	210f      	movs	r1, #15
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	0011      	movs	r1, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	0002      	movs	r2, r0
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff ff33 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ffaf 	bl	8001664 <SysTick_Config>
 8001706:	0003      	movs	r3, r0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e155      	b.n	80019cc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4091      	lsls	r1, r2
 800172a:	000a      	movs	r2, r1
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <HAL_GPIO_Init+0x28>
 8001736:	e146      	b.n	80019c6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d00b      	beq.n	8001758 <HAL_GPIO_Init+0x48>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174c:	2b11      	cmp	r3, #17
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	409a      	lsls	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	2201      	movs	r2, #1
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0xea>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	58d3      	ldr	r3, [r2, r3]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2207      	movs	r2, #7
 800180c:	4013      	ands	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	43da      	mvns	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2107      	movs	r1, #7
 8001826:	400b      	ands	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	6939      	ldr	r1, [r7, #16]
 8001840:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2203      	movs	r2, #3
 8001860:	401a      	ands	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	4013      	ands	r3, r2
 8001880:	d100      	bne.n	8001884 <HAL_GPIO_Init+0x174>
 8001882:	e0a0      	b.n	80019c6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2201      	movs	r2, #1
 8001896:	4013      	ands	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x2d8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	589b      	ldr	r3, [r3, r2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2203      	movs	r2, #3
 80018ae:	4013      	ands	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	43da      	mvns	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	2390      	movs	r3, #144	; 0x90
 80018c4:	05db      	lsls	r3, r3, #23
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x1ee>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x1ea>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a46      	ldr	r2, [pc, #280]	; (80019f0 <HAL_GPIO_Init+0x2e0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x1e6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x1de>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	2103      	movs	r1, #3
 8001904:	400a      	ands	r2, r1
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x2d8>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	4013      	ands	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	035b      	lsls	r3, r3, #13
 800198a:	4013      	ands	r3, r2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	4013      	ands	r3, r2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	d000      	beq.n	80019da <HAL_GPIO_Init+0x2ca>
 80019d8:	e6a2      	b.n	8001720 <HAL_GPIO_Init+0x10>
  } 
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b006      	add	sp, #24
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000c00 	.word	0x48000c00
 80019f8:	48001000 	.word	0x48001000
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	0008      	movs	r0, r1
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	1cbb      	adds	r3, r7, #2
 8001a0e:	1c02      	adds	r2, r0, #0
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	1c7b      	adds	r3, r7, #1
 8001a14:	1c0a      	adds	r2, r1, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a18:	1c7b      	adds	r3, r7, #1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a20:	1cbb      	adds	r3, r7, #2
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	1cbb      	adds	r3, r7, #2
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	000a      	movs	r2, r1
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4e:	1cbb      	adds	r3, r7, #2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	041a      	lsls	r2, r3, #16
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	1cb9      	adds	r1, r7, #2
 8001a5e:	8809      	ldrh	r1, [r1, #0]
 8001a60:	400b      	ands	r3, r1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f000 fb76 	bl	8002170 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <HAL_RCC_OscConfig+0x20>
 8001a8e:	e08e      	b.n	8001bae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a90:	4bc5      	ldr	r3, [pc, #788]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00e      	beq.n	8001aba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9c:	4bc2      	ldr	r3, [pc, #776]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d117      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x68>
 8001aa8:	4bbf      	ldr	r3, [pc, #764]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aba:	4bbb      	ldr	r3, [pc, #748]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x58>
 8001ac6:	e071      	b.n	8001bac <HAL_RCC_OscConfig+0x13c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d000      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x62>
 8001ad0:	e06c      	b.n	8001bac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f000 fb4c 	bl	8002170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x80>
 8001ae0:	4bb1      	ldr	r3, [pc, #708]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4bb0      	ldr	r3, [pc, #704]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0249      	lsls	r1, r1, #9
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e02f      	b.n	8001b50 <HAL_RCC_OscConfig+0xe0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0xa2>
 8001af8:	4bab      	ldr	r3, [pc, #684]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001afe:	49ab      	ldr	r1, [pc, #684]	; (8001dac <HAL_RCC_OscConfig+0x33c>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4ba8      	ldr	r3, [pc, #672]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4ba7      	ldr	r3, [pc, #668]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b0a:	49a9      	ldr	r1, [pc, #676]	; (8001db0 <HAL_RCC_OscConfig+0x340>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e01e      	b.n	8001b50 <HAL_RCC_OscConfig+0xe0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10e      	bne.n	8001b38 <HAL_RCC_OscConfig+0xc8>
 8001b1a:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4ba2      	ldr	r3, [pc, #648]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	02c9      	lsls	r1, r1, #11
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0249      	lsls	r1, r1, #9
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xe0>
 8001b38:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	499b      	ldr	r1, [pc, #620]	; (8001dac <HAL_RCC_OscConfig+0x33c>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4b98      	ldr	r3, [pc, #608]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	4999      	ldr	r1, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x340>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d014      	beq.n	8001b82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe ff5c 	bl	8000a14 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b62:	f7fe ff57 	bl	8000a14 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e2fd      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0xf2>
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7fe ff47 	bl	8000a14 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7fe ff42 	bl	8000a14 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e2e8      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x11c>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x14a>
 8001bb8:	e06c      	b.n	8001c94 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	220c      	movs	r2, #12
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d11f      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1a0>
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	025b      	lsls	r3, r3, #9
 8001bd8:	401a      	ands	r2, r3
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x188>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e2bb      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22f8      	movs	r2, #248	; 0xf8
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00da      	lsls	r2, r3, #3
 8001c08:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e041      	b.n	8001c94 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d024      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7fe fef6 	bl	8000a14 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7fe fef1 	bl	8000a14 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e297      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f1      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	22f8      	movs	r2, #248	; 0xf8
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fed1 	bl	8000a14 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c78:	f7fe fecc 	bl	8000a14 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e272      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f1      	bne.n	8001c78 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe feaf 	bl	8000a14 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7fe feaa 	bl	8000a14 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e250      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f1      	beq.n	8001cbc <HAL_RCC_OscConfig+0x24c>
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fe95 	bl	8000a14 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7fe fe90 	bl	8000a14 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e236      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f1      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2204      	movs	r2, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2a8>
 8001d16:	e0b5      	b.n	8001e84 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0549      	lsls	r1, r1, #21
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_RCC_OscConfig+0x344>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d11a      	bne.n	8001d92 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x344>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_RCC_OscConfig+0x344>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0049      	lsls	r1, r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fe53 	bl	8000a14 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7fe fe4e 	bl	8000a14 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1f4      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x344>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x348>
 8001d9a:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_RCC_OscConfig+0x338>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	e035      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a4>
 8001da8:	40021000 	.word	0x40021000
 8001dac:	fffeffff 	.word	0xfffeffff
 8001db0:	fffbffff 	.word	0xfffbffff
 8001db4:	40007000 	.word	0x40007000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x36a>
 8001dc0:	4bca      	ldr	r3, [pc, #808]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4bc9      	ldr	r3, [pc, #804]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
 8001dcc:	4bc7      	ldr	r3, [pc, #796]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	4bc6      	ldr	r3, [pc, #792]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x38c>
 8001de2:	4bc2      	ldr	r3, [pc, #776]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	4bc1      	ldr	r3, [pc, #772]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001de8:	2104      	movs	r1, #4
 8001dea:	430a      	orrs	r2, r1
 8001dec:	621a      	str	r2, [r3, #32]
 8001dee:	4bbf      	ldr	r3, [pc, #764]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	4bbe      	ldr	r3, [pc, #760]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	621a      	str	r2, [r3, #32]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a4>
 8001dfc:	4bbb      	ldr	r3, [pc, #748]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4bba      	ldr	r3, [pc, #744]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	4bb8      	ldr	r3, [pc, #736]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	4bb7      	ldr	r3, [pc, #732]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	2104      	movs	r1, #4
 8001e10:	438a      	bics	r2, r1
 8001e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d014      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe fdfa 	bl	8000a14 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7fe fdf5 	bl	8000a14 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4aaf      	ldr	r2, [pc, #700]	; (80020f0 <HAL_RCC_OscConfig+0x680>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e19a      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4bac      	ldr	r3, [pc, #688]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3b6>
 8001e44:	e013      	b.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7fe fde5 	bl	8000a14 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e009      	b.n	8001e64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe fde0 	bl	8000a14 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4aa5      	ldr	r2, [pc, #660]	; (80020f0 <HAL_RCC_OscConfig+0x680>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e185      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4ba1      	ldr	r3, [pc, #644]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e6e:	231f      	movs	r3, #31
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b9c      	ldr	r3, [pc, #624]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	4b9b      	ldr	r3, [pc, #620]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	499d      	ldr	r1, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x684>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d12a      	bne.n	8001eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e96:	4b95      	ldr	r3, [pc, #596]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	4b94      	ldr	r3, [pc, #592]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ea2:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	4b91      	ldr	r3, [pc, #580]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7fe fdb1 	bl	8000a14 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eb8:	f7fe fdac 	bl	8000a14 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e152      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eca:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed4:	4b85      	ldr	r3, [pc, #532]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	22f8      	movs	r2, #248	; 0xf8
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	00da      	lsls	r2, r3, #3
 8001ee4:	4b81      	ldr	r3, [pc, #516]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e034      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef4:	4b7d      	ldr	r3, [pc, #500]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001efa:	2104      	movs	r1, #4
 8001efc:	438a      	bics	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f00:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	22f8      	movs	r2, #248	; 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f18:	4b74      	ldr	r3, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	4b73      	ldr	r3, [pc, #460]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	430a      	orrs	r2, r1
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f24:	4b71      	ldr	r3, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	4b70      	ldr	r3, [pc, #448]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fd70 	bl	8000a14 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f3a:	f7fe fd6b 	bl	8000a14 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e111      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f4c:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2202      	movs	r2, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f1      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d05c      	beq.n	800201a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f60:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	220c      	movs	r2, #12
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	d00e      	beq.n	8001f8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f6c:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	220c      	movs	r2, #12
 8001f72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d114      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f78:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	23c0      	movs	r3, #192	; 0xc0
 8001f7e:	025b      	lsls	r3, r3, #9
 8001f80:	401a      	ands	r2, r3
 8001f82:	23c0      	movs	r3, #192	; 0xc0
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	4013      	ands	r3, r2
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_OscConfig+0x5a8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d03c      	beq.n	8002018 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0e6      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0249      	lsls	r1, r1, #9
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fd2c 	bl	8000a14 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc2:	f7fe fd27 	bl	8000a14 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0cd      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fd4:	4b45      	ldr	r3, [pc, #276]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	025b      	lsls	r3, r3, #9
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x552>
 8001fe0:	e01b      	b.n	800201a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	4943      	ldr	r1, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x688>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fd11 	bl	8000a14 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff8:	f7fe fd0c 	bl	8000a14 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0b2      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	025b      	lsls	r3, r3, #9
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x588>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002018:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	d100      	bne.n	8002024 <HAL_RCC_OscConfig+0x5b4>
 8002022:	e0a4      	b.n	800216e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	220c      	movs	r2, #12
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d100      	bne.n	8002032 <HAL_RCC_OscConfig+0x5c2>
 8002030:	e078      	b.n	8002124 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b02      	cmp	r3, #2
 8002038:	d14c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002040:	492e      	ldr	r1, [pc, #184]	; (80020fc <HAL_RCC_OscConfig+0x68c>)
 8002042:	400a      	ands	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fce5 	bl	8000a14 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fce0 	bl	8000a14 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e086      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	049b      	lsls	r3, r3, #18
 800206a:	4013      	ands	r3, r2
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	220f      	movs	r2, #15
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 800207e:	430a      	orrs	r2, r1
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x690>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	431a      	orrs	r2, r3
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	0449      	lsls	r1, r1, #17
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fcb3 	bl	8000a14 <HAL_GetTick>
 80020ae:	0003      	movs	r3, r0
 80020b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fcae 	bl	8000a14 <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e054      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	049b      	lsls	r3, r3, #18
 80020ce:	4013      	ands	r3, r2
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x644>
 80020d2:	e04c      	b.n	800216e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_OscConfig+0x67c>)
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <HAL_RCC_OscConfig+0x68c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fc98 	bl	8000a14 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x6a6>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	00001388 	.word	0x00001388
 80020f4:	efffffff 	.word	0xefffffff
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	feffffff 	.word	0xfeffffff
 8002100:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fc86 	bl	8000a14 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e02c      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_RCC_OscConfig+0x708>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	049b      	lsls	r3, r3, #18
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x694>
 8002122:	e024      	b.n	800216e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e01f      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_OscConfig+0x708>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x708>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	429a      	cmp	r2, r3
 800214a:	d10e      	bne.n	800216a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	220f      	movs	r2, #15
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	23f0      	movs	r3, #240	; 0xf0
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b008      	add	sp, #32
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0bf      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d911      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0a6      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2204      	movs	r2, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	d006      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80021dc:	21e0      	movs	r1, #224	; 0xe0
 80021de:	00c9      	lsls	r1, r1, #3
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	4393      	bics	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	d04c      	beq.n	800229c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d120      	bne.n	8002258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07a      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	049b      	lsls	r3, r3, #18
 800222a:	4013      	ands	r3, r2
 800222c:	d114      	bne.n	8002258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06e      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 800223c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	025b      	lsls	r3, r3, #9
 8002242:	4013      	ands	r3, r2
 8002244:	d108      	bne.n	8002258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e062      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e05b      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	4393      	bics	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800226c:	f7fe fbd2 	bl	8000a14 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	e009      	b.n	800228a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7fe fbcd 	bl	8000a14 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_RCC_ClockConfig+0x1a4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e042      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	220c      	movs	r2, #12
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1ec      	bne.n	8002276 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d211      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_RCC_ClockConfig+0x19c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e020      	b.n	8002310 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2204      	movs	r2, #4
 80022d4:	4013      	ands	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_RCC_ClockConfig+0x1a8>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ec:	f000 f820 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022f0:	0001      	movs	r1, r0
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1a0>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	220f      	movs	r2, #15
 80022fa:	4013      	ands	r3, r2
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x1ac>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	000a      	movs	r2, r1
 8002302:	40da      	lsrs	r2, r3
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1b0>)
 8002306:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fb3d 	bl	8000988 <HAL_InitTick>
  
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	00001388 	.word	0x00001388
 8002324:	fffff8ff 	.word	0xfffff8ff
 8002328:	08002d54 	.word	0x08002d54
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b08f      	sub	sp, #60	; 0x3c
 8002334:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002336:	2314      	movs	r3, #20
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	4a37      	ldr	r2, [pc, #220]	; (8002418 <HAL_RCC_GetSysClockFreq+0xe8>)
 800233c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800233e:	c313      	stmia	r3!, {r0, r1, r4}
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4a35      	ldr	r2, [pc, #212]	; (800241c <HAL_RCC_GetSysClockFreq+0xec>)
 8002348:	ca13      	ldmia	r2!, {r0, r1, r4}
 800234a:	c313      	stmia	r3!, {r0, r1, r4}
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	220c      	movs	r2, #12
 800236e:	4013      	ands	r3, r2
 8002370:	2b08      	cmp	r3, #8
 8002372:	d006      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x52>
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d043      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0xd0>
 8002378:	2b04      	cmp	r3, #4
 800237a:	d144      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf4>)
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002380:	e044      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	220f      	movs	r2, #15
 8002388:	4013      	ands	r3, r2
 800238a:	2214      	movs	r2, #20
 800238c:	18ba      	adds	r2, r7, r2
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	220f      	movs	r2, #15
 8002398:	4013      	ands	r3, r2
 800239a:	1d3a      	adds	r2, r7, #4
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	025b      	lsls	r3, r3, #9
 80023a6:	401a      	ands	r2, r3
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	025b      	lsls	r3, r3, #9
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d109      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b2:	481c      	ldr	r0, [pc, #112]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b4:	f7fd fea8 	bl	8000108 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	001a      	movs	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	4353      	muls	r3, r2
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
 80023c2:	e01a      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c6:	23c0      	movs	r3, #192	; 0xc0
 80023c8:	025b      	lsls	r3, r3, #9
 80023ca:	401a      	ands	r2, r3
 80023cc:	23c0      	movs	r3, #192	; 0xc0
 80023ce:	025b      	lsls	r3, r3, #9
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d8:	f7fd fe96 	bl	8000108 <__udivsi3>
 80023dc:	0003      	movs	r3, r0
 80023de:	001a      	movs	r2, r3
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	4353      	muls	r3, r2
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e008      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ea:	480e      	ldr	r0, [pc, #56]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023ec:	f7fd fe8c 	bl	8000108 <__udivsi3>
 80023f0:	0003      	movs	r3, r0
 80023f2:	001a      	movs	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	4353      	muls	r3, r2
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023fe:	e005      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002404:	e002      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b00f      	add	sp, #60	; 0x3c
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	08002d34 	.word	0x08002d34
 800241c:	08002d44 	.word	0x08002d44
 8002420:	40021000 	.word	0x40021000
 8002424:	007a1200 	.word	0x007a1200
 8002428:	02dc6c00 	.word	0x02dc6c00

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e042      	b.n	80024c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	223d      	movs	r2, #61	; 0x3d
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223c      	movs	r2, #60	; 0x3c
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe f9f1 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223d      	movs	r2, #61	; 0x3d
 800245e:	2102      	movs	r1, #2
 8002460:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	0019      	movs	r1, r3
 800246c:	0010      	movs	r0, r2
 800246e:	f000 faa1 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2246      	movs	r2, #70	; 0x46
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	223e      	movs	r2, #62	; 0x3e
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2241      	movs	r2, #65	; 0x41
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2242      	movs	r2, #66	; 0x42
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2243      	movs	r2, #67	; 0x43
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2244      	movs	r2, #68	; 0x44
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2245      	movs	r2, #69	; 0x45
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	223d      	movs	r2, #61	; 0x3d
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	223d      	movs	r2, #61	; 0x3d
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e03b      	b.n	800255c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223d      	movs	r2, #61	; 0x3d
 80024e8:	2102      	movs	r1, #2
 80024ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_TIM_Base_Start_IT+0x98>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00f      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x5a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	05db      	lsls	r3, r3, #23
 800250e:	429a      	cmp	r2, r3
 8002510:	d009      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x5a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_TIM_Base_Start_IT+0x9c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x5a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_TIM_Base_Start_IT+0xa0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d010      	beq.n	800255a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	e007      	b.n	800255a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40014000 	.word	0x40014000

08002570 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_TIM_Base_Stop_IT+0x54>)
 8002590:	4013      	ands	r3, r2
 8002592:	d10d      	bne.n	80025b0 <HAL_TIM_Base_Stop_IT+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_TIM_Base_Stop_IT+0x58>)
 800259c:	4013      	ands	r3, r2
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_Base_Stop_IT+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223d      	movs	r2, #61	; 0x3d
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	00001111 	.word	0x00001111
 80025c8:	00000444 	.word	0x00000444

080025cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d124      	bne.n	800262c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d11d      	bne.n	800262c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2203      	movs	r2, #3
 8002608:	4013      	ands	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 f9b8 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 8002614:	e007      	b.n	8002626 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 f9ab 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f9b7 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2204      	movs	r2, #4
 8002634:	4013      	ands	r3, r2
 8002636:	2b04      	cmp	r3, #4
 8002638:	d125      	bne.n	8002686 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2204      	movs	r2, #4
 8002642:	4013      	ands	r3, r2
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11e      	bne.n	8002686 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2205      	movs	r2, #5
 800264e:	4252      	negs	r2, r2
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	23c0      	movs	r3, #192	; 0xc0
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4013      	ands	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f98b 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 800266e:	e007      	b.n	8002680 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f97e 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f98a 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2208      	movs	r2, #8
 800268e:	4013      	ands	r3, r2
 8002690:	2b08      	cmp	r3, #8
 8002692:	d124      	bne.n	80026de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2208      	movs	r2, #8
 800269c:	4013      	ands	r3, r2
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d11d      	bne.n	80026de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2209      	movs	r2, #9
 80026a8:	4252      	negs	r2, r2
 80026aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2204      	movs	r2, #4
 80026b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f95f 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 80026c6:	e007      	b.n	80026d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f952 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f95e 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2210      	movs	r2, #16
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d125      	bne.n	8002738 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2210      	movs	r2, #16
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d11e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2211      	movs	r2, #17
 8002700:	4252      	negs	r2, r2
 8002702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2208      	movs	r2, #8
 8002708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	23c0      	movs	r3, #192	; 0xc0
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f932 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 8002720:	e007      	b.n	8002732 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f925 	bl	8002974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f931 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2201      	movs	r2, #1
 8002740:	4013      	ands	r3, r2
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10f      	bne.n	8002766 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2202      	movs	r2, #2
 800275a:	4252      	negs	r2, r2
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fd fd9d 	bl	80002a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	4013      	ands	r3, r2
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d10f      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	4013      	ands	r3, r2
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d108      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2281      	movs	r2, #129	; 0x81
 8002788:	4252      	negs	r2, r2
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fa90 	bl	8002cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	4013      	ands	r3, r2
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d10f      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d108      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2241      	movs	r2, #65	; 0x41
 80027b6:	4252      	negs	r2, r2
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f8f1 	bl	80029a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2220      	movs	r2, #32
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d10f      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	4013      	ands	r3, r2
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d108      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	4252      	negs	r2, r2
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fa5a 	bl	8002ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223c      	movs	r2, #60	; 0x3c
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x18>
 800280c:	2302      	movs	r3, #2
 800280e:	e0ab      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223c      	movs	r2, #60	; 0x3c
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	223d      	movs	r2, #61	; 0x3d
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2277      	movs	r2, #119	; 0x77
 800282c:	4393      	bics	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_TIM_ConfigClockSource+0x178>)
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d100      	bne.n	800284a <HAL_TIM_ConfigClockSource+0x52>
 8002848:	e06b      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x12a>
 800284a:	d80e      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x72>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d100      	bne.n	8002852 <HAL_TIM_ConfigClockSource+0x5a>
 8002850:	e077      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x14a>
 8002852:	d803      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x64>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d100      	bne.n	800285a <HAL_TIM_ConfigClockSource+0x62>
 8002858:	e073      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800285a:	e07c      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800285c:	2b20      	cmp	r3, #32
 800285e:	d100      	bne.n	8002862 <HAL_TIM_ConfigClockSource+0x6a>
 8002860:	e06f      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x14a>
 8002862:	2b30      	cmp	r3, #48	; 0x30
 8002864:	d100      	bne.n	8002868 <HAL_TIM_ConfigClockSource+0x70>
 8002866:	e06c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002868:	e075      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800286a:	2b70      	cmp	r3, #112	; 0x70
 800286c:	d00e      	beq.n	800288c <HAL_TIM_ConfigClockSource+0x94>
 800286e:	d804      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x82>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d036      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xea>
 8002874:	2b60      	cmp	r3, #96	; 0x60
 8002876:	d044      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002878:	e06d      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0152      	lsls	r2, r2, #5
 800287e:	4293      	cmp	r3, r2
 8002880:	d068      	beq.n	8002954 <HAL_TIM_ConfigClockSource+0x15c>
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	4293      	cmp	r3, r2
 8002888:	d017      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800288a:	e064      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f000 f984 	bl	8002ba8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2277      	movs	r2, #119	; 0x77
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
      break;
 80028b8:	e04d      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f000 f96d 	bl	8002ba8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	01c9      	lsls	r1, r1, #7
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e039      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	001a      	movs	r2, r3
 80028f0:	f000 f8e0 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2150      	movs	r1, #80	; 0x50
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f93a 	bl	8002b74 <TIM_ITRx_SetConfig>
      break;
 8002900:	e029      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	001a      	movs	r2, r3
 8002910:	f000 f8fe 	bl	8002b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2160      	movs	r1, #96	; 0x60
 800291a:	0018      	movs	r0, r3
 800291c:	f000 f92a 	bl	8002b74 <TIM_ITRx_SetConfig>
      break;
 8002920:	e019      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	001a      	movs	r2, r3
 8002930:	f000 f8c0 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f91a 	bl	8002b74 <TIM_ITRx_SetConfig>
      break;
 8002940:	e009      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0019      	movs	r1, r3
 800294c:	0010      	movs	r0, r2
 800294e:	f000 f911 	bl	8002b74 <TIM_ITRx_SetConfig>
        break;
 8002952:	e000      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002954:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	223d      	movs	r2, #61	; 0x3d
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	223c      	movs	r2, #60	; 0x3c
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	ffff00ff 	.word	0xffff00ff

08002974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d008      	beq.n	80029de <TIM_Base_SetConfig+0x2a>
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x2a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2270      	movs	r2, #112	; 0x70
 80029e2:	4393      	bics	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d013      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <TIM_Base_SetConfig+0xec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <TIM_Base_SetConfig+0xf0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <TIM_Base_SetConfig+0xf4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x76>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <TIM_Base_SetConfig+0xf8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <TIM_Base_SetConfig+0xfc>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	4393      	bics	r3, r2
 8002a42:	001a      	movs	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00b      	beq.n	8002a82 <TIM_Base_SetConfig+0xce>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <TIM_Base_SetConfig+0xf0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <TIM_Base_SetConfig+0xce>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <TIM_Base_SetConfig+0xf4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_Base_SetConfig+0xce>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <TIM_Base_SetConfig+0xf8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d103      	bne.n	8002a8a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	615a      	str	r2, [r3, #20]
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40002000 	.word	0x40002000
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40014800 	.word	0x40014800
 8002ab0:	fffffcff 	.word	0xfffffcff

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4393      	bics	r3, r2
 8002ace:	001a      	movs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	22f0      	movs	r2, #240	; 0xf0
 8002ade:	4393      	bics	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	220a      	movs	r2, #10
 8002af0:	4393      	bics	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b006      	add	sp, #24
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	2210      	movs	r2, #16
 8002b22:	4393      	bics	r3, r2
 8002b24:	001a      	movs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <TIM_TI2_ConfigInputStage+0x60>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	22a0      	movs	r2, #160	; 0xa0
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b006      	add	sp, #24
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	ffff0fff 	.word	0xffff0fff

08002b74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2270      	movs	r2, #112	; 0x70
 8002b88:	4393      	bics	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	2207      	movs	r2, #7
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <TIM_ETR_SetConfig+0x3c>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	ffff00ff 	.word	0xffff00ff

08002be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223c      	movs	r2, #60	; 0x3c
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e047      	b.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223c      	movs	r2, #60	; 0x3c
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223d      	movs	r2, #61	; 0x3d
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2270      	movs	r2, #112	; 0x70
 8002c24:	4393      	bics	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00f      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d009      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	4393      	bics	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223d      	movs	r2, #61	; 0x3d
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223c      	movs	r2, #60	; 0x3c
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	4d0c      	ldr	r5, [pc, #48]	; (8002cfc <__libc_init_array+0x38>)
 8002cca:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	f000 f821 	bl	8002d1c <_init>
 8002cda:	4d0a      	ldr	r5, [pc, #40]	; (8002d04 <__libc_init_array+0x40>)
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	; (8002d08 <__libc_init_array+0x44>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	00b3      	lsls	r3, r6, #2
 8002cea:	58eb      	ldr	r3, [r5, r3]
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	00b3      	lsls	r3, r6, #2
 8002cf4:	58eb      	ldr	r3, [r5, r3]
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08002d64 	.word	0x08002d64
 8002d00:	08002d64 	.word	0x08002d64
 8002d04:	08002d64 	.word	0x08002d64
 8002d08:	08002d68 	.word	0x08002d68

08002d0c <memset>:
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	1812      	adds	r2, r2, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	7019      	strb	r1, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <_init>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr

08002d28 <_fini>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr
