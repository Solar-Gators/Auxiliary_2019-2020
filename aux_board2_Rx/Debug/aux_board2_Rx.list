
aux_board2_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003244  08003244  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003244  08003244  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003244  08003244  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000074  080032c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080032c8  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097dc  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fc  00000000  00000000  00029878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a801  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008374  00000000  00000000  00046fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912b0  00000000  00000000  0004f315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e05c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a00  00000000  00000000  000e0618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031d8 	.word	0x080031d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080031d8 	.word	0x080031d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 f8a1 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f831 	bl	8000464 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8ad 	bl	8000560 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000406:	f000 f871 	bl	80004ec <_ZL11MX_CAN_Initv>
  *  Now, whenever we get a message, AUX_MotherReceive_Callback will run
  *  automatically.
  *
  *  Also, don't forget to StartCAN!
  */
  aux0.SetupReceive(AUX_MotherReceive_Callback);
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <main+0x60>)
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <main+0x64>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fc0f 	bl	8000c34 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 8000416:	f000 fc4b 	bl	8000cb0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(newInput_CAN)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <main+0x68>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0fb      	beq.n	800041a <main+0x26>
	{
		// Reset flag
		newInput_CAN = false;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <main+0x68>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

		// Set a debug breakpoint here to see the magic
		if (aux0Packet.headlightsOn)
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0x6c>)
 800042a:	79db      	ldrb	r3, [r3, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d003      	beq.n	8000438 <main+0x44>
		{
			did_i_leave_my_headlights_on = 1;
 8000430:	1dbb      	adds	r3, r7, #6
 8000432:	2201      	movs	r2, #1
 8000434:	801a      	strh	r2, [r3, #0]
 8000436:	e002      	b.n	800043e <main+0x4a>
		}
		else
		{
			did_i_leave_my_headlights_on = 0;
 8000438:	1dbb      	adds	r3, r7, #6
 800043a:	2200      	movs	r2, #0
 800043c:	801a      	strh	r2, [r3, #0]
		}

		// useless code to supress warnings
		did_i_leave_my_headlights_on++;
 800043e:	1dbb      	adds	r3, r7, #6
 8000440:	881a      	ldrh	r2, [r3, #0]
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	3201      	adds	r2, #1
 8000446:	801a      	strh	r2, [r3, #0]
		did_i_leave_my_headlights_on--;
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	1dbb      	adds	r3, r7, #6
 800044e:	3a01      	subs	r2, #1
 8000450:	801a      	strh	r2, [r3, #0]
	if(newInput_CAN)
 8000452:	e7e2      	b.n	800041a <main+0x26>
 8000454:	080005ad 	.word	0x080005ad
 8000458:	200000f8 	.word	0x200000f8
 800045c:	200000f4 	.word	0x200000f4
 8000460:	2000013c 	.word	0x2000013c

08000464 <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b093      	sub	sp, #76	; 0x4c
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2414      	movs	r4, #20
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2334      	movs	r3, #52	; 0x34
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 fe5c 	bl	8003132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 fe55 	bl	8003132 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2220      	movs	r2, #32
 800048c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2201      	movs	r2, #1
 8000492:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	f002 f91d 	bl	80026dc <HAL_RCC_OscConfig>
 80004a2:	0003      	movs	r3, r0
 80004a4:	1e5a      	subs	r2, r3, #1
 80004a6:	4193      	sbcs	r3, r2
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 80004ae:	f000 f8a5 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2207      	movs	r2, #7
 80004b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2203      	movs	r2, #3
 80004bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 fc8a 	bl	8002de8 <HAL_RCC_ClockConfig>
 80004d4:	0003      	movs	r3, r0
 80004d6:	1e5a      	subs	r2, r3, #1
 80004d8:	4193      	sbcs	r3, r2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80004e0:	f000 f88c 	bl	80005fc <Error_Handler>
  }
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b013      	add	sp, #76	; 0x4c
 80004ea:	bd90      	pop	{r4, r7, pc}

080004ec <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <_ZL11MX_CAN_Initv+0x70>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 80004f8:	2210      	movs	r2, #16
 80004fa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 800051c:	2200      	movs	r2, #0
 800051e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000522:	2200      	movs	r2, #0
 8000524:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000528:	2200      	movs	r2, #0
 800052a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 800052e:	2200      	movs	r2, #0
 8000530:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 8000534:	2200      	movs	r2, #0
 8000536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <_ZL11MX_CAN_Initv+0x6c>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 f864 	bl	8001608 <HAL_CAN_Init>
 8000540:	0003      	movs	r3, r0
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	4193      	sbcs	r3, r2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 800054c:	f000 f856 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	20000090 	.word	0x20000090
 800055c:	40006400 	.word	0x40006400

08000560 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	03c9      	lsls	r1, r1, #15
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	03db      	lsls	r3, r3, #15
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0289      	lsls	r1, r1, #10
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <_ZL12MX_GPIO_Initv+0x48>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	029b      	lsls	r3, r3, #10
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE>:
* aux0Packet. It also sets the flag newInput_CAN to true.
* Now, we can operate on this data in main, and we also have a flag that we
* received a new message.
*/
void AUX_MotherReceive_Callback(SUBSYSTEM_DATA_MODULE*)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
	if(!aux0.isFifoEmpty())
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE+0x44>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fbdc 	bl	8000d74 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 80005bc:	0003      	movs	r3, r0
 80005be:	001a      	movs	r2, r3
 80005c0:	2301      	movs	r3, #1
 80005c2:	4053      	eors	r3, r2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00d      	beq.n	80005e6 <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		aux0Packet = aux0.GetOldestDataPacket(&newInput_CAN);
 80005ca:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 80005cc:	003b      	movs	r3, r7
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <_Z26AUX_MotherReceive_CallbackP21SUBSYSTEM_DATA_MODULE+0x44>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f817 	bl	8000606 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 80005d8:	003b      	movs	r3, r7
 80005da:	0020      	movs	r0, r4
 80005dc:	0019      	movs	r1, r3
 80005de:	2308      	movs	r3, #8
 80005e0:	001a      	movs	r2, r3
 80005e2:	f002 fd9d 	bl	8003120 <memcpy>
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b005      	add	sp, #20
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	200000f8 	.word	0x200000f8
 80005f4:	2000013c 	.word	0x2000013c
 80005f8:	200000f4 	.word	0x200000f4

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>

08000606 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 8000606:	b590      	push	{r4, r7, lr}
 8000608:	b089      	sub	sp, #36	; 0x24
 800060a:	af00      	add	r7, sp, #0
 800060c:	6178      	str	r0, [r7, #20]
 800060e:	6139      	str	r1, [r7, #16]
 8000610:	60fa      	str	r2, [r7, #12]
	{
		CHILD_DATA returnData;
	    if(success)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01a      	beq.n	800064e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	3312      	adds	r3, #18
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f819 	bl	8000658 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000626:	0003      	movs	r3, r0
 8000628:	61fb      	str	r3, [r7, #28]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00d      	beq.n	800064e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8000632:	697c      	ldr	r4, [r7, #20]
 8000634:	003b      	movs	r3, r7
 8000636:	69fa      	ldr	r2, [r7, #28]
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f99a 	bl	8000974 <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>
 8000640:	003b      	movs	r3, r7
 8000642:	0020      	movs	r0, r4
 8000644:	0019      	movs	r1, r3
 8000646:	2308      	movs	r3, #8
 8000648:	001a      	movs	r2, r3
 800064a:	f002 fd69 	bl	8003120 <memcpy>
	        }
	    }
	    return returnData;
 800064e:	46c0      	nop			; (mov r8, r8)
	}
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	46bd      	mov	sp, r7
 8000654:	b009      	add	sp, #36	; 0x24
 8000656:	bd90      	pop	{r4, r7, pc}

08000658 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 8000662:	230e      	movs	r3, #14
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	2200      	movs	r2, #0
 8000668:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	8b5a      	ldrh	r2, [r3, #26]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	8b1b      	ldrh	r3, [r3, #24]
 8000672:	429a      	cmp	r2, r3
 8000674:	d10a      	bne.n	800068c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7f1b      	ldrb	r3, [r3, #28]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d022      	beq.n	80006ca <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
            if(success)
 800068a:	e01e      	b.n	80006ca <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000698:	230e      	movs	r3, #14
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	8b52      	ldrh	r2, [r2, #26]
 80006a0:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8b5b      	ldrh	r3, [r3, #26]
 80006a6:	3301      	adds	r3, #1
 80006a8:	2103      	movs	r1, #3
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fe9c 	bl	80003e8 <__aeabi_idivmod>
 80006b0:	000b      	movs	r3, r1
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	8b5a      	ldrh	r2, [r3, #26]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8b1b      	ldrh	r3, [r3, #24]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d102      	bne.n	80006ca <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2201      	movs	r2, #1
 80006c8:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80006ca:	230e      	movs	r3, #14
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	18d3      	adds	r3, r2, r3
    }
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b004      	add	sp, #16
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d107      	bne.n	8000700 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d103      	bne.n	8000700 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AUX_MESSAGE_0 aux0;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f992 	bl	8000a24 <_ZN13AUX_MESSAGE_0C1Ev>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0000ffff 	.word	0x0000ffff
 800070c:	200000f8 	.word	0x200000f8

08000710 <_GLOBAL__sub_I_hcan>:
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <_GLOBAL__sub_I_hcan+0x14>)
 8000716:	0019      	movs	r1, r3
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff ffe1 	bl	80006e0 <_Z41__static_initialization_and_destruction_0ii>
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	0000ffff 	.word	0x0000ffff

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	619a      	str	r2, [r3, #24]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0549      	lsls	r1, r1, #21
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_MspInit+0x44>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	055b      	lsls	r3, r3, #21
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08b      	sub	sp, #44	; 0x2c
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	2314      	movs	r3, #20
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 fcd5 	bl	8003132 <memset>
  if(hcan->Instance==CAN)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <HAL_CAN_MspInit+0xa4>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d13b      	bne.n	800080a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0489      	lsls	r1, r1, #18
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	049b      	lsls	r3, r3, #18
 80007a8:	4013      	ands	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 80007b0:	695a      	ldr	r2, [r3, #20]
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0289      	lsls	r1, r1, #10
 80007b8:	430a      	orrs	r2, r1
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_CAN_MspInit+0xa8>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	029b      	lsls	r3, r3, #10
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	0152      	lsls	r2, r2, #5
 80007d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2202      	movs	r2, #2
 80007d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2203      	movs	r2, #3
 80007e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2204      	movs	r2, #4
 80007ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	187a      	adds	r2, r7, r1
 80007ee:	2390      	movs	r3, #144	; 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fdf9 	bl	80023ec <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	201e      	movs	r0, #30
 8000800:	f001 fdc2 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000804:	201e      	movs	r0, #30
 8000806:	f001 fdd4 	bl	80023b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b00b      	add	sp, #44	; 0x2c
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40006400 	.word	0x40006400
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 fec4 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
	return 1;
 8000852:	2301      	movs	r3, #1
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_kill>:

int _kill(int pid, int sig)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000864:	f002 fc32 	bl	80030cc <__errno>
 8000868:	0003      	movs	r3, r0
 800086a:	2216      	movs	r2, #22
 800086c:	601a      	str	r2, [r3, #0]
	return -1;
 800086e:	2301      	movs	r3, #1
 8000870:	425b      	negs	r3, r3
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}

0800087a <_exit>:

void _exit (int status)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000882:	2301      	movs	r3, #1
 8000884:	425a      	negs	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff ffe5 	bl	800085a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000890:	e7fe      	b.n	8000890 <_exit+0x16>

08000892 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	2408      	movs	r4, #8
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	6059      	str	r1, [r3, #4]
 80008aa:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0021      	movs	r1, r4
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	7912      	ldrb	r2, [r2, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	79db      	ldrb	r3, [r3, #7]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b25a      	sxtb	r2, r3
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	799b      	ldrb	r3, [r3, #6]
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	b25b      	sxtb	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b25a      	sxtb	r2, r3
 8000912:	187b      	adds	r3, r7, r1
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	b25b      	sxtb	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	b2da      	uxtb	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25a      	sxtb	r2, r3
 800092a:	187b      	adds	r3, r7, r1
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	015b      	lsls	r3, r3, #5
 8000930:	b25b      	sxtb	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b25b      	sxtb	r3, r3
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25a      	sxtb	r2, r3
 8000942:	187b      	adds	r3, r7, r1
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	019b      	lsls	r3, r3, #6
 8000948:	b25b      	sxtb	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b25b      	sxtb	r3, r3
 800094e:	b2da      	uxtb	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25a      	sxtb	r2, r3
 800095a:	187b      	adds	r3, r7, r1
 800095c:	78db      	ldrb	r3, [r3, #3]
 800095e:	01db      	lsls	r3, r3, #7
 8000960:	b25b      	sxtb	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b25b      	sxtb	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b005      	add	sp, #20
 8000972:	bd90      	pop	{r4, r7, pc}

08000974 <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>:

AUX_MESSAGE_0_DATA_PACKET AUX_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	assert_param(input != nullptr);

	AUX_MESSAGE_0_DATA_PACKET output;
	output.hazardsOn = input[0] & (1 << 0);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001a      	movs	r2, r3
 8000984:	2301      	movs	r3, #1
 8000986:	4013      	ands	r3, r2
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	4193      	sbcs	r3, r2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	711a      	strb	r2, [r3, #4]
	output.headlightsOn = input[0] & (1 << 1);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	2302      	movs	r3, #2
 800099a:	4013      	ands	r3, r2
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	4193      	sbcs	r3, r2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	71da      	strb	r2, [r3, #7]
	output.leftOn = input[0] & (1 << 2);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	001a      	movs	r2, r3
 80009ac:	2304      	movs	r3, #4
 80009ae:	4013      	ands	r3, r2
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	4193      	sbcs	r3, r2
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	715a      	strb	r2, [r3, #5]
	output.rightOn = input[0] & (1 << 3);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	001a      	movs	r2, r3
 80009c0:	2308      	movs	r3, #8
 80009c2:	4013      	ands	r3, r2
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	4193      	sbcs	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	719a      	strb	r2, [r3, #6]
	output.cplusOn = input[0] & (1 << 4);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001a      	movs	r2, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	4013      	ands	r3, r2
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	4193      	sbcs	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	701a      	strb	r2, [r3, #0]
	output.cminusOn = input[0] & (1 << 5);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	001a      	movs	r2, r3
 80009e8:	2320      	movs	r3, #32
 80009ea:	4013      	ands	r3, r2
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	4193      	sbcs	r3, r2
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	705a      	strb	r2, [r3, #1]
	output.hornOn = input[0] & (1 << 6);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001a      	movs	r2, r3
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	4013      	ands	r3, r2
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	4193      	sbcs	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	709a      	strb	r2, [r3, #2]
	output.regenOn = input[0] & (1 << 7);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	09db      	lsrs	r3, r3, #7
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	70da      	strb	r2, [r3, #3]

	return output;
 8000a1a:	46c0      	nop			; (mov r8, r8)
}
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_ZN13AUX_MESSAGE_0C1Ev>:

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 8000a30:	2300      	movs	r3, #0
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f000 f80c 	bl	8000a58 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
{}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	000003ff 	.word	0x000003ff
 8000a54:	08003228 	.word	0x08003228

08000a58 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	0019      	movs	r1, r3
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	1c0a      	adds	r2, r1, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	781c      	ldrb	r4, [r3, #0]
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	2324      	movs	r3, #36	; 0x24
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	2320      	movs	r3, #32
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	0023      	movs	r3, r4
 8000a8c:	f000 f886 	bl	8000b9c <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]
		{}
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b005      	add	sp, #20
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	08003234 	.word	0x08003234

08000aa4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3309      	adds	r3, #9
 8000ab0:	001c      	movs	r4, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2239      	movs	r2, #57	; 0x39
 8000ab6:	5c99      	ldrb	r1, [r3, r2]
 8000ab8:	1898      	adds	r0, r3, r2
 8000aba:	7840      	ldrb	r0, [r0, #1]
 8000abc:	0200      	lsls	r0, r0, #8
 8000abe:	4301      	orrs	r1, r0
 8000ac0:	1898      	adds	r0, r3, r2
 8000ac2:	7880      	ldrb	r0, [r0, #2]
 8000ac4:	0400      	lsls	r0, r0, #16
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	1898      	adds	r0, r3, r2
 8000aca:	78c0      	ldrb	r0, [r0, #3]
 8000acc:	0600      	lsls	r0, r0, #24
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	0008      	movs	r0, r1
 8000ad4:	189b      	adds	r3, r3, r2
 8000ad6:	791a      	ldrb	r2, [r3, #4]
 8000ad8:	7959      	ldrb	r1, [r3, #5]
 8000ada:	0209      	lsls	r1, r1, #8
 8000adc:	430a      	orrs	r2, r1
 8000ade:	7999      	ldrb	r1, [r3, #6]
 8000ae0:	0409      	lsls	r1, r1, #16
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	79db      	ldrb	r3, [r3, #7]
 8000ae6:	061b      	lsls	r3, r3, #24
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	2300      	movs	r3, #0
 8000aec:	0013      	movs	r3, r2
 8000aee:	0022      	movs	r2, r4
 8000af0:	0019      	movs	r1, r3
 8000af2:	f7ff fed3 	bl	800089c <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b003      	add	sp, #12
 8000afc:	bd90      	pop	{r4, r7, pc}

08000afe <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000afe:	b590      	push	{r4, r7, lr}
 8000b00:	b08d      	sub	sp, #52	; 0x34
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2100      	movs	r1, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 f91a 	bl	8001d44 <HAL_CAN_GetRxFifoFillLevel>
 8000b10:	0003      	movs	r3, r0
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	4193      	sbcs	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d02e      	beq.n	8000b7a <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2410      	movs	r4, #16
 8000b22:	193a      	adds	r2, r7, r4
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	2100      	movs	r1, #0
 8000b28:	f000 fff0 	bl	8001b0c <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000b2c:	0022      	movs	r2, r4
 8000b2e:	18bb      	adds	r3, r7, r2
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000b36:	18bb      	adds	r3, r7, r2
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f864 	bl	8000c10 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0d9      	beq.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	7a1b      	ldrb	r3, [r3, #8]
 8000b56:	001a      	movs	r2, r3
 8000b58:	2310      	movs	r3, #16
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d1d1      	bne.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000b62:	2308      	movs	r3, #8
 8000b64:	18fa      	adds	r2, r7, r3
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f910 	bl	8000d90 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f88a 	bl	8000c8c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000b78:	e7c5      	b.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00d      	add	sp, #52	; 0x34
 8000b80:	bd90      	pop	{r4, r7, pc}
	...

08000b84 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <CEC_CAN_IRQHandler+0x14>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 f92f 	bl	8001dee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	200001bc 	.word	0x200001bc

08000b9c <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1dbb      	adds	r3, r7, #6
 8000bae:	1c0a      	adds	r2, r1, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1dfa      	adds	r2, r7, #7
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	721a      	strb	r2, [r3, #8]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3312      	adds	r3, #18
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f8f3 	bl	8000db6 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	1dba      	adds	r2, r7, #6
 8000bd4:	2130      	movs	r1, #48	; 0x30
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	545a      	strb	r2, [r3, r1]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	2318      	movs	r3, #24
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2131      	movs	r1, #49	; 0x31
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	5453      	strb	r3, [r2, r1]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	221c      	movs	r2, #28
 8000bea:	18ba      	adds	r2, r7, r2
 8000bec:	2132      	movs	r1, #50	; 0x32
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	545a      	strb	r2, [r3, r1]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2238      	movs	r2, #56	; 0x38
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]
{}
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	08003240 	.word	0x08003240

08000c10 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f9ae 	bl	8000f80 <_ZN14RX_BINARY_TREE11FindElementEm>
 8000c24:	0003      	movs	r3, r0
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000144 	.word	0x20000144

08000c34 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2238      	movs	r2, #56	; 0x38
 8000c48:	5c9b      	ldrb	r3, [r3, r2]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4053      	eors	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d015      	beq.n	8000c80 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x4c>
    {
        bool success = SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 8000c54:	250f      	movs	r5, #15
 8000c56:	197c      	adds	r4, r7, r5
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x54>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f970 	bl	8000f44 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
 8000c64:	0003      	movs	r3, r0
 8000c66:	7023      	strb	r3, [r4, #0]
        // TODO figure out a way to make this better
		#ifdef DEBUG
        	if(!success)
 8000c68:	197b      	adds	r3, r7, r5
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4053      	eors	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d000      	beq.n	8000c78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x44>
        	{
        		__BKPT(0);
 8000c76:	be00      	bkpt	0x0000
        	}
			  // If you are at this breakpoint then your number of messages is incorrect
		#endif
        isReceiving = true;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2238      	movs	r2, #56	; 0x38
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	5499      	strb	r1, [r3, r2]
    } 
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bdb0      	pop	{r4, r5, r7, pc}
 8000c88:	20000144 	.word	0x20000144

08000c8c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	4798      	blx	r3
    }
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8000cba:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cbe:	2206      	movs	r2, #6
 8000cc0:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cd0:	22c0      	movs	r2, #192	; 0xc0
 8000cd2:	0312      	lsls	r2, r2, #12
 8000cd4:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	0352      	lsls	r2, r2, #13
 8000cdc:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 fc7f 	bl	8001608 <HAL_CAN_Init>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	1e5a      	subs	r2, r3, #1
 8000d0e:	4193      	sbcs	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 8000d16:	f7ff fc71 	bl	80005fc <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 8000d20:	003b      	movs	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8000d26:	003b      	movs	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8000d2c:	003b      	movs	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 8000d32:	003b      	movs	r3, r7
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000d44:	003a      	movs	r2, r7
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fda6 	bl	800189c <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000d52:	2102      	movs	r1, #2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 f820 	bl	8001d9a <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fe8f 	bl	8001a80 <HAL_CAN_Start>
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b00a      	add	sp, #40	; 0x28
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	200001bc 	.word	0x200001bc
 8000d70:	40006400 	.word	0x40006400

08000d74 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
	}
}

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3312      	adds	r3, #18
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 f82a 	bl	8000dda <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8000d86:	0003      	movs	r3, r0
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3312      	adds	r3, #18
 8000d9e:	240f      	movs	r4, #15
 8000da0:	193a      	adds	r2, r7, r4
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 f82d 	bl	8000e04 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	781b      	ldrb	r3, [r3, #0]
}
 8000dae:	0018      	movs	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b005      	add	sp, #20
 8000db4:	bd90      	pop	{r4, r7, pc}

08000db6 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	831a      	strh	r2, [r3, #24]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	835a      	strh	r2, [r3, #26]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	771a      	strb	r2, [r3, #28]
    {}
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	8b1a      	ldrh	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8b5b      	ldrh	r3, [r3, #26]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d105      	bne.n	8000dfa <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7f1b      	ldrb	r3, [r3, #28]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8000dfa:	2300      	movs	r3, #0
    }
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	8b5a      	ldrh	r2, [r3, #26]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8b1b      	ldrh	r3, [r3, #24]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d10d      	bne.n	8000e38 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	7f1b      	ldrb	r3, [r3, #28]
 8000e20:	2201      	movs	r2, #1
 8000e22:	4053      	eors	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d025      	beq.n	8000e7c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
            if(success)
 8000e36:	e021      	b.n	8000e7c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	8b19      	ldrh	r1, [r3, #24]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 f819 	bl	8000e84 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8b1b      	ldrh	r3, [r3, #24]
 8000e56:	3301      	adds	r3, #1
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fac4 	bl	80003e8 <__aeabi_idivmod>
 8000e60:	000b      	movs	r3, r1
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	8b1a      	ldrh	r2, [r3, #24]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	8b5b      	ldrh	r3, [r3, #26]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d103      	bne.n	8000e7c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
    }
 8000e7a:	e7ff      	b.n	8000e7c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	230a      	movs	r3, #10
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	1c0a      	adds	r2, r1, #0
 8000e94:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8000e96:	2316      	movs	r3, #22
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
 8000e9e:	2416      	movs	r4, #22
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d814      	bhi.n	8000ed2 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	18d1      	adds	r1, r2, r3
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	7808      	ldrb	r0, [r1, #0]
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	00d2      	lsls	r2, r2, #3
 8000ec0:	188a      	adds	r2, r1, r2
 8000ec2:	1c01      	adds	r1, r0, #0
 8000ec4:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	3201      	adds	r2, #1
 8000ece:	801a      	strh	r2, [r3, #0]
 8000ed0:	e7e5      	b.n	8000e9e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b007      	add	sp, #28
 8000ed8:	bd90      	pop	{r4, r7, pc}
	...

08000edc <_Z41__static_initialization_and_destruction_0ii>:
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d107      	bne.n	8000efc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d103      	bne.n	8000efc <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f814 	bl	8000f24 <_ZN14RX_BINARY_TREEC1Ev>
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	0000ffff 	.word	0x0000ffff
 8000f08:	20000144 	.word	0x20000144

08000f0c <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8000f12:	0019      	movs	r1, r3
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ffe1 	bl	8000edc <_Z41__static_initialization_and_destruction_0ii>
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	0000ffff 	.word	0x0000ffff

08000f24 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	671a      	str	r2, [r3, #112]	; 0x70
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2274      	movs	r2, #116	; 0x74
 8000f36:	2100      	movs	r1, #0
 8000f38:	5299      	strh	r1, [r3, r2]
{}
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

bool RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2274      	movs	r2, #116	; 0x74
 8000f52:	5a9b      	ldrh	r3, [r3, r2]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d80e      	bhi.n	8000f76 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
    {
        root = insert(root,new_element);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f9a9 	bl	80012be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	671a      	str	r2, [r3, #112]	; 0x70
        return true;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x34>
    }
    return false;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f80d 	bl	8000fb2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e001      	b.n	8000faa <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	e034      	b.n	8001032 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f88b 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	1c19      	adds	r1, r3, #0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	db01      	blt.n	8000fe4 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	1c19      	adds	r1, r3, #0
 8000fe4:	b2cb      	uxtb	r3, r1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff ffdd 	bl	8000fb2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	e01a      	b.n	8001032 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f871 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001008:	0002      	movs	r2, r0
 800100a:	2301      	movs	r3, #1
 800100c:	1c19      	adds	r1, r3, #0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4293      	cmp	r3, r2
 8001012:	dc01      	bgt.n	8001018 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001014:	2300      	movs	r3, #0
 8001016:	1c19      	adds	r1, r3, #0
 8001018:	b2cb      	uxtb	r3, r1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ffc3 	bl	8000fb2 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 800102c:	0003      	movs	r3, r0
 800102e:	e000      	b.n	8001032 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001030:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2274      	movs	r2, #116	; 0x74
 8001048:	5a9b      	ldrh	r3, [r3, r2]
 800104a:	001a      	movs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2274      	movs	r2, #116	; 0x74
 8001058:	5a9b      	ldrh	r3, [r3, r2]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	3304      	adds	r3, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2274      	movs	r2, #116	; 0x74
 800106a:	5a9b      	ldrh	r3, [r3, r2]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	18d3      	adds	r3, r2, r3
 8001072:	3308      	adds	r3, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2274      	movs	r2, #116	; 0x74
 800107c:	5a9b      	ldrh	r3, [r3, r2]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	330c      	adds	r3, #12
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2274      	movs	r2, #116	; 0x74
 800108e:	5a9b      	ldrh	r3, [r3, r2]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	b290      	uxth	r0, r2
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	2174      	movs	r1, #116	; 0x74
 8001098:	5250      	strh	r0, [r2, r1]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	18d3      	adds	r3, r2, r3
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d901      	bls.n	80010c0 <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	e000      	b.n	80010c2 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 80010c0:	687b      	ldr	r3, [r7, #4]
}  
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 80010da:	2300      	movs	r3, #0
 80010dc:	e001      	b.n	80010e2 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	7b1b      	ldrb	r3, [r3, #12]
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80010fa:	2301      	movs	r3, #1
 80010fc:	425b      	negs	r3, r3
 80010fe:	e009      	b.n	8001114 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	e002      	b.n	8001114 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	e001      	b.n	8001136 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 800113e:	b590      	push	{r4, r7, lr}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ffae 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 800116e:	0003      	movs	r3, r0
 8001170:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0011      	movs	r1, r2
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ffa5 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001180:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001182:	001a      	movs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	0021      	movs	r1, r4
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ff8d 	bl	80010a8 <_ZN14RX_BINARY_TREE3maxEmm>
 800118e:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff91 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 80011a8:	0003      	movs	r3, r0
 80011aa:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff88 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 80011ba:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 80011bc:	001a      	movs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0021      	movs	r1, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ff70 	bl	80010a8 <_ZN14RX_BINARY_TREE3maxEmm>
 80011c8:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 80011d4:	68fb      	ldr	r3, [r7, #12]
} 
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b005      	add	sp, #20
 80011dc:	bd90      	pop	{r4, r7, pc}

080011de <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 80011de:	b590      	push	{r4, r7, lr}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff5e 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 800120e:	0003      	movs	r3, r0
 8001210:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff ff55 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001220:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8001222:	001a      	movs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	0021      	movs	r1, r4
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff3d 	bl	80010a8 <_ZN14RX_BINARY_TREE3maxEmm>
 800122e:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0011      	movs	r1, r2
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff41 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001248:	0003      	movs	r3, r0
 800124a:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff38 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 800125a:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 800125c:	001a      	movs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0021      	movs	r1, r4
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff ff20 	bl	80010a8 <_ZN14RX_BINARY_TREE3maxEmm>
 8001268:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001274:	68fb      	ldr	r3, [r7, #12]
}  
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b005      	add	sp, #20
 800127c:	bd90      	pop	{r4, r7, pc}

0800127e <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 800128e:	2300      	movs	r3, #0
 8001290:	e011      	b.n	80012b6 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff ff15 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 80012a0:	0003      	movs	r3, r0
 80012a2:	001c      	movs	r4, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff0c 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 80012b2:	0003      	movs	r3, r0
 80012b4:	1ae3      	subs	r3, r4, r3
}  
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b003      	add	sp, #12
 80012bc:	bd90      	pop	{r4, r7, pc}

080012be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 80012be:	b590      	push	{r4, r7, lr}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff feaf 	bl	800103a <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 80012dc:	0003      	movs	r3, r0
 80012de:	e101      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff ff18 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80012ec:	0004      	movs	r4, r0
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff fef8 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80012fa:	0003      	movs	r3, r0
 80012fc:	2201      	movs	r2, #1
 80012fe:	429c      	cmp	r4, r3
 8001300:	db01      	blt.n	8001306 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 8001302:	2300      	movs	r3, #0
 8001304:	1c1a      	adds	r2, r3, #0
 8001306:	b2d3      	uxtb	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff ffd2 	bl	80012be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 800131a:	0002      	movs	r2, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	e022      	b.n	8001368 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fef7 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800132e:	0004      	movs	r4, r0
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff fed7 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800133c:	0003      	movs	r3, r0
 800133e:	2201      	movs	r2, #1
 8001340:	429c      	cmp	r4, r3
 8001342:	dc01      	bgt.n	8001348 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 8001344:	2300      	movs	r3, #0
 8001346:	1c1a      	adds	r2, r3, #0
 8001348:	b2d3      	uxtb	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ffb1 	bl	80012be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 800135c:	0002      	movs	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	e001      	b.n	8001368 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	e0bd      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff feaa 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001376:	0003      	movs	r3, r0
 8001378:	001c      	movs	r4, r3
                        height(node->right));  
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fea1 	bl	80010ca <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001388:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 800138a:	001a      	movs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	0021      	movs	r1, r4
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fe89 	bl	80010a8 <_ZN14RX_BINARY_TREE3maxEmm>
 8001396:	0003      	movs	r3, r0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff68 	bl	800127e <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 80013ae:	0003      	movs	r3, r0
 80013b0:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	dd12      	ble.n	80013de <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff feac 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80013c4:	0004      	movs	r4, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	0011      	movs	r1, r2
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fe8b 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80013d4:	0003      	movs	r3, r0
 80013d6:	429c      	cmp	r4, r3
 80013d8:	da01      	bge.n	80013de <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 80013de:	2300      	movs	r3, #0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff fea7 	bl	800113e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80013f0:	0003      	movs	r3, r0
 80013f2:	e077      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	da12      	bge.n	8001420 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	0011      	movs	r1, r2
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff fe8b 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001406:	0004      	movs	r4, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fe6a 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001416:	0003      	movs	r3, r0
 8001418:	429c      	cmp	r4, r3
 800141a:	dd01      	ble.n	8001420 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 8001420:	2300      	movs	r3, #0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fed6 	bl	80011de <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001432:	0003      	movs	r3, r0
 8001434:	e056      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b01      	cmp	r3, #1
 800143a:	dd12      	ble.n	8001462 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe6a 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001448:	0004      	movs	r4, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fe49 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001458:	0003      	movs	r3, r0
 800145a:	429c      	cmp	r4, r3
 800145c:	dd01      	ble.n	8001462 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d011      	beq.n	800148c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff feb4 	bl	80011de <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001476:	0002      	movs	r2, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	0011      	movs	r1, r2
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fe5b 	bl	800113e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001488:	0003      	movs	r3, r0
 800148a:	e02b      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	da12      	bge.n	80014b8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0011      	movs	r1, r2
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fe3f 	bl	800111c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800149e:	0004      	movs	r4, r0
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fe1e 	bl	80010ea <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80014ae:	0003      	movs	r3, r0
 80014b0:	429c      	cmp	r4, r3
 80014b2:	da01      	bge.n	80014b8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d011      	beq.n	80014e2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	0011      	movs	r1, r2
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fe39 	bl	800113e <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80014cc:	0002      	movs	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	0011      	movs	r1, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fe80 	bl	80011de <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80014de:	0003      	movs	r3, r0
 80014e0:	e000      	b.n	80014e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 80014e2:	68bb      	ldr	r3, [r7, #8]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b007      	add	sp, #28
 80014ea:	bd90      	pop	{r4, r7, pc}

080014ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001516:	f7ff f9bc 	bl	8000892 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800151a:	f001 fddd 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151e:	f7fe ff69 	bl	80003f4 <main>

08001522 <LoopForever>:

LoopForever:
    b LoopForever
 8001522:	e7fe      	b.n	8001522 <LoopForever>
  ldr   r0, =_estack
 8001524:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001530:	08003254 	.word	0x08003254
  ldr r2, =_sbss
 8001534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001538:	20000228 	.word	0x20000228

0800153c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_COMP_IRQHandler>
	...

08001540 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_Init+0x24>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_Init+0x24>)
 800154a:	2110      	movs	r1, #16
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001550:	2000      	movs	r0, #0
 8001552:	f000 f809 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff f8e7 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_InitTick+0x5c>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_InitTick+0x60>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	0019      	movs	r1, r3
 800157a:	23fa      	movs	r3, #250	; 0xfa
 800157c:	0098      	lsls	r0, r3, #2
 800157e:	f7fe fdc3 	bl	8000108 <__udivsi3>
 8001582:	0003      	movs	r3, r0
 8001584:	0019      	movs	r1, r3
 8001586:	0020      	movs	r0, r4
 8001588:	f7fe fdbe 	bl	8000108 <__udivsi3>
 800158c:	0003      	movs	r3, r0
 800158e:	0018      	movs	r0, r3
 8001590:	f000 ff1f 	bl	80023d2 <HAL_SYSTICK_Config>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e00f      	b.n	80015bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d80b      	bhi.n	80015ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	2200      	movs	r2, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 feec 	bl	8002388 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_InitTick+0x64>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b003      	add	sp, #12
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x1c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x20>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	18d2      	adds	r2, r2, r3
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_IncTick+0x20>)
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000220 	.word	0x20000220

080015f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_GetTick+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	20000220 	.word	0x20000220

08001608 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e11f      	b.n	800185a <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	5c9b      	ldrb	r3, [r3, r2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d132      	bne.n	800168c <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a8e      	ldr	r2, [pc, #568]	; (8001864 <HAL_CAN_Init+0x25c>)
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a8e      	ldr	r2, [pc, #568]	; (8001868 <HAL_CAN_Init+0x260>)
 8001630:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a8d      	ldr	r2, [pc, #564]	; (800186c <HAL_CAN_Init+0x264>)
 8001636:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a8d      	ldr	r2, [pc, #564]	; (8001870 <HAL_CAN_Init+0x268>)
 800163c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a8c      	ldr	r2, [pc, #560]	; (8001874 <HAL_CAN_Init+0x26c>)
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a8c      	ldr	r2, [pc, #560]	; (8001878 <HAL_CAN_Init+0x270>)
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a8b      	ldr	r2, [pc, #556]	; (800187c <HAL_CAN_Init+0x274>)
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <HAL_CAN_Init+0x278>)
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a8a      	ldr	r2, [pc, #552]	; (8001884 <HAL_CAN_Init+0x27c>)
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a8a      	ldr	r2, [pc, #552]	; (8001888 <HAL_CAN_Init+0x280>)
 8001660:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a89      	ldr	r2, [pc, #548]	; (800188c <HAL_CAN_Init+0x284>)
 8001666:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a89      	ldr	r2, [pc, #548]	; (8001890 <HAL_CAN_Init+0x288>)
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a88      	ldr	r2, [pc, #544]	; (8001894 <HAL_CAN_Init+0x28c>)
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a86      	ldr	r2, [pc, #536]	; (8001898 <HAL_CAN_Init+0x290>)
 8001680:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	0010      	movs	r0, r2
 800168a:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff ffaa 	bl	80015f4 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a4:	e013      	b.n	80016ce <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a6:	f7ff ffa5 	bl	80015f4 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b0a      	cmp	r3, #10
 80016b2:	d90c      	bls.n	80016ce <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	0292      	lsls	r2, r2, #10
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2220      	movs	r2, #32
 80016c6:	2105      	movs	r1, #5
 80016c8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0c5      	b.n	800185a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0e5      	beq.n	80016a6 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2102      	movs	r1, #2
 80016e6:	438a      	bics	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ea:	f7ff ff83 	bl	80015f4 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016f2:	e013      	b.n	800171c <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f4:	f7ff ff7e 	bl	80015f4 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d90c      	bls.n	800171c <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0292      	lsls	r2, r2, #10
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	2105      	movs	r1, #5
 8001716:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e09e      	b.n	800185a <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	4013      	ands	r3, r2
 8001726:	d1e5      	bne.n	80016f4 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	438a      	bics	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7e5b      	ldrb	r3, [r3, #25]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2140      	movs	r1, #64	; 0x40
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	438a      	bics	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e9b      	ldrb	r3, [r3, #26]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2120      	movs	r1, #32
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2120      	movs	r1, #32
 80017a2:	438a      	bics	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7edb      	ldrb	r3, [r3, #27]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2110      	movs	r1, #16
 80017ba:	438a      	bics	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2110      	movs	r1, #16
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2108      	movs	r1, #8
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e007      	b.n	80017fa <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2108      	movs	r1, #8
 80017f6:	438a      	bics	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7f5b      	ldrb	r3, [r3, #29]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2104      	movs	r1, #4
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2104      	movs	r1, #4
 8001820:	438a      	bics	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	431a      	orrs	r2, r3
 800183a:	0011      	movs	r1, r2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2220      	movs	r2, #32
 8001854:	2101      	movs	r1, #1
 8001856:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	08000aff 	.word	0x08000aff
 8001868:	080021d1 	.word	0x080021d1
 800186c:	080021e1 	.word	0x080021e1
 8001870:	080021f1 	.word	0x080021f1
 8001874:	08002171 	.word	0x08002171
 8001878:	08002181 	.word	0x08002181
 800187c:	08002191 	.word	0x08002191
 8001880:	080021a1 	.word	0x080021a1
 8001884:	080021b1 	.word	0x080021b1
 8001888:	080021c1 	.word	0x080021c1
 800188c:	08002201 	.word	0x08002201
 8001890:	08002211 	.word	0x08002211
 8001894:	08002221 	.word	0x08002221
 8001898:	08000771 	.word	0x08000771

0800189c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ac:	2013      	movs	r0, #19
 80018ae:	183b      	adds	r3, r7, r0
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	2120      	movs	r1, #32
 80018b4:	5c52      	ldrb	r2, [r2, r1]
 80018b6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80018b8:	0002      	movs	r2, r0
 80018ba:	18bb      	adds	r3, r7, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_ConfigFilter+0x30>
 80018c2:	18bb      	adds	r3, r7, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d000      	beq.n	80018cc <HAL_CAN_ConfigFilter+0x30>
 80018ca:	e0cd      	b.n	8001a68 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	58d3      	ldr	r3, [r2, r3]
 80018d4:	2201      	movs	r2, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	0011      	movs	r1, r2
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	221f      	movs	r2, #31
 80018e8:	4013      	ands	r3, r2
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	2387      	movs	r3, #135	; 0x87
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	58d3      	ldr	r3, [r2, r3]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	401a      	ands	r2, r3
 8001900:	0011      	movs	r1, r2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	2387      	movs	r3, #135	; 0x87
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d129      	bne.n	8001966 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	2383      	movs	r3, #131	; 0x83
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	58d3      	ldr	r3, [r2, r3]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	43d2      	mvns	r2, r2
 800191e:	401a      	ands	r2, r3
 8001920:	0011      	movs	r1, r2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	2383      	movs	r3, #131	; 0x83
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800193c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3248      	adds	r2, #72	; 0x48
 8001942:	00d2      	lsls	r2, r2, #3
 8001944:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001958:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	3348      	adds	r3, #72	; 0x48
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	18cb      	adds	r3, r1, r3
 8001962:	3304      	adds	r3, #4
 8001964:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d128      	bne.n	80019c0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	2383      	movs	r3, #131	; 0x83
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	58d2      	ldr	r2, [r2, r3]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	431a      	orrs	r2, r3
 800197a:	0011      	movs	r1, r2
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	2383      	movs	r3, #131	; 0x83
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001996:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3248      	adds	r2, #72	; 0x48
 800199c:	00d2      	lsls	r2, r2, #3
 800199e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019b4:	6979      	ldr	r1, [r7, #20]
 80019b6:	3348      	adds	r3, #72	; 0x48
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	18cb      	adds	r3, r1, r3
 80019bc:	3304      	adds	r3, #4
 80019be:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	2381      	movs	r3, #129	; 0x81
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	58d3      	ldr	r3, [r2, r3]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	43d2      	mvns	r2, r2
 80019d4:	401a      	ands	r2, r3
 80019d6:	0011      	movs	r1, r2
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	2381      	movs	r3, #129	; 0x81
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	50d1      	str	r1, [r2, r3]
 80019e0:	e00a      	b.n	80019f8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	2381      	movs	r3, #129	; 0x81
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	58d2      	ldr	r2, [r2, r3]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0011      	movs	r1, r2
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2381      	movs	r3, #129	; 0x81
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	2385      	movs	r3, #133	; 0x85
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	58d3      	ldr	r3, [r2, r3]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	43d2      	mvns	r2, r2
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	0011      	movs	r1, r2
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	2385      	movs	r3, #133	; 0x85
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	50d1      	str	r1, [r2, r3]
 8001a18:	e00a      	b.n	8001a30 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	2385      	movs	r3, #133	; 0x85
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	58d2      	ldr	r2, [r2, r3]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	0011      	movs	r1, r2
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	2385      	movs	r3, #133	; 0x85
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10a      	bne.n	8001a4e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	2387      	movs	r3, #135	; 0x87
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	58d2      	ldr	r2, [r2, r3]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	0011      	movs	r1, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	2387      	movs	r3, #135	; 0x87
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	58d3      	ldr	r3, [r2, r3]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e007      	b.n	8001a78 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	02d2      	lsls	r2, r2, #11
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b006      	add	sp, #24
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	5c9b      	ldrb	r3, [r3, r2]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d12f      	bne.n	8001af4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	2102      	movs	r1, #2
 8001a9a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fda2 	bl	80015f4 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ab4:	e013      	b.n	8001ade <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab6:	f7ff fd9d 	bl	80015f4 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b0a      	cmp	r3, #10
 8001ac2:	d90c      	bls.n	8001ade <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	0292      	lsls	r2, r2, #10
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	2105      	movs	r1, #5
 8001ad8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e012      	b.n	8001b04 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1e5      	bne.n	8001ab6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	0312      	lsls	r2, r2, #12
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
  }
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b1a:	2017      	movs	r0, #23
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	2120      	movs	r1, #32
 8001b22:	5c52      	ldrb	r2, [r2, r1]
 8001b24:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b26:	0002      	movs	r2, r0
 8001b28:	18bb      	adds	r3, r7, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d004      	beq.n	8001b3a <HAL_CAN_GetRxMessage+0x2e>
 8001b30:	18bb      	adds	r3, r7, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d000      	beq.n	8001b3a <HAL_CAN_GetRxMessage+0x2e>
 8001b38:	e0f8      	b.n	8001d2c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10e      	bne.n	8001b5e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2203      	movs	r2, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d117      	bne.n	8001b7c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0392      	lsls	r2, r2, #14
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0ee      	b.n	8001d3c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2203      	movs	r2, #3
 8001b66:	4013      	ands	r3, r2
 8001b68:	d108      	bne.n	8001b7c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	0392      	lsls	r2, r2, #14
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0df      	b.n	8001d3c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	321b      	adds	r2, #27
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	58d3      	ldr	r3, [r2, r3]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	321b      	adds	r2, #27
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	58d3      	ldr	r3, [r2, r3]
 8001ba4:	0d5b      	lsrs	r3, r3, #21
 8001ba6:	055b      	lsls	r3, r3, #21
 8001ba8:	0d5a      	lsrs	r2, r3, #21
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00a      	b.n	8001bc6 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	321b      	adds	r2, #27
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	58d3      	ldr	r3, [r2, r3]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	321b      	adds	r2, #27
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	58d3      	ldr	r3, [r2, r3]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	331b      	adds	r3, #27
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	3304      	adds	r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	220f      	movs	r2, #15
 8001bec:	401a      	ands	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	331b      	adds	r3, #27
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	401a      	ands	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	331b      	adds	r3, #27
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	0c1a      	lsrs	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	23dc      	movs	r3, #220	; 0xdc
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	188a      	adds	r2, r1, r2
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	23dc      	movs	r3, #220	; 0xdc
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	188a      	adds	r2, r1, r2
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0a1a      	lsrs	r2, r3, #8
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	23dc      	movs	r3, #220	; 0xdc
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	188a      	adds	r2, r1, r2
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0c1a      	lsrs	r2, r3, #16
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	3302      	adds	r3, #2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	23dc      	movs	r3, #220	; 0xdc
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	188a      	adds	r2, r1, r2
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e1a      	lsrs	r2, r3, #24
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	23de      	movs	r3, #222	; 0xde
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	188a      	adds	r2, r1, r2
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	23de      	movs	r3, #222	; 0xde
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	188a      	adds	r2, r1, r2
 8001cba:	18d3      	adds	r3, r2, r3
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0a1a      	lsrs	r2, r3, #8
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6819      	ldr	r1, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	23de      	movs	r3, #222	; 0xde
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	188a      	adds	r2, r1, r2
 8001cd6:	18d3      	adds	r3, r2, r3
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0c1a      	lsrs	r2, r3, #16
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3306      	adds	r3, #6
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	23de      	movs	r3, #222	; 0xde
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	188a      	adds	r2, r1, r2
 8001cf2:	18d3      	adds	r3, r2, r3
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0e1a      	lsrs	r2, r3, #24
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2120      	movs	r1, #32
 8001d12:	430a      	orrs	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2120      	movs	r1, #32
 8001d24:	430a      	orrs	r2, r1
 8001d26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e007      	b.n	8001d3c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	02d2      	lsls	r2, r2, #11
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
  }
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b006      	add	sp, #24
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d52:	200b      	movs	r0, #11
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	2120      	movs	r1, #32
 8001d5a:	5c52      	ldrb	r2, [r2, r1]
 8001d5c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5e:	0002      	movs	r2, r0
 8001d60:	18bb      	adds	r3, r7, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d003      	beq.n	8001d70 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001d68:	18bb      	adds	r3, r7, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d10f      	bne.n	8001d90 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e005      	b.n	8001d90 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da4:	200f      	movs	r0, #15
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	2120      	movs	r1, #32
 8001dac:	5c52      	ldrb	r2, [r2, r1]
 8001dae:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001db0:	0002      	movs	r2, r0
 8001db2:	18bb      	adds	r3, r7, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d003      	beq.n	8001dc2 <HAL_CAN_ActivateNotification+0x28>
 8001dba:	18bb      	adds	r3, r7, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d109      	bne.n	8001dd6 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6959      	ldr	r1, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	02d2      	lsls	r2, r2, #11
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
  }
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b08a      	sub	sp, #40	; 0x28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d100      	bne.n	8001e34 <HAL_CAN_IRQHandler+0x46>
 8001e32:	e08a      	b.n	8001f4a <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d026      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d005      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	0010      	movs	r0, r2
 8001e54:	4798      	blx	r3
 8001e56:	e018      	b.n	8001e8a <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d005      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	4313      	orrs	r3, r2
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	e00e      	b.n	8001e8a <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2208      	movs	r2, #8
 8001e70:	4013      	ands	r3, r2
 8001e72:	d005      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0152      	lsls	r2, r2, #5
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	e004      	b.n	8001e8a <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	0010      	movs	r0, r2
 8001e88:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d02a      	beq.n	8001eea <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	0010      	movs	r0, r2
 8001eb0:	4798      	blx	r3
 8001eb2:	e01a      	b.n	8001eea <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d005      	beq.n	8001eca <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	0192      	lsls	r2, r2, #6
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	e00f      	b.n	8001eea <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d005      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	01d2      	lsls	r2, r2, #7
 8001eda:	4313      	orrs	r3, r2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e004      	b.n	8001eea <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d02a      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	0252      	lsls	r2, r2, #9
 8001efc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	d005      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	0010      	movs	r0, r2
 8001f10:	4798      	blx	r3
 8001f12:	e01a      	b.n	8001f4a <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	02db      	lsls	r3, r3, #11
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d005      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0212      	lsls	r2, r2, #8
 8001f24:	4313      	orrs	r3, r2
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	e00f      	b.n	8001f4a <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	031b      	lsls	r3, r3, #12
 8001f30:	4013      	ands	r3, r2
 8001f32:	d005      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	0252      	lsls	r2, r2, #9
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3e:	e004      	b.n	8001f4a <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	0010      	movs	r0, r2
 8001f48:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d00c      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2210      	movs	r2, #16
 8001f56:	4013      	ands	r3, r2
 8001f58:	d008      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4313      	orrs	r3, r2
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d00c      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2208      	movs	r2, #8
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d008      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2208      	movs	r2, #8
 8001f82:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	0010      	movs	r0, r2
 8001f8c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d00a      	beq.n	8001fac <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	0010      	movs	r0, r2
 8001faa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00c      	beq.n	8001fce <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d008      	beq.n	8001fce <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2210      	movs	r2, #16
 8001fcc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d008      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	0010      	movs	r0, r2
 8001fee:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00a      	beq.n	800200e <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2203      	movs	r2, #3
 8002000:	4013      	ands	r3, r2
 8002002:	d004      	beq.n	800200e <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	0010      	movs	r0, r2
 800200c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d00c      	beq.n	8002032 <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2210      	movs	r2, #16
 800201c:	4013      	ands	r3, r2
 800201e:	d008      	beq.n	8002032 <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2210      	movs	r2, #16
 8002026:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	0010      	movs	r0, r2
 8002030:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002032:	6a3a      	ldr	r2, [r7, #32]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	025b      	lsls	r3, r3, #9
 8002038:	4013      	ands	r3, r2
 800203a:	d00c      	beq.n	8002056 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2208      	movs	r2, #8
 8002040:	4013      	ands	r3, r2
 8002042:	d008      	beq.n	8002056 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2208      	movs	r2, #8
 800204a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	0010      	movs	r0, r2
 8002054:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_CAN_IRQHandler+0x274>
 8002060:	e074      	b.n	800214c <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2204      	movs	r2, #4
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_CAN_IRQHandler+0x27e>
 800206a:	e06b      	b.n	8002144 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4013      	ands	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800207c:	d003      	beq.n	8002086 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	2201      	movs	r2, #1
 8002082:	4313      	orrs	r3, r2
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002086:	6a3a      	ldr	r2, [r7, #32]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002096:	d003      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	2202      	movs	r2, #2
 800209c:	4313      	orrs	r3, r2
 800209e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4013      	ands	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2204      	movs	r2, #4
 80020ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b0:	d003      	beq.n	80020ba <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	2204      	movs	r2, #4
 80020b6:	4313      	orrs	r3, r2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ba:	6a3a      	ldr	r2, [r7, #32]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4013      	ands	r3, r2
 80020c2:	d03f      	beq.n	8002144 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2270      	movs	r2, #112	; 0x70
 80020c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ca:	d03b      	beq.n	8002144 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2270      	movs	r2, #112	; 0x70
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b60      	cmp	r3, #96	; 0x60
 80020d4:	d027      	beq.n	8002126 <HAL_CAN_IRQHandler+0x338>
 80020d6:	d82c      	bhi.n	8002132 <HAL_CAN_IRQHandler+0x344>
 80020d8:	2b50      	cmp	r3, #80	; 0x50
 80020da:	d01f      	beq.n	800211c <HAL_CAN_IRQHandler+0x32e>
 80020dc:	d829      	bhi.n	8002132 <HAL_CAN_IRQHandler+0x344>
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	d017      	beq.n	8002112 <HAL_CAN_IRQHandler+0x324>
 80020e2:	d826      	bhi.n	8002132 <HAL_CAN_IRQHandler+0x344>
 80020e4:	2b30      	cmp	r3, #48	; 0x30
 80020e6:	d00f      	beq.n	8002108 <HAL_CAN_IRQHandler+0x31a>
 80020e8:	d823      	bhi.n	8002132 <HAL_CAN_IRQHandler+0x344>
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d002      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x306>
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d005      	beq.n	80020fe <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020f2:	e01e      	b.n	8002132 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	2208      	movs	r2, #8
 80020f8:	4313      	orrs	r3, r2
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020fc:	e01a      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2210      	movs	r2, #16
 8002102:	4313      	orrs	r3, r2
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002106:	e015      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	2220      	movs	r2, #32
 800210c:	4313      	orrs	r3, r2
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002110:	e010      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	4313      	orrs	r3, r2
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800211a:	e00b      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	4313      	orrs	r3, r2
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002124:	e006      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0052      	lsls	r2, r2, #1
 800212c:	4313      	orrs	r3, r2
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002130:	e000      	b.n	8002134 <HAL_CAN_IRQHandler+0x346>
            break;
 8002132:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2170      	movs	r1, #112	; 0x70
 8002140:	438a      	bics	r2, r1
 8002142:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2204      	movs	r2, #4
 800214a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	0010      	movs	r0, r2
 8002166:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b00a      	add	sp, #40	; 0x28
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	0002      	movs	r2, r0
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b7f      	cmp	r3, #127	; 0x7f
 8002242:	d809      	bhi.n	8002258 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	001a      	movs	r2, r3
 800224a:	231f      	movs	r3, #31
 800224c:	401a      	ands	r2, r3
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_EnableIRQ+0x30>)
 8002250:	2101      	movs	r1, #1
 8002252:	4091      	lsls	r1, r2
 8002254:	000a      	movs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
  }
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b7f      	cmp	r3, #127	; 0x7f
 8002278:	d828      	bhi.n	80022cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <__NVIC_SetPriority+0xd4>)
 800227c:	1dfb      	adds	r3, r7, #7
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b25b      	sxtb	r3, r3
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	33c0      	adds	r3, #192	; 0xc0
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	589b      	ldr	r3, [r3, r2]
 800228a:	1dfa      	adds	r2, r7, #7
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	0011      	movs	r1, r2
 8002290:	2203      	movs	r2, #3
 8002292:	400a      	ands	r2, r1
 8002294:	00d2      	lsls	r2, r2, #3
 8002296:	21ff      	movs	r1, #255	; 0xff
 8002298:	4091      	lsls	r1, r2
 800229a:	000a      	movs	r2, r1
 800229c:	43d2      	mvns	r2, r2
 800229e:	401a      	ands	r2, r3
 80022a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	22ff      	movs	r2, #255	; 0xff
 80022a8:	401a      	ands	r2, r3
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	0018      	movs	r0, r3
 80022b0:	2303      	movs	r3, #3
 80022b2:	4003      	ands	r3, r0
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b8:	481f      	ldr	r0, [pc, #124]	; (8002338 <__NVIC_SetPriority+0xd4>)
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	430a      	orrs	r2, r1
 80022c4:	33c0      	adds	r3, #192	; 0xc0
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022ca:	e031      	b.n	8002330 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <__NVIC_SetPriority+0xd8>)
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	0019      	movs	r1, r3
 80022d4:	230f      	movs	r3, #15
 80022d6:	400b      	ands	r3, r1
 80022d8:	3b08      	subs	r3, #8
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3306      	adds	r3, #6
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	18d3      	adds	r3, r2, r3
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1dfa      	adds	r2, r7, #7
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	0011      	movs	r1, r2
 80022ec:	2203      	movs	r2, #3
 80022ee:	400a      	ands	r2, r1
 80022f0:	00d2      	lsls	r2, r2, #3
 80022f2:	21ff      	movs	r1, #255	; 0xff
 80022f4:	4091      	lsls	r1, r2
 80022f6:	000a      	movs	r2, r1
 80022f8:	43d2      	mvns	r2, r2
 80022fa:	401a      	ands	r2, r3
 80022fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	401a      	ands	r2, r3
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	0018      	movs	r0, r3
 800230c:	2303      	movs	r3, #3
 800230e:	4003      	ands	r3, r0
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <__NVIC_SetPriority+0xd8>)
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	001c      	movs	r4, r3
 800231c:	230f      	movs	r3, #15
 800231e:	4023      	ands	r3, r4
 8002320:	3b08      	subs	r3, #8
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	430a      	orrs	r2, r1
 8002326:	3306      	adds	r3, #6
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	18c3      	adds	r3, r0, r3
 800232c:	3304      	adds	r3, #4
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b003      	add	sp, #12
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	045b      	lsls	r3, r3, #17
 8002350:	429a      	cmp	r2, r3
 8002352:	d301      	bcc.n	8002358 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002354:	2301      	movs	r3, #1
 8002356:	e010      	b.n	800237a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <SysTick_Config+0x44>)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	3a01      	subs	r2, #1
 800235e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002360:	2301      	movs	r3, #1
 8002362:	425b      	negs	r3, r3
 8002364:	2103      	movs	r1, #3
 8002366:	0018      	movs	r0, r3
 8002368:	f7ff ff7c 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x44>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x44>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	210f      	movs	r1, #15
 8002394:	187b      	adds	r3, r7, r1
 8002396:	1c02      	adds	r2, r0, #0
 8002398:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	187b      	adds	r3, r7, r1
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	0002      	movs	r2, r0
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ff33 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff ffaf 	bl	8002340 <SysTick_Config>
 80023e2:	0003      	movs	r3, r0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e155      	b.n	80026a8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d100      	bne.n	8002414 <HAL_GPIO_Init+0x28>
 8002412:	e146      	b.n	80026a2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	4013      	ands	r3, r2
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	409a      	lsls	r2, r3
 800243a:	0013      	movs	r3, r2
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	2201      	movs	r2, #1
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	4013      	ands	r3, r2
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	43da      	mvns	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	58d3      	ldr	r3, [r2, r3]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2207      	movs	r2, #7
 80024e8:	4013      	ands	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2107      	movs	r1, #7
 8002502:	400b      	ands	r3, r1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	6939      	ldr	r1, [r7, #16]
 800251c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	401a      	ands	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	029b      	lsls	r3, r3, #10
 800255a:	4013      	ands	r3, r2
 800255c:	d100      	bne.n	8002560 <HAL_GPIO_Init+0x174>
 800255e:	e0a0      	b.n	80026a2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_GPIO_Init+0x2d4>)
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_GPIO_Init+0x2d4>)
 8002566:	2101      	movs	r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_GPIO_Init+0x2d4>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	589b      	ldr	r3, [r3, r2]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	43da      	mvns	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	2390      	movs	r3, #144	; 0x90
 80025a0:	05db      	lsls	r3, r3, #23
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x1ee>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1ea>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a46      	ldr	r2, [pc, #280]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1e6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a45      	ldr	r2, [pc, #276]	; (80026d0 <HAL_GPIO_Init+0x2e4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a44      	ldr	r2, [pc, #272]	; (80026d4 <HAL_GPIO_Init+0x2e8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1de>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025da:	2300      	movs	r3, #0
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	2103      	movs	r1, #3
 80025e0:	400a      	ands	r2, r1
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	025b      	lsls	r3, r3, #9
 8002612:	4013      	ands	r3, r2
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002624:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43da      	mvns	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43da      	mvns	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	035b      	lsls	r3, r3, #13
 8002666:	4013      	ands	r3, r2
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43da      	mvns	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	039b      	lsls	r3, r3, #14
 8002690:	4013      	ands	r3, r2
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	40da      	lsrs	r2, r3
 80026b0:	1e13      	subs	r3, r2, #0
 80026b2:	d000      	beq.n	80026b6 <HAL_GPIO_Init+0x2ca>
 80026b4:	e6a2      	b.n	80023fc <HAL_GPIO_Init+0x10>
  } 
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b006      	add	sp, #24
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	48000400 	.word	0x48000400
 80026cc:	48000800 	.word	0x48000800
 80026d0:	48000c00 	.word	0x48000c00
 80026d4:	48001000 	.word	0x48001000
 80026d8:	40010400 	.word	0x40010400

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 fb76 	bl	8002ddc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	d100      	bne.n	80026fc <HAL_RCC_OscConfig+0x20>
 80026fa:	e08e      	b.n	800281a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026fc:	4bc5      	ldr	r3, [pc, #788]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	220c      	movs	r2, #12
 8002702:	4013      	ands	r3, r2
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00e      	beq.n	8002726 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002708:	4bc2      	ldr	r3, [pc, #776]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	220c      	movs	r2, #12
 800270e:	4013      	ands	r3, r2
 8002710:	2b08      	cmp	r3, #8
 8002712:	d117      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
 8002714:	4bbf      	ldr	r3, [pc, #764]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	23c0      	movs	r3, #192	; 0xc0
 800271a:	025b      	lsls	r3, r3, #9
 800271c:	401a      	ands	r2, r3
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	429a      	cmp	r2, r3
 8002724:	d10e      	bne.n	8002744 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4bbb      	ldr	r3, [pc, #748]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	4013      	ands	r3, r2
 8002730:	d100      	bne.n	8002734 <HAL_RCC_OscConfig+0x58>
 8002732:	e071      	b.n	8002818 <HAL_RCC_OscConfig+0x13c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <HAL_RCC_OscConfig+0x62>
 800273c:	e06c      	b.n	8002818 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f000 fb4c 	bl	8002ddc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x80>
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4bb0      	ldr	r3, [pc, #704]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e02f      	b.n	80027bc <HAL_RCC_OscConfig+0xe0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0xa2>
 8002764:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4baa      	ldr	r3, [pc, #680]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800276a:	49ab      	ldr	r1, [pc, #684]	; (8002a18 <HAL_RCC_OscConfig+0x33c>)
 800276c:	400a      	ands	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	4ba8      	ldr	r3, [pc, #672]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4ba7      	ldr	r3, [pc, #668]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002776:	49a9      	ldr	r1, [pc, #676]	; (8002a1c <HAL_RCC_OscConfig+0x340>)
 8002778:	400a      	ands	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e01e      	b.n	80027bc <HAL_RCC_OscConfig+0xe0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10e      	bne.n	80027a4 <HAL_RCC_OscConfig+0xc8>
 8002786:	4ba3      	ldr	r3, [pc, #652]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	02c9      	lsls	r1, r1, #11
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	4b9f      	ldr	r3, [pc, #636]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0249      	lsls	r1, r1, #9
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xe0>
 80027a4:	4b9b      	ldr	r3, [pc, #620]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b9a      	ldr	r3, [pc, #616]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027aa:	499b      	ldr	r1, [pc, #620]	; (8002a18 <HAL_RCC_OscConfig+0x33c>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b97      	ldr	r3, [pc, #604]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027b6:	4999      	ldr	r1, [pc, #612]	; (8002a1c <HAL_RCC_OscConfig+0x340>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d014      	beq.n	80027ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe ff16 	bl	80015f4 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ce:	f7fe ff11 	bl	80015f4 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e2fd      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e0:	4b8c      	ldr	r3, [pc, #560]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0xf2>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe ff01 	bl	80015f4 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fefc 	bl	80015f4 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e2e8      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	4013      	ands	r3, r2
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x11c>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d100      	bne.n	8002826 <HAL_RCC_OscConfig+0x14a>
 8002824:	e06c      	b.n	8002900 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002826:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	220c      	movs	r2, #12
 800282c:	4013      	ands	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	220c      	movs	r2, #12
 8002836:	4013      	ands	r3, r2
 8002838:	2b08      	cmp	r3, #8
 800283a:	d11f      	bne.n	800287c <HAL_RCC_OscConfig+0x1a0>
 800283c:	4b75      	ldr	r3, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	23c0      	movs	r3, #192	; 0xc0
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	401a      	ands	r2, r3
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	429a      	cmp	r2, r3
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x188>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e2bb      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b6b      	ldr	r3, [pc, #428]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	22f8      	movs	r2, #248	; 0xf8
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00da      	lsls	r2, r3, #3
 8002874:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e041      	b.n	8002900 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d024      	beq.n	80028ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800288a:	2101      	movs	r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe feb0 	bl	80015f4 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe feab 	bl	80015f4 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e297      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d0f1      	beq.n	800289a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	22f8      	movs	r2, #248	; 0xf8
 80028bc:	4393      	bics	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	00da      	lsls	r2, r3, #3
 80028c6:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e018      	b.n	8002900 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fe8b 	bl	80015f4 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fe fe86 	bl	80015f4 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e272      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1f1      	bne.n	80028e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	4013      	ands	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fe69 	bl	80015f4 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe fe64 	bl	80015f4 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e250      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d0f1      	beq.n	8002928 <HAL_RCC_OscConfig+0x24c>
 8002944:	e018      	b.n	8002978 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294a:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800294c:	2101      	movs	r1, #1
 800294e:	438a      	bics	r2, r1
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fe4f 	bl	80015f4 <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fe4a 	bl	80015f4 <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e236      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d1f1      	bne.n	800295c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2204      	movs	r2, #4
 800297e:	4013      	ands	r3, r2
 8002980:	d100      	bne.n	8002984 <HAL_RCC_OscConfig+0x2a8>
 8002982:	e0b5      	b.n	8002af0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002984:	201f      	movs	r0, #31
 8002986:	183b      	adds	r3, r7, r0
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	055b      	lsls	r3, r3, #21
 8002994:	4013      	ands	r3, r2
 8002996:	d110      	bne.n	80029ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	0549      	lsls	r1, r1, #21
 80029a2:	430a      	orrs	r2, r1
 80029a4:	61da      	str	r2, [r3, #28]
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	055b      	lsls	r3, r3, #21
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029b4:	183b      	adds	r3, r7, r0
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0049      	lsls	r1, r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fe0e 	bl	80015f4 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe fe09 	bl	80015f4 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1f5      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_OscConfig+0x344>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10f      	bne.n	8002a24 <HAL_RCC_OscConfig+0x348>
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	e036      	b.n	8002a80 <HAL_RCC_OscConfig+0x3a4>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	40021000 	.word	0x40021000
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	fffbffff 	.word	0xfffbffff
 8002a20:	40007000 	.word	0x40007000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x36a>
 8002a2c:	4bca      	ldr	r3, [pc, #808]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	4bc9      	ldr	r3, [pc, #804]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	621a      	str	r2, [r3, #32]
 8002a38:	4bc7      	ldr	r3, [pc, #796]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	4bc6      	ldr	r3, [pc, #792]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	621a      	str	r2, [r3, #32]
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x3a4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x38c>
 8002a4e:	4bc2      	ldr	r3, [pc, #776]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	6a1a      	ldr	r2, [r3, #32]
 8002a52:	4bc1      	ldr	r3, [pc, #772]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a54:	2104      	movs	r1, #4
 8002a56:	430a      	orrs	r2, r1
 8002a58:	621a      	str	r2, [r3, #32]
 8002a5a:	4bbf      	ldr	r3, [pc, #764]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	4bbe      	ldr	r3, [pc, #760]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x3a4>
 8002a68:	4bbb      	ldr	r3, [pc, #748]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	4bba      	ldr	r3, [pc, #744]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	438a      	bics	r2, r1
 8002a72:	621a      	str	r2, [r3, #32]
 8002a74:	4bb8      	ldr	r3, [pc, #736]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	4bb7      	ldr	r3, [pc, #732]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d014      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fdb4 	bl	80015f4 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e009      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fdaf 	bl	80015f4 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4aaf      	ldr	r2, [pc, #700]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e19a      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4bac      	ldr	r3, [pc, #688]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
 8002ab0:	e013      	b.n	8002ada <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fd9f 	bl	80015f4 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fd9a 	bl	80015f4 <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	4aa5      	ldr	r2, [pc, #660]	; (8002d5c <HAL_RCC_OscConfig+0x680>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e185      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4ba1      	ldr	r3, [pc, #644]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ada:	231f      	movs	r3, #31
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b9c      	ldr	r3, [pc, #624]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	4b9b      	ldr	r3, [pc, #620]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	499d      	ldr	r1, [pc, #628]	; (8002d60 <HAL_RCC_OscConfig+0x684>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	4013      	ands	r3, r2
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d12a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b02:	4b95      	ldr	r3, [pc, #596]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b06:	4b94      	ldr	r3, [pc, #592]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b08:	2104      	movs	r1, #4
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b12:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fd6b 	bl	80015f4 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b24:	f7fe fd66 	bl	80015f4 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e152      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d0f1      	beq.n	8002b24 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b40:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	22f8      	movs	r2, #248	; 0xf8
 8002b46:	4393      	bics	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	00da      	lsls	r2, r3, #3
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
 8002b56:	e034      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	3305      	adds	r3, #5
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b60:	4b7d      	ldr	r3, [pc, #500]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b64:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b66:	2104      	movs	r1, #4
 8002b68:	438a      	bics	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b6c:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	22f8      	movs	r2, #248	; 0xf8
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	00da      	lsls	r2, r3, #3
 8002b7c:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
 8002b82:	e01e      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b84:	4b74      	ldr	r3, [pc, #464]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b88:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b90:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fd2a 	bl	80015f4 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ba6:	f7fe fd25 	bl	80015f4 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e111      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bb8:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d1f1      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d05c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	220c      	movs	r2, #12
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002bd8:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	220c      	movs	r2, #12
 8002bde:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d114      	bne.n	8002c0e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002be4:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	23c0      	movs	r3, #192	; 0xc0
 8002bea:	025b      	lsls	r3, r3, #9
 8002bec:	401a      	ands	r2, r3
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	025b      	lsls	r3, r3, #9
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_OscConfig+0x5a8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d03c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0e6      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0249      	lsls	r1, r1, #9
 8002c20:	430a      	orrs	r2, r1
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fce6 	bl	80015f4 <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2e:	f7fe fce1 	bl	80015f4 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0cd      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	025b      	lsls	r3, r3, #9
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x552>
 8002c4c:	e01b      	b.n	8002c86 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c54:	4943      	ldr	r1, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x688>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fccb 	bl	80015f4 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c64:	f7fe fcc6 	bl	80015f4 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0b2      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x588>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c84:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d100      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5b4>
 8002c8e:	e0a4      	b.n	8002dda <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	220c      	movs	r2, #12
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5c2>
 8002c9c:	e078      	b.n	8002d90 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d14c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002cac:	492e      	ldr	r1, [pc, #184]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fc9f 	bl	80015f4 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fc9a 	bl	80015f4 <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e086      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	049b      	lsls	r3, r3, #18
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	220f      	movs	r2, #15
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_RCC_OscConfig+0x690>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	431a      	orrs	r2, r3
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0449      	lsls	r1, r1, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fc6d 	bl	80015f4 <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fc68 	bl	80015f4 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e054      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	049b      	lsls	r3, r3, #18
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x644>
 8002d3e:	e04c      	b.n	8002dda <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <HAL_RCC_OscConfig+0x67c>)
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x68c>)
 8002d48:	400a      	ands	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fc52 	bl	80015f4 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x6a6>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	efffffff 	.word	0xefffffff
 8002d64:	fffeffff 	.word	0xfffeffff
 8002d68:	feffffff 	.word	0xfeffffff
 8002d6c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fc40 	bl	80015f4 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e02c      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_RCC_OscConfig+0x708>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	049b      	lsls	r3, r3, #18
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x694>
 8002d8e:	e024      	b.n	8002dda <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e01f      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCC_OscConfig+0x708>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x708>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	025b      	lsls	r3, r3, #9
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d10e      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	220f      	movs	r2, #15
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	23f0      	movs	r3, #240	; 0xf0
 8002dca:	039b      	lsls	r3, r3, #14
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b008      	add	sp, #32
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0bf      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d911      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4393      	bics	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1c:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0a6      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d015      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d006      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e48:	21e0      	movs	r1, #224	; 0xe0
 8002e4a:	00c9      	lsls	r1, r1, #3
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b4d      	ldr	r3, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	22f0      	movs	r2, #240	; 0xf0
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d04c      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d120      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07a      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	049b      	lsls	r3, r3, #18
 8002e96:	4013      	ands	r3, r2
 8002e98:	d114      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06e      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e062      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e05b      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fb8c 	bl	80015f4 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	e009      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee2:	f7fe fb87 	bl	80015f4 <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <HAL_RCC_ClockConfig+0x1a4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e042      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	220c      	movs	r2, #12
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1ec      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d211      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_RCC_ClockConfig+0x19c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e020      	b.n	8002f7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_RCC_ClockConfig+0x1a8>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f58:	f000 f820 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5c:	0001      	movs	r1, r0
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x1a0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	220f      	movs	r2, #15
 8002f66:	4013      	ands	r3, r2
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1ac>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	40da      	lsrs	r2, r3
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1b0>)
 8002f72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe faf7 	bl	8001568 <HAL_InitTick>
  
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b004      	add	sp, #16
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	00001388 	.word	0x00001388
 8002f90:	fffff8ff 	.word	0xfffff8ff
 8002f94:	08003210 	.word	0x08003210
 8002f98:	20000000 	.word	0x20000000

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b08f      	sub	sp, #60	; 0x3c
 8002fa0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_RCC_GetSysClockFreq+0xec>)
 8002fa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002faa:	c313      	stmia	r3!, {r0, r1, r4}
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002fb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fb6:	c313      	stmia	r3!, {r0, r1, r4}
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	220c      	movs	r2, #12
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d047      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xd4>
 8002fe0:	d849      	bhi.n	8003076 <HAL_RCC_GetSysClockFreq+0xda>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x50>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x56>
 8002fea:	e044      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff0:	e044      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2214      	movs	r2, #20
 8002ffc:	18ba      	adds	r2, r7, r2
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	220f      	movs	r2, #15
 8003008:	4013      	ands	r3, r2
 800300a:	1d3a      	adds	r2, r7, #4
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	23c0      	movs	r3, #192	; 0xc0
 8003014:	025b      	lsls	r3, r3, #9
 8003016:	401a      	ands	r2, r3
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	025b      	lsls	r3, r3, #9
 800301c:	429a      	cmp	r2, r3
 800301e:	d109      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003022:	481c      	ldr	r0, [pc, #112]	; (8003094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003024:	f7fd f870 	bl	8000108 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	001a      	movs	r2, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	4353      	muls	r3, r2
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	e01a      	b.n	800306a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003036:	23c0      	movs	r3, #192	; 0xc0
 8003038:	025b      	lsls	r3, r3, #9
 800303a:	401a      	ands	r2, r3
 800303c:	23c0      	movs	r3, #192	; 0xc0
 800303e:	025b      	lsls	r3, r3, #9
 8003040:	429a      	cmp	r2, r3
 8003042:	d109      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003046:	4814      	ldr	r0, [pc, #80]	; (8003098 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003048:	f7fd f85e 	bl	8000108 <__udivsi3>
 800304c:	0003      	movs	r3, r0
 800304e:	001a      	movs	r2, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	4353      	muls	r3, r2
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
 8003056:	e008      	b.n	800306a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305a:	480e      	ldr	r0, [pc, #56]	; (8003094 <HAL_RCC_GetSysClockFreq+0xf8>)
 800305c:	f7fd f854 	bl	8000108 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	001a      	movs	r2, r3
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	4353      	muls	r3, r2
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003074:	e002      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800307a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b00f      	add	sp, #60	; 0x3c
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	080031f0 	.word	0x080031f0
 800308c:	08003200 	.word	0x08003200
 8003090:	40021000 	.word	0x40021000
 8003094:	007a1200 	.word	0x007a1200
 8003098:	02dc6c00 	.word	0x02dc6c00

0800309c <__cxa_pure_virtual>:
 800309c:	b510      	push	{r4, lr}
 800309e:	f000 f805 	bl	80030ac <_ZSt9terminatev>

080030a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80030a2:	b510      	push	{r4, lr}
 80030a4:	4780      	blx	r0
 80030a6:	f000 f809 	bl	80030bc <abort>
	...

080030ac <_ZSt9terminatev>:
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <_ZSt9terminatev+0xc>)
 80030ae:	b510      	push	{r4, lr}
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f7ff fff6 	bl	80030a2 <_ZN10__cxxabiv111__terminateEPFvvE>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	2000000c 	.word	0x2000000c

080030bc <abort>:
 80030bc:	2006      	movs	r0, #6
 80030be:	b510      	push	{r4, lr}
 80030c0:	f000 f86a 	bl	8003198 <raise>
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fd fbd8 	bl	800087a <_exit>
	...

080030cc <__errno>:
 80030cc:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <__errno+0x8>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	20000010 	.word	0x20000010

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	2600      	movs	r6, #0
 80030dc:	4d0c      	ldr	r5, [pc, #48]	; (8003110 <__libc_init_array+0x38>)
 80030de:	4c0d      	ldr	r4, [pc, #52]	; (8003114 <__libc_init_array+0x3c>)
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	2600      	movs	r6, #0
 80030ea:	f000 f875 	bl	80031d8 <_init>
 80030ee:	4d0a      	ldr	r5, [pc, #40]	; (8003118 <__libc_init_array+0x40>)
 80030f0:	4c0a      	ldr	r4, [pc, #40]	; (800311c <__libc_init_array+0x44>)
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	00b3      	lsls	r3, r6, #2
 80030fe:	58eb      	ldr	r3, [r5, r3]
 8003100:	4798      	blx	r3
 8003102:	3601      	adds	r6, #1
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	00b3      	lsls	r3, r6, #2
 8003108:	58eb      	ldr	r3, [r5, r3]
 800310a:	4798      	blx	r3
 800310c:	3601      	adds	r6, #1
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	08003244 	.word	0x08003244
 8003114:	08003244 	.word	0x08003244
 8003118:	08003244 	.word	0x08003244
 800311c:	08003250 	.word	0x08003250

08003120 <memcpy>:
 8003120:	2300      	movs	r3, #0
 8003122:	b510      	push	{r4, lr}
 8003124:	429a      	cmp	r2, r3
 8003126:	d100      	bne.n	800312a <memcpy+0xa>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	5ccc      	ldrb	r4, [r1, r3]
 800312c:	54c4      	strb	r4, [r0, r3]
 800312e:	3301      	adds	r3, #1
 8003130:	e7f8      	b.n	8003124 <memcpy+0x4>

08003132 <memset>:
 8003132:	0003      	movs	r3, r0
 8003134:	1882      	adds	r2, r0, r2
 8003136:	4293      	cmp	r3, r2
 8003138:	d100      	bne.n	800313c <memset+0xa>
 800313a:	4770      	bx	lr
 800313c:	7019      	strb	r1, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	e7f9      	b.n	8003136 <memset+0x4>

08003142 <_raise_r>:
 8003142:	b570      	push	{r4, r5, r6, lr}
 8003144:	0004      	movs	r4, r0
 8003146:	000d      	movs	r5, r1
 8003148:	291f      	cmp	r1, #31
 800314a:	d904      	bls.n	8003156 <_raise_r+0x14>
 800314c:	2316      	movs	r3, #22
 800314e:	6003      	str	r3, [r0, #0]
 8003150:	2001      	movs	r0, #1
 8003152:	4240      	negs	r0, r0
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <_raise_r+0x24>
 800315c:	008a      	lsls	r2, r1, #2
 800315e:	189b      	adds	r3, r3, r2
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2a00      	cmp	r2, #0
 8003164:	d108      	bne.n	8003178 <_raise_r+0x36>
 8003166:	0020      	movs	r0, r4
 8003168:	f000 f832 	bl	80031d0 <_getpid_r>
 800316c:	002a      	movs	r2, r5
 800316e:	0001      	movs	r1, r0
 8003170:	0020      	movs	r0, r4
 8003172:	f000 f81b 	bl	80031ac <_kill_r>
 8003176:	e7ed      	b.n	8003154 <_raise_r+0x12>
 8003178:	2000      	movs	r0, #0
 800317a:	2a01      	cmp	r2, #1
 800317c:	d0ea      	beq.n	8003154 <_raise_r+0x12>
 800317e:	1c51      	adds	r1, r2, #1
 8003180:	d103      	bne.n	800318a <_raise_r+0x48>
 8003182:	2316      	movs	r3, #22
 8003184:	3001      	adds	r0, #1
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	e7e4      	b.n	8003154 <_raise_r+0x12>
 800318a:	2400      	movs	r4, #0
 800318c:	0028      	movs	r0, r5
 800318e:	601c      	str	r4, [r3, #0]
 8003190:	4790      	blx	r2
 8003192:	0020      	movs	r0, r4
 8003194:	e7de      	b.n	8003154 <_raise_r+0x12>
	...

08003198 <raise>:
 8003198:	b510      	push	{r4, lr}
 800319a:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <raise+0x10>)
 800319c:	0001      	movs	r1, r0
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	f7ff ffcf 	bl	8003142 <_raise_r>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	20000010 	.word	0x20000010

080031ac <_kill_r>:
 80031ac:	2300      	movs	r3, #0
 80031ae:	b570      	push	{r4, r5, r6, lr}
 80031b0:	4d06      	ldr	r5, [pc, #24]	; (80031cc <_kill_r+0x20>)
 80031b2:	0004      	movs	r4, r0
 80031b4:	0008      	movs	r0, r1
 80031b6:	0011      	movs	r1, r2
 80031b8:	602b      	str	r3, [r5, #0]
 80031ba:	f7fd fb4e 	bl	800085a <_kill>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d103      	bne.n	80031ca <_kill_r+0x1e>
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d000      	beq.n	80031ca <_kill_r+0x1e>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	20000224 	.word	0x20000224

080031d0 <_getpid_r>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	f7fd fb3c 	bl	800084e <_getpid>
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
