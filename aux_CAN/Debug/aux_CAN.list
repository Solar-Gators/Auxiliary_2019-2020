
aux_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023ac  080023ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023ac  080023ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023ac  080023ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080023c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080023c0  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a96  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000101d  00000000  00000000  00024aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00025ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00025f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c51  00000000  00000000  000263b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004945  00000000  00000000  0003f001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089e84  00000000  00000000  00043946  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd7ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f1c  00000000  00000000  000cd848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002364 	.word	0x08002364

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002364 	.word	0x08002364

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa18 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f864 	bl	80002f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e6 	bl	80003fc <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000230:	f000 f8a8 	bl	8000384 <_ZL11MX_CAN_Initv>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000234:	4b29      	ldr	r3, [pc, #164]	; (80002dc <main+0xbc>)
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fc62 	bl	8000b00 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800023c:	4b27      	ldr	r3, [pc, #156]	; (80002dc <main+0xbc>)
 800023e:	2102      	movs	r1, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fec5 	bl	8000fd0 <HAL_CAN_ActivateNotification>

  pHeader.DLC = 1;
 8000246:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <main+0xc0>)
 8000248:	2201      	movs	r2, #1
 800024a:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <main+0xc0>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 8000252:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <main+0xc0>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  pHeader.StdId = 0x244;
 8000258:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <main+0xc0>)
 800025a:	2291      	movs	r2, #145	; 0x91
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <main+0xc4>)
 8000262:	2200      	movs	r2, #0
 8000264:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh=0x3FF;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <main+0xc4>)
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <main+0xc8>)
 800026a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow=0x3FF;
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <main+0xc4>)
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <main+0xc8>)
 8000270:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh=0;
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <main+0xc4>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow=0;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <main+0xc4>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <main+0xc4>)
 8000280:	2201      	movs	r2, #1
 8000282:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation=ENABLE;
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <main+0xc4>)
 8000286:	2201      	movs	r2, #1
 8000288:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <main+0xc4>)
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <main+0xbc>)
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fb43 	bl	800091c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <main+0xbc>)
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fc31 	bl	8000b00 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0xbc>)
 80002a0:	2102      	movs	r1, #2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fe94 	bl	8000fd0 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Only send a new TX message if the outgoing mailbox is empty
	  if (HAL_CAN_IsTxMessagePending(&hcan,TxMailbox) == false) {
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <main+0xcc>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <main+0xbc>)
 80002ae:	0011      	movs	r1, r2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fd4a 	bl	8000d4a <HAL_CAN_IsTxMessagePending>
 80002b6:	0003      	movs	r3, r0
 80002b8:	425a      	negs	r2, r3
 80002ba:	4153      	adcs	r3, r2
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d005      	beq.n	80002ce <main+0xae>

		  HAL_CAN_AddTxMessage(&hcan, &pHeader, &a, &TxMailbox);
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0xcc>)
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <main+0xd0>)
 80002c6:	4906      	ldr	r1, [pc, #24]	; (80002e0 <main+0xc0>)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <main+0xbc>)
 80002ca:	f000 fc5f 	bl	8000b8c <HAL_CAN_AddTxMessage>

	  }

	  a++;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <main+0xd0>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <main+0xd0>)
 80002d8:	701a      	strb	r2, [r3, #0]
	  if (HAL_CAN_IsTxMessagePending(&hcan,TxMailbox) == false) {
 80002da:	e7e5      	b.n	80002a8 <main+0x88>
 80002dc:	20000028 	.word	0x20000028
 80002e0:	20000050 	.word	0x20000050
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	000003ff 	.word	0x000003ff
 80002ec:	20000084 	.word	0x20000084
 80002f0:	20000088 	.word	0x20000088

080002f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b093      	sub	sp, #76	; 0x4c
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	2414      	movs	r4, #20
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	001a      	movs	r2, r3
 8000304:	2100      	movs	r1, #0
 8000306:	f002 f825 	bl	8002354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	0018      	movs	r0, r3
 800030e:	2310      	movs	r3, #16
 8000310:	001a      	movs	r2, r3
 8000312:	2100      	movs	r1, #0
 8000314:	f002 f81e 	bl	8002354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	0021      	movs	r1, r4
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2202      	movs	r2, #2
 800031e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2201      	movs	r2, #1
 8000324:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2210      	movs	r2, #16
 800032a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fb0b 	bl	8001950 <HAL_RCC_OscConfig>
 800033a:	0003      	movs	r3, r0
 800033c:	1e5a      	subs	r2, r3, #1
 800033e:	4193      	sbcs	r3, r2
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000346:	f000 f8a3 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2100      	movs	r1, #0
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fe78 	bl	800205c <HAL_RCC_ClockConfig>
 800036c:	0003      	movs	r3, r0
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	4193      	sbcs	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000378:	f000 f88a 	bl	8000490 <Error_Handler>
  }
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b013      	add	sp, #76	; 0x4c
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <_ZL11MX_CAN_Initv+0x74>)
 800038c:	601a      	str	r2, [r3, #0]
	  hcan.Init.Prescaler = 6;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 8000390:	2206      	movs	r2, #6
 8000392:	605a      	str	r2, [r3, #4]
	  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	05d2      	lsls	r2, r2, #23
 800039a:	609a      	str	r2, [r3, #8]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003a4:	22c0      	movs	r2, #192	; 0xc0
 80003a6:	0312      	lsls	r2, r2, #12
 80003a8:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0352      	lsls	r2, r2, #13
 80003b0:	615a      	str	r2, [r3, #20]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	761a      	strb	r2, [r3, #24]
	  hcan.Init.AutoBusOff = DISABLE;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = DISABLE;
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <_ZL11MX_CAN_Initv+0x70>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 f9a1 	bl	8000720 <HAL_CAN_Init>
 80003de:	0003      	movs	r3, r0
 80003e0:	1e5a      	subs	r2, r3, #1
 80003e2:	4193      	sbcs	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80003ea:	f000 f851 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40006400 	.word	0x40006400

080003fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f001 ffa1 	bl	8002354 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	03c9      	lsls	r1, r1, #15
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	03db      	lsls	r3, r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <_ZL12MX_GPIO_Initv+0x88>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0192      	lsls	r2, r2, #6
 8000450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <_ZL12MX_GPIO_Initv+0x8c>)
 8000456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	4a0a      	ldr	r2, [pc, #40]	; (800048c <_ZL12MX_GPIO_Initv+0x90>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f001 f8d5 	bl	8001614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2101      	movs	r1, #1
 800046e:	2005      	movs	r0, #5
 8000470:	f001 f89e 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000474:	2005      	movs	r0, #5
 8000476:	f001 f8b0 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b009      	add	sp, #36	; 0x24
 8000480:	bd90      	pop	{r4, r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000
 8000488:	10110000 	.word	0x10110000
 800048c:	48000800 	.word	0x48000800

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000496:	e7fe      	b.n	8000496 <Error_Handler+0x6>

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x44>)
 80004a0:	699a      	ldr	r2, [r3, #24]
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_MspInit+0x44>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	430a      	orrs	r2, r1
 80004a8:	619a      	str	r2, [r3, #24]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x44>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	2201      	movs	r2, #1
 80004b0:	4013      	ands	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_MspInit+0x44>)
 80004b8:	69da      	ldr	r2, [r3, #28]
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_MspInit+0x44>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0549      	lsls	r1, r1, #21
 80004c0:	430a      	orrs	r2, r1
 80004c2:	61da      	str	r2, [r3, #28]
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_MspInit+0x44>)
 80004c6:	69da      	ldr	r2, [r3, #28]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	055b      	lsls	r3, r3, #21
 80004cc:	4013      	ands	r3, r2
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	2314      	movs	r3, #20
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f001 ff2e 	bl	8002354 <memset>
  if(hcan->Instance==CAN)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a21      	ldr	r2, [pc, #132]	; (8000584 <HAL_CAN_MspInit+0xa4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d13b      	bne.n	800057a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 8000504:	69da      	ldr	r2, [r3, #28]
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0489      	lsls	r1, r1, #18
 800050c:	430a      	orrs	r2, r1
 800050e:	61da      	str	r2, [r3, #28]
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 8000512:	69da      	ldr	r2, [r3, #28]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	049b      	lsls	r3, r3, #18
 8000518:	4013      	ands	r3, r2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0289      	lsls	r1, r1, #10
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <HAL_CAN_MspInit+0xa8>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	029b      	lsls	r3, r3, #10
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800053a:	2114      	movs	r1, #20
 800053c:	187b      	adds	r3, r7, r1
 800053e:	22c0      	movs	r2, #192	; 0xc0
 8000540:	0152      	lsls	r2, r2, #5
 8000542:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2203      	movs	r2, #3
 8000554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2204      	movs	r2, #4
 800055a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	187a      	adds	r2, r7, r1
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f001 f855 	bl	8001614 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 2, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2102      	movs	r1, #2
 800056e:	201e      	movs	r0, #30
 8000570:	f001 f81e 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000574:	201e      	movs	r0, #30
 8000576:	f001 f830 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b00a      	add	sp, #40	; 0x28
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40006400 	.word	0x40006400
 8000588:	40021000 	.word	0x40021000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f89a 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 f9a0 	bl	8001904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <CEC_CAN_IRQHandler+0x20>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fd26 	bl	8001024 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, &r);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <CEC_CAN_IRQHandler+0x24>)
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <CEC_CAN_IRQHandler+0x28>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <CEC_CAN_IRQHandler+0x20>)
 80005de:	2100      	movs	r1, #0
 80005e0:	f000 fbda 	bl	8000d98 <HAL_CAN_GetRxMessage>

  // Do something when message received

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000028 	.word	0x20000028
 80005f0:	20000089 	.word	0x20000089
 80005f4:	20000068 	.word	0x20000068

080005f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000606:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0b      	ldr	r4, [pc, #44]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800062e:	f7ff ffe3 	bl	80005f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000632:	f001 fe6b 	bl	800230c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fdf3 	bl	8000220 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	080023b4 	.word	0x080023b4
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	200000b8 	.word	0x200000b8

08000654 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_COMP_IRQHandler>
	...

08000658 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <HAL_Init+0x24>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_Init+0x24>)
 8000662:	2110      	movs	r1, #16
 8000664:	430a      	orrs	r2, r1
 8000666:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f809 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066e:	f7ff ff13 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_InitTick+0x5c>)
 800068a:	681c      	ldr	r4, [r3, #0]
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_InitTick+0x60>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	0019      	movs	r1, r3
 8000692:	23fa      	movs	r3, #250	; 0xfa
 8000694:	0098      	lsls	r0, r3, #2
 8000696:	f7ff fd37 	bl	8000108 <__udivsi3>
 800069a:	0003      	movs	r3, r0
 800069c:	0019      	movs	r1, r3
 800069e:	0020      	movs	r0, r4
 80006a0:	f7ff fd32 	bl	8000108 <__udivsi3>
 80006a4:	0003      	movs	r3, r0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 ffa7 	bl	80015fa <HAL_SYSTICK_Config>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e00f      	b.n	80006d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d80b      	bhi.n	80006d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2301      	movs	r3, #1
 80006be:	425b      	negs	r3, r3
 80006c0:	2200      	movs	r2, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 ff74 	bl	80015b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_InitTick+0x64>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e000      	b.n	80006d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b003      	add	sp, #12
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	001a      	movs	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	18d2      	adds	r2, r2, r3
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_IncTick+0x20>)
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000008 	.word	0x20000008
 8000708:	200000b4 	.word	0x200000b4

0800070c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200000b4 	.word	0x200000b4

08000720 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e0f0      	b.n	8000914 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2220      	movs	r2, #32
 8000736:	5c9b      	ldrb	r3, [r3, r2]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fecd 	bl	80004e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2102      	movs	r1, #2
 8000752:	438a      	bics	r2, r1
 8000754:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000756:	f7ff ffd9 	bl	800070c <HAL_GetTick>
 800075a:	0003      	movs	r3, r0
 800075c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800075e:	e013      	b.n	8000788 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000760:	f7ff ffd4 	bl	800070c <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b0a      	cmp	r3, #10
 800076c:	d90c      	bls.n	8000788 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	0292      	lsls	r2, r2, #10
 8000776:	431a      	orrs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2220      	movs	r2, #32
 8000780:	2105      	movs	r1, #5
 8000782:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e0c5      	b.n	8000914 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2202      	movs	r2, #2
 8000790:	4013      	ands	r3, r2
 8000792:	d1e5      	bne.n	8000760 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ffb2 	bl	800070c <HAL_GetTick>
 80007a8:	0003      	movs	r3, r0
 80007aa:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ac:	e013      	b.n	80007d6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ae:	f7ff ffad 	bl	800070c <HAL_GetTick>
 80007b2:	0002      	movs	r2, r0
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	d90c      	bls.n	80007d6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0292      	lsls	r2, r2, #10
 80007c4:	431a      	orrs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2220      	movs	r2, #32
 80007ce:	2105      	movs	r1, #5
 80007d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e09e      	b.n	8000914 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	4013      	ands	r3, r2
 80007e0:	d0e5      	beq.n	80007ae <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7e1b      	ldrb	r3, [r3, #24]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d108      	bne.n	80007fc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	430a      	orrs	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e007      	b.n	800080c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	438a      	bics	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e5b      	ldrb	r3, [r3, #25]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	430a      	orrs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e007      	b.n	8000836 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	438a      	bics	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7e9b      	ldrb	r3, [r3, #26]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2120      	movs	r1, #32
 800084a:	430a      	orrs	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e007      	b.n	8000860 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2120      	movs	r1, #32
 800085c:	438a      	bics	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7edb      	ldrb	r3, [r3, #27]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2110      	movs	r1, #16
 8000874:	438a      	bics	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e007      	b.n	800088a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2110      	movs	r1, #16
 8000886:	430a      	orrs	r2, r1
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7f1b      	ldrb	r3, [r3, #28]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d108      	bne.n	80008a4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2108      	movs	r1, #8
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2108      	movs	r1, #8
 80008b0:	438a      	bics	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7f5b      	ldrb	r3, [r3, #29]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d108      	bne.n	80008ce <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2104      	movs	r1, #4
 80008c8:	430a      	orrs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e007      	b.n	80008de <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2104      	movs	r1, #4
 80008da:	438a      	bics	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	431a      	orrs	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	431a      	orrs	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	0011      	movs	r1, r2
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2220      	movs	r2, #32
 800090e:	2101      	movs	r1, #1
 8000910:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800092c:	2013      	movs	r0, #19
 800092e:	183b      	adds	r3, r7, r0
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	2120      	movs	r1, #32
 8000934:	5c52      	ldrb	r2, [r2, r1]
 8000936:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000938:	183b      	adds	r3, r7, r0
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d005      	beq.n	800094c <HAL_CAN_ConfigFilter+0x30>
 8000940:	2313      	movs	r3, #19
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d000      	beq.n	800094c <HAL_CAN_ConfigFilter+0x30>
 800094a:	e0cd      	b.n	8000ae8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	58d3      	ldr	r3, [r2, r3]
 8000954:	2201      	movs	r2, #1
 8000956:	431a      	orrs	r2, r3
 8000958:	0011      	movs	r1, r2
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	221f      	movs	r2, #31
 8000968:	4013      	ands	r3, r2
 800096a:	2201      	movs	r2, #1
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	2387      	movs	r3, #135	; 0x87
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	58d3      	ldr	r3, [r2, r3]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	2387      	movs	r3, #135	; 0x87
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d129      	bne.n	80009e6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	2383      	movs	r3, #131	; 0x83
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	58d3      	ldr	r3, [r2, r3]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	43d2      	mvns	r2, r2
 800099e:	401a      	ands	r2, r3
 80009a0:	0011      	movs	r1, r2
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	2383      	movs	r3, #131	; 0x83
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009bc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3248      	adds	r2, #72	; 0x48
 80009c2:	00d2      	lsls	r2, r2, #3
 80009c4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009da:	6979      	ldr	r1, [r7, #20]
 80009dc:	3348      	adds	r3, #72	; 0x48
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	18cb      	adds	r3, r1, r3
 80009e2:	3304      	adds	r3, #4
 80009e4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d128      	bne.n	8000a40 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	2383      	movs	r3, #131	; 0x83
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	58d2      	ldr	r2, [r2, r3]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	0011      	movs	r1, r2
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	2383      	movs	r3, #131	; 0x83
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	041b      	lsls	r3, r3, #16
 8000a10:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a16:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3248      	adds	r2, #72	; 0x48
 8000a1c:	00d2      	lsls	r2, r2, #3
 8000a1e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	041b      	lsls	r3, r3, #16
 8000a2c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a34:	6979      	ldr	r1, [r7, #20]
 8000a36:	3348      	adds	r3, #72	; 0x48
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	18cb      	adds	r3, r1, r3
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10c      	bne.n	8000a62 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	2381      	movs	r3, #129	; 0x81
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	58d3      	ldr	r3, [r2, r3]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	43d2      	mvns	r2, r2
 8000a54:	401a      	ands	r2, r3
 8000a56:	0011      	movs	r1, r2
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	2381      	movs	r3, #129	; 0x81
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	50d1      	str	r1, [r2, r3]
 8000a60:	e00a      	b.n	8000a78 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	2381      	movs	r3, #129	; 0x81
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	58d2      	ldr	r2, [r2, r3]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	0011      	movs	r1, r2
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	2381      	movs	r3, #129	; 0x81
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10c      	bne.n	8000a9a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	2385      	movs	r3, #133	; 0x85
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	58d3      	ldr	r3, [r2, r3]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	43d2      	mvns	r2, r2
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	0011      	movs	r1, r2
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	2385      	movs	r3, #133	; 0x85
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	50d1      	str	r1, [r2, r3]
 8000a98:	e00a      	b.n	8000ab0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	2385      	movs	r3, #133	; 0x85
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	58d2      	ldr	r2, [r2, r3]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	2385      	movs	r3, #133	; 0x85
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10a      	bne.n	8000ace <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	2387      	movs	r3, #135	; 0x87
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	58d2      	ldr	r2, [r2, r3]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	2387      	movs	r3, #135	; 0x87
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	58d3      	ldr	r3, [r2, r3]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4393      	bics	r3, r2
 8000ada:	0019      	movs	r1, r3
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e007      	b.n	8000af8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	02d2      	lsls	r2, r2, #11
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
  }
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b006      	add	sp, #24
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	5c9b      	ldrb	r3, [r3, r2]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d12f      	bne.n	8000b74 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2220      	movs	r2, #32
 8000b18:	2102      	movs	r1, #2
 8000b1a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2101      	movs	r1, #1
 8000b28:	438a      	bics	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b2c:	f7ff fdee 	bl	800070c <HAL_GetTick>
 8000b30:	0003      	movs	r3, r0
 8000b32:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b34:	e013      	b.n	8000b5e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b36:	f7ff fde9 	bl	800070c <HAL_GetTick>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b0a      	cmp	r3, #10
 8000b42:	d90c      	bls.n	8000b5e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	0292      	lsls	r2, r2, #10
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2220      	movs	r2, #32
 8000b56:	2105      	movs	r1, #5
 8000b58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e012      	b.n	8000b84 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	d1e5      	bne.n	8000b36 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0312      	lsls	r2, r2, #12
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
  }
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b9a:	201f      	movs	r0, #31
 8000b9c:	183b      	adds	r3, r7, r0
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	5c52      	ldrb	r2, [r2, r1]
 8000ba4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bae:	183b      	adds	r3, r7, r0
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d005      	beq.n	8000bc2 <HAL_CAN_AddTxMessage+0x36>
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d000      	beq.n	8000bc2 <HAL_CAN_AddTxMessage+0x36>
 8000bc0:	e0b7      	b.n	8000d32 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	04db      	lsls	r3, r3, #19
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d10a      	bne.n	8000be2 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bd4:	d105      	bne.n	8000be2 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bde:	d100      	bne.n	8000be2 <HAL_CAN_AddTxMessage+0x56>
 8000be0:	e09e      	b.n	8000d20 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	0e1b      	lsrs	r3, r3, #24
 8000be6:	2203      	movs	r2, #3
 8000be8:	4013      	ands	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d908      	bls.n	8000c04 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	0412      	lsls	r2, r2, #16
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e09e      	b.n	8000d42 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c04:	2201      	movs	r2, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4311      	orrs	r1, r2
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	3218      	adds	r2, #24
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	50d1      	str	r1, [r2, r3]
 8000c2e:	e00f      	b.n	8000c50 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000c46:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	3218      	adds	r2, #24
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	18cb      	adds	r3, r1, r3
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	7d1b      	ldrb	r3, [r3, #20]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d112      	bne.n	8000c92 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3318      	adds	r3, #24
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	3304      	adds	r3, #4
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3318      	adds	r3, #24
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	18cb      	adds	r3, r1, r3
 8000c8e:	3304      	adds	r3, #4
 8000c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3307      	adds	r3, #7
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	061a      	lsls	r2, r3, #24
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	041b      	lsls	r3, r3, #16
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3305      	adds	r3, #5
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	6979      	ldr	r1, [r7, #20]
 8000cbe:	23c6      	movs	r3, #198	; 0xc6
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	0109      	lsls	r1, r1, #4
 8000cc4:	1841      	adds	r1, r0, r1
 8000cc6:	18cb      	adds	r3, r1, r3
 8000cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3303      	adds	r3, #3
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	061a      	lsls	r2, r3, #24
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	041b      	lsls	r3, r3, #16
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0019      	movs	r1, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	6979      	ldr	r1, [r7, #20]
 8000cf4:	23c4      	movs	r3, #196	; 0xc4
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	0109      	lsls	r1, r1, #4
 8000cfa:	1841      	adds	r1, r0, r1
 8000cfc:	18cb      	adds	r3, r1, r3
 8000cfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	3218      	adds	r2, #24
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	58d2      	ldr	r2, [r2, r3]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	4311      	orrs	r1, r2
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	3218      	adds	r2, #24
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e010      	b.n	8000d42 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0392      	lsls	r2, r2, #14
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e007      	b.n	8000d42 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	02d2      	lsls	r2, r2, #11
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
  }
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b008      	add	sp, #32
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d58:	200b      	movs	r0, #11
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	2120      	movs	r1, #32
 8000d60:	5c52      	ldrb	r2, [r2, r1]
 8000d62:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d004      	beq.n	8000d76 <HAL_CAN_IsTxMessagePending+0x2c>
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d10b      	bne.n	8000d8e <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	0692      	lsls	r2, r2, #26
 8000d80:	401a      	ands	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	069b      	lsls	r3, r3, #26
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d001      	beq.n	8000d8e <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b004      	add	sp, #16
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000da6:	2017      	movs	r0, #23
 8000da8:	183b      	adds	r3, r7, r0
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	2120      	movs	r1, #32
 8000dae:	5c52      	ldrb	r2, [r2, r1]
 8000db0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_CAN_GetRxMessage+0x2e>
 8000dba:	2317      	movs	r3, #23
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d000      	beq.n	8000dc6 <HAL_CAN_GetRxMessage+0x2e>
 8000dc4:	e0f8      	b.n	8000fb8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10e      	bne.n	8000dea <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d117      	bne.n	8000e08 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0392      	lsls	r2, r2, #14
 8000de0:	431a      	orrs	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0ee      	b.n	8000fc8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	0392      	lsls	r2, r2, #14
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0df      	b.n	8000fc8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	321b      	adds	r2, #27
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	58d3      	ldr	r3, [r2, r3]
 8000e14:	2204      	movs	r2, #4
 8000e16:	401a      	ands	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	321b      	adds	r2, #27
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	58d3      	ldr	r3, [r2, r3]
 8000e30:	0d5b      	lsrs	r3, r3, #21
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	0d5a      	lsrs	r2, r3, #21
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e00a      	b.n	8000e52 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	321b      	adds	r2, #27
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	58d3      	ldr	r3, [r2, r3]
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	321b      	adds	r2, #27
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	401a      	ands	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	331b      	adds	r3, #27
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	220f      	movs	r2, #15
 8000e78:	401a      	ands	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	331b      	adds	r3, #27
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	22ff      	movs	r2, #255	; 0xff
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	331b      	adds	r3, #27
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	0c1a      	lsrs	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	23dc      	movs	r3, #220	; 0xdc
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	188a      	adds	r2, r1, r2
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	23dc      	movs	r3, #220	; 0xdc
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	188a      	adds	r2, r1, r2
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0a1a      	lsrs	r2, r3, #8
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	23dc      	movs	r3, #220	; 0xdc
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	188a      	adds	r2, r1, r2
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1a      	lsrs	r2, r3, #16
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	23dc      	movs	r3, #220	; 0xdc
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	188a      	adds	r2, r1, r2
 8000f10:	18d3      	adds	r3, r2, r3
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0e1a      	lsrs	r2, r3, #24
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	23de      	movs	r3, #222	; 0xde
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	188a      	adds	r2, r1, r2
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	23de      	movs	r3, #222	; 0xde
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	188a      	adds	r2, r1, r2
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	0a1a      	lsrs	r2, r3, #8
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3305      	adds	r3, #5
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	23de      	movs	r3, #222	; 0xde
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	188a      	adds	r2, r1, r2
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	0c1a      	lsrs	r2, r3, #16
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3306      	adds	r3, #6
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	23de      	movs	r3, #222	; 0xde
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	188a      	adds	r2, r1, r2
 8000f7e:	18d3      	adds	r3, r2, r3
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0e1a      	lsrs	r2, r3, #24
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	3307      	adds	r3, #7
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d108      	bne.n	8000fa4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2120      	movs	r1, #32
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	02d2      	lsls	r2, r2, #11
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
  }
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fda:	200f      	movs	r0, #15
 8000fdc:	183b      	adds	r3, r7, r0
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	5c52      	ldrb	r2, [r2, r1]
 8000fe4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe6:	183b      	adds	r3, r7, r0
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d004      	beq.n	8000ff8 <HAL_CAN_ActivateNotification+0x28>
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d109      	bne.n	800100c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6959      	ldr	r1, [r3, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e007      	b.n	800101c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	02d2      	lsls	r2, r2, #11
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
  }
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	2201      	movs	r2, #1
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_CAN_IRQHandler+0x46>
 8001068:	e084      	b.n	8001174 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2201      	movs	r2, #1
 800106e:	4013      	ands	r3, r2
 8001070:	d024      	beq.n	80010bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2202      	movs	r2, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d004      	beq.n	800108c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f000 f97e 	bl	8001386 <HAL_CAN_TxMailbox0CompleteCallback>
 800108a:	e017      	b.n	80010bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
 8001092:	d005      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	4313      	orrs	r3, r2
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e00d      	b.n	80010bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2208      	movs	r2, #8
 80010a4:	4013      	ands	r3, r2
 80010a6:	d005      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	0152      	lsls	r2, r2, #5
 80010ae:	4313      	orrs	r3, r2
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e003      	b.n	80010bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 f97d 	bl	80013b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	d028      	beq.n	8001118 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	0052      	lsls	r2, r2, #1
 80010ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4013      	ands	r3, r2
 80010d8:	d004      	beq.n	80010e4 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 f95a 	bl	8001396 <HAL_CAN_TxMailbox1CompleteCallback>
 80010e2:	e019      	b.n	8001118 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	d005      	beq.n	80010fa <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0192      	lsls	r2, r2, #6
 80010f4:	4313      	orrs	r3, r2
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	e00e      	b.n	8001118 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d005      	beq.n	8001110 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	01d2      	lsls	r2, r2, #7
 800110a:	4313      	orrs	r3, r2
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	e003      	b.n	8001118 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f000 f957 	bl	80013c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4013      	ands	r3, r2
 8001120:	d028      	beq.n	8001174 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	029b      	lsls	r3, r3, #10
 8001132:	4013      	ands	r3, r2
 8001134:	d004      	beq.n	8001140 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f934 	bl	80013a6 <HAL_CAN_TxMailbox2CompleteCallback>
 800113e:	e019      	b.n	8001174 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	02db      	lsls	r3, r3, #11
 8001146:	4013      	ands	r3, r2
 8001148:	d005      	beq.n	8001156 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0212      	lsls	r2, r2, #8
 8001150:	4313      	orrs	r3, r2
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
 8001154:	e00e      	b.n	8001174 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	4013      	ands	r3, r2
 800115e:	d005      	beq.n	800116c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0252      	lsls	r2, r2, #9
 8001166:	4313      	orrs	r3, r2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e003      	b.n	8001174 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f931 	bl	80013d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	2208      	movs	r2, #8
 8001178:	4013      	ands	r3, r2
 800117a:	d00c      	beq.n	8001196 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2210      	movs	r2, #16
 8001180:	4013      	ands	r3, r2
 8001182:	d008      	beq.n	8001196 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4313      	orrs	r3, r2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2210      	movs	r2, #16
 8001194:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	2204      	movs	r2, #4
 800119a:	4013      	ands	r3, r2
 800119c:	d00b      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2208      	movs	r2, #8
 80011a2:	4013      	ands	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2208      	movs	r2, #8
 80011ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 f920 	bl	80013f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d009      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2203      	movs	r2, #3
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f000 f90a 	bl	80013e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	4013      	ands	r3, r2
 80011d8:	d00c      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2210      	movs	r2, #16
 80011de:	4013      	ands	r3, r2
 80011e0:	d008      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2210      	movs	r2, #16
 80011f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	2220      	movs	r2, #32
 80011f8:	4013      	ands	r3, r2
 80011fa:	d00b      	beq.n	8001214 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2208      	movs	r2, #8
 8001200:	4013      	ands	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2208      	movs	r2, #8
 800120a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f901 	bl	8001416 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2210      	movs	r2, #16
 8001218:	4013      	ands	r3, r2
 800121a:	d009      	beq.n	8001230 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2203      	movs	r2, #3
 8001224:	4013      	ands	r3, r2
 8001226:	d003      	beq.n	8001230 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f8eb 	bl	8001406 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001230:	6a3a      	ldr	r2, [r7, #32]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	029b      	lsls	r3, r3, #10
 8001236:	4013      	ands	r3, r2
 8001238:	d00b      	beq.n	8001252 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2210      	movs	r2, #16
 8001248:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f000 f8ea 	bl	8001426 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001252:	6a3a      	ldr	r2, [r7, #32]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	4013      	ands	r3, r2
 800125a:	d00b      	beq.n	8001274 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2208      	movs	r2, #8
 8001260:	4013      	ands	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f8e1 	bl	8001436 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_CAN_IRQHandler+0x25c>
 800127e:	e071      	b.n	8001364 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_CAN_IRQHandler+0x266>
 8001288:	e068      	b.n	800135c <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800128a:	6a3a      	ldr	r2, [r7, #32]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4013      	ands	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800129a:	d003      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	2201      	movs	r2, #1
 80012a0:	4313      	orrs	r3, r2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012a4:	6a3a      	ldr	r2, [r7, #32]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012b4:	d003      	beq.n	80012be <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	2202      	movs	r2, #2
 80012ba:	4313      	orrs	r3, r2
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012be:	6a3a      	ldr	r2, [r7, #32]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ce:	d003      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	2204      	movs	r2, #4
 80012d4:	4313      	orrs	r3, r2
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012d8:	6a3a      	ldr	r2, [r7, #32]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d03c      	beq.n	800135c <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2270      	movs	r2, #112	; 0x70
 80012e6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012e8:	d038      	beq.n	800135c <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2270      	movs	r2, #112	; 0x70
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b30      	cmp	r3, #48	; 0x30
 80012f2:	d016      	beq.n	8001322 <HAL_CAN_IRQHandler+0x2fe>
 80012f4:	d804      	bhi.n	8001300 <HAL_CAN_IRQHandler+0x2dc>
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d009      	beq.n	800130e <HAL_CAN_IRQHandler+0x2ea>
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d00c      	beq.n	8001318 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012fe:	e025      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001300:	2b50      	cmp	r3, #80	; 0x50
 8001302:	d018      	beq.n	8001336 <HAL_CAN_IRQHandler+0x312>
 8001304:	2b60      	cmp	r3, #96	; 0x60
 8001306:	d01b      	beq.n	8001340 <HAL_CAN_IRQHandler+0x31c>
 8001308:	2b40      	cmp	r3, #64	; 0x40
 800130a:	d00f      	beq.n	800132c <HAL_CAN_IRQHandler+0x308>
            break;
 800130c:	e01e      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	2208      	movs	r2, #8
 8001312:	4313      	orrs	r3, r2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001316:	e019      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2210      	movs	r2, #16
 800131c:	4313      	orrs	r3, r2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001320:	e014      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2220      	movs	r2, #32
 8001326:	4313      	orrs	r3, r2
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132a:	e00f      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2240      	movs	r2, #64	; 0x40
 8001330:	4313      	orrs	r3, r2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001334:	e00a      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	4313      	orrs	r3, r2
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800133e:	e005      	b.n	800134c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	4313      	orrs	r3, r2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800134a:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2170      	movs	r1, #112	; 0x70
 8001358:	438a      	bics	r2, r1
 800135a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2204      	movs	r2, #4
 8001362:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f864 	bl	8001446 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b00a      	add	sp, #40	; 0x28
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	0002      	movs	r2, r0
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b7f      	cmp	r3, #127	; 0x7f
 800146a:	d809      	bhi.n	8001480 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	231f      	movs	r3, #31
 8001474:	401a      	ands	r2, r3
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_EnableIRQ+0x30>)
 8001478:	2101      	movs	r1, #1
 800147a:	4091      	lsls	r1, r2
 800147c:	000a      	movs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
  }
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b7f      	cmp	r3, #127	; 0x7f
 80014a0:	d828      	bhi.n	80014f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <__NVIC_SetPriority+0xd4>)
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	33c0      	adds	r3, #192	; 0xc0
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	589b      	ldr	r3, [r3, r2]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	0011      	movs	r1, r2
 80014b8:	2203      	movs	r2, #3
 80014ba:	400a      	ands	r2, r1
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	21ff      	movs	r1, #255	; 0xff
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	401a      	ands	r2, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	2303      	movs	r3, #3
 80014da:	4003      	ands	r3, r0
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <__NVIC_SetPriority+0xd4>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	430a      	orrs	r2, r1
 80014ec:	33c0      	adds	r3, #192	; 0xc0
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014f2:	e031      	b.n	8001558 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <__NVIC_SetPriority+0xd8>)
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	0019      	movs	r1, r3
 80014fc:	230f      	movs	r3, #15
 80014fe:	400b      	ands	r3, r1
 8001500:	3b08      	subs	r3, #8
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3306      	adds	r3, #6
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	18d3      	adds	r3, r2, r3
 800150a:	3304      	adds	r3, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1dfa      	adds	r2, r7, #7
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	0011      	movs	r1, r2
 8001514:	2203      	movs	r2, #3
 8001516:	400a      	ands	r2, r1
 8001518:	00d2      	lsls	r2, r2, #3
 800151a:	21ff      	movs	r1, #255	; 0xff
 800151c:	4091      	lsls	r1, r2
 800151e:	000a      	movs	r2, r1
 8001520:	43d2      	mvns	r2, r2
 8001522:	401a      	ands	r2, r3
 8001524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	401a      	ands	r2, r3
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	2303      	movs	r3, #3
 8001536:	4003      	ands	r3, r0
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <__NVIC_SetPriority+0xd8>)
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	001c      	movs	r4, r3
 8001544:	230f      	movs	r3, #15
 8001546:	4023      	ands	r3, r4
 8001548:	3b08      	subs	r3, #8
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	430a      	orrs	r2, r1
 800154e:	3306      	adds	r3, #6
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18c3      	adds	r3, r0, r3
 8001554:	3304      	adds	r3, #4
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b003      	add	sp, #12
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <SysTick_Config+0x40>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e010      	b.n	80015a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <SysTick_Config+0x44>)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	3a01      	subs	r2, #1
 8001584:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	2301      	movs	r3, #1
 8001588:	425b      	negs	r3, r3
 800158a:	2103      	movs	r1, #3
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff ff7d 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SysTick_Config+0x44>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x44>)
 800159a:	2207      	movs	r2, #7
 800159c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	00ffffff 	.word	0x00ffffff
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	210f      	movs	r1, #15
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	1c02      	adds	r2, r0, #0
 80015c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff5d 	bl	800148c <__NVIC_SetPriority>
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	0002      	movs	r2, r0
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ff33 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ffaf 	bl	8001568 <SysTick_Config>
 800160a:	0003      	movs	r3, r0
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e155      	b.n	80018d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4091      	lsls	r1, r2
 800162e:	000a      	movs	r2, r1
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <HAL_GPIO_Init+0x28>
 800163a:	e146      	b.n	80018ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d00b      	beq.n	800165c <HAL_GPIO_Init+0x48>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001650:	2b11      	cmp	r3, #17
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d130      	bne.n	80016be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	43da      	mvns	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001692:	2201      	movs	r2, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	2201      	movs	r2, #1
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0xea>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d123      	bne.n	8001746 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	58d3      	ldr	r3, [r2, r3]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2207      	movs	r2, #7
 8001710:	4013      	ands	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	220f      	movs	r2, #15
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2107      	movs	r1, #7
 800172a:	400b      	ands	r3, r1
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	6939      	ldr	r1, [r7, #16]
 8001744:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	401a      	ands	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	055b      	lsls	r3, r3, #21
 8001782:	4013      	ands	r3, r2
 8001784:	d100      	bne.n	8001788 <HAL_GPIO_Init+0x174>
 8001786:	e0a0      	b.n	80018ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001788:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_GPIO_Init+0x2d4>)
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <HAL_GPIO_Init+0x2d4>)
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_GPIO_Init+0x2d4>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2201      	movs	r2, #1
 800179a:	4013      	ands	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x2d8>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	589b      	ldr	r3, [r3, r2]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	2390      	movs	r3, #144	; 0x90
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x1ee>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2dc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x1ea>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <HAL_GPIO_Init+0x2e0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x1e6>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_GPIO_Init+0x2e4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x1e2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_GPIO_Init+0x2e8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x1de>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x1f0>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x1f0>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x1f0>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x1f0>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x1f0>
 8001802:	2300      	movs	r3, #0
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	2103      	movs	r1, #3
 8001808:	400a      	ands	r2, r1
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_Init+0x2d8>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4013      	ands	r3, r2
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	029b      	lsls	r3, r3, #10
 8001864:	4013      	ands	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	039b      	lsls	r3, r3, #14
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	1e13      	subs	r3, r2, #0
 80018da:	d000      	beq.n	80018de <HAL_GPIO_Init+0x2ca>
 80018dc:	e6a2      	b.n	8001624 <HAL_GPIO_Init+0x10>
  } 
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b006      	add	sp, #24
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000800 	.word	0x48000800
 80018f8:	48000c00 	.word	0x48000c00
 80018fc:	48001000 	.word	0x48001000
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	0002      	movs	r2, r0
 800190c:	1dbb      	adds	r3, r7, #6
 800190e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	4013      	ands	r3, r2
 800191a:	d008      	beq.n	800192e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800191e:	1dba      	adds	r2, r7, #6
 8001920:	8812      	ldrh	r2, [r2, #0]
 8001922:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f000 f807 	bl	800193c <HAL_GPIO_EXTI_Callback>
  }
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	0002      	movs	r2, r0
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	f000 fb76 	bl	8002050 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_RCC_OscConfig+0x20>
 800196e:	e08e      	b.n	8001a8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001970:	4bc5      	ldr	r3, [pc, #788]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00e      	beq.n	800199a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4bc2      	ldr	r3, [pc, #776]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	220c      	movs	r2, #12
 8001982:	4013      	ands	r3, r2
 8001984:	2b08      	cmp	r3, #8
 8001986:	d117      	bne.n	80019b8 <HAL_RCC_OscConfig+0x68>
 8001988:	4bbf      	ldr	r3, [pc, #764]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	401a      	ands	r2, r3
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	429a      	cmp	r2, r3
 8001998:	d10e      	bne.n	80019b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	4bbb      	ldr	r3, [pc, #748]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	029b      	lsls	r3, r3, #10
 80019a2:	4013      	ands	r3, r2
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x58>
 80019a6:	e071      	b.n	8001a8c <HAL_RCC_OscConfig+0x13c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d000      	beq.n	80019b2 <HAL_RCC_OscConfig+0x62>
 80019b0:	e06c      	b.n	8001a8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f000 fb4c 	bl	8002050 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x80>
 80019c0:	4bb1      	ldr	r3, [pc, #708]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4bb0      	ldr	r3, [pc, #704]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0249      	lsls	r1, r1, #9
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e02f      	b.n	8001a30 <HAL_RCC_OscConfig+0xe0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0xa2>
 80019d8:	4bab      	ldr	r3, [pc, #684]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4baa      	ldr	r3, [pc, #680]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019de:	49ab      	ldr	r1, [pc, #684]	; (8001c8c <HAL_RCC_OscConfig+0x33c>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	4ba8      	ldr	r3, [pc, #672]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4ba7      	ldr	r3, [pc, #668]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019ea:	49a9      	ldr	r1, [pc, #676]	; (8001c90 <HAL_RCC_OscConfig+0x340>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e01e      	b.n	8001a30 <HAL_RCC_OscConfig+0xe0>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d10e      	bne.n	8001a18 <HAL_RCC_OscConfig+0xc8>
 80019fa:	4ba3      	ldr	r3, [pc, #652]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4ba2      	ldr	r3, [pc, #648]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	02c9      	lsls	r1, r1, #11
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	4b9f      	ldr	r3, [pc, #636]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b9e      	ldr	r3, [pc, #632]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xe0>
 8001a18:	4b9b      	ldr	r3, [pc, #620]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b9a      	ldr	r3, [pc, #616]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	499b      	ldr	r1, [pc, #620]	; (8001c8c <HAL_RCC_OscConfig+0x33c>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	4b98      	ldr	r3, [pc, #608]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b97      	ldr	r3, [pc, #604]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a2a:	4999      	ldr	r1, [pc, #612]	; (8001c90 <HAL_RCC_OscConfig+0x340>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d014      	beq.n	8001a62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fe68 	bl	800070c <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a42:	f7fe fe63 	bl	800070c <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e2fd      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a54:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0xf2>
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7fe fe53 	bl	800070c <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7fe fe4e 	bl	800070c <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e2e8      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x11c>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x14a>
 8001a98:	e06c      	b.n	8001b74 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a9a:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	220c      	movs	r2, #12
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d11f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1a0>
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	23c0      	movs	r3, #192	; 0xc0
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	401a      	ands	r2, r3
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x188>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e2bb      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	22f8      	movs	r2, #248	; 0xf8
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00da      	lsls	r2, r3, #3
 8001ae8:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e041      	b.n	8001b74 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d024      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fe02 	bl	800070c <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7fe fdfd 	bl	800070c <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e297      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f1      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	22f8      	movs	r2, #248	; 0xf8
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00da      	lsls	r2, r3, #3
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e018      	b.n	8001b74 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	438a      	bics	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fddd 	bl	800070c <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b58:	f7fe fdd8 	bl	800070c <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e272      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1f1      	bne.n	8001b58 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d036      	beq.n	8001bec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d019      	beq.n	8001bba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fdbb 	bl	800070c <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fdb6 	bl	800070c <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e250      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0f1      	beq.n	8001b9c <HAL_RCC_OscConfig+0x24c>
 8001bb8:	e018      	b.n	8001bec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	438a      	bics	r2, r1
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7fe fda1 	bl	800070c <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe fd9c 	bl	800070c <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e236      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d1f1      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2a8>
 8001bf6:	e0b5      	b.n	8001d64 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf8:	231f      	movs	r3, #31
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	055b      	lsls	r3, r3, #21
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0549      	lsls	r1, r1, #21
 8001c16:	430a      	orrs	r2, r1
 8001c18:	61da      	str	r2, [r3, #28]
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c28:	231f      	movs	r3, #31
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_RCC_OscConfig+0x344>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d11a      	bne.n	8001c72 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x344>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCC_OscConfig+0x344>)
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	0049      	lsls	r1, r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe fd5f 	bl	800070c <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7fe fd5a 	bl	800070c <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1f4      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x344>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x348>
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_RCC_OscConfig+0x338>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	430a      	orrs	r2, r1
 8001c84:	621a      	str	r2, [r3, #32]
 8001c86:	e035      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3a4>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	fffeffff 	.word	0xfffeffff
 8001c90:	fffbffff 	.word	0xfffbffff
 8001c94:	40007000 	.word	0x40007000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x36a>
 8001ca0:	4bca      	ldr	r3, [pc, #808]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	4bc9      	ldr	r3, [pc, #804]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]
 8001cac:	4bc7      	ldr	r3, [pc, #796]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	4bc6      	ldr	r3, [pc, #792]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	621a      	str	r2, [r3, #32]
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3a4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x38c>
 8001cc2:	4bc2      	ldr	r3, [pc, #776]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	4bc1      	ldr	r3, [pc, #772]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	2104      	movs	r1, #4
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	621a      	str	r2, [r3, #32]
 8001cce:	4bbf      	ldr	r3, [pc, #764]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	4bbe      	ldr	r3, [pc, #760]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	621a      	str	r2, [r3, #32]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3a4>
 8001cdc:	4bbb      	ldr	r3, [pc, #748]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	4bba      	ldr	r3, [pc, #744]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	621a      	str	r2, [r3, #32]
 8001ce8:	4bb8      	ldr	r3, [pc, #736]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	4bb7      	ldr	r3, [pc, #732]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001cee:	2104      	movs	r1, #4
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fd06 	bl	800070c <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fd01 	bl	800070c <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4aaf      	ldr	r2, [pc, #700]	; (8001fd0 <HAL_RCC_OscConfig+0x680>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e19a      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	4bac      	ldr	r3, [pc, #688]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3b6>
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe fcf1 	bl	800070c <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fcec 	bl	800070c <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	4aa5      	ldr	r2, [pc, #660]	; (8001fd0 <HAL_RCC_OscConfig+0x680>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e185      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4ba1      	ldr	r3, [pc, #644]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b9c      	ldr	r3, [pc, #624]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	4b9b      	ldr	r3, [pc, #620]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d5e:	499d      	ldr	r1, [pc, #628]	; (8001fd4 <HAL_RCC_OscConfig+0x684>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d12a      	bne.n	8001dcc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d76:	4b95      	ldr	r3, [pc, #596]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7a:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d82:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe fcbd 	bl	800070c <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d98:	f7fe fcb8 	bl	800070c <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e152      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f1      	beq.n	8001d98 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001db4:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	22f8      	movs	r2, #248	; 0xf8
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	00da      	lsls	r2, r3, #3
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	e034      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	3305      	adds	r3, #5
 8001dd2:	d111      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dd4:	4b7d      	ldr	r3, [pc, #500]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd8:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dda:	2104      	movs	r1, #4
 8001ddc:	438a      	bics	r2, r1
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001de0:	4b7a      	ldr	r3, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	22f8      	movs	r2, #248	; 0xf8
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	00da      	lsls	r2, r3, #3
 8001df0:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	e01e      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df8:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfc:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	2104      	movs	r1, #4
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e04:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e08:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7fe fc7c 	bl	800070c <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e1a:	f7fe fc77 	bl	800070c <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e111      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1f1      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d05c      	beq.n	8001efa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	220c      	movs	r2, #12
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d00e      	beq.n	8001e6a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e4c:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	220c      	movs	r2, #12
 8001e52:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d114      	bne.n	8001e82 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e58:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	401a      	ands	r2, r3
 8001e62:	23c0      	movs	r3, #192	; 0xc0
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4013      	ands	r3, r2
 8001e74:	d040      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x5a8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d03c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e6      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e8a:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0249      	lsls	r1, r1, #9
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fc38 	bl	800070c <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea2:	f7fe fc33 	bl	800070c <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0cd      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x552>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001ec8:	4943      	ldr	r1, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x688>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fc1d 	bl	800070c <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed8:	f7fe fc18 	bl	800070c <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0b2      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	025b      	lsls	r3, r3, #9
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x588>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ef8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d100      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5b4>
 8001f02:	e0a4      	b.n	800204e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5c2>
 8001f10:	e078      	b.n	8002004 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d14c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f20:	492e      	ldr	r1, [pc, #184]	; (8001fdc <HAL_RCC_OscConfig+0x68c>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fbf1 	bl	800070c <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe fbec 	bl	800070c <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e086      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	049b      	lsls	r3, r3, #18
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	220f      	movs	r2, #15
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_RCC_OscConfig+0x690>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	431a      	orrs	r2, r3
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0449      	lsls	r1, r1, #17
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fbbf 	bl	800070c <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fbba 	bl	800070c <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e054      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	049b      	lsls	r3, r3, #18
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x644>
 8001fb2:	e04c      	b.n	800204e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_OscConfig+0x67c>)
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <HAL_RCC_OscConfig+0x68c>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fba4 	bl	800070c <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6a6>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	00001388 	.word	0x00001388
 8001fd4:	efffffff 	.word	0xefffffff
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	feffffff 	.word	0xfeffffff
 8001fe0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fb92 	bl	800070c <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e02c      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_RCC_OscConfig+0x708>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x694>
 8002002:	e024      	b.n	800204e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e01f      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCC_OscConfig+0x708>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_OscConfig+0x708>)
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	429a      	cmp	r2, r3
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	220f      	movs	r2, #15
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d107      	bne.n	800204a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	23f0      	movs	r3, #240	; 0xf0
 800203e:	039b      	lsls	r3, r3, #14
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b008      	add	sp, #32
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0bf      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d911      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2201      	movs	r2, #1
 8002084:	4393      	bics	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0a6      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d015      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2204      	movs	r2, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d006      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80020bc:	21e0      	movs	r1, #224	; 0xe0
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	22f0      	movs	r2, #240	; 0xf0
 80020ca:	4393      	bics	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d04c      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	4013      	ands	r3, r2
 80020f4:	d120      	bne.n	8002138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07a      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	049b      	lsls	r3, r3, #18
 800210a:	4013      	ands	r3, r2
 800210c:	d114      	bne.n	8002138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06e      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 800211c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	4013      	ands	r3, r2
 8002124:	d108      	bne.n	8002138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e062      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e05b      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe fade 	bl	800070c <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002154:	e009      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002156:	f7fe fad9 	bl	800070c <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1a4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e042      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	220c      	movs	r2, #12
 8002170:	401a      	ands	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1ec      	bne.n	8002156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d211      	bcs.n	80021ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	4393      	bics	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x19c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e020      	b.n	80021f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2204      	movs	r2, #4
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_RCC_ClockConfig+0x1a8>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021cc:	f000 f820 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021d0:	0001      	movs	r1, r0
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1a0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	220f      	movs	r2, #15
 80021da:	4013      	ands	r3, r2
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1ac>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	000a      	movs	r2, r1
 80021e2:	40da      	lsrs	r2, r3
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1b0>)
 80021e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7fe fa49 	bl	8000680 <HAL_InitTick>
  
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	00001388 	.word	0x00001388
 8002204:	fffff8ff 	.word	0xfffff8ff
 8002208:	0800239c 	.word	0x0800239c
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08f      	sub	sp, #60	; 0x3c
 8002214:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002216:	2314      	movs	r3, #20
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800221c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800221e:	c313      	stmia	r3!, {r0, r1, r4}
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4a35      	ldr	r2, [pc, #212]	; (80022fc <HAL_RCC_GetSysClockFreq+0xec>)
 8002228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800222a:	c313      	stmia	r3!, {r0, r1, r4}
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	220c      	movs	r2, #12
 800224e:	4013      	ands	r3, r2
 8002250:	2b08      	cmp	r3, #8
 8002252:	d006      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x52>
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d043      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0xd0>
 8002258:	2b04      	cmp	r3, #4
 800225a:	d144      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_GetSysClockFreq+0xf4>)
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002260:	e044      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	220f      	movs	r2, #15
 8002268:	4013      	ands	r3, r2
 800226a:	2214      	movs	r2, #20
 800226c:	18ba      	adds	r2, r7, r2
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	220f      	movs	r2, #15
 8002278:	4013      	ands	r3, r2
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002282:	23c0      	movs	r3, #192	; 0xc0
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	401a      	ands	r2, r3
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	429a      	cmp	r2, r3
 800228e:	d109      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002292:	481c      	ldr	r0, [pc, #112]	; (8002304 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002294:	f7fd ff38 	bl	8000108 <__udivsi3>
 8002298:	0003      	movs	r3, r0
 800229a:	001a      	movs	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	4353      	muls	r3, r2
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
 80022a2:	e01a      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	025b      	lsls	r3, r3, #9
 80022aa:	401a      	ands	r2, r3
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b6:	4814      	ldr	r0, [pc, #80]	; (8002308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b8:	f7fd ff26 	bl	8000108 <__udivsi3>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	4353      	muls	r3, r2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
 80022c6:	e008      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022cc:	f7fd ff1c 	bl	8000108 <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	001a      	movs	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	4353      	muls	r3, r2
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e4:	e002      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b00f      	add	sp, #60	; 0x3c
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	0800237c 	.word	0x0800237c
 80022fc:	0800238c 	.word	0x0800238c
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	02dc6c00 	.word	0x02dc6c00

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	2600      	movs	r6, #0
 8002310:	4d0c      	ldr	r5, [pc, #48]	; (8002344 <__libc_init_array+0x38>)
 8002312:	4c0d      	ldr	r4, [pc, #52]	; (8002348 <__libc_init_array+0x3c>)
 8002314:	1b64      	subs	r4, r4, r5
 8002316:	10a4      	asrs	r4, r4, #2
 8002318:	42a6      	cmp	r6, r4
 800231a:	d109      	bne.n	8002330 <__libc_init_array+0x24>
 800231c:	2600      	movs	r6, #0
 800231e:	f000 f821 	bl	8002364 <_init>
 8002322:	4d0a      	ldr	r5, [pc, #40]	; (800234c <__libc_init_array+0x40>)
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <__libc_init_array+0x44>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	42a6      	cmp	r6, r4
 800232c:	d105      	bne.n	800233a <__libc_init_array+0x2e>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	00b3      	lsls	r3, r6, #2
 8002332:	58eb      	ldr	r3, [r5, r3]
 8002334:	4798      	blx	r3
 8002336:	3601      	adds	r6, #1
 8002338:	e7ee      	b.n	8002318 <__libc_init_array+0xc>
 800233a:	00b3      	lsls	r3, r6, #2
 800233c:	58eb      	ldr	r3, [r5, r3]
 800233e:	4798      	blx	r3
 8002340:	3601      	adds	r6, #1
 8002342:	e7f2      	b.n	800232a <__libc_init_array+0x1e>
 8002344:	080023ac 	.word	0x080023ac
 8002348:	080023ac 	.word	0x080023ac
 800234c:	080023ac 	.word	0x080023ac
 8002350:	080023b0 	.word	0x080023b0

08002354 <memset>:
 8002354:	0003      	movs	r3, r0
 8002356:	1812      	adds	r2, r2, r0
 8002358:	4293      	cmp	r3, r2
 800235a:	d100      	bne.n	800235e <memset+0xa>
 800235c:	4770      	bx	lr
 800235e:	7019      	strb	r1, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	e7f9      	b.n	8002358 <memset+0x4>

08002364 <_init>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr

08002370 <_fini>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr
