
SG_MotorControllerBoard_rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000074  08003dc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003dc8  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e354  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254b  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018517  00000000  00000000  00032470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a94b  00000000  00000000  0004a987  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000824f6  00000000  00000000  000552d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d77c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000351c  00000000  00000000  000d7844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cd8 	.word	0x08003cd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003cd8 	.word	0x08003cd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b093      	sub	sp, #76	; 0x4c
 80003f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 fa51 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f903 	bl	8000608 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fa4d 	bl	80008a0 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000406:	f000 f989 	bl	800071c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800040a:	f000 f9e7 	bl	80007dc <_ZL12MX_TIM3_Initv>
//  MX_CAN_Init();
  MX_SPI2_Init();
 800040e:	f000 f943 	bl	8000698 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
  recharge = true;
 8000412:	4b70      	ldr	r3, [pc, #448]	; (80005d4 <main+0x1e0>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8000418:	4b6f      	ldr	r3, [pc, #444]	; (80005d8 <main+0x1e4>)
 800041a:	0018      	movs	r0, r3
 800041c:	f003 f800 	bl	8003420 <HAL_TIM_Base_Start_IT>

  AUX_MESSAGE_0 aux0;
 8000420:	240c      	movs	r4, #12
 8000422:	193b      	adds	r3, r7, r4
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fe4f 	bl	80010c8 <_ZN13AUX_MESSAGE_0C1Ev>
  aux0.SetupReceive(AuxReceive);
 800042a:	4a6c      	ldr	r2, [pc, #432]	; (80005dc <main+0x1e8>)
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fec9 	bl	80011c8 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>

  SUBSYSTEM_DATA_MODULE::StartCAN(&hcan);
 8000436:	4b6a      	ldr	r3, [pc, #424]	; (80005e0 <main+0x1ec>)
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fee5 	bl	8001208 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef>

  uint8_t initializeDAC[3] = {0x70, 0x00, 0x00};
 800043e:	2408      	movs	r4, #8
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2270      	movs	r2, #112	; 0x70
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	705a      	strb	r2, [r3, #1]
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(RegenSS_GPIO_Port, RegenSS_Pin, GPIO_PIN_RESET);
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	015b      	lsls	r3, r3, #5
 8000456:	4863      	ldr	r0, [pc, #396]	; (80005e4 <main+0x1f0>)
 8000458:	2200      	movs	r2, #0
 800045a:	0019      	movs	r1, r3
 800045c:	f001 ff57 	bl	800230e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &initializeDAC[0], 3, 10);
 8000460:	1939      	adds	r1, r7, r4
 8000462:	4861      	ldr	r0, [pc, #388]	; (80005e8 <main+0x1f4>)
 8000464:	230a      	movs	r3, #10
 8000466:	2203      	movs	r2, #3
 8000468:	f002 fd02 	bl	8002e70 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RegenSS_GPIO_Port, RegenSS_Pin, GPIO_PIN_SET);
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	015b      	lsls	r3, r3, #5
 8000470:	485c      	ldr	r0, [pc, #368]	; (80005e4 <main+0x1f0>)
 8000472:	2201      	movs	r2, #1
 8000474:	0019      	movs	r1, r3
 8000476:	f001 ff4a 	bl	800230e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_RESET);
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	01db      	lsls	r3, r3, #7
 800047e:	4859      	ldr	r0, [pc, #356]	; (80005e4 <main+0x1f0>)
 8000480:	2200      	movs	r2, #0
 8000482:	0019      	movs	r1, r3
 8000484:	f001 ff43 	bl	800230e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &initializeDAC[0], 3, 10);
 8000488:	1939      	adds	r1, r7, r4
 800048a:	4857      	ldr	r0, [pc, #348]	; (80005e8 <main+0x1f4>)
 800048c:	230a      	movs	r3, #10
 800048e:	2203      	movs	r2, #3
 8000490:	f002 fcee 	bl	8002e70 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_SET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	01db      	lsls	r3, r3, #7
 8000498:	4852      	ldr	r0, [pc, #328]	; (80005e4 <main+0x1f0>)
 800049a:	2201      	movs	r2, #1
 800049c:	0019      	movs	r1, r3
 800049e:	f001 ff36 	bl	800230e <HAL_GPIO_WritePin>

  uint8_t turnOnDAC[3] = {0x30, 0xFF, 0x00};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a51      	ldr	r2, [pc, #324]	; (80005ec <main+0x1f8>)
 80004a6:	8811      	ldrh	r1, [r2, #0]
 80004a8:	8019      	strh	r1, [r3, #0]
 80004aa:	7892      	ldrb	r2, [r2, #2]
 80004ac:	709a      	strb	r2, [r3, #2]
  uint8_t turnOffDAC[3] = {0x40, 0x00, 0x00};
 80004ae:	003b      	movs	r3, r7
 80004b0:	2240      	movs	r2, #64	; 0x40
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	705a      	strb	r2, [r3, #1]
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(chargeTripActive)
 80004c0:	4b4b      	ldr	r3, [pc, #300]	; (80005f0 <main+0x1fc>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d01c      	beq.n	8000502 <main+0x10e>
	  {
		  HAL_GPIO_WritePin(GPIOA, MC_COIL_Pin, GPIO_PIN_RESET);
 80004c8:	2390      	movs	r3, #144	; 0x90
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 ff1c 	bl	800230e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, MPPT_COIL_Pin, GPIO_PIN_RESET);
 80004d6:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <main+0x200>)
 80004d8:	2200      	movs	r2, #0
 80004da:	2110      	movs	r1, #16
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff16 	bl	800230e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, MCPRE_Pin|MPPTPRE_Pin, GPIO_PIN_RESET);
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2160      	movs	r1, #96	; 0x60
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 ff0f 	bl	800230e <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop_IT(&htim2);
 80004f0:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <main+0x1e4>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 ffb6 	bl	8003464 <HAL_TIM_Base_Stop_IT>
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80004f8:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <main+0x1e4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
 8000500:	e011      	b.n	8000526 <main+0x132>
	  }
	  else if(!chargeTripActive && recharge)
 8000502:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <main+0x1fc>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2201      	movs	r2, #1
 8000508:	4053      	eors	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00a      	beq.n	8000526 <main+0x132>
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <main+0x1e0>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d006      	beq.n	8000526 <main+0x132>
	  {
		  HAL_GPIO_WritePin(GPIOA, MCPRE_Pin|MPPTPRE_Pin, GPIO_PIN_SET);
 8000518:	2390      	movs	r3, #144	; 0x90
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2201      	movs	r2, #1
 800051e:	2160      	movs	r1, #96	; 0x60
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fef4 	bl	800230e <HAL_GPIO_WritePin>
	  }
	  if(newCANPacket && !aux0.isFifoEmpty())
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <main+0x204>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d00d      	beq.n	800054a <main+0x156>
 800052e:	230c      	movs	r3, #12
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fede 	bl	80012f4 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000538:	0003      	movs	r3, r0
 800053a:	001a      	movs	r2, r3
 800053c:	2301      	movs	r3, #1
 800053e:	4053      	eors	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <main+0x156>
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <main+0x158>
 800054a:	2300      	movs	r3, #0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00c      	beq.n	800056a <main+0x176>
	  {
		  newCANPacket = false;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <main+0x204>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		  auxPacket = aux0.GetOldestDataPacket(nullptr);
 8000556:	230c      	movs	r3, #12
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb13 	bl	8000b88 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 8000562:	0003      	movs	r3, r0
 8000564:	001a      	movs	r2, r3
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0x208>)
 8000568:	601a      	str	r2, [r3, #0]
	  }
	  if(newCruiseInput)
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <main+0x20c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0a6      	beq.n	80004c0 <main+0xcc>
	  {
		  newCruiseInput = false;
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <main+0x20c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		  if(cruiseActive)
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <main+0x210>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d014      	beq.n	80005aa <main+0x1b6>
		  {
			  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_RESET);
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	01db      	lsls	r3, r3, #7
 8000584:	4817      	ldr	r0, [pc, #92]	; (80005e4 <main+0x1f0>)
 8000586:	2200      	movs	r2, #0
 8000588:	0019      	movs	r1, r3
 800058a:	f001 fec0 	bl	800230e <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi2, &turnOnDAC[0], 3, 10);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0x1f4>)
 8000592:	230a      	movs	r3, #10
 8000594:	2203      	movs	r2, #3
 8000596:	f002 fc6b 	bl	8002e70 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_SET);
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	01db      	lsls	r3, r3, #7
 800059e:	4811      	ldr	r0, [pc, #68]	; (80005e4 <main+0x1f0>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	0019      	movs	r1, r3
 80005a4:	f001 feb3 	bl	800230e <HAL_GPIO_WritePin>
 80005a8:	e78a      	b.n	80004c0 <main+0xcc>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_RESET);
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	01db      	lsls	r3, r3, #7
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0x1f0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	0019      	movs	r1, r3
 80005b4:	f001 feab 	bl	800230e <HAL_GPIO_WritePin>
			  HAL_SPI_Transmit(&hspi2, &turnOffDAC[0], 3, 10);
 80005b8:	0039      	movs	r1, r7
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x1f4>)
 80005bc:	230a      	movs	r3, #10
 80005be:	2203      	movs	r2, #3
 80005c0:	f002 fc56 	bl	8002e70 <HAL_SPI_Transmit>
			  HAL_GPIO_WritePin(CruiseSS_GPIO_Port, CruiseSS_Pin, GPIO_PIN_SET);
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x1f0>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	0019      	movs	r1, r3
 80005ce:	f001 fe9e 	bl	800230e <HAL_GPIO_WritePin>
	  if(chargeTripActive)
 80005d2:	e775      	b.n	80004c0 <main+0xcc>
 80005d4:	200001a1 	.word	0x200001a1
 80005d8:	2000011c 	.word	0x2000011c
 80005dc:	08000b61 	.word	0x08000b61
 80005e0:	20000090 	.word	0x20000090
 80005e4:	48000400 	.word	0x48000400
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	08003cf0 	.word	0x08003cf0
 80005f0:	200001a4 	.word	0x200001a4
 80005f4:	48000800 	.word	0x48000800
 80005f8:	200001a2 	.word	0x200001a2
 80005fc:	2000019c 	.word	0x2000019c
 8000600:	200001a0 	.word	0x200001a0
 8000604:	200001a3 	.word	0x200001a3

08000608 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b093      	sub	sp, #76	; 0x4c
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	2414      	movs	r4, #20
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2334      	movs	r3, #52	; 0x34
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f003 fb0b 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	2310      	movs	r3, #16
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f003 fb04 	bl	8003c34 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	0021      	movs	r1, r4
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2210      	movs	r2, #16
 800063e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	187b      	adds	r3, r7, r1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fe99 	bl	8002380 <HAL_RCC_OscConfig>
 800064e:	0003      	movs	r3, r0
 8000650:	1e5a      	subs	r2, r3, #1
 8000652:	4193      	sbcs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 800065a:	f000 fa8f 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fa06 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000680:	0003      	movs	r3, r0
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	4193      	sbcs	r3, r2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800068c:	f000 fa76 	bl	8000b7c <Error_Handler>
  }
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b013      	add	sp, #76	; 0x4c
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <_ZL12MX_SPI2_Initv+0x80>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006a4:	2282      	movs	r2, #130	; 0x82
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006b2:	22e0      	movs	r2, #224	; 0xe0
 80006b4:	00d2      	lsls	r2, r2, #3
 80006b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006e6:	2207      	movs	r2, #7
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <_ZL12MX_SPI2_Initv+0x7c>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fb1f 	bl	8002d3c <HAL_SPI_Init>
 80006fe:	0003      	movs	r3, r0
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	4193      	sbcs	r3, r2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 800070a:	f000 fa37 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000b8 	.word	0x200000b8
 8000718:	40003800 	.word	0x40003800

0800071c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	2308      	movs	r3, #8
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	0018      	movs	r0, r3
 8000728:	2310      	movs	r3, #16
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 fa81 	bl	8003c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	2308      	movs	r3, #8
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f003 fa7a 	bl	8003c34 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	05d2      	lsls	r2, r2, #23
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <_ZL12MX_TIM2_Initv+0xbc>)
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fe2d 	bl	80033c8 <HAL_TIM_Base_Init>
 800076e:	0003      	movs	r3, r0
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	4193      	sbcs	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800077a:	f000 f9ff 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	2108      	movs	r1, #8
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	0152      	lsls	r2, r2, #5
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000788:	187a      	adds	r2, r7, r1
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f002 ffa8 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000794:	0003      	movs	r3, r0
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	4193      	sbcs	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80007a0:	f000 f9ec 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b0:	003a      	movs	r2, r7
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_ZL12MX_TIM2_Initv+0xb8>)
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 f98c 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	0003      	movs	r3, r0
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80007c8:	f000 f9d8 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b006      	add	sp, #24
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	0000bb7f 	.word	0x0000bb7f

080007dc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	2308      	movs	r3, #8
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 fa21 	bl	8003c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2308      	movs	r3, #8
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fa1a 	bl	8003c34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <_ZL12MX_TIM3_Initv+0xbc>)
 8000804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <_ZL12MX_TIM3_Initv+0xc0>)
 800080a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000814:	220a      	movs	r2, #10
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fdce 	bl	80033c8 <HAL_TIM_Base_Init>
 800082c:	0003      	movs	r3, r0
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	4193      	sbcs	r3, r2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000838:	f000 f9a0 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	2108      	movs	r1, #8
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0152      	lsls	r2, r2, #5
 8000844:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000846:	187a      	adds	r2, r7, r1
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f002 ff49 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000852:	0003      	movs	r3, r0
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	4193      	sbcs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800085e:	f000 f98d 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086e:	003a      	movs	r2, r7
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_ZL12MX_TIM3_Initv+0xb8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f003 f92d 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	0003      	movs	r3, r0
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	4193      	sbcs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000886:	f000 f979 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b006      	add	sp, #24
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	2000015c 	.word	0x2000015c
 8000898:	40000400 	.word	0x40000400
 800089c:	0000bb7f 	.word	0x0000bb7f

080008a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	240c      	movs	r4, #12
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0018      	movs	r0, r3
 80008ac:	2314      	movs	r3, #20
 80008ae:	001a      	movs	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	f003 f9bf 	bl	8003c34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0289      	lsls	r1, r1, #10
 80008c0:	430a      	orrs	r2, r1
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008c6:	695a      	ldr	r2, [r3, #20]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	029b      	lsls	r3, r3, #10
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0309      	lsls	r1, r1, #12
 80008dc:	430a      	orrs	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	031b      	lsls	r3, r3, #12
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	02c9      	lsls	r1, r1, #11
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <_ZL12MX_GPIO_Initv+0x164>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	02db      	lsls	r3, r3, #11
 8000904:	4013      	ands	r3, r2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCPRE_Pin|MPPTPRE_Pin|MC_COIL_Pin, GPIO_PIN_RESET);
 800090a:	2390      	movs	r3, #144	; 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2200      	movs	r2, #0
 8000910:	21e0      	movs	r1, #224	; 0xe0
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fcfb 	bl	800230e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPPT_COIL_GPIO_Port, MPPT_COIL_Pin, GPIO_PIN_RESET);
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <_ZL12MX_GPIO_Initv+0x168>)
 800091a:	2200      	movs	r2, #0
 800091c:	2110      	movs	r1, #16
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fcf5 	bl	800230e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RegenBrk_Pin|RegenSS_Pin|CruiseSS_Pin, GPIO_PIN_RESET);
 8000924:	4939      	ldr	r1, [pc, #228]	; (8000a0c <_ZL12MX_GPIO_Initv+0x16c>)
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <_ZL12MX_GPIO_Initv+0x170>)
 8000928:	2200      	movs	r2, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fcef 	bl	800230e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCPRE_Pin MPPTPRE_Pin MC_COIL_Pin */
  GPIO_InitStruct.Pin = MCPRE_Pin|MPPTPRE_Pin|MC_COIL_Pin;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	22e0      	movs	r2, #224	; 0xe0
 8000934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2201      	movs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	193a      	adds	r2, r7, r4
 800094a:	2390      	movs	r3, #144	; 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fb47 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPPT_COIL_Pin */
  GPIO_InitStruct.Pin = MPPT_COIL_Pin;
 8000956:	0021      	movs	r1, r4
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2210      	movs	r2, #16
 800095c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MPPT_COIL_GPIO_Port, &GPIO_InitStruct);
 8000970:	000c      	movs	r4, r1
 8000972:	187b      	adds	r3, r7, r1
 8000974:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <_ZL12MX_GPIO_Initv+0x168>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f001 fb33 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGE_TRIP_Pin */
  GPIO_InitStruct.Pin = CHARGE_TRIP_Pin;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <_ZL12MX_GPIO_Initv+0x174>)
 800098a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2201      	movs	r2, #1
 8000990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHARGE_TRIP_GPIO_Port, &GPIO_InitStruct);
 8000992:	000c      	movs	r4, r1
 8000994:	187b      	adds	r3, r7, r1
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <_ZL12MX_GPIO_Initv+0x170>)
 8000998:	0019      	movs	r1, r3
 800099a:	0010      	movs	r0, r2
 800099c:	f001 fb22 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RegenBrk_Pin RegenSS_Pin CruiseSS_Pin */
  GPIO_InitStruct.Pin = RegenBrk_Pin|RegenSS_Pin|CruiseSS_Pin;
 80009a0:	0021      	movs	r1, r4
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <_ZL12MX_GPIO_Initv+0x16c>)
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	000c      	movs	r4, r1
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_ZL12MX_GPIO_Initv+0x170>)
 80009c0:	0019      	movs	r1, r3
 80009c2:	0010      	movs	r0, r2
 80009c4:	f001 fb0e 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CRUISE_Pin */
  GPIO_InitStruct.Pin = CRUISE_Pin;
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	00d2      	lsls	r2, r2, #3
 80009d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <_ZL12MX_GPIO_Initv+0x174>)
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CRUISE_GPIO_Port, &GPIO_InitStruct);
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <_ZL12MX_GPIO_Initv+0x170>)
 80009e2:	0019      	movs	r1, r3
 80009e4:	0010      	movs	r0, r2
 80009e6:	f001 fafd 	bl	8001fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2005      	movs	r0, #5
 80009f0:	f001 fac6 	bl	8001f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f001 fad8 	bl	8001faa <HAL_NVIC_EnableIRQ>

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b009      	add	sp, #36	; 0x24
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000800 	.word	0x48000800
 8000a0c:	00005002 	.word	0x00005002
 8000a10:	48000400 	.word	0x48000400
 8000a14:	10310000 	.word	0x10310000

08000a18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	0002      	movs	r2, r0
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == CRUISE_Pin)
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	881a      	ldrh	r2, [r3, #0]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d110      	bne.n	8000a52 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		cruiseActive = HAL_GPIO_ReadPin(CRUISE_GPIO_Port, CRUISE_Pin);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f001 fc4b 	bl	80022d4 <HAL_GPIO_ReadPin>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	4193      	sbcs	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a48:	701a      	strb	r2, [r3, #0]
		newCruiseInput = true;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
		chargeTripActive = !HAL_GPIO_ReadPin(CHARGE_TRIP_GPIO_Port, CHARGE_TRIP_Pin); // charge trip is low true
		if(chargeTripActive) recharge = false;
		else recharge = true;
	}
	else __NOP();
}
 8000a50:	e01b      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x72>
	else if(GPIO_Pin == CHARGE_TRIP_Pin)
 8000a52:	1dbb      	adds	r3, r7, #6
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d116      	bne.n	8000a88 <HAL_GPIO_EXTI_Callback+0x70>
		chargeTripActive = !HAL_GPIO_ReadPin(CHARGE_TRIP_GPIO_Port, CHARGE_TRIP_Pin); // charge trip is low true
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fc38 	bl	80022d4 <HAL_GPIO_ReadPin>
 8000a64:	0003      	movs	r3, r0
 8000a66:	425a      	negs	r2, r3
 8000a68:	4153      	adcs	r3, r2
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a6e:	701a      	strb	r2, [r3, #0]
		if(chargeTripActive) recharge = false;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_EXTI_Callback+0x68>
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	e004      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x72>
		else recharge = true;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	e000      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x72>
	else __NOP();
 8000a88:	46c0      	nop			; (mov r8, r8)
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	48000400 	.word	0x48000400
 8000a98:	200001a3 	.word	0x200001a3
 8000a9c:	200001a0 	.word	0x200001a0
 8000aa0:	200001a4 	.word	0x200001a4
 8000aa4:	200001a1 	.word	0x200001a1

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d135      	bne.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		static int tickPrecharge = 0;
		static int tickCoil = 0;
		if(recharge)
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d03c      	beq.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			if(tickPrecharge >= 50)
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b31      	cmp	r3, #49	; 0x31
 8000aca:	dd0d      	ble.n	8000ae8 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				recharge = false;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
				tickPrecharge = 0;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, MCPRE_Pin|MPPTPRE_Pin, GPIO_PIN_RESET);
 8000ad8:	2390      	movs	r3, #144	; 0x90
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2200      	movs	r2, #0
 8000ade:	2160      	movs	r1, #96	; 0x60
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fc14 	bl	800230e <HAL_GPIO_WritePin>
 8000ae6:	e004      	b.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			}
			else tickPrecharge++;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000af0:	601a      	str	r2, [r3, #0]
			if(tickCoil >= 48)
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b2f      	cmp	r3, #47	; 0x2f
 8000af8:	dd10      	ble.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				tickCoil = 0;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, MC_COIL_Pin, GPIO_PIN_SET);
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2201      	movs	r2, #1
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fc00 	bl	800230e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, MPPT_COIL_Pin, GPIO_PIN_SET);
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fbfa 	bl	800230e <HAL_GPIO_WritePin>
	else if(htim->Instance == TIM3)
	{
		HAL_TIM_Base_Stop_IT(&htim3);
	}
	else __NOP();
}
 8000b1a:	e010      	b.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x96>
			else tickCoil++;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	e00a      	b.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x96>
	else if(htim->Instance == TIM3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d104      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x94>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 fc95 	bl	8003464 <HAL_TIM_Base_Stop_IT>
}
 8000b3a:	e000      	b.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x96>
	else __NOP();
 8000b3c:	46c0      	nop			; (mov r8, r8)
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	200001a1 	.word	0x200001a1
 8000b4c:	200001a8 	.word	0x200001a8
 8000b50:	200001ac 	.word	0x200001ac
 8000b54:	48000800 	.word	0x48000800
 8000b58:	40000400 	.word	0x40000400
 8000b5c:	2000015c 	.word	0x2000015c

08000b60 <_Z10AuxReceiveP21SUBSYSTEM_DATA_MODULE>:
void AuxReceive(SUBSYSTEM_DATA_MODULE*)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	newCANPacket = true;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <_Z10AuxReceiveP21SUBSYSTEM_DATA_MODULE+0x18>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	200001a2 	.word	0x200001a2

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	{
		CHILD_DATA returnData;
	    if(success)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d015      	beq.n	8000bc4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x3c>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3312      	adds	r3, #18
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 f839 	bl	8000c18 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	617b      	str	r3, [r7, #20]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d008      	beq.n	8000bc4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x3c>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fa31 	bl	800101c <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	601a      	str	r2, [r3, #0]
	        }
	    }
	    return returnData;
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	220c      	movs	r2, #12
 8000bca:	18ba      	adds	r2, r7, r2
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	7811      	ldrb	r1, [r2, #0]
 8000bd6:	20ff      	movs	r0, #255	; 0xff
 8000bd8:	4001      	ands	r1, r0
 8000bda:	20ff      	movs	r0, #255	; 0xff
 8000bdc:	4383      	bics	r3, r0
 8000bde:	430b      	orrs	r3, r1
 8000be0:	7851      	ldrb	r1, [r2, #1]
 8000be2:	20ff      	movs	r0, #255	; 0xff
 8000be4:	4001      	ands	r1, r0
 8000be6:	0209      	lsls	r1, r1, #8
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x88>)
 8000bea:	4003      	ands	r3, r0
 8000bec:	430b      	orrs	r3, r1
 8000bee:	7891      	ldrb	r1, [r2, #2]
 8000bf0:	20ff      	movs	r0, #255	; 0xff
 8000bf2:	4001      	ands	r1, r0
 8000bf4:	0409      	lsls	r1, r1, #16
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x8c>)
 8000bf8:	4003      	ands	r3, r0
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	78d2      	ldrb	r2, [r2, #3]
 8000bfe:	0612      	lsls	r2, r2, #24
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	4313      	orrs	r3, r2
	}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b006      	add	sp, #24
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	ffff00ff 	.word	0xffff00ff
 8000c14:	ff00ffff 	.word	0xff00ffff

08000c18 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 8000c22:	230e      	movs	r3, #14
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	8b5a      	ldrh	r2, [r3, #26]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	8b1b      	ldrh	r3, [r3, #24]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d10a      	bne.n	8000c4c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7f1b      	ldrb	r3, [r3, #28]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d022      	beq.n	8000c8a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
            if(success)
 8000c4a:	e01e      	b.n	8000c8a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000c58:	230e      	movs	r3, #14
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	8b52      	ldrh	r2, [r2, #26]
 8000c60:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	8b5b      	ldrh	r3, [r3, #26]
 8000c66:	3301      	adds	r3, #1
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fbbc 	bl	80003e8 <__aeabi_idivmod>
 8000c70:	000b      	movs	r3, r1
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	8b5a      	ldrh	r2, [r3, #26]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8b1b      	ldrh	r3, [r3, #24]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d102      	bne.n	8000c8a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 8000c8a:	230e      	movs	r3, #14
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	18d3      	adds	r3, r2, r3
    }
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	699a      	ldr	r2, [r3, #24]
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	69da      	ldr	r2, [r3, #28]
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0549      	lsls	r1, r1, #21
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	61da      	str	r2, [r3, #28]
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cce:	69da      	ldr	r2, [r3, #28]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	055b      	lsls	r3, r3, #21
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f002 ff9a 	bl	8003c34 <memset>
  if(hcan->Instance==CAN)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_CAN_MspInit+0x94>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d133      	bne.n	8000d72 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d0c:	69da      	ldr	r2, [r3, #28]
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0489      	lsls	r1, r1, #18
 8000d14:	430a      	orrs	r2, r1
 8000d16:	61da      	str	r2, [r3, #28]
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d1a:	69da      	ldr	r2, [r3, #28]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	049b      	lsls	r3, r3, #18
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	0289      	lsls	r1, r1, #10
 8000d30:	430a      	orrs	r2, r1
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_CAN_MspInit+0x98>)
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d42:	2114      	movs	r1, #20
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	22c0      	movs	r2, #192	; 0xc0
 8000d48:	0152      	lsls	r2, r2, #5
 8000d4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2202      	movs	r2, #2
 8000d50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2204      	movs	r2, #4
 8000d62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	187a      	adds	r2, r7, r1
 8000d66:	2390      	movs	r3, #144	; 0x90
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 f939 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b00a      	add	sp, #40	; 0x28
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40006400 	.word	0x40006400
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f002 ff4c 	bl	8003c34 <memset>
  if(hspi->Instance==SPI2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_SPI_MspInit+0x90>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d132      	bne.n	8000e0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000da8:	69da      	ldr	r2, [r3, #28]
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	01c9      	lsls	r1, r1, #7
 8000db0:	430a      	orrs	r2, r1
 8000db2:	61da      	str	r2, [r3, #28]
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	01db      	lsls	r3, r3, #7
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	02c9      	lsls	r1, r1, #11
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_SPI_MspInit+0x94>)
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	02db      	lsls	r3, r3, #11
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000dde:	2114      	movs	r1, #20
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	22a0      	movs	r2, #160	; 0xa0
 8000de4:	0212      	lsls	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2202      	movs	r2, #2
 8000dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2203      	movs	r2, #3
 8000df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_SPI_MspInit+0x98>)
 8000e04:	0019      	movs	r1, r3
 8000e06:	0010      	movs	r0, r2
 8000e08:	f001 f8ec 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b00a      	add	sp, #40	; 0x28
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40003800 	.word	0x40003800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d114      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200f      	movs	r0, #15
 8000e52:	f001 f895 	bl	8001f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f001 f8a7 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e5c:	e018      	b.n	8000e90 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_TIM_Base_MspInit+0x7c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d113      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e6e:	2102      	movs	r1, #2
 8000e70:	430a      	orrs	r2, r1
 8000e72:	61da      	str	r2, [r3, #28]
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_TIM_Base_MspInit+0x78>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	2202      	movs	r2, #2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2010      	movs	r0, #16
 8000e86:	f001 f87b 	bl	8001f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f001 f88d 	bl	8001faa <HAL_NVIC_EnableIRQ>
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40000400 	.word	0x40000400

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 fd32 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f001 fa36 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <TIM2_IRQHandler+0x14>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f002 fae4 	bl	80034b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	2000011c 	.word	0x2000011c

08000efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <TIM3_IRQHandler+0x14>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 fad8 	bl	80034b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	2000015c 	.word	0x2000015c

08000f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_kill>:

int _kill(int pid, int sig)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f2a:	f002 fe59 	bl	8003be0 <__errno>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	2216      	movs	r2, #22
 8000f32:	601a      	str	r2, [r3, #0]
	return -1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	425b      	negs	r3, r3
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_exit>:

void _exit (int status)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425a      	negs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ffe5 	bl	8000f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f56:	e7fe      	b.n	8000f56 <_exit+0x16>

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f8e:	f7ff ffe3 	bl	8000f58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f92:	f002 fe2b 	bl	8003bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fa2d 	bl	80003f4 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fa8:	08003d54 	.word	0x08003d54
  ldr r2, =_sbss
 8000fac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fb0:	200001f4 	.word	0x200001f4

08000fb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_COMP_IRQHandler>

08000fb6 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	6039      	str	r1, [r7, #0]
	assert_param(output != nullptr);
	output[0] = 0;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint32_t>(input.hazardsOn) << 0;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	1d3a      	adds	r2, r7, #4
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint32_t>(input.headlightsOn) << 1;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	18db      	adds	r3, r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint32_t>(input.leftOn) << 2;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint32_t>(input.rightOn) << 3;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>:

AUX_MESSAGE_0_DATA_PACKET AUX_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	assert_param(input != nullptr);

	AUX_MESSAGE_0_DATA_PACKET output;
	output.hazardsOn = input[0] & (1 << 0);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	001a      	movs	r2, r3
 800102a:	2301      	movs	r3, #1
 800102c:	4013      	ands	r3, r2
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	4193      	sbcs	r3, r2
 8001032:	b2da      	uxtb	r2, r3
 8001034:	2108      	movs	r1, #8
 8001036:	187b      	adds	r3, r7, r1
 8001038:	701a      	strb	r2, [r3, #0]
	output.headlightsOn = input[0] & (1 << 1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	2302      	movs	r3, #2
 8001042:	4013      	ands	r3, r2
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	4193      	sbcs	r3, r2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	187b      	adds	r3, r7, r1
 800104c:	70da      	strb	r2, [r3, #3]
	output.leftOn = input[0] & (1 << 2);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	2304      	movs	r3, #4
 8001056:	4013      	ands	r3, r2
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	4193      	sbcs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	187b      	adds	r3, r7, r1
 8001060:	705a      	strb	r2, [r3, #1]
	output.rightOn = input[0] & (1 << 3);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	001a      	movs	r2, r3
 8001068:	2308      	movs	r3, #8
 800106a:	4013      	ands	r3, r2
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4193      	sbcs	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	187b      	adds	r3, r7, r1
 8001074:	709a      	strb	r2, [r3, #2]

	return output;
 8001076:	200c      	movs	r0, #12
 8001078:	183b      	adds	r3, r7, r0
 800107a:	187a      	adds	r2, r7, r1
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	183a      	adds	r2, r7, r0
 8001082:	2300      	movs	r3, #0
 8001084:	7811      	ldrb	r1, [r2, #0]
 8001086:	20ff      	movs	r0, #255	; 0xff
 8001088:	4001      	ands	r1, r0
 800108a:	20ff      	movs	r0, #255	; 0xff
 800108c:	4383      	bics	r3, r0
 800108e:	430b      	orrs	r3, r1
 8001090:	7851      	ldrb	r1, [r2, #1]
 8001092:	20ff      	movs	r0, #255	; 0xff
 8001094:	4001      	ands	r1, r0
 8001096:	0209      	lsls	r1, r1, #8
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh+0xa4>)
 800109a:	4003      	ands	r3, r0
 800109c:	430b      	orrs	r3, r1
 800109e:	7891      	ldrb	r1, [r2, #2]
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	4001      	ands	r1, r0
 80010a4:	0409      	lsls	r1, r1, #16
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh+0xa8>)
 80010a8:	4003      	ands	r3, r0
 80010aa:	430b      	orrs	r3, r1
 80010ac:	78d2      	ldrb	r2, [r2, #3]
 80010ae:	0612      	lsls	r2, r2, #24
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	4313      	orrs	r3, r2
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	ffff00ff 	.word	0xffff00ff
 80010c4:	ff00ffff 	.word	0xff00ffff

080010c8 <_ZN13AUX_MESSAGE_0C1Ev>:

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false}
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	4906      	ldr	r1, [pc, #24]	; (80010ec <_ZN13AUX_MESSAGE_0C1Ev+0x24>)
 80010d4:	2300      	movs	r3, #0
 80010d6:	2201      	movs	r2, #1
 80010d8:	f000 f80c 	bl	80010f4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhb>
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <_ZN13AUX_MESSAGE_0C1Ev+0x28>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
{}
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	000003ff 	.word	0x000003ff
 80010f0:	08003d2c 	.word	0x08003d2c

080010f4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhb>:
	        }
	    }
	    return returnData;
	}
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id):
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	0019      	movs	r1, r3
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	1c0a      	adds	r2, r1, #0
 8001108:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id}
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	781c      	ldrb	r4, [r3, #0]
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	0023      	movs	r3, r4
 8001118:	f000 f82a 	bl	8001170 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhb>
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhb+0x38>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]
		{}
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b005      	add	sp, #20
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	08003d38 	.word	0x08003d38

08001130 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	330a      	adds	r3, #10
 800113c:	001c      	movs	r4, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2235      	movs	r2, #53	; 0x35
 8001142:	5c99      	ldrb	r1, [r3, r2]
 8001144:	1898      	adds	r0, r3, r2
 8001146:	7840      	ldrb	r0, [r0, #1]
 8001148:	0200      	lsls	r0, r0, #8
 800114a:	4301      	orrs	r1, r0
 800114c:	1898      	adds	r0, r3, r2
 800114e:	7880      	ldrb	r0, [r0, #2]
 8001150:	0400      	lsls	r0, r0, #16
 8001152:	4301      	orrs	r1, r0
 8001154:	189b      	adds	r3, r3, r2
 8001156:	78db      	ldrb	r3, [r3, #3]
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	430b      	orrs	r3, r1
 800115c:	2200      	movs	r2, #0
 800115e:	001a      	movs	r2, r3
 8001160:	0021      	movs	r1, r4
 8001162:	0010      	movs	r0, r2
 8001164:	f7ff ff27 	bl	8000fb6 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b003      	add	sp, #12
 800116e:	bd90      	pop	{r4, r7, pc}

08001170 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhb>:
}

//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id):
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	0019      	movs	r1, r3
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	1c0a      	adds	r2, r1, #0
 8001184:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, isExtID{is_ext_id}, storageFifo{}, rxFuncPtr{nullptr}, isReceiving{false}
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhb+0x54>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1dfa      	adds	r2, r7, #7
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	721a      	strb	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1dba      	adds	r2, r7, #6
 800119e:	7812      	ldrb	r2, [r2, #0]
 80011a0:	725a      	strb	r2, [r3, #9]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3312      	adds	r3, #18
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 f8b2 	bl	8001310 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2234      	movs	r2, #52	; 0x34
 80011b6:	2100      	movs	r1, #0
 80011b8:	5499      	strb	r1, [r3, r2]
{}
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b004      	add	sp, #16
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08003d44 	.word	0x08003d44

080011c8 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:
{
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
}

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2234      	movs	r2, #52	; 0x34
 80011dc:	5c9b      	ldrb	r3, [r3, r2]
 80011de:	2201      	movs	r2, #1
 80011e0:	4053      	eors	r3, r2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x34>
    {
        SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x3c>)
 80011ec:	0011      	movs	r1, r2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f8e9 	bl	80013c6 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
        //TODO: Fix We are currently receiving even if add Node fails.
        isReceiving = true;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2101      	movs	r1, #1
 80011fa:	5499      	strb	r1, [r3, r2]
    } 
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001b0 	.word	0x200001b0

08001208 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef>:
        this->rxFuncPtr(this);
    }
}

void SUBSYSTEM_DATA_MODULE::StartCAN(CAN_HandleTypeDef* in_hcan)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	hcan = in_hcan;
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
	//Initialize CAN itself
	hcan->Instance = CAN;
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe8>)
 800121c:	601a      	str	r2, [r3, #0]
	hcan->Init.Prescaler = 6;
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2206      	movs	r2, #6
 8001224:	605a      	str	r2, [r3, #4]
	hcan->Init.Mode = CAN_MODE_NORMAL;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
	//hcan->Init.Mode = CAN_MODE_LOOPBACK;
	hcan->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
	hcan->Init.TimeSeg1 = CAN_BS1_13TQ;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	22c0      	movs	r2, #192	; 0xc0
 800123c:	0312      	lsls	r2, r2, #12
 800123e:	611a      	str	r2, [r3, #16]
	hcan->Init.TimeSeg2 = CAN_BS2_2TQ;
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	0352      	lsls	r2, r2, #13
 8001248:	615a      	str	r2, [r3, #20]
	hcan->Init.TimeTriggeredMode = DISABLE;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
	hcan->Init.AutoBusOff = DISABLE;
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	765a      	strb	r2, [r3, #25]
	hcan->Init.AutoWakeUp = DISABLE;
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	769a      	strb	r2, [r3, #26]
	hcan->Init.AutoRetransmission = DISABLE;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	76da      	strb	r2, [r3, #27]
	hcan->Init.ReceiveFifoLocked = DISABLE;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	771a      	strb	r2, [r3, #28]
	hcan->Init.TransmitFifoPriority = DISABLE;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcan) != HAL_OK)
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	f000 fb72 	bl	8001968 <HAL_CAN_Init>
 8001284:	0003      	movs	r3, r0
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	4193      	sbcs	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0x8c>
	{
	Error_Handler();
 8001290:	f7ff fc74 	bl	8000b7c <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001294:	2108      	movs	r1, #8
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2201      	movs	r2, #1
 800129a:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2201      	movs	r2, #1
 80012b2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	187a      	adds	r2, r7, r1
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fc4b 	bl	8001b64 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2102      	movs	r1, #2
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fd7d 	bl	8001dd4 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(hcan);
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEP19__CAN_HandleTypeDef+0xe4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fd32 	bl	8001d48 <HAL_CAN_Start>
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b00c      	add	sp, #48	; 0x30
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001e8 	.word	0x200001e8
 80012f0:	40006400 	.word	0x40006400

080012f4 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:
		HAL_CAN_AddTxMessage(hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
	}
}

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3312      	adds	r3, #18
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f817 	bl	8001334 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8001306:	0003      	movs	r3, r0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
template <class T,uint16_t DEPTH, uint16_t SIZE>
class HELPER_FIFO
{
public:
    //Constructors
    HELPER_FIFO():
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	831a      	strh	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	835a      	strh	r2, [r3, #26]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	771a      	strb	r2, [r3, #28]
    {}
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    //Public Function Definitions
    bool IsEmpty()
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    {
        return (headIndex == tailIndex ? emptyNotFull : false);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8b1a      	ldrh	r2, [r3, #24]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8b5b      	ldrh	r3, [r3, #26]
 8001344:	429a      	cmp	r2, r3
 8001346:	d105      	bne.n	8001354 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8001354:	2300      	movs	r3, #0
    }
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <_Z41__static_initialization_and_destruction_0ii>:
bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
    return operationSucceeded;
}
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d107      	bne.n	8001380 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d103      	bne.n	8001380 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f814 	bl	80013a8 <_ZN14RX_BINARY_TREEC1Ev>
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}
 8001388:	0000ffff 	.word	0x0000ffff
 800138c:	200001b0 	.word	0x200001b0

08001390 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8001396:	0019      	movs	r1, r3
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ffe1 	bl	8001360 <_Z41__static_initialization_and_destruction_0ii>
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	0000ffff 	.word	0x0000ffff

080013a8 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	869a      	strh	r2, [r3, #52]	; 0x34
{}
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

void RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d80c      	bhi.n	80013f2 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2c>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2c>
    {
        root = insert(root,new_element);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f943 	bl	8001672 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80013ec:	0002      	movs	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:
    }
    
}

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001408:	001a      	movs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	18d3      	adds	r3, r2, r3
 800141c:	3304      	adds	r3, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	3308      	adds	r3, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	330c      	adds	r3, #12
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	b291      	uxth	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	8691      	strh	r1, [r2, #52]	; 0x34
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	18d3      	adds	r3, r2, r3
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	d901      	bls.n	8001474 <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	e000      	b.n	8001476 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 8001474:	687b      	ldr	r3, [r7, #4]
}  
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 800148e:	2300      	movs	r3, #0
 8001490:	e001      	b.n	8001496 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	7b1b      	ldrb	r3, [r3, #12]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80014ae:	2301      	movs	r3, #1
 80014b0:	425b      	negs	r3, r3
 80014b2:	e009      	b.n	80014c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80014bc:	2301      	movs	r3, #1
 80014be:	425b      	negs	r3, r3
 80014c0:	e002      	b.n	80014c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	e001      	b.n	80014ea <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 80014f2:	b590      	push	{r4, r7, lr}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ffae 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001522:	0003      	movs	r3, r0
 8001524:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ffa5 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001534:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001536:	001a      	movs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0021      	movs	r1, r4
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff ff8d 	bl	800145c <_ZN14RX_BINARY_TREE3maxEmm>
 8001542:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001544:	b2db      	uxtb	r3, r3
 8001546:	3301      	adds	r3, #1
 8001548:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff ff91 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 800155c:	0003      	movs	r3, r0
 800155e:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff88 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 800156e:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8001570:	001a      	movs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0021      	movs	r1, r4
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff70 	bl	800145c <_ZN14RX_BINARY_TREE3maxEmm>
 800157c:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8001588:	68fb      	ldr	r3, [r7, #12]
} 
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b005      	add	sp, #20
 8001590:	bd90      	pop	{r4, r7, pc}

08001592 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff5e 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 80015c2:	0003      	movs	r3, r0
 80015c4:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff ff55 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 80015d4:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 80015d6:	001a      	movs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0021      	movs	r1, r4
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff3d 	bl	800145c <_ZN14RX_BINARY_TREE3maxEmm>
 80015e2:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff ff41 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 80015fc:	0003      	movs	r3, r0
 80015fe:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff38 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 800160e:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 8001610:	001a      	movs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0021      	movs	r1, r4
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff ff20 	bl	800145c <_ZN14RX_BINARY_TREE3maxEmm>
 800161c:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 800161e:	b2db      	uxtb	r3, r3
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001628:	68fb      	ldr	r3, [r7, #12]
}  
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b005      	add	sp, #20
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 8001642:	2300      	movs	r3, #0
 8001644:	e011      	b.n	800166a <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff ff15 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001654:	0003      	movs	r3, r0
 8001656:	001c      	movs	r4, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff ff0c 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001666:	0003      	movs	r3, r0
 8001668:	1ae3      	subs	r3, r4, r3
}  
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b003      	add	sp, #12
 8001670:	bd90      	pop	{r4, r7, pc}

08001672 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 8001672:	b590      	push	{r4, r7, lr}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff feb5 	bl	80013fa <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 8001690:	0003      	movs	r3, r0
 8001692:	e101      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ff18 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016a0:	0004      	movs	r4, r0
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fef8 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016ae:	0003      	movs	r3, r0
 80016b0:	2201      	movs	r2, #1
 80016b2:	429c      	cmp	r4, r3
 80016b4:	db01      	blt.n	80016ba <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 80016b6:	2300      	movs	r3, #0
 80016b8:	1c1a      	adds	r2, r3, #0
 80016ba:	b2d3      	uxtb	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00a      	beq.n	80016d6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ffd2 	bl	8001672 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	e022      	b.n	800171c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff fef7 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016e2:	0004      	movs	r4, r0
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff fed7 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016f0:	0003      	movs	r3, r0
 80016f2:	2201      	movs	r2, #1
 80016f4:	429c      	cmp	r4, r3
 80016f6:	dc01      	bgt.n	80016fc <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 80016f8:	2300      	movs	r3, #0
 80016fa:	1c1a      	adds	r2, r3, #0
 80016fc:	b2d3      	uxtb	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff ffb1 	bl	8001672 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001710:	0002      	movs	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	e001      	b.n	800171c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	e0bd      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff feaa 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 800172a:	0003      	movs	r3, r0
 800172c:	001c      	movs	r4, r3
                        height(node->right));  
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff fea1 	bl	800147e <_ZN14RX_BINARY_TREE6heightEP4Node>
 800173c:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 800173e:	001a      	movs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	0021      	movs	r1, r4
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff fe89 	bl	800145c <_ZN14RX_BINARY_TREE3maxEmm>
 800174a:	0003      	movs	r3, r0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff ff68 	bl	8001632 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 8001762:	0003      	movs	r3, r0
 8001764:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b01      	cmp	r3, #1
 800176a:	dd12      	ble.n	8001792 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff feac 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001778:	0004      	movs	r4, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fe8b 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001788:	0003      	movs	r3, r0
 800178a:	429c      	cmp	r4, r3
 800178c:	da01      	bge.n	8001792 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 8001792:	2300      	movs	r3, #0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff fea7 	bl	80014f2 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80017a4:	0003      	movs	r3, r0
 80017a6:	e077      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	da12      	bge.n	80017d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fe8b 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80017ba:	0004      	movs	r4, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fe6a 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80017ca:	0003      	movs	r3, r0
 80017cc:	429c      	cmp	r4, r3
 80017ce:	dd01      	ble.n	80017d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff fed6 	bl	8001592 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80017e6:	0003      	movs	r3, r0
 80017e8:	e056      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	dd12      	ble.n	8001816 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fe6a 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80017fc:	0004      	movs	r4, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff fe49 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800180c:	0003      	movs	r3, r0
 800180e:	429c      	cmp	r4, r3
 8001810:	dd01      	ble.n	8001816 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d011      	beq.n	8001840 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff feb4 	bl	8001592 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 800182a:	0002      	movs	r2, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0011      	movs	r1, r2
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fe5b 	bl	80014f2 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 800183c:	0003      	movs	r3, r0
 800183e:	e02b      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	da12      	bge.n	800186c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fe3f 	bl	80014d0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001852:	0004      	movs	r4, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fe1e 	bl	800149e <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001862:	0003      	movs	r3, r0
 8001864:	429c      	cmp	r4, r3
 8001866:	da01      	bge.n	800186c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 800186c:	2300      	movs	r3, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d011      	beq.n	8001896 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fe39 	bl	80014f2 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001880:	0002      	movs	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fe80 	bl	8001592 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001892:	0003      	movs	r3, r0
 8001894:	e000      	b.n	8001898 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 8001896:	68bb      	ldr	r3, [r7, #8]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b007      	add	sp, #28
 800189e:	bd90      	pop	{r4, r7, pc}

080018a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_Init+0x24>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_Init+0x24>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 f809 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b6:	f7ff f9f3 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_InitTick+0x5c>)
 80018d2:	681c      	ldr	r4, [r3, #0]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_InitTick+0x60>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	0019      	movs	r1, r3
 80018da:	23fa      	movs	r3, #250	; 0xfa
 80018dc:	0098      	lsls	r0, r3, #2
 80018de:	f7fe fc13 	bl	8000108 <__udivsi3>
 80018e2:	0003      	movs	r3, r0
 80018e4:	0019      	movs	r1, r3
 80018e6:	0020      	movs	r0, r4
 80018e8:	f7fe fc0e 	bl	8000108 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 fb6b 	bl	8001fca <HAL_SYSTICK_Config>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d001      	beq.n	80018fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e00f      	b.n	800191c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d80b      	bhi.n	800191a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	2301      	movs	r3, #1
 8001906:	425b      	negs	r3, r3
 8001908:	2200      	movs	r2, #0
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fb38 	bl	8001f80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_InitTick+0x64>)
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b003      	add	sp, #12
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	20000000 	.word	0x20000000
 8001928:	20000008 	.word	0x20000008
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	18d2      	adds	r2, r2, r3
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_IncTick+0x20>)
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	20000008 	.word	0x20000008
 8001950:	200001ec 	.word	0x200001ec

08001954 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	200001ec 	.word	0x200001ec

08001968 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0f0      	b.n	8001b5c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff f9ad 	bl	8000ce8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2102      	movs	r1, #2
 800199a:	438a      	bics	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800199e:	f7ff ffd9 	bl	8001954 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a6:	e013      	b.n	80019d0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a8:	f7ff ffd4 	bl	8001954 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d90c      	bls.n	80019d0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	0292      	lsls	r2, r2, #10
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	2105      	movs	r1, #5
 80019ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0c5      	b.n	8001b5c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d1e5      	bne.n	80019a8 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff ffb2 	bl	8001954 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f4:	e013      	b.n	8001a1e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f6:	f7ff ffad 	bl	8001954 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	d90c      	bls.n	8001a1e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0292      	lsls	r2, r2, #10
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2220      	movs	r2, #32
 8001a16:	2105      	movs	r1, #5
 8001a18:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e09e      	b.n	8001b5c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0e5      	beq.n	80019f6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7e1b      	ldrb	r3, [r3, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e5b      	ldrb	r3, [r3, #25]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e007      	b.n	8001a7e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7e9b      	ldrb	r3, [r3, #26]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2120      	movs	r1, #32
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e007      	b.n	8001aa8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7edb      	ldrb	r3, [r3, #27]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2110      	movs	r1, #16
 8001abc:	438a      	bics	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2110      	movs	r1, #16
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2108      	movs	r1, #8
 8001af8:	438a      	bics	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7f5b      	ldrb	r3, [r3, #29]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2104      	movs	r1, #4
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2104      	movs	r1, #4
 8001b22:	438a      	bics	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2220      	movs	r2, #32
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b74:	2013      	movs	r0, #19
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	5c52      	ldrb	r2, [r2, r1]
 8001b7e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_CAN_ConfigFilter+0x30>
 8001b88:	2313      	movs	r3, #19
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d000      	beq.n	8001b94 <HAL_CAN_ConfigFilter+0x30>
 8001b92:	e0cd      	b.n	8001d30 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	58d3      	ldr	r3, [r2, r3]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	221f      	movs	r2, #31
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	2387      	movs	r3, #135	; 0x87
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	58d3      	ldr	r3, [r2, r3]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	43d2      	mvns	r2, r2
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	0011      	movs	r1, r2
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	2387      	movs	r3, #135	; 0x87
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d129      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	2383      	movs	r3, #131	; 0x83
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	58d3      	ldr	r3, [r2, r3]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	43d2      	mvns	r2, r2
 8001be6:	401a      	ands	r2, r3
 8001be8:	0011      	movs	r1, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	2383      	movs	r3, #131	; 0x83
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c04:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3248      	adds	r2, #72	; 0x48
 8001c0a:	00d2      	lsls	r2, r2, #3
 8001c0c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	3348      	adds	r3, #72	; 0x48
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	18cb      	adds	r3, r1, r3
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d128      	bne.n	8001c88 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	2383      	movs	r3, #131	; 0x83
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	58d2      	ldr	r2, [r2, r3]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	2383      	movs	r3, #131	; 0x83
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c5e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3248      	adds	r2, #72	; 0x48
 8001c64:	00d2      	lsls	r2, r2, #3
 8001c66:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	3348      	adds	r3, #72	; 0x48
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	18cb      	adds	r3, r1, r3
 8001c84:	3304      	adds	r3, #4
 8001c86:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10c      	bne.n	8001caa <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	2381      	movs	r3, #129	; 0x81
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	58d3      	ldr	r3, [r2, r3]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	2381      	movs	r3, #129	; 0x81
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	50d1      	str	r1, [r2, r3]
 8001ca8:	e00a      	b.n	8001cc0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	2381      	movs	r3, #129	; 0x81
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	58d2      	ldr	r2, [r2, r3]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2381      	movs	r3, #129	; 0x81
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	2385      	movs	r3, #133	; 0x85
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	58d3      	ldr	r3, [r2, r3]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	43d2      	mvns	r2, r2
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	2385      	movs	r3, #133	; 0x85
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	50d1      	str	r1, [r2, r3]
 8001ce0:	e00a      	b.n	8001cf8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	2385      	movs	r3, #133	; 0x85
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	58d2      	ldr	r2, [r2, r3]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	0011      	movs	r1, r2
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	2385      	movs	r3, #133	; 0x85
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10a      	bne.n	8001d16 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	2387      	movs	r3, #135	; 0x87
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	58d2      	ldr	r2, [r2, r3]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	2387      	movs	r3, #135	; 0x87
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	58d3      	ldr	r3, [r2, r3]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	02d2      	lsls	r2, r2, #11
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
  }
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b006      	add	sp, #24
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d12f      	bne.n	8001dbc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2102      	movs	r1, #2
 8001d62:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fdee 	bl	8001954 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d7c:	e013      	b.n	8001da6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7e:	f7ff fde9 	bl	8001954 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	d90c      	bls.n	8001da6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0292      	lsls	r2, r2, #10
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	2105      	movs	r1, #5
 8001da0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e012      	b.n	8001dcc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1e5      	bne.n	8001d7e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e007      	b.n	8001dcc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	0312      	lsls	r2, r2, #12
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
  }
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dde:	200f      	movs	r0, #15
 8001de0:	183b      	adds	r3, r7, r0
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	2120      	movs	r1, #32
 8001de6:	5c52      	ldrb	r2, [r2, r1]
 8001de8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d004      	beq.n	8001dfc <HAL_CAN_ActivateNotification+0x28>
 8001df2:	230f      	movs	r3, #15
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d109      	bne.n	8001e10 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6959      	ldr	r1, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e007      	b.n	8001e20 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	02d2      	lsls	r2, r2, #11
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
  }
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	0002      	movs	r2, r0
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b7f      	cmp	r3, #127	; 0x7f
 8001e3a:	d809      	bhi.n	8001e50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	231f      	movs	r3, #31
 8001e44:	401a      	ands	r2, r3
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_EnableIRQ+0x30>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4091      	lsls	r1, r2
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
  }
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	0002      	movs	r2, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e70:	d828      	bhi.n	8001ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e72:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <__NVIC_SetPriority+0xd4>)
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	33c0      	adds	r3, #192	; 0xc0
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	589b      	ldr	r3, [r3, r2]
 8001e82:	1dfa      	adds	r2, r7, #7
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	0011      	movs	r1, r2
 8001e88:	2203      	movs	r2, #3
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	00d2      	lsls	r2, r2, #3
 8001e8e:	21ff      	movs	r1, #255	; 0xff
 8001e90:	4091      	lsls	r1, r2
 8001e92:	000a      	movs	r2, r1
 8001e94:	43d2      	mvns	r2, r2
 8001e96:	401a      	ands	r2, r3
 8001e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	019b      	lsls	r3, r3, #6
 8001e9e:	22ff      	movs	r2, #255	; 0xff
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	4003      	ands	r3, r0
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eb0:	481f      	ldr	r0, [pc, #124]	; (8001f30 <__NVIC_SetPriority+0xd4>)
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	33c0      	adds	r3, #192	; 0xc0
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ec2:	e031      	b.n	8001f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <__NVIC_SetPriority+0xd8>)
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	0019      	movs	r1, r3
 8001ecc:	230f      	movs	r3, #15
 8001ece:	400b      	ands	r3, r1
 8001ed0:	3b08      	subs	r3, #8
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3306      	adds	r3, #6
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	3304      	adds	r3, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	1dfa      	adds	r2, r7, #7
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	00d2      	lsls	r2, r2, #3
 8001eea:	21ff      	movs	r1, #255	; 0xff
 8001eec:	4091      	lsls	r1, r2
 8001eee:	000a      	movs	r2, r1
 8001ef0:	43d2      	mvns	r2, r2
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	019b      	lsls	r3, r3, #6
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	401a      	ands	r2, r3
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	2303      	movs	r3, #3
 8001f06:	4003      	ands	r3, r0
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <__NVIC_SetPriority+0xd8>)
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	001c      	movs	r4, r3
 8001f14:	230f      	movs	r3, #15
 8001f16:	4023      	ands	r3, r4
 8001f18:	3b08      	subs	r3, #8
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	3306      	adds	r3, #6
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	18c3      	adds	r3, r0, r3
 8001f24:	3304      	adds	r3, #4
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b003      	add	sp, #12
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <SysTick_Config+0x40>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e010      	b.n	8001f70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <SysTick_Config+0x44>)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	3a01      	subs	r2, #1
 8001f54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	2301      	movs	r3, #1
 8001f58:	425b      	negs	r3, r3
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ff7d 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SysTick_Config+0x44>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x44>)
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	00ffffff 	.word	0x00ffffff
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	1c02      	adds	r2, r0, #0
 8001f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff ff5d 	bl	8001e5c <__NVIC_SetPriority>
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b004      	add	sp, #16
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff ff33 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff ffaf 	bl	8001f38 <SysTick_Config>
 8001fda:	0003      	movs	r3, r0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	e155      	b.n	80022a0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d100      	bne.n	800200c <HAL_GPIO_Init+0x28>
 800200a:	e146      	b.n	800229a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x38>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d123      	bne.n	8002064 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	58d3      	ldr	r3, [r2, r3]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2207      	movs	r2, #7
 800202e:	4013      	ands	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	409a      	lsls	r2, r3
 8002036:	0013      	movs	r3, r2
 8002038:	43da      	mvns	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2107      	movs	r1, #7
 8002048:	400b      	ands	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	409a      	lsls	r2, r3
 800204e:	0013      	movs	r3, r2
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	43da      	mvns	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	0013      	movs	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d00b      	beq.n	80020b8 <HAL_GPIO_Init+0xd4>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ac:	2b11      	cmp	r3, #17
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d130      	bne.n	800211a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	409a      	lsls	r2, r3
 80020c6:	0013      	movs	r3, r2
 80020c8:	43da      	mvns	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	409a      	lsls	r2, r3
 80020da:	0013      	movs	r3, r2
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ee:	2201      	movs	r2, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	43da      	mvns	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	2201      	movs	r2, #1
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
 800210c:	0013      	movs	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	43da      	mvns	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	4013      	ands	r3, r2
 8002154:	d100      	bne.n	8002158 <HAL_GPIO_Init+0x174>
 8002156:	e0a0      	b.n	800229a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_GPIO_Init+0x2d4>)
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <HAL_GPIO_Init+0x2d4>)
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	619a      	str	r2, [r3, #24]
 8002164:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <HAL_GPIO_Init+0x2d4>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_GPIO_Init+0x2d8>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	589b      	ldr	r3, [r3, r2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	409a      	lsls	r2, r3
 800218a:	0013      	movs	r3, r2
 800218c:	43da      	mvns	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	2390      	movs	r3, #144	; 0x90
 8002198:	05db      	lsls	r3, r3, #23
 800219a:	429a      	cmp	r2, r3
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x1ee>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_GPIO_Init+0x2dc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x1ea>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a46      	ldr	r2, [pc, #280]	; (80022c4 <HAL_GPIO_Init+0x2e0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x1e6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a45      	ldr	r2, [pc, #276]	; (80022c8 <HAL_GPIO_Init+0x2e4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x1e2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a44      	ldr	r2, [pc, #272]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x1de>
 80021be:	2304      	movs	r3, #4
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021d2:	2300      	movs	r3, #0
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	2103      	movs	r1, #3
 80021d8:	400a      	ands	r2, r1
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x2d8>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	4013      	ands	r3, r2
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43da      	mvns	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	035b      	lsls	r3, r3, #13
 800225e:	4013      	ands	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	039b      	lsls	r3, r3, #14
 8002288:	4013      	ands	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	1e13      	subs	r3, r2, #0
 80022aa:	d000      	beq.n	80022ae <HAL_GPIO_Init+0x2ca>
 80022ac:	e6a2      	b.n	8001ff4 <HAL_GPIO_Init+0x10>
  } 
}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b006      	add	sp, #24
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	48000400 	.word	0x48000400
 80022c4:	48000800 	.word	0x48000800
 80022c8:	48000c00 	.word	0x48000c00
 80022cc:	48001000 	.word	0x48001000
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	000a      	movs	r2, r1
 80022de:	1cbb      	adds	r3, r7, #2
 80022e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	1cba      	adds	r2, r7, #2
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	4013      	ands	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022ee:	230f      	movs	r3, #15
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e003      	b.n	8002300 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002300:	230f      	movs	r3, #15
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
  }
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	0008      	movs	r0, r1
 8002318:	0011      	movs	r1, r2
 800231a:	1cbb      	adds	r3, r7, #2
 800231c:	1c02      	adds	r2, r0, #0
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	1c7b      	adds	r3, r7, #1
 8002322:	1c0a      	adds	r2, r1, #0
 8002324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002326:	1c7b      	adds	r3, r7, #1
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	1cbb      	adds	r3, r7, #2
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002336:	e003      	b.n	8002340 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002338:	1cbb      	adds	r3, r7, #2
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	0002      	movs	r2, r0
 8002350:	1dbb      	adds	r3, r7, #6
 8002352:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	1dba      	adds	r2, r7, #6
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	4013      	ands	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002362:	1dba      	adds	r2, r7, #6
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002368:	1dbb      	adds	r3, r7, #6
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fb53 	bl	8000a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f000 fb76 	bl	8002a80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	d100      	bne.n	80023a0 <HAL_RCC_OscConfig+0x20>
 800239e:	e08e      	b.n	80024be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023a0:	4bc5      	ldr	r3, [pc, #788]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	220c      	movs	r2, #12
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00e      	beq.n	80023ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ac:	4bc2      	ldr	r3, [pc, #776]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	220c      	movs	r2, #12
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d117      	bne.n	80023e8 <HAL_RCC_OscConfig+0x68>
 80023b8:	4bbf      	ldr	r3, [pc, #764]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	401a      	ands	r2, r3
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d10e      	bne.n	80023e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	4bbb      	ldr	r3, [pc, #748]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x58>
 80023d6:	e071      	b.n	80024bc <HAL_RCC_OscConfig+0x13c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d000      	beq.n	80023e2 <HAL_RCC_OscConfig+0x62>
 80023e0:	e06c      	b.n	80024bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f000 fb4c 	bl	8002a80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x80>
 80023f0:	4bb1      	ldr	r3, [pc, #708]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4bb0      	ldr	r3, [pc, #704]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0249      	lsls	r1, r1, #9
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e02f      	b.n	8002460 <HAL_RCC_OscConfig+0xe0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0xa2>
 8002408:	4bab      	ldr	r3, [pc, #684]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4baa      	ldr	r3, [pc, #680]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800240e:	49ab      	ldr	r1, [pc, #684]	; (80026bc <HAL_RCC_OscConfig+0x33c>)
 8002410:	400a      	ands	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4ba8      	ldr	r3, [pc, #672]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4ba7      	ldr	r3, [pc, #668]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800241a:	49a9      	ldr	r1, [pc, #676]	; (80026c0 <HAL_RCC_OscConfig+0x340>)
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e01e      	b.n	8002460 <HAL_RCC_OscConfig+0xe0>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d10e      	bne.n	8002448 <HAL_RCC_OscConfig+0xc8>
 800242a:	4ba3      	ldr	r3, [pc, #652]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4ba2      	ldr	r3, [pc, #648]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	02c9      	lsls	r1, r1, #11
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	4b9f      	ldr	r3, [pc, #636]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b9e      	ldr	r3, [pc, #632]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xe0>
 8002448:	4b9b      	ldr	r3, [pc, #620]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800244e:	499b      	ldr	r1, [pc, #620]	; (80026bc <HAL_RCC_OscConfig+0x33c>)
 8002450:	400a      	ands	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	4b98      	ldr	r3, [pc, #608]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b97      	ldr	r3, [pc, #604]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800245a:	4999      	ldr	r1, [pc, #612]	; (80026c0 <HAL_RCC_OscConfig+0x340>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d014      	beq.n	8002492 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fa74 	bl	8001954 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002472:	f7ff fa6f 	bl	8001954 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e2fd      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002484:	4b8c      	ldr	r3, [pc, #560]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	4013      	ands	r3, r2
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0xf2>
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fa5f 	bl	8001954 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fa5a 	bl	8001954 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e2e8      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x11c>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_OscConfig+0x14a>
 80024c8:	e06c      	b.n	80025a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	220c      	movs	r2, #12
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00e      	beq.n	80024f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024d4:	4b78      	ldr	r3, [pc, #480]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	220c      	movs	r2, #12
 80024da:	4013      	ands	r3, r2
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11f      	bne.n	8002520 <HAL_RCC_OscConfig+0x1a0>
 80024e0:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	23c0      	movs	r3, #192	; 0xc0
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	401a      	ands	r2, r3
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x188>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e2bb      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	22f8      	movs	r2, #248	; 0xf8
 800250e:	4393      	bics	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00da      	lsls	r2, r3, #3
 8002518:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e041      	b.n	80025a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d024      	beq.n	8002572 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b62      	ldr	r3, [pc, #392]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800252e:	2101      	movs	r1, #1
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fa0e 	bl	8001954 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff fa09 	bl	8001954 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e297      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d0f1      	beq.n	800253e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	22f8      	movs	r2, #248	; 0xf8
 8002560:	4393      	bics	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00da      	lsls	r2, r3, #3
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e018      	b.n	80025a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002578:	2101      	movs	r1, #1
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff f9e9 	bl	8001954 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002588:	f7ff f9e4 	bl	8001954 <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e272      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d1f1      	bne.n	8002588 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2208      	movs	r2, #8
 80025aa:	4013      	ands	r3, r2
 80025ac:	d036      	beq.n	800261c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b40      	ldr	r3, [pc, #256]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80025bc:	2101      	movs	r1, #1
 80025be:	430a      	orrs	r2, r1
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff f9c7 	bl	8001954 <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff f9c2 	bl	8001954 <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e250      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	d0f1      	beq.n	80025cc <HAL_RCC_OscConfig+0x24c>
 80025e8:	e018      	b.n	800261c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80025ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ee:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	438a      	bics	r2, r1
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f9ad 	bl	8001954 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff f9a8 	bl	8001954 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e236      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d1f1      	bne.n	8002600 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2204      	movs	r2, #4
 8002622:	4013      	ands	r3, r2
 8002624:	d100      	bne.n	8002628 <HAL_RCC_OscConfig+0x2a8>
 8002626:	e0b5      	b.n	8002794 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	055b      	lsls	r3, r3, #21
 8002638:	4013      	ands	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0549      	lsls	r1, r1, #21
 8002646:	430a      	orrs	r2, r1
 8002648:	61da      	str	r2, [r3, #28]
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	055b      	lsls	r3, r3, #21
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002658:	231f      	movs	r3, #31
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_RCC_OscConfig+0x344>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d11a      	bne.n	80026a2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_RCC_OscConfig+0x344>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_RCC_OscConfig+0x344>)
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	0049      	lsls	r1, r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7ff f96b 	bl	8001954 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002684:	f7ff f966 	bl	8001954 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f4      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x344>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10e      	bne.n	80026c8 <HAL_RCC_OscConfig+0x348>
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_RCC_OscConfig+0x338>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	621a      	str	r2, [r3, #32]
 80026b6:	e035      	b.n	8002724 <HAL_RCC_OscConfig+0x3a4>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	fffeffff 	.word	0xfffeffff
 80026c0:	fffbffff 	.word	0xfffbffff
 80026c4:	40007000 	.word	0x40007000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x36a>
 80026d0:	4bca      	ldr	r3, [pc, #808]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	4bc9      	ldr	r3, [pc, #804]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	438a      	bics	r2, r1
 80026da:	621a      	str	r2, [r3, #32]
 80026dc:	4bc7      	ldr	r3, [pc, #796]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	4bc6      	ldr	r3, [pc, #792]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026e2:	2104      	movs	r1, #4
 80026e4:	438a      	bics	r2, r1
 80026e6:	621a      	str	r2, [r3, #32]
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x3a4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x38c>
 80026f2:	4bc2      	ldr	r3, [pc, #776]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	4bc1      	ldr	r3, [pc, #772]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80026f8:	2104      	movs	r1, #4
 80026fa:	430a      	orrs	r2, r1
 80026fc:	621a      	str	r2, [r3, #32]
 80026fe:	4bbf      	ldr	r3, [pc, #764]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	4bbe      	ldr	r3, [pc, #760]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	621a      	str	r2, [r3, #32]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x3a4>
 800270c:	4bbb      	ldr	r3, [pc, #748]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	4bba      	ldr	r3, [pc, #744]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002712:	2101      	movs	r1, #1
 8002714:	438a      	bics	r2, r1
 8002716:	621a      	str	r2, [r3, #32]
 8002718:	4bb8      	ldr	r3, [pc, #736]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	4bb7      	ldr	r3, [pc, #732]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800271e:	2104      	movs	r1, #4
 8002720:	438a      	bics	r2, r1
 8002722:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d014      	beq.n	8002756 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7ff f912 	bl	8001954 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e009      	b.n	800274a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff f90d 	bl	8001954 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4aaf      	ldr	r2, [pc, #700]	; (8002a00 <HAL_RCC_OscConfig+0x680>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e19a      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4bac      	ldr	r3, [pc, #688]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x3b6>
 8002754:	e013      	b.n	800277e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7ff f8fd 	bl	8001954 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e009      	b.n	8002774 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7ff f8f8 	bl	8001954 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4aa5      	ldr	r2, [pc, #660]	; (8002a00 <HAL_RCC_OscConfig+0x680>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e185      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	4ba1      	ldr	r3, [pc, #644]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277e:	231f      	movs	r3, #31
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b9c      	ldr	r3, [pc, #624]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	4b9b      	ldr	r3, [pc, #620]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800278e:	499d      	ldr	r1, [pc, #628]	; (8002a04 <HAL_RCC_OscConfig+0x684>)
 8002790:	400a      	ands	r2, r1
 8002792:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d12a      	bne.n	80027fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027aa:	4b94      	ldr	r3, [pc, #592]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027ac:	2104      	movs	r1, #4
 80027ae:	430a      	orrs	r2, r1
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027b2:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b6:	4b91      	ldr	r3, [pc, #580]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027b8:	2101      	movs	r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f8c9 	bl	8001954 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027c8:	f7ff f8c4 	bl	8001954 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e152      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027da:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d0f1      	beq.n	80027c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027e4:	4b85      	ldr	r3, [pc, #532]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	22f8      	movs	r2, #248	; 0xf8
 80027ea:	4393      	bics	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	4b81      	ldr	r3, [pc, #516]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34
 80027fa:	e034      	b.n	8002866 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	3305      	adds	r3, #5
 8002802:	d111      	bne.n	8002828 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002804:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002808:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800280a:	2104      	movs	r1, #4
 800280c:	438a      	bics	r2, r1
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002810:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	22f8      	movs	r2, #248	; 0xf8
 8002816:	4393      	bics	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	00da      	lsls	r2, r3, #3
 8002820:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002822:	430a      	orrs	r2, r1
 8002824:	635a      	str	r2, [r3, #52]	; 0x34
 8002826:	e01e      	b.n	8002866 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002828:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800282a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282c:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800282e:	2104      	movs	r1, #4
 8002830:	430a      	orrs	r2, r1
 8002832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002834:	4b71      	ldr	r3, [pc, #452]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002838:	4b70      	ldr	r3, [pc, #448]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800283a:	2101      	movs	r1, #1
 800283c:	438a      	bics	r2, r1
 800283e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7ff f888 	bl	8001954 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800284a:	f7ff f883 	bl	8001954 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e111      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800285c:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d1f1      	bne.n	800284a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2220      	movs	r2, #32
 800286c:	4013      	ands	r3, r2
 800286e:	d05c      	beq.n	800292a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	220c      	movs	r2, #12
 8002876:	4013      	ands	r3, r2
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d00e      	beq.n	800289a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	220c      	movs	r2, #12
 8002882:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002884:	2b08      	cmp	r3, #8
 8002886:	d114      	bne.n	80028b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002888:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	401a      	ands	r2, r3
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	025b      	lsls	r3, r3, #9
 8002896:	429a      	cmp	r2, r3
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800289a:	4b58      	ldr	r3, [pc, #352]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800289c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	025b      	lsls	r3, r3, #9
 80028a2:	4013      	ands	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_OscConfig+0x5a8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d03c      	beq.n	8002928 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0e6      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80028bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0249      	lsls	r1, r1, #9
 80028c4:	430a      	orrs	r2, r1
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff f844 	bl	8001954 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d2:	f7ff f83f 	bl	8001954 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0cd      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028e4:	4b45      	ldr	r3, [pc, #276]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	025b      	lsls	r3, r3, #9
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x552>
 80028f0:	e01b      	b.n	800292a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028f2:	4b42      	ldr	r3, [pc, #264]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80028f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80028f8:	4943      	ldr	r1, [pc, #268]	; (8002a08 <HAL_RCC_OscConfig+0x688>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff f829 	bl	8001954 <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002908:	f7ff f824 	bl	8001954 <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b2      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800291c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	4013      	ands	r3, r2
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x588>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002928:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d100      	bne.n	8002934 <HAL_RCC_OscConfig+0x5b4>
 8002932:	e0a4      	b.n	8002a7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	220c      	movs	r2, #12
 800293a:	4013      	ands	r3, r2
 800293c:	2b08      	cmp	r3, #8
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x5c2>
 8002940:	e078      	b.n	8002a34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b02      	cmp	r3, #2
 8002948:	d14c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002950:	492e      	ldr	r1, [pc, #184]	; (8002a0c <HAL_RCC_OscConfig+0x68c>)
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fffd 	bl	8001954 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fff8 	bl	8001954 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e086      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	220f      	movs	r2, #15
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 800298e:	430a      	orrs	r2, r1
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x690>)
 8002998:	4013      	ands	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	431a      	orrs	r2, r3
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	0449      	lsls	r1, r1, #17
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe ffcb 	bl	8001954 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe ffc6 	bl	8001954 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e054      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	049b      	lsls	r3, r3, #18
 80029de:	4013      	ands	r3, r2
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x644>
 80029e2:	e04c      	b.n	8002a7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_RCC_OscConfig+0x67c>)
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <HAL_RCC_OscConfig+0x68c>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe ffb0 	bl	8001954 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x6a6>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40021000 	.word	0x40021000
 8002a00:	00001388 	.word	0x00001388
 8002a04:	efffffff 	.word	0xefffffff
 8002a08:	fffeffff 	.word	0xfffeffff
 8002a0c:	feffffff 	.word	0xfeffffff
 8002a10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe ff9e 	bl	8001954 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e02c      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_OscConfig+0x708>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	049b      	lsls	r3, r3, #18
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x694>
 8002a32:	e024      	b.n	8002a7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e01f      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_OscConfig+0x708>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x708>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	23c0      	movs	r3, #192	; 0xc0
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10e      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	220f      	movs	r2, #15
 8002a60:	401a      	ands	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	23f0      	movs	r3, #240	; 0xf0
 8002a6e:	039b      	lsls	r3, r3, #14
 8002a70:	401a      	ands	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b008      	add	sp, #32
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0bf      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d911      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac0:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a6      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d015      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d006      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ae6:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002aec:	21e0      	movs	r1, #224	; 0xe0
 8002aee:	00c9      	lsls	r1, r1, #3
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	22f0      	movs	r2, #240	; 0xf0
 8002afa:	4393      	bics	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d04c      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	4013      	ands	r3, r2
 8002b24:	d120      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07a      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	049b      	lsls	r3, r3, #18
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d114      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06e      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	025b      	lsls	r3, r3, #9
 8002b52:	4013      	ands	r3, r2
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e062      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e05b      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4393      	bics	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe feea 	bl	8001954 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b84:	e009      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b86:	f7fe fee5 	bl	8001954 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_RCC_ClockConfig+0x1a4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e042      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1ec      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d211      	bcs.n	8002bde <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_RCC_ClockConfig+0x19c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e020      	b.n	8002c20 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2204      	movs	r2, #4
 8002be4:	4013      	ands	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_RCC_ClockConfig+0x1a8>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bfc:	f000 f820 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002c00:	0001      	movs	r1, r0
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x1a0>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	220f      	movs	r2, #15
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x1ac>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	000a      	movs	r2, r1
 8002c12:	40da      	lsrs	r2, r3
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002c16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe fe55 	bl	80018c8 <HAL_InitTick>
  
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	00001388 	.word	0x00001388
 8002c34:	fffff8ff 	.word	0xfffff8ff
 8002c38:	08003d14 	.word	0x08003d14
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b08f      	sub	sp, #60	; 0x3c
 8002c44:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c46:	2314      	movs	r3, #20
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002c4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c4e:	c313      	stmia	r3!, {r0, r1, r4}
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xec>)
 8002c58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c5a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d006      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x52>
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d043      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xd0>
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d144      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c90:	e044      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	220f      	movs	r2, #15
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2214      	movs	r2, #20
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	4013      	ands	r3, r2
 8002caa:	1d3a      	adds	r2, r7, #4
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	025b      	lsls	r3, r3, #9
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc2:	481c      	ldr	r0, [pc, #112]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cc4:	f7fd fa20 	bl	8000108 <__udivsi3>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	001a      	movs	r2, r3
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	4353      	muls	r3, r2
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd2:	e01a      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	401a      	ands	r2, r3
 8002cdc:	23c0      	movs	r3, #192	; 0xc0
 8002cde:	025b      	lsls	r3, r3, #9
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d109      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce6:	4814      	ldr	r0, [pc, #80]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce8:	f7fd fa0e 	bl	8000108 <__udivsi3>
 8002cec:	0003      	movs	r3, r0
 8002cee:	001a      	movs	r2, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	4353      	muls	r3, r2
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfa:	480e      	ldr	r0, [pc, #56]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cfc:	f7fd fa04 	bl	8000108 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	001a      	movs	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4353      	muls	r3, r2
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d0e:	e005      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b00f      	add	sp, #60	; 0x3c
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	08003cf4 	.word	0x08003cf4
 8002d2c:	08003d04 	.word	0x08003d04
 8002d30:	40021000 	.word	0x40021000
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	02dc6c00 	.word	0x02dc6c00

08002d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e08a      	b.n	8002e64 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	225d      	movs	r2, #93	; 0x5d
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	225c      	movs	r2, #92	; 0x5c
 8002d64:	2100      	movs	r1, #0
 8002d66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7fe f80a 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	225d      	movs	r2, #93	; 0x5d
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	438a      	bics	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	23e0      	movs	r3, #224	; 0xe0
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e002      	b.n	8002da0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	23f0      	movs	r3, #240	; 0xf0
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d008      	beq.n	8002dbe <HAL_SPI_Init+0x82>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	23e0      	movs	r3, #224	; 0xe0
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	23e0      	movs	r3, #224	; 0xe0
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d903      	bls.n	8002dda <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd8:	e002      	b.n	8002de0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6999      	ldr	r1, [r3, #24]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	400b      	ands	r3, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	0011      	movs	r1, r2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	2204      	movs	r2, #4
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	0011      	movs	r1, r2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4907      	ldr	r1, [pc, #28]	; (8002e6c <HAL_SPI_Init+0x130>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	225d      	movs	r2, #93	; 0x5d
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	fffff7ff 	.word	0xfffff7ff

08002e70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	1dbb      	adds	r3, r7, #6
 8002e7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e80:	231f      	movs	r3, #31
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	225c      	movs	r2, #92	; 0x5c
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_SPI_Transmit+0x26>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e169      	b.n	800316a <HAL_SPI_Transmit+0x2fa>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	225c      	movs	r2, #92	; 0x5c
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e9e:	f7fe fd59 	bl	8001954 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ea6:	2316      	movs	r3, #22
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	1dba      	adds	r2, r7, #6
 8002eac:	8812      	ldrh	r2, [r2, #0]
 8002eae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	225d      	movs	r2, #93	; 0x5d
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d004      	beq.n	8002ec6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002ebc:	231f      	movs	r3, #31
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ec4:	e146      	b.n	8003154 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_SPI_Transmit+0x64>
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
    goto error;
 8002edc:	e13a      	b.n	8003154 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	225d      	movs	r2, #93	; 0x5d
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1dba      	adds	r2, r7, #6
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1dba      	adds	r2, r7, #6
 8002efe:	8812      	ldrh	r2, [r2, #0]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2244      	movs	r2, #68	; 0x44
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2246      	movs	r2, #70	; 0x46
 8002f14:	2100      	movs	r1, #0
 8002f16:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d108      	bne.n	8002f42 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	01c9      	lsls	r1, r1, #7
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	23e0      	movs	r3, #224	; 0xe0
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d94e      	bls.n	800300a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_SPI_Transmit+0x10e>
 8002f74:	2316      	movs	r3, #22
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d13f      	bne.n	8002ffe <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	1c9a      	adds	r2, r3, #2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fa2:	e02c      	b.n	8002ffe <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d112      	bne.n	8002fd8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	1c9a      	adds	r2, r3, #2
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fd6:	e012      	b.n	8002ffe <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd8:	f7fe fcbc 	bl	8001954 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d802      	bhi.n	8002fee <HAL_SPI_Transmit+0x17e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Transmit+0x184>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ffc:	e0aa      	b.n	8003154 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1cd      	bne.n	8002fa4 <HAL_SPI_Transmit+0x134>
 8003008:	e080      	b.n	800310c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_SPI_Transmit+0x1ae>
 8003012:	2316      	movs	r3, #22
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d000      	beq.n	800301e <HAL_SPI_Transmit+0x1ae>
 800301c:	e071      	b.n	8003102 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d912      	bls.n	800304e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b02      	subs	r3, #2
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800304c:	e059      	b.n	8003102 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003074:	e045      	b.n	8003102 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2202      	movs	r2, #2
 800307e:	4013      	ands	r3, r2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d12b      	bne.n	80030dc <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d912      	bls.n	80030b4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b02      	subs	r3, #2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b2:	e026      	b.n	8003102 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030da:	e012      	b.n	8003102 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030dc:	f7fe fc3a 	bl	8001954 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d802      	bhi.n	80030f2 <HAL_SPI_Transmit+0x282>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_SPI_Transmit+0x288>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80030f8:	231f      	movs	r3, #31
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2203      	movs	r2, #3
 80030fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8003100:	e028      	b.n	8003154 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1b4      	bne.n	8003076 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	6839      	ldr	r1, [r7, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f912 	bl	800333c <SPI_EndRxTxTransaction>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d002      	beq.n	8003122 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e000      	b.n	8003154 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8003152:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	225d      	movs	r2, #93	; 0x5d
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	225c      	movs	r2, #92	; 0x5c
 8003160:	2100      	movs	r1, #0
 8003162:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003164:	231f      	movs	r3, #31
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b008      	add	sp, #32
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003184:	e050      	b.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	d04d      	beq.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800318c:	f7fe fbe2 	bl	8001954 <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d142      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	21e0      	movs	r1, #224	; 0xe0
 80031ae:	438a      	bics	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	2382      	movs	r3, #130	; 0x82
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d113      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0x72>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d005      	beq.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d107      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	438a      	bics	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d110      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4914      	ldr	r1, [pc, #80]	; (8003250 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80031fe:	400a      	ands	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	0189      	lsls	r1, r1, #6
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	225d      	movs	r2, #93	; 0x5d
 8003218:	2101      	movs	r1, #1
 800321a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	225c      	movs	r2, #92	; 0x5c
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	425a      	negs	r2, r3
 8003238:	4153      	adcs	r3, r2
 800323a:	b2db      	uxtb	r3, r3
 800323c:	001a      	movs	r2, r3
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d19f      	bne.n	8003186 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}
 8003250:	ffffdfff 	.word	0xffffdfff

08003254 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003262:	e05c      	b.n	800331e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <SPI_WaitFifoStateUntilTimeout+0x28>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	d04d      	beq.n	800331e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003282:	f7fe fb67 	bl	8001954 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d902      	bls.n	8003298 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d142      	bne.n	800331e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	21e0      	movs	r1, #224	; 0xe0
 80032a4:	438a      	bics	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	2382      	movs	r3, #130	; 0x82
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d113      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x88>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d107      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2140      	movs	r1, #64	; 0x40
 80032d8:	438a      	bics	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d110      	bne.n	800330a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4911      	ldr	r1, [pc, #68]	; (8003338 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0189      	lsls	r1, r1, #6
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	225d      	movs	r2, #93	; 0x5d
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	225c      	movs	r2, #92	; 0x5c
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e008      	b.n	8003330 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d19a      	bne.n	8003264 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}
 8003338:	ffffdfff 	.word	0xffffdfff

0800333c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	0159      	lsls	r1, r3, #5
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	0013      	movs	r3, r2
 8003356:	2200      	movs	r2, #0
 8003358:	f7ff ff7c 	bl	8003254 <SPI_WaitFifoStateUntilTimeout>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d007      	beq.n	8003370 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	2220      	movs	r2, #32
 8003366:	431a      	orrs	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e027      	b.n	80033c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	0013      	movs	r3, r2
 800337a:	2200      	movs	r2, #0
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	f7ff fef9 	bl	8003174 <SPI_WaitFlagStateUntilTimeout>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d007      	beq.n	8003396 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	2220      	movs	r2, #32
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e014      	b.n	80033c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	23c0      	movs	r3, #192	; 0xc0
 800339a:	00d9      	lsls	r1, r3, #3
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	0013      	movs	r3, r2
 80033a4:	2200      	movs	r2, #0
 80033a6:	f7ff ff55 	bl	8003254 <SPI_WaitFifoStateUntilTimeout>
 80033aa:	1e03      	subs	r3, r0, #0
 80033ac:	d007      	beq.n	80033be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	2220      	movs	r2, #32
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e000      	b.n	80033c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e01e      	b.n	8003418 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223d      	movs	r2, #61	; 0x3d
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223c      	movs	r2, #60	; 0x3c
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fd fd15 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223d      	movs	r2, #61	; 0x3d
 80033fa:	2102      	movs	r1, #2
 80033fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	0019      	movs	r1, r3
 8003408:	0010      	movs	r0, r2
 800340a:	f000 fa49 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223d      	movs	r2, #61	; 0x3d
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	430a      	orrs	r2, r1
 8003436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2207      	movs	r2, #7
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d007      	beq.n	800345a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_TIM_Base_Stop_IT+0x4c>)
 8003484:	4013      	ands	r3, r2
 8003486:	d10d      	bne.n	80034a4 <HAL_TIM_Base_Stop_IT+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_TIM_Base_Stop_IT+0x50>)
 8003490:	4013      	ands	r3, r2
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_Base_Stop_IT+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	00001111 	.word	0x00001111
 80034b4:	00000444 	.word	0x00000444

080034b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d124      	bne.n	8003518 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d11d      	bne.n	8003518 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2203      	movs	r2, #3
 80034e2:	4252      	negs	r2, r2
 80034e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2203      	movs	r2, #3
 80034f4:	4013      	ands	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f9b8 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003500:	e007      	b.n	8003512 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f9ab 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f9b7 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	2b04      	cmp	r3, #4
 8003524:	d125      	bne.n	8003572 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2204      	movs	r2, #4
 800352e:	4013      	ands	r3, r2
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11e      	bne.n	8003572 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2205      	movs	r2, #5
 800353a:	4252      	negs	r2, r2
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	23c0      	movs	r3, #192	; 0xc0
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f98b 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800355a:	e007      	b.n	800356c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0018      	movs	r0, r3
 8003560:	f000 f97e 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f98a 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2208      	movs	r2, #8
 800357a:	4013      	ands	r3, r2
 800357c:	2b08      	cmp	r3, #8
 800357e:	d124      	bne.n	80035ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2208      	movs	r2, #8
 8003588:	4013      	ands	r3, r2
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11d      	bne.n	80035ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2209      	movs	r2, #9
 8003594:	4252      	negs	r2, r2
 8003596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2204      	movs	r2, #4
 800359c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2203      	movs	r2, #3
 80035a6:	4013      	ands	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 f95f 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80035b2:	e007      	b.n	80035c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 f952 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f95e 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d125      	bne.n	8003624 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2210      	movs	r2, #16
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d11e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2211      	movs	r2, #17
 80035ec:	4252      	negs	r2, r2
 80035ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2208      	movs	r2, #8
 80035f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	23c0      	movs	r3, #192	; 0xc0
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 f932 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800360c:	e007      	b.n	800361e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 f925 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f931 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2201      	movs	r2, #1
 800362c:	4013      	ands	r3, r2
 800362e:	2b01      	cmp	r3, #1
 8003630:	d10f      	bne.n	8003652 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	4252      	negs	r2, r2
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0018      	movs	r0, r3
 800364e:	f7fd fa2b 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	4013      	ands	r3, r2
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d10f      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	4013      	ands	r3, r2
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d108      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2281      	movs	r2, #129	; 0x81
 8003674:	4252      	negs	r2, r2
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 fa90 	bl	8003ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	4013      	ands	r3, r2
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d10f      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2240      	movs	r2, #64	; 0x40
 8003696:	4013      	ands	r3, r2
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d108      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2241      	movs	r2, #65	; 0x41
 80036a2:	4252      	negs	r2, r2
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 f8f1 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2220      	movs	r2, #32
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d10f      	bne.n	80036dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d108      	bne.n	80036dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2221      	movs	r2, #33	; 0x21
 80036d0:	4252      	negs	r2, r2
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 fa5a 	bl	8003b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223c      	movs	r2, #60	; 0x3c
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x18>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0ab      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x170>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	223c      	movs	r2, #60	; 0x3c
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	223d      	movs	r2, #61	; 0x3d
 8003708:	2102      	movs	r1, #2
 800370a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2277      	movs	r2, #119	; 0x77
 8003718:	4393      	bics	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a4f      	ldr	r2, [pc, #316]	; (800385c <HAL_TIM_ConfigClockSource+0x178>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d100      	bne.n	8003736 <HAL_TIM_ConfigClockSource+0x52>
 8003734:	e06b      	b.n	800380e <HAL_TIM_ConfigClockSource+0x12a>
 8003736:	d80e      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x72>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d100      	bne.n	800373e <HAL_TIM_ConfigClockSource+0x5a>
 800373c:	e077      	b.n	800382e <HAL_TIM_ConfigClockSource+0x14a>
 800373e:	d803      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x64>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d100      	bne.n	8003746 <HAL_TIM_ConfigClockSource+0x62>
 8003744:	e073      	b.n	800382e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003746:	e07c      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003748:	2b20      	cmp	r3, #32
 800374a:	d100      	bne.n	800374e <HAL_TIM_ConfigClockSource+0x6a>
 800374c:	e06f      	b.n	800382e <HAL_TIM_ConfigClockSource+0x14a>
 800374e:	2b30      	cmp	r3, #48	; 0x30
 8003750:	d100      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x70>
 8003752:	e06c      	b.n	800382e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003754:	e075      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003756:	2b70      	cmp	r3, #112	; 0x70
 8003758:	d00e      	beq.n	8003778 <HAL_TIM_ConfigClockSource+0x94>
 800375a:	d804      	bhi.n	8003766 <HAL_TIM_ConfigClockSource+0x82>
 800375c:	2b50      	cmp	r3, #80	; 0x50
 800375e:	d036      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0xea>
 8003760:	2b60      	cmp	r3, #96	; 0x60
 8003762:	d044      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003764:	e06d      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	0152      	lsls	r2, r2, #5
 800376a:	4293      	cmp	r3, r2
 800376c:	d068      	beq.n	8003840 <HAL_TIM_ConfigClockSource+0x15c>
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0192      	lsls	r2, r2, #6
 8003772:	4293      	cmp	r3, r2
 8003774:	d017      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003776:	e064      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f000 f984 	bl	8003a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2277      	movs	r2, #119	; 0x77
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
      break;
 80037a4:	e04d      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f000 f96d 	bl	8003a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	01c9      	lsls	r1, r1, #7
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
      break;
 80037cc:	e039      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	001a      	movs	r2, r3
 80037dc:	f000 f8e0 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2150      	movs	r1, #80	; 0x50
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f93a 	bl	8003a60 <TIM_ITRx_SetConfig>
      break;
 80037ec:	e029      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	001a      	movs	r2, r3
 80037fc:	f000 f8fe 	bl	80039fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2160      	movs	r1, #96	; 0x60
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f92a 	bl	8003a60 <TIM_ITRx_SetConfig>
      break;
 800380c:	e019      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	001a      	movs	r2, r3
 800381c:	f000 f8c0 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f91a 	bl	8003a60 <TIM_ITRx_SetConfig>
      break;
 800382c:	e009      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f000 f911 	bl	8003a60 <TIM_ITRx_SetConfig>
      break;
 800383e:	e000      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003840:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223d      	movs	r2, #61	; 0x3d
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223c      	movs	r2, #60	; 0x3c
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}
 800385c:	ffff00ff 	.word	0xffff00ff

08003860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a34      	ldr	r2, [pc, #208]	; (8003984 <TIM_Base_SetConfig+0xe4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d008      	beq.n	80038ca <TIM_Base_SetConfig+0x2a>
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	05db      	lsls	r3, r3, #23
 80038be:	429a      	cmp	r2, r3
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x2a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <TIM_Base_SetConfig+0xe8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2270      	movs	r2, #112	; 0x70
 80038ce:	4393      	bics	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0xe4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d013      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0xe8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00f      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <TIM_Base_SetConfig+0xec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <TIM_Base_SetConfig+0xf0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <TIM_Base_SetConfig+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x76>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <TIM_Base_SetConfig+0xf8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <TIM_Base_SetConfig+0xfc>)
 800391a:	4013      	ands	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	4393      	bics	r3, r2
 800392e:	001a      	movs	r2, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0xce>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <TIM_Base_SetConfig+0xf0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0xce>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <TIM_Base_SetConfig+0xf4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0xce>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <TIM_Base_SetConfig+0xf8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d103      	bne.n	8003976 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	615a      	str	r2, [r3, #20]
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40002000 	.word	0x40002000
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	fffffcff 	.word	0xfffffcff

080039a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2201      	movs	r2, #1
 80039b8:	4393      	bics	r3, r2
 80039ba:	001a      	movs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	22f0      	movs	r2, #240	; 0xf0
 80039ca:	4393      	bics	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	220a      	movs	r2, #10
 80039dc:	4393      	bics	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b006      	add	sp, #24
 80039fa:	bd80      	pop	{r7, pc}

080039fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	4393      	bics	r3, r2
 8003a10:	001a      	movs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <TIM_TI2_ConfigInputStage+0x60>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	22a0      	movs	r2, #160	; 0xa0
 8003a38:	4393      	bics	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b006      	add	sp, #24
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	ffff0fff 	.word	0xffff0fff

08003a60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2270      	movs	r2, #112	; 0x70
 8003a74:	4393      	bics	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <TIM_ETR_SetConfig+0x3c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b006      	add	sp, #24
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	ffff00ff 	.word	0xffff00ff

08003ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	223c      	movs	r2, #60	; 0x3c
 8003ae2:	5c9b      	ldrb	r3, [r3, r2]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e047      	b.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	223c      	movs	r2, #60	; 0x3c
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	223d      	movs	r2, #61	; 0x3d
 8003af8:	2102      	movs	r1, #2
 8003afa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2270      	movs	r2, #112	; 0x70
 8003b10:	4393      	bics	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	05db      	lsls	r3, r3, #23
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	4393      	bics	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223d      	movs	r2, #61	; 0x3d
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	223c      	movs	r2, #60	; 0x3c
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40014000 	.word	0x40014000

08003b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <__cxa_pure_virtual>:
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	f000 f805 	bl	8003bc0 <_ZSt9terminatev>

08003bb6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4780      	blx	r0
 8003bba:	f000 f809 	bl	8003bd0 <abort>
	...

08003bc0 <_ZSt9terminatev>:
 8003bc0:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <_ZSt9terminatev+0xc>)
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	f7ff fff6 	bl	8003bb6 <_ZN10__cxxabiv111__terminateEPFvvE>
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	2000000c 	.word	0x2000000c

08003bd0 <abort>:
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	2006      	movs	r0, #6
 8003bd4:	f000 f860 	bl	8003c98 <raise>
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f7fd f9b1 	bl	8000f40 <_exit>
	...

08003be0 <__errno>:
 8003be0:	4b01      	ldr	r3, [pc, #4]	; (8003be8 <__errno+0x8>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	4770      	bx	lr
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000010 	.word	0x20000010

08003bec <__libc_init_array>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	2600      	movs	r6, #0
 8003bf0:	4d0c      	ldr	r5, [pc, #48]	; (8003c24 <__libc_init_array+0x38>)
 8003bf2:	4c0d      	ldr	r4, [pc, #52]	; (8003c28 <__libc_init_array+0x3c>)
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	42a6      	cmp	r6, r4
 8003bfa:	d109      	bne.n	8003c10 <__libc_init_array+0x24>
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	f000 f86b 	bl	8003cd8 <_init>
 8003c02:	4d0a      	ldr	r5, [pc, #40]	; (8003c2c <__libc_init_array+0x40>)
 8003c04:	4c0a      	ldr	r4, [pc, #40]	; (8003c30 <__libc_init_array+0x44>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	42a6      	cmp	r6, r4
 8003c0c:	d105      	bne.n	8003c1a <__libc_init_array+0x2e>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	00b3      	lsls	r3, r6, #2
 8003c12:	58eb      	ldr	r3, [r5, r3]
 8003c14:	4798      	blx	r3
 8003c16:	3601      	adds	r6, #1
 8003c18:	e7ee      	b.n	8003bf8 <__libc_init_array+0xc>
 8003c1a:	00b3      	lsls	r3, r6, #2
 8003c1c:	58eb      	ldr	r3, [r5, r3]
 8003c1e:	4798      	blx	r3
 8003c20:	3601      	adds	r6, #1
 8003c22:	e7f2      	b.n	8003c0a <__libc_init_array+0x1e>
 8003c24:	08003d48 	.word	0x08003d48
 8003c28:	08003d48 	.word	0x08003d48
 8003c2c:	08003d48 	.word	0x08003d48
 8003c30:	08003d50 	.word	0x08003d50

08003c34 <memset>:
 8003c34:	0003      	movs	r3, r0
 8003c36:	1812      	adds	r2, r2, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	7019      	strb	r1, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <_raise_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	0004      	movs	r4, r0
 8003c48:	000d      	movs	r5, r1
 8003c4a:	291f      	cmp	r1, #31
 8003c4c:	d904      	bls.n	8003c58 <_raise_r+0x14>
 8003c4e:	2316      	movs	r3, #22
 8003c50:	6003      	str	r3, [r0, #0]
 8003c52:	2001      	movs	r0, #1
 8003c54:	4240      	negs	r0, r0
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <_raise_r+0x24>
 8003c5e:	008a      	lsls	r2, r1, #2
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d108      	bne.n	8003c7a <_raise_r+0x36>
 8003c68:	0020      	movs	r0, r4
 8003c6a:	f000 f831 	bl	8003cd0 <_getpid_r>
 8003c6e:	002a      	movs	r2, r5
 8003c70:	0001      	movs	r1, r0
 8003c72:	0020      	movs	r0, r4
 8003c74:	f000 f81a 	bl	8003cac <_kill_r>
 8003c78:	e7ed      	b.n	8003c56 <_raise_r+0x12>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	2a01      	cmp	r2, #1
 8003c7e:	d0ea      	beq.n	8003c56 <_raise_r+0x12>
 8003c80:	1c51      	adds	r1, r2, #1
 8003c82:	d103      	bne.n	8003c8c <_raise_r+0x48>
 8003c84:	2316      	movs	r3, #22
 8003c86:	3001      	adds	r0, #1
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	e7e4      	b.n	8003c56 <_raise_r+0x12>
 8003c8c:	2400      	movs	r4, #0
 8003c8e:	0028      	movs	r0, r5
 8003c90:	601c      	str	r4, [r3, #0]
 8003c92:	4790      	blx	r2
 8003c94:	0020      	movs	r0, r4
 8003c96:	e7de      	b.n	8003c56 <_raise_r+0x12>

08003c98 <raise>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <raise+0x10>)
 8003c9c:	0001      	movs	r1, r0
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	f7ff ffd0 	bl	8003c44 <_raise_r>
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000010 	.word	0x20000010

08003cac <_kill_r>:
 8003cac:	2300      	movs	r3, #0
 8003cae:	b570      	push	{r4, r5, r6, lr}
 8003cb0:	4c06      	ldr	r4, [pc, #24]	; (8003ccc <_kill_r+0x20>)
 8003cb2:	0005      	movs	r5, r0
 8003cb4:	0008      	movs	r0, r1
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	f7fd f931 	bl	8000f20 <_kill>
 8003cbe:	1c43      	adds	r3, r0, #1
 8003cc0:	d103      	bne.n	8003cca <_kill_r+0x1e>
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d000      	beq.n	8003cca <_kill_r+0x1e>
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	200001f0 	.word	0x200001f0

08003cd0 <_getpid_r>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	f7fd f91f 	bl	8000f14 <_getpid>
 8003cd6:	bd10      	pop	{r4, pc}

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
