
SolarGators_Auxiliary_SteeringWheelPROTOTYPE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003688  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800379c  0800379c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800379c  0800379c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  08003820  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003820  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf32  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000230b  00000000  00000000  0002bfce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f8d  00000000  00000000  0002fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000935b  00000000  00000000  000479a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000803da  00000000  00000000  00050d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d10da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc0  00000000  00000000  000d1158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003730 	.word	0x08003730

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003730 	.word	0x08003730

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	aux0.SetupReceive(ReceiveAndSend);
 80003fa:	4a43      	ldr	r2, [pc, #268]	; (8000508 <main+0x114>)
 80003fc:	4b43      	ldr	r3, [pc, #268]	; (800050c <main+0x118>)
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fdb7 	bl	8000f74 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f001 fa0b 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f889 	bl	8000520 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 f90f 	bl	8000630 <_ZL12MX_GPIO_Initv>
  MX_TIM6_Init();
 8000412:	f000 f8c9 	bl	80005a8 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  SUBSYSTEM_DATA_MODULE::StartCAN();
 8000416:	f000 fddf 	bl	8000fd8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  while (1)

  {

    /* USER CODE END WHILE */
	  	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 800041a:	4c3d      	ldr	r4, [pc, #244]	; (8000510 <main+0x11c>)
 800041c:	003b      	movs	r3, r7
 800041e:	250f      	movs	r5, #15
 8000420:	197a      	adds	r2, r7, r5
 8000422:	493a      	ldr	r1, [pc, #232]	; (800050c <main+0x118>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fa5c 	bl	80008e2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 800042a:	003b      	movs	r3, r7
 800042c:	0020      	movs	r0, r4
 800042e:	0019      	movs	r1, r3
 8000430:	2308      	movs	r3, #8
 8000432:	001a      	movs	r2, r3
 8000434:	f003 f920 	bl	8003678 <memcpy>
	  	if(receivedSomething)
 8000438:	197b      	adds	r3, r7, r5
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0ec      	beq.n	800041a <main+0x26>
	  	{
	  		if (auxPacket.hazardsOn)
 8000440:	4b33      	ldr	r3, [pc, #204]	; (8000510 <main+0x11c>)
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d004      	beq.n	8000452 <main+0x5e>
	  		{
	  			//Turn on Interrupt
	  			HAL_TIM_Base_Start_IT(&htim6);
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <main+0x120>)
 800044a:	0018      	movs	r0, r3
 800044c:	f002 ffa8 	bl	80033a0 <HAL_TIM_Base_Start_IT>
 8000450:	e011      	b.n	8000476 <main+0x82>
	  			//The interrupt is going to toggle the hazards
	  		}
	  		else
	  		{
	  			//Turn off the Interrupt
	  			HAL_TIM_Base_Stop_IT(&htim6);
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <main+0x120>)
 8000454:	0018      	movs	r0, r3
 8000456:	f002 ffc5 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
	  			//Turn off left and right
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	482e      	ldr	r0, [pc, #184]	; (8000518 <main+0x124>)
 8000460:	2200      	movs	r2, #0
 8000462:	0019      	movs	r1, r3
 8000464:	f002 fa4e 	bl	8002904 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	482a      	ldr	r0, [pc, #168]	; (8000518 <main+0x124>)
 800046e:	2200      	movs	r2, #0
 8000470:	0019      	movs	r1, r3
 8000472:	f002 fa47 	bl	8002904 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.headlightsOn)
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <main+0x11c>)
 8000478:	79db      	ldrb	r3, [r3, #7]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d006      	beq.n	800048c <main+0x98>
	  		{
	  			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <main+0x128>)
 8000480:	2201      	movs	r2, #1
 8000482:	2120      	movs	r1, #32
 8000484:	0018      	movs	r0, r3
 8000486:	f002 fa3d 	bl	8002904 <HAL_GPIO_WritePin>
 800048a:	e005      	b.n	8000498 <main+0xa4>
	  		}
	  		else
	  		{
	  			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <main+0x128>)
 800048e:	2200      	movs	r2, #0
 8000490:	2120      	movs	r1, #32
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fa36 	bl	8002904 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.leftOn)
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <main+0x11c>)
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00b      	beq.n	80004b8 <main+0xc4>
	  		{
	  			HAL_TIM_Base_Start_IT(&htim6);
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <main+0x120>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 ff7c 	bl	80033a0 <HAL_TIM_Base_Start_IT>
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_SET);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	481a      	ldr	r0, [pc, #104]	; (8000518 <main+0x124>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	0019      	movs	r1, r3
 80004b2:	f002 fa27 	bl	8002904 <HAL_GPIO_WritePin>
 80004b6:	e00a      	b.n	80004ce <main+0xda>
	  		}
	  		else
	  		{
	  			HAL_TIM_Base_Stop_IT(&htim6);
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <main+0x120>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 ff92 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	4814      	ldr	r0, [pc, #80]	; (8000518 <main+0x124>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0019      	movs	r1, r3
 80004ca:	f002 fa1b 	bl	8002904 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.rightOn)
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <main+0x11c>)
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d00b      	beq.n	80004ee <main+0xfa>
	  		{
	  			HAL_TIM_Base_Start_IT(&htim6);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <main+0x120>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 ff61 	bl	80033a0 <HAL_TIM_Base_Start_IT>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_SET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <main+0x124>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	0019      	movs	r1, r3
 80004e8:	f002 fa0c 	bl	8002904 <HAL_GPIO_WritePin>
 80004ec:	e795      	b.n	800041a <main+0x26>
	  		}
	  		else
	  		{
	  			HAL_TIM_Base_Stop_IT(&htim6);
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <main+0x120>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 ff77 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x124>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	0019      	movs	r1, r3
 8000500:	f002 fa00 	bl	8002904 <HAL_GPIO_WritePin>
	  	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 8000504:	e789      	b.n	800041a <main+0x26>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	080007c9 	.word	0x080007c9
 800050c:	20000098 	.word	0x20000098
 8000510:	20000090 	.word	0x20000090
 8000514:	200000e0 	.word	0x200000e0
 8000518:	48000800 	.word	0x48000800
 800051c:	48000400 	.word	0x48000400

08000520 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b093      	sub	sp, #76	; 0x4c
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	2414      	movs	r4, #20
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2334      	movs	r3, #52	; 0x34
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f003 f8aa 	bl	800368a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	0018      	movs	r0, r3
 800053a:	2310      	movs	r3, #16
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f003 f8a3 	bl	800368a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2220      	movs	r2, #32
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2201      	movs	r2, #1
 800054e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	f002 fa17 	bl	800298c <HAL_RCC_OscConfig>
 800055e:	0003      	movs	r3, r0
 8000560:	1e5a      	subs	r2, r3, #1
 8000562:	4193      	sbcs	r3, r2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 800056a:	f000 f9b5 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2207      	movs	r2, #7
 8000572:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2203      	movs	r2, #3
 8000578:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2101      	movs	r1, #1
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fd84 	bl	8003098 <HAL_RCC_ClockConfig>
 8000590:	0003      	movs	r3, r0
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	4193      	sbcs	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800059c:	f000 f99c 	bl	80008d8 <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b013      	add	sp, #76	; 0x4c
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <_ZL12MX_TIM6_Initv>:
  */


/* USER CODE BEGIN 4 */
static void MX_TIM6_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
//
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2308      	movs	r3, #8
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 f867 	bl	800368a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */
//
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <_ZL12MX_TIM6_Initv+0x80>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005c4:	22fa      	movs	r2, #250	; 0xfa
 80005c6:	01d2      	lsls	r2, r2, #7
 80005c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 750;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <_ZL12MX_TIM6_Initv+0x84>)
 80005d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 feb2 	bl	8003348 <HAL_TIM_Base_Init>
 80005e4:	0003      	movs	r3, r0
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	4193      	sbcs	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 80005f0:	f000 f972 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	003b      	movs	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	003b      	movs	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000600:	003a      	movs	r2, r7
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <_ZL12MX_TIM6_Initv+0x7c>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f002 ff96 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	0003      	movs	r3, r0
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	4193      	sbcs	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <_ZL12MX_TIM6_Initv+0x74>
  {
    Error_Handler();
 8000618:	f000 f95e 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
//
  /* USER CODE END TIM6_Init 2 */

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000e0 	.word	0x200000e0
 8000628:	40001000 	.word	0x40001000
 800062c:	000002ee 	.word	0x000002ee

08000630 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f003 f822 	bl	800368a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b5b      	ldr	r3, [pc, #364]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0309      	lsls	r1, r1, #12
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	031b      	lsls	r3, r3, #12
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b55      	ldr	r3, [pc, #340]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0289      	lsls	r1, r1, #10
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	029b      	lsls	r3, r3, #10
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	02c9      	lsls	r1, r1, #11
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <_ZL12MX_GPIO_Initv+0x188>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	02db      	lsls	r3, r3, #11
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cruise_LED_GPIO_Port, Cruise_LED_Pin, GPIO_PIN_RESET);
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f92e 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dev_LED_GPIO_Port, Dev_LED_Pin, GPIO_PIN_SET);
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 f927 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_out_GPIO_Port, LED_out_Pin, GPIO_PIN_RESET);
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	4840      	ldr	r0, [pc, #256]	; (80007bc <_ZL12MX_GPIO_Initv+0x18c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	0019      	movs	r1, r3
 80006c0:	f002 f920 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dev_Btn_Pin */
  GPIO_InitStruct.Pin = Dev_Btn_Pin;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0192      	lsls	r2, r2, #6
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a3c      	ldr	r2, [pc, #240]	; (80007c0 <_ZL12MX_GPIO_Initv+0x190>)
 80006d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Dev_Btn_GPIO_Port, &GPIO_InitStruct);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	4a38      	ldr	r2, [pc, #224]	; (80007bc <_ZL12MX_GPIO_Initv+0x18c>)
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f001 ff98 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cruise_LED_Pin */
  GPIO_InitStruct.Pin = Cruise_LED_Pin;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2203      	movs	r2, #3
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Cruise_LED_GPIO_Port, &GPIO_InitStruct);
 80006fc:	193a      	adds	r2, r7, r4
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 ff85 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Eco_in_Pin */
  GPIO_InitStruct.Pin = Eco_in_Pin;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2202      	movs	r2, #2
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <_ZL12MX_GPIO_Initv+0x190>)
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Eco_in_GPIO_Port, &GPIO_InitStruct);
 800071c:	193a      	adds	r2, r7, r4
 800071e:	2390      	movs	r3, #144	; 0x90
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f001 ff75 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dev_LED_Pin */
  GPIO_InitStruct.Pin = Dev_LED_Pin;
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2220      	movs	r2, #32
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Dev_LED_GPIO_Port, &GPIO_InitStruct);
 8000744:	000c      	movs	r4, r1
 8000746:	187a      	adds	r2, r7, r1
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 ff60 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_out_Pin */
  GPIO_InitStruct.Pin = LED_out_Pin;
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0152      	lsls	r2, r2, #5
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2201      	movs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_out_GPIO_Port, &GPIO_InitStruct);
 8000770:	000c      	movs	r4, r1
 8000772:	187b      	adds	r3, r7, r1
 8000774:	4a11      	ldr	r2, [pc, #68]	; (80007bc <_ZL12MX_GPIO_Initv+0x18c>)
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f001 ff4b 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LT_in_Pin Cruise_in_Pin CPlus_in_Pin Hazards_in_Pin
                           Regen_in_Pin */
  GPIO_InitStruct.Pin = LT_in_Pin|Cruise_in_Pin|CPlus_in_Pin|Hazards_in_Pin
 800077e:	0021      	movs	r1, r4
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22f8      	movs	r2, #248	; 0xf8
 8000784:	601a      	str	r2, [r3, #0]
                          |Regen_in_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <_ZL12MX_GPIO_Initv+0x190>)
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	187b      	adds	r3, r7, r1
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <_ZL12MX_GPIO_Initv+0x194>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f001 ff3b 	bl	8002614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2007      	movs	r0, #7
 80007a4:	f001 ff04 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007a8:	2007      	movs	r0, #7
 80007aa:	f001 ff16 	bl	80025da <HAL_NVIC_EnableIRQ>

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b009      	add	sp, #36	; 0x24
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000800 	.word	0x48000800
 80007c0:	10110000 	.word	0x10110000
 80007c4:	48000400 	.word	0x48000400

080007c8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE>:

void ReceiveAndSend(SUBSYSTEM_DATA_MODULE*)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 80007d0:	4c3b      	ldr	r4, [pc, #236]	; (80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf8>)
 80007d2:	003b      	movs	r3, r7
 80007d4:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xfc>)
 80007d6:	493c      	ldr	r1, [pc, #240]	; (80008c8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x100>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f882 	bl	80008e2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 80007de:	003b      	movs	r3, r7
 80007e0:	0020      	movs	r0, r4
 80007e2:	0019      	movs	r1, r3
 80007e4:	2308      	movs	r3, #8
 80007e6:	001a      	movs	r2, r3
 80007e8:	f002 ff46 	bl	8003678 <memcpy>
	if(receivedSomething)
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xfc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d061      	beq.n	80008b8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf0>
	{
		if (auxPacket.hazardsOn)
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf8>)
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d004      	beq.n	8000806 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x3e>
		{
			//Turn on Interrupt
			HAL_TIM_Base_Start_IT(&htim6);
 80007fc:	4b33      	ldr	r3, [pc, #204]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 fdce 	bl	80033a0 <HAL_TIM_Base_Start_IT>
 8000804:	e011      	b.n	800082a <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x62>
			//The interrupt is going to toggle the hazards
		}
		else
		{
			//Turn off the Interrupt
			HAL_TIM_Base_Stop_IT(&htim6);
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fdeb 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
			//Turn off left and right
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	482f      	ldr	r0, [pc, #188]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 8000814:	2200      	movs	r2, #0
 8000816:	0019      	movs	r1, r3
 8000818:	f002 f874 	bl	8002904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	482b      	ldr	r0, [pc, #172]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 8000822:	2200      	movs	r2, #0
 8000824:	0019      	movs	r1, r3
 8000826:	f002 f86d 	bl	8002904 <HAL_GPIO_WritePin>
		}
		if (auxPacket.headlightsOn)
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf8>)
 800082c:	79db      	ldrb	r3, [r3, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d006      	beq.n	8000840 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x78>
		{
			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x10c>)
 8000834:	2201      	movs	r2, #1
 8000836:	2120      	movs	r1, #32
 8000838:	0018      	movs	r0, r3
 800083a:	f002 f863 	bl	8002904 <HAL_GPIO_WritePin>
 800083e:	e005      	b.n	800084c <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x84>
		}
		else
		{
			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x10c>)
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f85c 	bl	8002904 <HAL_GPIO_WritePin>
		}
		if (auxPacket.leftOn)
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf8>)
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00b      	beq.n	800086c <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xa4>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 8000856:	0018      	movs	r0, r3
 8000858:	f002 fda2 	bl	80033a0 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_SET);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 8000862:	2201      	movs	r2, #1
 8000864:	0019      	movs	r1, r3
 8000866:	f002 f84d 	bl	8002904 <HAL_GPIO_WritePin>
 800086a:	e00a      	b.n	8000882 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xba>
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim6);
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fdb8 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 800087a:	2200      	movs	r2, #0
 800087c:	0019      	movs	r1, r3
 800087e:	f002 f841 	bl	8002904 <HAL_GPIO_WritePin>
		}
		if (auxPacket.rightOn)
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf8>)
 8000884:	799b      	ldrb	r3, [r3, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xda>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fd87 	bl	80033a0 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_SET);
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 8000898:	2201      	movs	r2, #1
 800089a:	0019      	movs	r1, r3
 800089c:	f002 f832 	bl	8002904 <HAL_GPIO_WritePin>
		{
			HAL_TIM_Base_Stop_IT(&htim6);
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
		}
	}
}
 80008a0:	e00a      	b.n	80008b8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf0>
			HAL_TIM_Base_Stop_IT(&htim6);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x104>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fd9d 	bl	80033e4 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	0019      	movs	r1, r3
 80008b4:	f002 f826 	bl	8002904 <HAL_GPIO_WritePin>
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b005      	add	sp, #20
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	20000090 	.word	0x20000090
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	20000098 	.word	0x20000098
 80008cc:	200000e0 	.word	0x200000e0
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000400 	.word	0x48000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 80008e2:	b590      	push	{r4, r7, lr}
 80008e4:	b089      	sub	sp, #36	; 0x24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6178      	str	r0, [r7, #20]
 80008ea:	6139      	str	r1, [r7, #16]
 80008ec:	60fa      	str	r2, [r7, #12]
	{
		CHILD_DATA returnData;
	    if(success)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d01a      	beq.n	800092a <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	3312      	adds	r3, #18
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 f819 	bl	8000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000902:	0003      	movs	r3, r0
 8000904:	61fb      	str	r3, [r7, #28]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00d      	beq.n	800092a <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 800090e:	697c      	ldr	r4, [r7, #20]
 8000910:	003b      	movs	r3, r7
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f978 	bl	8000c0c <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>
 800091c:	003b      	movs	r3, r7
 800091e:	0020      	movs	r0, r4
 8000920:	0019      	movs	r1, r3
 8000922:	2308      	movs	r3, #8
 8000924:	001a      	movs	r2, r3
 8000926:	f002 fea7 	bl	8003678 <memcpy>
	        }
	    }
	    return returnData;
 800092a:	46c0      	nop			; (mov r8, r8)
	}
 800092c:	6978      	ldr	r0, [r7, #20]
 800092e:	46bd      	mov	sp, r7
 8000930:	b009      	add	sp, #36	; 0x24
 8000932:	bd90      	pop	{r4, r7, pc}

08000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 800093e:	230e      	movs	r3, #14
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	2200      	movs	r2, #0
 8000944:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	8b5a      	ldrh	r2, [r3, #26]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	8b1b      	ldrh	r3, [r3, #24]
 800094e:	429a      	cmp	r2, r3
 8000950:	d10a      	bne.n	8000968 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7f1b      	ldrb	r3, [r3, #28]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d022      	beq.n	80009a6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
            if(success)
 8000966:	e01e      	b.n	80009a6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000974:	230e      	movs	r3, #14
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	8b52      	ldrh	r2, [r2, #26]
 800097c:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	8b5b      	ldrh	r3, [r3, #26]
 8000982:	3301      	adds	r3, #1
 8000984:	2103      	movs	r1, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fd2e 	bl	80003e8 <__aeabi_idivmod>
 800098c:	000b      	movs	r3, r1
 800098e:	b29a      	uxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8b5a      	ldrh	r2, [r3, #26]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	8b1b      	ldrh	r3, [r3, #24]
 800099c:	429a      	cmp	r2, r3
 800099e:	d102      	bne.n	80009a6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80009a6:	230e      	movs	r3, #14
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	18d3      	adds	r3, r2, r3
    }
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_Z41__static_initialization_and_destruction_0ii>:
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d107      	bne.n	80009dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d103      	bne.n	80009dc <_Z41__static_initialization_and_destruction_0ii+0x20>
AUX_MESSAGE_0 aux0;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f970 	bl	8000cbc <_ZN13AUX_MESSAGE_0C1Ev>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0000ffff 	.word	0x0000ffff
 80009e8:	20000098 	.word	0x20000098

080009ec <_GLOBAL__sub_I_auxPacket>:
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <_GLOBAL__sub_I_auxPacket+0x14>)
 80009f2:	0019      	movs	r1, r3
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff ffe1 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	0000ffff 	.word	0x0000ffff

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	699a      	ldr	r2, [r3, #24]
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	619a      	str	r2, [r3, #24]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0549      	lsls	r1, r1, #21
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	61da      	str	r2, [r3, #28]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_MspInit+0x44>)
 8000a32:	69da      	ldr	r2, [r3, #28]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	055b      	lsls	r3, r3, #21
 8000a38:	4013      	ands	r3, r2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <HAL_TIM_Base_MspInit+0x34>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a60:	69da      	ldr	r2, [r3, #28]
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a64:	2110      	movs	r1, #16
 8000a66:	430a      	orrs	r2, r1
 8000a68:	61da      	str	r2, [r3, #28]
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	2210      	movs	r2, #16
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b004      	add	sp, #16
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40001000 	.word	0x40001000
 8000a84:	40021000 	.word	0x40021000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 fefe 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000abe:	2010      	movs	r0, #16
 8000ac0:	f001 ff3e 	bl	8002940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	f001 ff3b 	bl	8002940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000aca:	2040      	movs	r0, #64	; 0x40
 8000acc:	f001 ff38 	bl	8002940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ad0:	2080      	movs	r0, #128	; 0x80
 8000ad2:	f001 ff35 	bl	8002940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 ff30 	bl	8002940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
	return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_kill>:

int _kill(int pid, int sig)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000afc:	f002 fd92 	bl	8003624 <__errno>
 8000b00:	0003      	movs	r3, r0
 8000b02:	2216      	movs	r2, #22
 8000b04:	601a      	str	r2, [r3, #0]
	return -1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	425b      	negs	r3, r3
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_exit>:

void _exit (int status)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	425a      	negs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ffe5 	bl	8000af2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b28:	e7fe      	b.n	8000b28 <_exit+0x16>

08000b2a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	2408      	movs	r4, #8
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	6018      	str	r0, [r3, #0]
 8000b40:	6059      	str	r1, [r3, #4]
 8000b42:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	79db      	ldrb	r3, [r3, #7]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25a      	sxtb	r2, r3
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	795b      	ldrb	r3, [r3, #5]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	799b      	ldrb	r3, [r3, #6]
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	015b      	lsls	r3, r3, #5
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	789b      	ldrb	r3, [r3, #2]
 8000bde:	019b      	lsls	r3, r3, #6
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	78db      	ldrb	r3, [r3, #3]
 8000bf6:	01db      	lsls	r3, r3, #7
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	701a      	strb	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b005      	add	sp, #20
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>:

AUX_MESSAGE_0_DATA_PACKET AUX_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	assert_param(input != nullptr);

	AUX_MESSAGE_0_DATA_PACKET output;
	output.hazardsOn = input[0] & (1 << 0);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	4193      	sbcs	r3, r2
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	711a      	strb	r2, [r3, #4]
	output.headlightsOn = input[0] & (1 << 1);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2302      	movs	r3, #2
 8000c32:	4013      	ands	r3, r2
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	4193      	sbcs	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	71da      	strb	r2, [r3, #7]
	output.leftOn = input[0] & (1 << 2);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	001a      	movs	r2, r3
 8000c44:	2304      	movs	r3, #4
 8000c46:	4013      	ands	r3, r2
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	4193      	sbcs	r3, r2
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	715a      	strb	r2, [r3, #5]
	output.rightOn = input[0] & (1 << 3);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	001a      	movs	r2, r3
 8000c58:	2308      	movs	r3, #8
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4193      	sbcs	r3, r2
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	719a      	strb	r2, [r3, #6]
	output.cplusOn = input[0] & (1 << 4);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	4013      	ands	r3, r2
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	4193      	sbcs	r3, r2
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	701a      	strb	r2, [r3, #0]
	output.cminusOn = input[0] & (1 << 5);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	001a      	movs	r2, r3
 8000c80:	2320      	movs	r3, #32
 8000c82:	4013      	ands	r3, r2
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	4193      	sbcs	r3, r2
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	705a      	strb	r2, [r3, #1]
	output.hornOn = input[0] & (1 << 6);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001a      	movs	r2, r3
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	4013      	ands	r3, r2
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	709a      	strb	r2, [r3, #2]
	output.regenOn = input[0] & (1 << 7);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	09db      	lsrs	r3, r3, #7
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	70da      	strb	r2, [r3, #3]

	return output;
 8000cb2:	46c0      	nop			; (mov r8, r8)
}
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZN13AUX_MESSAGE_0C1Ev>:

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f000 f80c 	bl	8000cf0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
{}
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	000003ff 	.word	0x000003ff
 8000cec:	08003780 	.word	0x08003780

08000cf0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	1c0a      	adds	r2, r1, #0
 8000d04:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	781c      	ldrb	r4, [r3, #0]
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	2324      	movs	r3, #36	; 0x24
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	0023      	movs	r3, r4
 8000d24:	f000 f8da 	bl	8000edc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]
		{}
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b005      	add	sp, #20
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	0800378c 	.word	0x0800378c

08000d3c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3309      	adds	r3, #9
 8000d48:	001c      	movs	r4, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2239      	movs	r2, #57	; 0x39
 8000d4e:	5c99      	ldrb	r1, [r3, r2]
 8000d50:	1898      	adds	r0, r3, r2
 8000d52:	7840      	ldrb	r0, [r0, #1]
 8000d54:	0200      	lsls	r0, r0, #8
 8000d56:	4301      	orrs	r1, r0
 8000d58:	1898      	adds	r0, r3, r2
 8000d5a:	7880      	ldrb	r0, [r0, #2]
 8000d5c:	0400      	lsls	r0, r0, #16
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	1898      	adds	r0, r3, r2
 8000d62:	78c0      	ldrb	r0, [r0, #3]
 8000d64:	0600      	lsls	r0, r0, #24
 8000d66:	4301      	orrs	r1, r0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	0008      	movs	r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	791a      	ldrb	r2, [r3, #4]
 8000d70:	7959      	ldrb	r1, [r3, #5]
 8000d72:	0209      	lsls	r1, r1, #8
 8000d74:	430a      	orrs	r2, r1
 8000d76:	7999      	ldrb	r1, [r3, #6]
 8000d78:	0409      	lsls	r1, r1, #16
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	79db      	ldrb	r3, [r3, #7]
 8000d7e:	061b      	lsls	r3, r3, #24
 8000d80:	4313      	orrs	r3, r2
 8000d82:	2100      	movs	r1, #0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0022      	movs	r2, r4
 8000d88:	f7ff fed4 	bl	8000b34 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b003      	add	sp, #12
 8000d92:	bd90      	pop	{r4, r7, pc}

08000d94 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08d      	sub	sp, #52	; 0x34
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 f8f3 	bl	8001f8c <HAL_CAN_GetRxFifoFillLevel>
 8000da6:	0003      	movs	r3, r0
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	4193      	sbcs	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02e      	beq.n	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8000db2:	2308      	movs	r3, #8
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2410      	movs	r4, #16
 8000db8:	193a      	adds	r2, r7, r4
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f000 ffc9 	bl	8001d54 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000dca:	2310      	movs	r3, #16
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	e002      	b.n	8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 f8b9 	bl	8000f50 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000dde:	0003      	movs	r3, r0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0d9      	beq.n	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	7a1b      	ldrb	r3, [r3, #8]
 8000dec:	001a      	movs	r2, r3
 8000dee:	2310      	movs	r3, #16
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d1d1      	bne.n	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000df8:	2308      	movs	r3, #8
 8000dfa:	18fa      	adds	r2, r7, r3
 8000dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 f94b 	bl	800109c <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 f8d3 	bl	8000fb4 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000e0e:	e7c5      	b.n	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b00d      	add	sp, #52	; 0x34
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <CEC_CAN_IRQHandler+0x14>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f001 f909 	bl	8002036 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000198 	.word	0x20000198

08000e30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	2314      	movs	r3, #20
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	2314      	movs	r3, #20
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f002 fc21 	bl	800368a <memset>
  if(hcan->Instance==CAN)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_CAN_MspInit+0xa4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d13b      	bne.n	8000eca <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0489      	lsls	r1, r1, #18
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	61da      	str	r2, [r3, #28]
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	049b      	lsls	r3, r3, #18
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0289      	lsls	r1, r1, #10
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_CAN_MspInit+0xa8>)
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e8a:	2114      	movs	r1, #20
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	22c0      	movs	r2, #192	; 0xc0
 8000e90:	0152      	lsls	r2, r2, #5
 8000e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2202      	movs	r2, #2
 8000e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	187a      	adds	r2, r7, r1
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fbad 	bl	8002614 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201e      	movs	r0, #30
 8000ec0:	f001 fb76 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000ec4:	201e      	movs	r0, #30
 8000ec6:	f001 fb88 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b00a      	add	sp, #40	; 0x28
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40006400 	.word	0x40006400
 8000ed8:	40021000 	.word	0x40021000

08000edc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	1dbb      	adds	r3, r7, #6
 8000eee:	1c0a      	adds	r2, r1, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1dfa      	adds	r2, r7, #7
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	721a      	strb	r2, [r3, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3312      	adds	r3, #18
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f8d9 	bl	80010c2 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1dba      	adds	r2, r7, #6
 8000f14:	2130      	movs	r1, #48	; 0x30
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	545a      	strb	r2, [r3, r1]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2218      	movs	r2, #24
 8000f1e:	18ba      	adds	r2, r7, r2
 8000f20:	2131      	movs	r1, #49	; 0x31
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	545a      	strb	r2, [r3, r1]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	221c      	movs	r2, #28
 8000f2a:	18ba      	adds	r2, r7, r2
 8000f2c:	2132      	movs	r1, #50	; 0x32
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	545a      	strb	r2, [r3, r1]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2238      	movs	r2, #56	; 0x38
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]
{}
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	08003798 	.word	0x08003798

08000f50 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f97d 	bl	800125e <_ZN14RX_BINARY_TREE11FindElementEm>
 8000f64:	0003      	movs	r3, r0
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	20000120 	.word	0x20000120

08000f74 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2238      	movs	r2, #56	; 0x38
 8000f88:	5c9b      	ldrb	r3, [r3, r2]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4053      	eors	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x34>
    {
        SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x3c>)
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f944 	bl	8001228 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
        //TODO: Fix We are currently receiving even if add Node fails.
        isReceiving = true;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2238      	movs	r2, #56	; 0x38
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]
    } 
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000120 	.word	0x20000120

08000fb4 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	0010      	movs	r0, r2
 8000fcc:	4798      	blx	r3
    }
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8000fe2:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	605a      	str	r2, [r3, #4]
	//hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	05d2      	lsls	r2, r2, #23
 8000ff0:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ffa:	22c0      	movs	r2, #192	; 0xc0
 8000ffc:	0312      	lsls	r2, r2, #12
 8000ffe:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	0352      	lsls	r2, r2, #13
 8001006:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800100a:	2200      	movs	r2, #0
 800100c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800101c:	2200      	movs	r2, #0
 800101e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fc5a 	bl	80018e8 <HAL_CAN_Init>
 8001034:	0003      	movs	r3, r0
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	4193      	sbcs	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6c>
	{
		Error_Handler();
 8001040:	f7ff fc4a 	bl	80008d8 <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001044:	003b      	movs	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 800104a:	003b      	movs	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 800105c:	003b      	movs	r3, r7
 800105e:	2201      	movs	r2, #1
 8001060:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8001068:	003b      	movs	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800106e:	003a      	movs	r2, r7
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f000 fd35 	bl	8001ae4 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800107c:	2102      	movs	r1, #2
 800107e:	0018      	movs	r0, r3
 8001080:	f000 ffaf 	bl	8001fe2 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fe1e 	bl	8001cc8 <HAL_CAN_Start>
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b00a      	add	sp, #40	; 0x28
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000198 	.word	0x20000198
 8001098:	40006400 	.word	0x40006400

0800109c <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3312      	adds	r3, #18
 80010aa:	240f      	movs	r4, #15
 80010ac:	193a      	adds	r2, r7, r4
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 f818 	bl	80010e6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	781b      	ldrb	r3, [r3, #0]
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b005      	add	sp, #20
 80010c0:	bd90      	pop	{r4, r7, pc}

080010c2 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	831a      	strh	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	835a      	strh	r2, [r3, #26]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	771a      	strb	r2, [r3, #28]
    {}
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8b5a      	ldrh	r2, [r3, #26]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8b1b      	ldrh	r3, [r3, #24]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d10d      	bne.n	800111a <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	7f1b      	ldrb	r3, [r3, #28]
 8001102:	2201      	movs	r2, #1
 8001104:	4053      	eors	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d025      	beq.n	800115e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
            if(success)
 8001118:	e021      	b.n	800115e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8b19      	ldrh	r1, [r3, #24]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	0018      	movs	r0, r3
 8001130:	f000 f819 	bl	8001166 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8b1b      	ldrh	r3, [r3, #24]
 8001138:	3301      	adds	r3, #1
 800113a:	2103      	movs	r1, #3
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff f953 	bl	80003e8 <__aeabi_idivmod>
 8001142:	000b      	movs	r3, r1
 8001144:	b29a      	uxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8b1a      	ldrh	r2, [r3, #24]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8b5b      	ldrh	r3, [r3, #26]
 8001152:	429a      	cmp	r2, r3
 8001154:	d103      	bne.n	800115e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
    }
 800115c:	e7ff      	b.n	800115e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001166:	b590      	push	{r4, r7, lr}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	230a      	movs	r3, #10
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	1c0a      	adds	r2, r1, #0
 8001176:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8001178:	2316      	movs	r3, #22
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2200      	movs	r2, #0
 800117e:	801a      	strh	r2, [r3, #0]
 8001180:	2316      	movs	r3, #22
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d815      	bhi.n	80011b6 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 800118a:	2416      	movs	r4, #22
 800118c:	193b      	adds	r3, r7, r4
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	18d1      	adds	r1, r2, r3
 8001194:	230a      	movs	r3, #10
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	193b      	adds	r3, r7, r4
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	7808      	ldrb	r0, [r1, #0]
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	00d2      	lsls	r2, r2, #3
 80011a4:	188a      	adds	r2, r1, r2
 80011a6:	1c01      	adds	r1, r0, #0
 80011a8:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	881a      	ldrh	r2, [r3, #0]
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	3201      	adds	r2, #1
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	e7e4      	b.n	8001180 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b007      	add	sp, #28
 80011bc:	bd90      	pop	{r4, r7, pc}
	...

080011c0 <_Z41__static_initialization_and_destruction_0ii>:
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d107      	bne.n	80011e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d103      	bne.n	80011e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 f814 	bl	8001208 <_ZN14RX_BINARY_TREEC1Ev>
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0000ffff 	.word	0x0000ffff
 80011ec:	20000120 	.word	0x20000120

080011f0 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80011f6:	0019      	movs	r1, r3
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ffe1 	bl	80011c0 <_Z41__static_initialization_and_destruction_0ii>
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	0000ffff 	.word	0x0000ffff

08001208 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	671a      	str	r2, [r3, #112]	; 0x70
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2274      	movs	r2, #116	; 0x74
 800121a:	2100      	movs	r1, #0
 800121c:	5299      	strh	r1, [r3, r2]
{}
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

void RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2274      	movs	r2, #116	; 0x74
 8001236:	5a9b      	ldrh	r3, [r3, r2]
 8001238:	2b06      	cmp	r3, #6
 800123a:	d80c      	bhi.n	8001256 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
    {
        root = insert(root,new_element);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f9a6 	bl	800159c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001250:	0002      	movs	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	671a      	str	r2, [r3, #112]	; 0x70
    }
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f000 f80d 	bl	8001290 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001276:	0003      	movs	r3, r0
 8001278:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001280:	2300      	movs	r3, #0
 8001282:	e001      	b.n	8001288 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	e034      	b.n	8001310 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 f88b 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80012b2:	0002      	movs	r2, r0
 80012b4:	2301      	movs	r3, #1
 80012b6:	1c19      	adds	r1, r3, #0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	db01      	blt.n	80012c2 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 80012be:	2300      	movs	r3, #0
 80012c0:	1c19      	adds	r1, r3, #0
 80012c2:	b2cb      	uxtb	r3, r1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ffdd 	bl	8001290 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 80012d6:	0003      	movs	r3, r0
 80012d8:	e01a      	b.n	8001310 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 f871 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80012e6:	0002      	movs	r2, r0
 80012e8:	2301      	movs	r3, #1
 80012ea:	1c19      	adds	r1, r3, #0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dc01      	bgt.n	80012f6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 80012f2:	2300      	movs	r3, #0
 80012f4:	1c19      	adds	r1, r3, #0
 80012f6:	b2cb      	uxtb	r3, r1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	6899      	ldr	r1, [r3, #8]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ffc3 	bl	8001290 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 800130a:	0003      	movs	r3, r0
 800130c:	e000      	b.n	8001310 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 800130e:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2274      	movs	r2, #116	; 0x74
 8001326:	5a9b      	ldrh	r3, [r3, r2]
 8001328:	001a      	movs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2274      	movs	r2, #116	; 0x74
 8001336:	5a9b      	ldrh	r3, [r3, r2]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	3304      	adds	r3, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2274      	movs	r2, #116	; 0x74
 8001348:	5a9b      	ldrh	r3, [r3, r2]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	3308      	adds	r3, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2274      	movs	r2, #116	; 0x74
 800135a:	5a9b      	ldrh	r3, [r3, r2]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	330c      	adds	r3, #12
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2274      	movs	r2, #116	; 0x74
 800136c:	5a9b      	ldrh	r3, [r3, r2]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	b290      	uxth	r0, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	2174      	movs	r1, #116	; 0x74
 8001376:	5250      	strh	r0, [r2, r1]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	18d3      	adds	r3, r2, r3
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d901      	bls.n	800139e <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	e000      	b.n	80013a0 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 800139e:	687b      	ldr	r3, [r7, #4]
}  
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 80013b8:	2300      	movs	r3, #0
 80013ba:	e001      	b.n	80013c0 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	7b1b      	ldrb	r3, [r3, #12]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80013d8:	2301      	movs	r3, #1
 80013da:	425b      	negs	r3, r3
 80013dc:	e009      	b.n	80013f2 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	e002      	b.n	80013f2 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 800140a:	2301      	movs	r3, #1
 800140c:	425b      	negs	r3, r3
 800140e:	e001      	b.n	8001414 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff ffae 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800144c:	0003      	movs	r3, r0
 800144e:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ffa5 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800145e:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001460:	001a      	movs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	0021      	movs	r1, r4
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff ff8d 	bl	8001386 <_ZN14RX_BINARY_TREE3maxEmm>
 800146c:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	0011      	movs	r1, r2
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff91 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001486:	0003      	movs	r3, r0
 8001488:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff88 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001498:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 800149a:	001a      	movs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0021      	movs	r1, r4
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff70 	bl	8001386 <_ZN14RX_BINARY_TREE3maxEmm>
 80014a6:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 80014b2:	68fb      	ldr	r3, [r7, #12]
} 
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b005      	add	sp, #20
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0011      	movs	r1, r2
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff ff5e 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80014ec:	0003      	movs	r3, r0
 80014ee:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0011      	movs	r1, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff ff55 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80014fe:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8001500:	001a      	movs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0021      	movs	r1, r4
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff ff3d 	bl	8001386 <_ZN14RX_BINARY_TREE3maxEmm>
 800150c:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0011      	movs	r1, r2
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff41 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001526:	0003      	movs	r3, r0
 8001528:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	0011      	movs	r1, r2
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff ff38 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001538:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 800153a:	001a      	movs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	0021      	movs	r1, r4
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff20 	bl	8001386 <_ZN14RX_BINARY_TREE3maxEmm>
 8001546:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001552:	68fb      	ldr	r3, [r7, #12]
}  
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b005      	add	sp, #20
 800155a:	bd90      	pop	{r4, r7, pc}

0800155c <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 800156c:	2300      	movs	r3, #0
 800156e:	e011      	b.n	8001594 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0011      	movs	r1, r2
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ff15 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800157e:	0003      	movs	r3, r0
 8001580:	001c      	movs	r4, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0011      	movs	r1, r2
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff ff0c 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001590:	0003      	movs	r3, r0
 8001592:	1ae3      	subs	r3, r4, r3
}  
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b003      	add	sp, #12
 800159a:	bd90      	pop	{r4, r7, pc}

0800159c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff feaf 	bl	8001318 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 80015ba:	0003      	movs	r3, r0
 80015bc:	e101      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ff18 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80015ca:	0004      	movs	r4, r0
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff fef8 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80015d8:	0003      	movs	r3, r0
 80015da:	2201      	movs	r2, #1
 80015dc:	429c      	cmp	r4, r3
 80015de:	db01      	blt.n	80015e4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 80015e0:	2300      	movs	r3, #0
 80015e2:	1c1a      	adds	r2, r3, #0
 80015e4:	b2d3      	uxtb	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff ffd2 	bl	800159c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80015f8:	0002      	movs	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	e022      	b.n	8001646 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fef7 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800160c:	0004      	movs	r4, r0
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fed7 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800161a:	0003      	movs	r3, r0
 800161c:	2201      	movs	r2, #1
 800161e:	429c      	cmp	r4, r3
 8001620:	dc01      	bgt.n	8001626 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 8001622:	2300      	movs	r3, #0
 8001624:	1c1a      	adds	r2, r3, #0
 8001626:	b2d3      	uxtb	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ffb1 	bl	800159c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 800163a:	0002      	movs	r2, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e001      	b.n	8001646 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	e0bd      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff feaa 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001654:	0003      	movs	r3, r0
 8001656:	001c      	movs	r4, r3
                        height(node->right));  
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fea1 	bl	80013a8 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001666:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 8001668:	001a      	movs	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0021      	movs	r1, r4
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fe89 	bl	8001386 <_ZN14RX_BINARY_TREE3maxEmm>
 8001674:	0003      	movs	r3, r0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ff68 	bl	800155c <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 800168c:	0003      	movs	r3, r0
 800168e:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b01      	cmp	r3, #1
 8001694:	dd12      	ble.n	80016bc <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff feac 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016a2:	0004      	movs	r4, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fe8b 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016b2:	0003      	movs	r3, r0
 80016b4:	429c      	cmp	r4, r3
 80016b6:	da01      	bge.n	80016bc <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	0011      	movs	r1, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fea7 	bl	800141c <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80016ce:	0003      	movs	r3, r0
 80016d0:	e077      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	da12      	bge.n	80016fe <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0011      	movs	r1, r2
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fe8b 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016e4:	0004      	movs	r4, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff fe6a 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016f4:	0003      	movs	r3, r0
 80016f6:	429c      	cmp	r4, r3
 80016f8:	dd01      	ble.n	80016fe <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0011      	movs	r1, r2
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fed6 	bl	80014bc <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001710:	0003      	movs	r3, r0
 8001712:	e056      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b01      	cmp	r3, #1
 8001718:	dd12      	ble.n	8001740 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	0011      	movs	r1, r2
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fe6a 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001726:	0004      	movs	r4, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff fe49 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001736:	0003      	movs	r3, r0
 8001738:	429c      	cmp	r4, r3
 800173a:	dd01      	ble.n	8001740 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8001740:	2300      	movs	r3, #0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d011      	beq.n	800176a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff feb4 	bl	80014bc <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001754:	0002      	movs	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fe5b 	bl	800141c <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8001766:	0003      	movs	r3, r0
 8001768:	e02b      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	da12      	bge.n	8001796 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fe3f 	bl	80013fa <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800177c:	0004      	movs	r4, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	0011      	movs	r1, r2
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fe1e 	bl	80013c8 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800178c:	0003      	movs	r3, r0
 800178e:	429c      	cmp	r4, r3
 8001790:	da01      	bge.n	8001796 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8001796:	2300      	movs	r3, #0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d011      	beq.n	80017c0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff fe39 	bl	800141c <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fe80 	bl	80014bc <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80017bc:	0003      	movs	r3, r0
 80017be:	e000      	b.n	80017c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 80017c0:	68bb      	ldr	r3, [r7, #8]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b007      	add	sp, #28
 80017c8:	bd90      	pop	{r4, r7, pc}
	...

080017cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e8:	4c0b      	ldr	r4, [pc, #44]	; (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017f6:	f7ff f998 	bl	8000b2a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017fa:	f001 ff19 	bl	8003630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7fe fdf9 	bl	80003f4 <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
  ldr   r0, =_estack
 8001804:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001810:	080037ac 	.word	0x080037ac
  ldr r2, =_sbss
 8001814:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001818:	200001c8 	.word	0x200001c8

0800181c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_COMP_IRQHandler>
	...

08001820 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_Init+0x24>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_Init+0x24>)
 800182a:	2110      	movs	r1, #16
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f809 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001836:	f7ff f8e5 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_InitTick+0x5c>)
 8001852:	681c      	ldr	r4, [r3, #0]
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	0019      	movs	r1, r3
 800185a:	23fa      	movs	r3, #250	; 0xfa
 800185c:	0098      	lsls	r0, r3, #2
 800185e:	f7fe fc53 	bl	8000108 <__udivsi3>
 8001862:	0003      	movs	r3, r0
 8001864:	0019      	movs	r1, r3
 8001866:	0020      	movs	r0, r4
 8001868:	f7fe fc4e 	bl	8000108 <__udivsi3>
 800186c:	0003      	movs	r3, r0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fec3 	bl	80025fa <HAL_SYSTICK_Config>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e00f      	b.n	800189c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d80b      	bhi.n	800189a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	2301      	movs	r3, #1
 8001886:	425b      	negs	r3, r3
 8001888:	2200      	movs	r2, #0
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fe90 	bl	80025b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_InitTick+0x64>)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b003      	add	sp, #12
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	001a      	movs	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	18d2      	adds	r2, r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	601a      	str	r2, [r3, #0]
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	20000008 	.word	0x20000008
 80018d0:	200001c0 	.word	0x200001c0

080018d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	200001c0 	.word	0x200001c0

080018e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0f0      	b.n	8001adc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2220      	movs	r2, #32
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fa91 	bl	8000e30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2102      	movs	r1, #2
 800191a:	438a      	bics	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191e:	f7ff ffd9 	bl	80018d4 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001926:	e013      	b.n	8001950 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001928:	f7ff ffd4 	bl	80018d4 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b0a      	cmp	r3, #10
 8001934:	d90c      	bls.n	8001950 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	0292      	lsls	r2, r2, #10
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	2105      	movs	r1, #5
 800194a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0c5      	b.n	8001adc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d1e5      	bne.n	8001928 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196c:	f7ff ffb2 	bl	80018d4 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001974:	e013      	b.n	800199e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001976:	f7ff ffad 	bl	80018d4 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b0a      	cmp	r3, #10
 8001982:	d90c      	bls.n	800199e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0292      	lsls	r2, r2, #10
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	2105      	movs	r1, #5
 8001998:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e09e      	b.n	8001adc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0e5      	beq.n	8001976 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	438a      	bics	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e5b      	ldrb	r3, [r3, #25]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2140      	movs	r1, #64	; 0x40
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2140      	movs	r1, #64	; 0x40
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e9b      	ldrb	r3, [r3, #26]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2120      	movs	r1, #32
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2120      	movs	r1, #32
 8001a24:	438a      	bics	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7edb      	ldrb	r3, [r3, #27]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7f1b      	ldrb	r3, [r3, #28]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2108      	movs	r1, #8
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2108      	movs	r1, #8
 8001a78:	438a      	bics	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f5b      	ldrb	r3, [r3, #29]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d108      	bne.n	8001a96 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2104      	movs	r1, #4
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e007      	b.n	8001aa6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	0011      	movs	r1, r2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	1e5a      	subs	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001af4:	2013      	movs	r0, #19
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	2120      	movs	r1, #32
 8001afc:	5c52      	ldrb	r2, [r2, r1]
 8001afe:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d005      	beq.n	8001b14 <HAL_CAN_ConfigFilter+0x30>
 8001b08:	2313      	movs	r3, #19
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d000      	beq.n	8001b14 <HAL_CAN_ConfigFilter+0x30>
 8001b12:	e0cd      	b.n	8001cb0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	58d3      	ldr	r3, [r2, r3]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	221f      	movs	r2, #31
 8001b30:	4013      	ands	r3, r2
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	0013      	movs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	2387      	movs	r3, #135	; 0x87
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	58d3      	ldr	r3, [r2, r3]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	43d2      	mvns	r2, r2
 8001b46:	401a      	ands	r2, r3
 8001b48:	0011      	movs	r1, r2
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	2387      	movs	r3, #135	; 0x87
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d129      	bne.n	8001bae <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	2383      	movs	r3, #131	; 0x83
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	58d3      	ldr	r3, [r2, r3]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	43d2      	mvns	r2, r2
 8001b66:	401a      	ands	r2, r3
 8001b68:	0011      	movs	r1, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	2383      	movs	r3, #131	; 0x83
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b84:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3248      	adds	r2, #72	; 0x48
 8001b8a:	00d2      	lsls	r2, r2, #3
 8001b8c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba2:	6979      	ldr	r1, [r7, #20]
 8001ba4:	3348      	adds	r3, #72	; 0x48
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	18cb      	adds	r3, r1, r3
 8001baa:	3304      	adds	r3, #4
 8001bac:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d128      	bne.n	8001c08 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	2383      	movs	r3, #131	; 0x83
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	58d2      	ldr	r2, [r2, r3]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	2383      	movs	r3, #131	; 0x83
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bde:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3248      	adds	r2, #72	; 0x48
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bfa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bfc:	6979      	ldr	r1, [r7, #20]
 8001bfe:	3348      	adds	r3, #72	; 0x48
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	18cb      	adds	r3, r1, r3
 8001c04:	3304      	adds	r3, #4
 8001c06:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10c      	bne.n	8001c2a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	2381      	movs	r3, #129	; 0x81
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	58d3      	ldr	r3, [r2, r3]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	43d2      	mvns	r2, r2
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	0011      	movs	r1, r2
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	2381      	movs	r3, #129	; 0x81
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	50d1      	str	r1, [r2, r3]
 8001c28:	e00a      	b.n	8001c40 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	2381      	movs	r3, #129	; 0x81
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	58d2      	ldr	r2, [r2, r3]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	0011      	movs	r1, r2
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	2381      	movs	r3, #129	; 0x81
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	2385      	movs	r3, #133	; 0x85
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	58d3      	ldr	r3, [r2, r3]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	43d2      	mvns	r2, r2
 8001c54:	401a      	ands	r2, r3
 8001c56:	0011      	movs	r1, r2
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	2385      	movs	r3, #133	; 0x85
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	50d1      	str	r1, [r2, r3]
 8001c60:	e00a      	b.n	8001c78 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	2385      	movs	r3, #133	; 0x85
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	58d2      	ldr	r2, [r2, r3]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	0011      	movs	r1, r2
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	2385      	movs	r3, #133	; 0x85
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10a      	bne.n	8001c96 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	2387      	movs	r3, #135	; 0x87
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	58d2      	ldr	r2, [r2, r3]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	0011      	movs	r1, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	2387      	movs	r3, #135	; 0x87
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	58d3      	ldr	r3, [r2, r3]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	02d2      	lsls	r2, r2, #11
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b006      	add	sp, #24
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d12f      	bne.n	8001d3c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fdee 	bl	80018d4 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cfc:	e013      	b.n	8001d26 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cfe:	f7ff fde9 	bl	80018d4 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b0a      	cmp	r3, #10
 8001d0a:	d90c      	bls.n	8001d26 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	0292      	lsls	r2, r2, #10
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	2105      	movs	r1, #5
 8001d20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e012      	b.n	8001d4c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1e5      	bne.n	8001cfe <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e007      	b.n	8001d4c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	0312      	lsls	r2, r2, #12
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
  }
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b004      	add	sp, #16
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d62:	2017      	movs	r0, #23
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	2120      	movs	r1, #32
 8001d6a:	5c52      	ldrb	r2, [r2, r1]
 8001d6c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_CAN_GetRxMessage+0x2e>
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d000      	beq.n	8001d82 <HAL_CAN_GetRxMessage+0x2e>
 8001d80:	e0f8      	b.n	8001f74 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10e      	bne.n	8001da6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4013      	ands	r3, r2
 8001d92:	d117      	bne.n	8001dc4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0392      	lsls	r2, r2, #14
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0ee      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0392      	lsls	r2, r2, #14
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0df      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	321b      	adds	r2, #27
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	58d3      	ldr	r3, [r2, r3]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	321b      	adds	r2, #27
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	58d3      	ldr	r3, [r2, r3]
 8001dec:	0d5b      	lsrs	r3, r3, #21
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	0d5a      	lsrs	r2, r3, #21
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e00a      	b.n	8001e0e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	321b      	adds	r2, #27
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	58d3      	ldr	r3, [r2, r3]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	321b      	adds	r2, #27
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	58d3      	ldr	r3, [r2, r3]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	331b      	adds	r3, #27
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	3304      	adds	r3, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	220f      	movs	r2, #15
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	331b      	adds	r3, #27
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	331b      	adds	r3, #27
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	3304      	adds	r3, #4
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	0c1a      	lsrs	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	23dc      	movs	r3, #220	; 0xdc
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	188a      	adds	r2, r1, r2
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	23dc      	movs	r3, #220	; 0xdc
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	188a      	adds	r2, r1, r2
 8001e94:	18d3      	adds	r3, r2, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0a1a      	lsrs	r2, r3, #8
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	23dc      	movs	r3, #220	; 0xdc
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	188a      	adds	r2, r1, r2
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0c1a      	lsrs	r2, r3, #16
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	23dc      	movs	r3, #220	; 0xdc
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	188a      	adds	r2, r1, r2
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e1a      	lsrs	r2, r3, #24
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	23de      	movs	r3, #222	; 0xde
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	188a      	adds	r2, r1, r2
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	23de      	movs	r3, #222	; 0xde
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	188a      	adds	r2, r1, r2
 8001f02:	18d3      	adds	r3, r2, r3
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0a1a      	lsrs	r2, r3, #8
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	23de      	movs	r3, #222	; 0xde
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	188a      	adds	r2, r1, r2
 8001f1e:	18d3      	adds	r3, r2, r3
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0c1a      	lsrs	r2, r3, #16
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3306      	adds	r3, #6
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	23de      	movs	r3, #222	; 0xde
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	188a      	adds	r2, r1, r2
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e1a      	lsrs	r2, r3, #24
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3307      	adds	r3, #7
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2120      	movs	r1, #32
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	02d2      	lsls	r2, r2, #11
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
  }
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b006      	add	sp, #24
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9a:	200b      	movs	r0, #11
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	5c52      	ldrb	r2, [r2, r1]
 8001fa4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d004      	beq.n	8001fb8 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001fae:	230b      	movs	r3, #11
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e005      	b.n	8001fd8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fec:	200f      	movs	r0, #15
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	5c52      	ldrb	r2, [r2, r1]
 8001ff6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ff8:	183b      	adds	r3, r7, r0
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d004      	beq.n	800200a <HAL_CAN_ActivateNotification+0x28>
 8002000:	230f      	movs	r3, #15
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d109      	bne.n	800201e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e007      	b.n	800202e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	02d2      	lsls	r2, r2, #11
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
  }
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b08a      	sub	sp, #40	; 0x28
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d100      	bne.n	800207c <HAL_CAN_IRQHandler+0x46>
 800207a:	e084      	b.n	8002186 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d024      	beq.n	80020ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f97e 	bl	8002398 <HAL_CAN_TxMailbox0CompleteCallback>
 800209c:	e017      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2204      	movs	r2, #4
 80020a2:	4013      	ands	r3, r2
 80020a4:	d005      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	4313      	orrs	r3, r2
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	e00d      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2208      	movs	r2, #8
 80020b6:	4013      	ands	r3, r2
 80020b8:	d005      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	0152      	lsls	r2, r2, #5
 80020c0:	4313      	orrs	r3, r2
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	e003      	b.n	80020ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f97d 	bl	80023c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d028      	beq.n	800212a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	0052      	lsls	r2, r2, #1
 80020e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f95a 	bl	80023a8 <HAL_CAN_TxMailbox1CompleteCallback>
 80020f4:	e019      	b.n	800212a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	d005      	beq.n	800210c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	0192      	lsls	r2, r2, #6
 8002106:	4313      	orrs	r3, r2
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e00e      	b.n	800212a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d005      	beq.n	8002122 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	01d2      	lsls	r2, r2, #7
 800211c:	4313      	orrs	r3, r2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	e003      	b.n	800212a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f957 	bl	80023d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	4013      	ands	r3, r2
 8002132:	d028      	beq.n	8002186 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0252      	lsls	r2, r2, #9
 800213c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	4013      	ands	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f934 	bl	80023b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002150:	e019      	b.n	8002186 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	02db      	lsls	r3, r3, #11
 8002158:	4013      	ands	r3, r2
 800215a:	d005      	beq.n	8002168 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	0212      	lsls	r2, r2, #8
 8002162:	4313      	orrs	r3, r2
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	e00e      	b.n	8002186 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	031b      	lsls	r3, r3, #12
 800216e:	4013      	ands	r3, r2
 8002170:	d005      	beq.n	800217e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0252      	lsls	r2, r2, #9
 8002178:	4313      	orrs	r3, r2
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
 800217c:	e003      	b.n	8002186 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 f931 	bl	80023e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	2208      	movs	r2, #8
 800218a:	4013      	ands	r3, r2
 800218c:	d00c      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2210      	movs	r2, #16
 8002192:	4013      	ands	r3, r2
 8002194:	d008      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4313      	orrs	r3, r2
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2210      	movs	r2, #16
 80021a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2208      	movs	r2, #8
 80021b4:	4013      	ands	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f918 	bl	80023f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2203      	movs	r2, #3
 80021d8:	4013      	ands	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0018      	movs	r0, r3
 80021e0:	f7fe fdd8 	bl	8000d94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	4013      	ands	r3, r2
 80021ea:	d00c      	beq.n	8002206 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2210      	movs	r2, #16
 80021f0:	4013      	ands	r3, r2
 80021f2:	d008      	beq.n	8002206 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	00d2      	lsls	r2, r2, #3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2210      	movs	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2220      	movs	r2, #32
 800220a:	4013      	ands	r3, r2
 800220c:	d00b      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2208      	movs	r2, #8
 8002212:	4013      	ands	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2208      	movs	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f8f9 	bl	8002418 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2210      	movs	r2, #16
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2203      	movs	r2, #3
 8002236:	4013      	ands	r3, r2
 8002238:	d003      	beq.n	8002242 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f8e3 	bl	8002408 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d00b      	beq.n	8002264 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2210      	movs	r2, #16
 8002250:	4013      	ands	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f8e2 	bl	8002428 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	4013      	ands	r3, r2
 800226c:	d00b      	beq.n	8002286 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2208      	movs	r2, #8
 800227c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f8d9 	bl	8002438 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002286:	6a3a      	ldr	r2, [r7, #32]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	4013      	ands	r3, r2
 800228e:	d100      	bne.n	8002292 <HAL_CAN_IRQHandler+0x25c>
 8002290:	e071      	b.n	8002376 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	d100      	bne.n	800229c <HAL_CAN_IRQHandler+0x266>
 800229a:	e068      	b.n	800236e <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ac:	d003      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	2201      	movs	r2, #1
 80022b2:	4313      	orrs	r3, r2
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022b6:	6a3a      	ldr	r2, [r7, #32]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022c6:	d003      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	2202      	movs	r2, #2
 80022cc:	4313      	orrs	r3, r2
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4013      	ands	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2204      	movs	r2, #4
 80022de:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022e0:	d003      	beq.n	80022ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	2204      	movs	r2, #4
 80022e6:	4313      	orrs	r3, r2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4013      	ands	r3, r2
 80022f2:	d03c      	beq.n	800236e <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2270      	movs	r2, #112	; 0x70
 80022f8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022fa:	d038      	beq.n	800236e <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2270      	movs	r2, #112	; 0x70
 8002300:	4013      	ands	r3, r2
 8002302:	2b30      	cmp	r3, #48	; 0x30
 8002304:	d016      	beq.n	8002334 <HAL_CAN_IRQHandler+0x2fe>
 8002306:	d804      	bhi.n	8002312 <HAL_CAN_IRQHandler+0x2dc>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d009      	beq.n	8002320 <HAL_CAN_IRQHandler+0x2ea>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d00c      	beq.n	800232a <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002310:	e025      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8002312:	2b50      	cmp	r3, #80	; 0x50
 8002314:	d018      	beq.n	8002348 <HAL_CAN_IRQHandler+0x312>
 8002316:	2b60      	cmp	r3, #96	; 0x60
 8002318:	d01b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x31c>
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d00f      	beq.n	800233e <HAL_CAN_IRQHandler+0x308>
            break;
 800231e:	e01e      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	2208      	movs	r2, #8
 8002324:	4313      	orrs	r3, r2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002328:	e019      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2210      	movs	r2, #16
 800232e:	4313      	orrs	r3, r2
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002332:	e014      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	2220      	movs	r2, #32
 8002338:	4313      	orrs	r3, r2
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800233c:	e00f      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	2240      	movs	r2, #64	; 0x40
 8002342:	4313      	orrs	r3, r2
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002346:	e00a      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	4313      	orrs	r3, r2
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002350:	e005      	b.n	800235e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	0052      	lsls	r2, r2, #1
 8002358:	4313      	orrs	r3, r2
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2170      	movs	r1, #112	; 0x70
 800236a:	438a      	bics	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f85c 	bl	8002448 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b00a      	add	sp, #40	; 0x28
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	0002      	movs	r2, r0
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b7f      	cmp	r3, #127	; 0x7f
 800246a:	d809      	bhi.n	8002480 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	001a      	movs	r2, r3
 8002472:	231f      	movs	r3, #31
 8002474:	401a      	ands	r2, r3
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_EnableIRQ+0x30>)
 8002478:	2101      	movs	r1, #1
 800247a:	4091      	lsls	r1, r2
 800247c:	000a      	movs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
  }
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	0002      	movs	r2, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b7f      	cmp	r3, #127	; 0x7f
 80024a0:	d828      	bhi.n	80024f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <__NVIC_SetPriority+0xd4>)
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	33c0      	adds	r3, #192	; 0xc0
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	589b      	ldr	r3, [r3, r2]
 80024b2:	1dfa      	adds	r2, r7, #7
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	0011      	movs	r1, r2
 80024b8:	2203      	movs	r2, #3
 80024ba:	400a      	ands	r2, r1
 80024bc:	00d2      	lsls	r2, r2, #3
 80024be:	21ff      	movs	r1, #255	; 0xff
 80024c0:	4091      	lsls	r1, r2
 80024c2:	000a      	movs	r2, r1
 80024c4:	43d2      	mvns	r2, r2
 80024c6:	401a      	ands	r2, r3
 80024c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	401a      	ands	r2, r3
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	0018      	movs	r0, r3
 80024d8:	2303      	movs	r3, #3
 80024da:	4003      	ands	r3, r0
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e0:	481f      	ldr	r0, [pc, #124]	; (8002560 <__NVIC_SetPriority+0xd4>)
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	430a      	orrs	r2, r1
 80024ec:	33c0      	adds	r3, #192	; 0xc0
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024f2:	e031      	b.n	8002558 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <__NVIC_SetPriority+0xd8>)
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	0019      	movs	r1, r3
 80024fc:	230f      	movs	r3, #15
 80024fe:	400b      	ands	r3, r1
 8002500:	3b08      	subs	r3, #8
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3306      	adds	r3, #6
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1dfa      	adds	r2, r7, #7
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	0011      	movs	r1, r2
 8002514:	2203      	movs	r2, #3
 8002516:	400a      	ands	r2, r1
 8002518:	00d2      	lsls	r2, r2, #3
 800251a:	21ff      	movs	r1, #255	; 0xff
 800251c:	4091      	lsls	r1, r2
 800251e:	000a      	movs	r2, r1
 8002520:	43d2      	mvns	r2, r2
 8002522:	401a      	ands	r2, r3
 8002524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	401a      	ands	r2, r3
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	0018      	movs	r0, r3
 8002534:	2303      	movs	r3, #3
 8002536:	4003      	ands	r3, r0
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <__NVIC_SetPriority+0xd8>)
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	001c      	movs	r4, r3
 8002544:	230f      	movs	r3, #15
 8002546:	4023      	ands	r3, r4
 8002548:	3b08      	subs	r3, #8
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	430a      	orrs	r2, r1
 800254e:	3306      	adds	r3, #6
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	18c3      	adds	r3, r0, r3
 8002554:	3304      	adds	r3, #4
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b003      	add	sp, #12
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <SysTick_Config+0x40>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e010      	b.n	80025a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <SysTick_Config+0x44>)
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	3a01      	subs	r2, #1
 8002584:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	2301      	movs	r3, #1
 8002588:	425b      	negs	r3, r3
 800258a:	2103      	movs	r1, #3
 800258c:	0018      	movs	r0, r3
 800258e:	f7ff ff7d 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <SysTick_Config+0x44>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x44>)
 800259a:	2207      	movs	r2, #7
 800259c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259e:	2300      	movs	r3, #0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00ffffff 	.word	0x00ffffff
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	210f      	movs	r1, #15
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	1c02      	adds	r2, r0, #0
 80025c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	0011      	movs	r1, r2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	0002      	movs	r2, r0
 80025e2:	1dfb      	adds	r3, r7, #7
 80025e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff ff33 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff ffaf 	bl	8002568 <SysTick_Config>
 800260a:	0003      	movs	r3, r0
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e155      	b.n	80028d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4091      	lsls	r1, r2
 800262e:	000a      	movs	r2, r1
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d100      	bne.n	800263c <HAL_GPIO_Init+0x28>
 800263a:	e146      	b.n	80028ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x38>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b12      	cmp	r3, #18
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	58d3      	ldr	r3, [r2, r3]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	409a      	lsls	r2, r3
 8002666:	0013      	movs	r3, r2
 8002668:	43da      	mvns	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2107      	movs	r1, #7
 8002678:	400b      	ands	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	409a      	lsls	r2, r3
 800267e:	0013      	movs	r3, r2
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	409a      	lsls	r2, r3
 80026a2:	0013      	movs	r3, r2
 80026a4:	43da      	mvns	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d00b      	beq.n	80026e8 <HAL_GPIO_Init+0xd4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d130      	bne.n	800274a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	409a      	lsls	r2, r3
 80026f6:	0013      	movs	r3, r2
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	409a      	lsls	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271e:	2201      	movs	r2, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	43da      	mvns	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	2201      	movs	r2, #1
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
 800273c:	0013      	movs	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	4013      	ands	r3, r2
 8002784:	d100      	bne.n	8002788 <HAL_GPIO_Init+0x174>
 8002786:	e0a0      	b.n	80028ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x2d4>)
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	4b56      	ldr	r3, [pc, #344]	; (80028e8 <HAL_GPIO_Init+0x2d4>)
 800278e:	2101      	movs	r1, #1
 8002790:	430a      	orrs	r2, r1
 8002792:	619a      	str	r2, [r3, #24]
 8002794:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <HAL_GPIO_Init+0x2d4>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x2d8>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	589b      	ldr	r3, [r3, r2]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2203      	movs	r2, #3
 80027b2:	4013      	ands	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	409a      	lsls	r2, r3
 80027ba:	0013      	movs	r3, r2
 80027bc:	43da      	mvns	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2390      	movs	r3, #144	; 0x90
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <HAL_GPIO_Init+0x2dc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x1ea>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <HAL_GPIO_Init+0x2e0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x1e6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a45      	ldr	r2, [pc, #276]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1e2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_GPIO_Init+0x2e8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x1de>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x1f0>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x1f0>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x1f0>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x1f0>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x1f0>
 8002802:	2300      	movs	r3, #0
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	2103      	movs	r1, #3
 8002808:	400a      	ands	r2, r1
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x2d8>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43da      	mvns	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	4013      	ands	r3, r2
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002846:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43da      	mvns	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	035b      	lsls	r3, r3, #13
 800288e:	4013      	ands	r3, r2
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	039b      	lsls	r3, r3, #14
 80028b8:	4013      	ands	r3, r2
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_GPIO_Init+0x2ec>)
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	40da      	lsrs	r2, r3
 80028d8:	1e13      	subs	r3, r2, #0
 80028da:	d000      	beq.n	80028de <HAL_GPIO_Init+0x2ca>
 80028dc:	e6a2      	b.n	8002624 <HAL_GPIO_Init+0x10>
  } 
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b006      	add	sp, #24
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	40010400 	.word	0x40010400

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	0008      	movs	r0, r1
 800290e:	0011      	movs	r1, r2
 8002910:	1cbb      	adds	r3, r7, #2
 8002912:	1c02      	adds	r2, r0, #0
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	1c7b      	adds	r3, r7, #1
 8002918:	1c0a      	adds	r2, r1, #0
 800291a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800291c:	1c7b      	adds	r3, r7, #1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002924:	1cbb      	adds	r3, r7, #2
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800292e:	1cbb      	adds	r3, r7, #2
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	0002      	movs	r2, r0
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	1dba      	adds	r2, r7, #6
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	4013      	ands	r3, r2
 8002956:	d008      	beq.n	800296a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800295a:	1dba      	adds	r2, r7, #6
 800295c:	8812      	ldrh	r2, [r2, #0]
 800295e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f807 	bl	8002978 <HAL_GPIO_EXTI_Callback>
  }
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	0002      	movs	r2, r0
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f000 fb76 	bl	800308c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	d100      	bne.n	80029ac <HAL_RCC_OscConfig+0x20>
 80029aa:	e08e      	b.n	8002aca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029ac:	4bc5      	ldr	r3, [pc, #788]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d00e      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b8:	4bc2      	ldr	r3, [pc, #776]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	220c      	movs	r2, #12
 80029be:	4013      	ands	r3, r2
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d117      	bne.n	80029f4 <HAL_RCC_OscConfig+0x68>
 80029c4:	4bbf      	ldr	r3, [pc, #764]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	025b      	lsls	r3, r3, #9
 80029cc:	401a      	ands	r2, r3
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d6:	4bbb      	ldr	r3, [pc, #748]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d100      	bne.n	80029e4 <HAL_RCC_OscConfig+0x58>
 80029e2:	e071      	b.n	8002ac8 <HAL_RCC_OscConfig+0x13c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d000      	beq.n	80029ee <HAL_RCC_OscConfig+0x62>
 80029ec:	e06c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f000 fb4c 	bl	800308c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x80>
 80029fc:	4bb1      	ldr	r3, [pc, #708]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4bb0      	ldr	r3, [pc, #704]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0249      	lsls	r1, r1, #9
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e02f      	b.n	8002a6c <HAL_RCC_OscConfig+0xe0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0xa2>
 8002a14:	4bab      	ldr	r3, [pc, #684]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4baa      	ldr	r3, [pc, #680]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a1a:	49ab      	ldr	r1, [pc, #684]	; (8002cc8 <HAL_RCC_OscConfig+0x33c>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	4ba8      	ldr	r3, [pc, #672]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4ba7      	ldr	r3, [pc, #668]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a26:	49a9      	ldr	r1, [pc, #676]	; (8002ccc <HAL_RCC_OscConfig+0x340>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e01e      	b.n	8002a6c <HAL_RCC_OscConfig+0xe0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10e      	bne.n	8002a54 <HAL_RCC_OscConfig+0xc8>
 8002a36:	4ba3      	ldr	r3, [pc, #652]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4ba2      	ldr	r3, [pc, #648]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	02c9      	lsls	r1, r1, #11
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	4b9f      	ldr	r3, [pc, #636]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b9e      	ldr	r3, [pc, #632]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	0249      	lsls	r1, r1, #9
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xe0>
 8002a54:	4b9b      	ldr	r3, [pc, #620]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b9a      	ldr	r3, [pc, #616]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a5a:	499b      	ldr	r1, [pc, #620]	; (8002cc8 <HAL_RCC_OscConfig+0x33c>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	4b98      	ldr	r3, [pc, #608]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b97      	ldr	r3, [pc, #604]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a66:	4999      	ldr	r1, [pc, #612]	; (8002ccc <HAL_RCC_OscConfig+0x340>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe ff2e 	bl	80018d4 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7e:	f7fe ff29 	bl	80018d4 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e2fd      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a90:	4b8c      	ldr	r3, [pc, #560]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0xf2>
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe ff19 	bl	80018d4 <HAL_GetTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe ff14 	bl	80018d4 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e2e8      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x11c>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x14a>
 8002ad4:	e06c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	220c      	movs	r2, #12
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ae0:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	220c      	movs	r2, #12
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d11f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1a0>
 8002aec:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	401a      	ands	r2, r3
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b71      	ldr	r3, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x188>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e2bb      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b6b      	ldr	r3, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	22f8      	movs	r2, #248	; 0xf8
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00da      	lsls	r2, r3, #3
 8002b24:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e041      	b.n	8002bb0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d024      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fec8 	bl	80018d4 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fec3 	bl	80018d4 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e297      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d0f1      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b57      	ldr	r3, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	22f8      	movs	r2, #248	; 0xf8
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00da      	lsls	r2, r3, #3
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e018      	b.n	8002bb0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	438a      	bics	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fea3 	bl	80018d4 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fe9e 	bl	80018d4 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e272      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f1      	bne.n	8002b94 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fe81 	bl	80018d4 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fe7c 	bl	80018d4 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e250      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0f1      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
 8002bf4:	e018      	b.n	8002c28 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	438a      	bics	r2, r1
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fe67 	bl	80018d4 <HAL_GetTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fe62 	bl	80018d4 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e236      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1e:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d1f1      	bne.n	8002c0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d100      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2a8>
 8002c32:	e0b5      	b.n	8002da0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c34:	231f      	movs	r3, #31
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	055b      	lsls	r3, r3, #21
 8002c44:	4013      	ands	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0549      	lsls	r1, r1, #21
 8002c52:	430a      	orrs	r2, r1
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	055b      	lsls	r3, r3, #21
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c64:	231f      	movs	r3, #31
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_RCC_OscConfig+0x344>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4013      	ands	r3, r2
 8002c76:	d11a      	bne.n	8002cae <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x344>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_OscConfig+0x344>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0049      	lsls	r1, r1, #1
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe25 	bl	80018d4 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe fe20 	bl	80018d4 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1f4      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x344>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x348>
 8002cb6:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	621a      	str	r2, [r3, #32]
 8002cc2:	e035      	b.n	8002d30 <HAL_RCC_OscConfig+0x3a4>
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	fffeffff 	.word	0xfffeffff
 8002ccc:	fffbffff 	.word	0xfffbffff
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x36a>
 8002cdc:	4bca      	ldr	r3, [pc, #808]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	4bc9      	ldr	r3, [pc, #804]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	4bc7      	ldr	r3, [pc, #796]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	4bc6      	ldr	r3, [pc, #792]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	2104      	movs	r1, #4
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	621a      	str	r2, [r3, #32]
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x3a4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x38c>
 8002cfe:	4bc2      	ldr	r3, [pc, #776]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	4bc1      	ldr	r3, [pc, #772]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	2104      	movs	r1, #4
 8002d06:	430a      	orrs	r2, r1
 8002d08:	621a      	str	r2, [r3, #32]
 8002d0a:	4bbf      	ldr	r3, [pc, #764]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	4bbe      	ldr	r3, [pc, #760]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	430a      	orrs	r2, r1
 8002d14:	621a      	str	r2, [r3, #32]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x3a4>
 8002d18:	4bbb      	ldr	r3, [pc, #748]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	4bba      	ldr	r3, [pc, #744]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	621a      	str	r2, [r3, #32]
 8002d24:	4bb8      	ldr	r3, [pc, #736]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	4bb7      	ldr	r3, [pc, #732]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d014      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fdcc 	bl	80018d4 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe fdc7 	bl	80018d4 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4aaf      	ldr	r2, [pc, #700]	; (800300c <HAL_RCC_OscConfig+0x680>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e19a      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4bac      	ldr	r3, [pc, #688]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x3b6>
 8002d60:	e013      	b.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fdb7 	bl	80018d4 <HAL_GetTick>
 8002d66:	0003      	movs	r3, r0
 8002d68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e009      	b.n	8002d80 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fdb2 	bl	80018d4 <HAL_GetTick>
 8002d70:	0002      	movs	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	4aa5      	ldr	r2, [pc, #660]	; (800300c <HAL_RCC_OscConfig+0x680>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e185      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4ba1      	ldr	r3, [pc, #644]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	2202      	movs	r2, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b9c      	ldr	r3, [pc, #624]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	4b9b      	ldr	r3, [pc, #620]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	499d      	ldr	r1, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x684>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2210      	movs	r2, #16
 8002da6:	4013      	ands	r3, r2
 8002da8:	d063      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d12a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002db2:	4b95      	ldr	r3, [pc, #596]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db6:	4b94      	ldr	r3, [pc, #592]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	2104      	movs	r1, #4
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002dbe:	4b92      	ldr	r3, [pc, #584]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	4b91      	ldr	r3, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fd83 	bl	80018d4 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002dd4:	f7fe fd7e 	bl	80018d4 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e152      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	d0f1      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002df0:	4b85      	ldr	r3, [pc, #532]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	22f8      	movs	r2, #248	; 0xf8
 8002df6:	4393      	bics	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	00da      	lsls	r2, r3, #3
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
 8002e06:	e034      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	3305      	adds	r3, #5
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e10:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e14:	4b7c      	ldr	r3, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e16:	2104      	movs	r1, #4
 8002e18:	438a      	bics	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e1c:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	22f8      	movs	r2, #248	; 0xf8
 8002e22:	4393      	bics	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	00da      	lsls	r2, r3, #3
 8002e2c:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34
 8002e32:	e01e      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e34:	4b74      	ldr	r3, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e38:	4b73      	ldr	r3, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e40:	4b71      	ldr	r3, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	438a      	bics	r2, r1
 8002e4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fd42 	bl	80018d4 <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e56:	f7fe fd3d 	bl	80018d4 <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e111      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e68:	4b67      	ldr	r3, [pc, #412]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d1f1      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2220      	movs	r2, #32
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d05c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e7c:	4b62      	ldr	r3, [pc, #392]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	220c      	movs	r2, #12
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d00e      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	220c      	movs	r2, #12
 8002e8e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d114      	bne.n	8002ebe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e94:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	23c0      	movs	r3, #192	; 0xc0
 8002e9a:	025b      	lsls	r3, r3, #9
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	025b      	lsls	r3, r3, #9
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ea6:	4b58      	ldr	r3, [pc, #352]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d040      	beq.n	8002f34 <HAL_RCC_OscConfig+0x5a8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d03c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0e6      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01b      	beq.n	8002efe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002ec6:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eca:	4b4f      	ldr	r3, [pc, #316]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	0249      	lsls	r1, r1, #9
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fcfe 	bl	80018d4 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ede:	f7fe fcf9 	bl	80018d4 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0cd      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ef0:	4b45      	ldr	r3, [pc, #276]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x552>
 8002efc:	e01b      	b.n	8002f36 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f04:	4943      	ldr	r1, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x688>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fce3 	bl	80018d4 <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f14:	f7fe fcde 	bl	80018d4 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b2      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x588>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f34:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5b4>
 8002f3e:	e0a4      	b.n	800308a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	220c      	movs	r2, #12
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d100      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5c2>
 8002f4c:	e078      	b.n	8003040 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d14c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f5c:	492e      	ldr	r1, [pc, #184]	; (8003018 <HAL_RCC_OscConfig+0x68c>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fcb7 	bl	80018d4 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fcb2 	bl	80018d4 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e086      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	049b      	lsls	r3, r3, #18
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	220f      	movs	r2, #15
 8002f90:	4393      	bics	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_RCC_OscConfig+0x690>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0449      	lsls	r1, r1, #17
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fc85 	bl	80018d4 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fc80 	bl	80018d4 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e054      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	049b      	lsls	r3, r3, #18
 8002fea:	4013      	ands	r3, r2
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x644>
 8002fee:	e04c      	b.n	800308a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <HAL_RCC_OscConfig+0x67c>)
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <HAL_RCC_OscConfig+0x68c>)
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fc6a 	bl	80018d4 <HAL_GetTick>
 8003000:	0003      	movs	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x6a6>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40021000 	.word	0x40021000
 800300c:	00001388 	.word	0x00001388
 8003010:	efffffff 	.word	0xefffffff
 8003014:	fffeffff 	.word	0xfffeffff
 8003018:	feffffff 	.word	0xfeffffff
 800301c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fc58 	bl	80018d4 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e02c      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_RCC_OscConfig+0x708>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	049b      	lsls	r3, r3, #18
 800303a:	4013      	ands	r3, r2
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x694>
 800303e:	e024      	b.n	800308a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01f      	b.n	800308c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_OscConfig+0x708>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x708>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	23c0      	movs	r3, #192	; 0xc0
 800305c:	025b      	lsls	r3, r3, #9
 800305e:	401a      	ands	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	429a      	cmp	r2, r3
 8003066:	d10e      	bne.n	8003086 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	220f      	movs	r2, #15
 800306c:	401a      	ands	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	23f0      	movs	r3, #240	; 0xf0
 800307a:	039b      	lsls	r3, r3, #14
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b008      	add	sp, #32
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0bf      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d911      	bls.n	80030de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0a6      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	d015      	beq.n	8003114 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d006      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 80030f8:	21e0      	movs	r1, #224	; 0xe0
 80030fa:	00c9      	lsls	r1, r1, #3
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	22f0      	movs	r2, #240	; 0xf0
 8003106:	4393      	bics	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d04c      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	4013      	ands	r3, r2
 8003130:	d120      	bne.n	8003174 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07a      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	049b      	lsls	r3, r3, #18
 8003146:	4013      	ands	r3, r2
 8003148:	d114      	bne.n	8003174 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06e      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003156:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	025b      	lsls	r3, r3, #9
 800315e:	4013      	ands	r3, r2
 8003160:	d108      	bne.n	8003174 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e062      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2202      	movs	r2, #2
 800316c:	4013      	ands	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e05b      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003174:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2203      	movs	r2, #3
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe fba4 	bl	80018d4 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003190:	e009      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003192:	f7fe fb9f 	bl	80018d4 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_RCC_ClockConfig+0x1a4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e042      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	220c      	movs	r2, #12
 80031ac:	401a      	ands	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1ec      	bne.n	8003192 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2201      	movs	r2, #1
 80031be:	4013      	ands	r3, r2
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d211      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4393      	bics	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x19c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e020      	b.n	800322c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2204      	movs	r2, #4
 80031f0:	4013      	ands	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_RCC_ClockConfig+0x1a8>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003208:	f000 f820 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320c:	0001      	movs	r1, r0
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1a0>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	220f      	movs	r2, #15
 8003216:	4013      	ands	r3, r2
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1ac>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	000a      	movs	r2, r1
 800321e:	40da      	lsrs	r2, r3
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1b0>)
 8003222:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fe fb0f 	bl	8001848 <HAL_InitTick>
  
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40022000 	.word	0x40022000
 8003238:	40021000 	.word	0x40021000
 800323c:	00001388 	.word	0x00001388
 8003240:	fffff8ff 	.word	0xfffff8ff
 8003244:	08003768 	.word	0x08003768
 8003248:	20000000 	.word	0x20000000

0800324c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b08f      	sub	sp, #60	; 0x3c
 8003250:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003252:	2314      	movs	r3, #20
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800325a:	c313      	stmia	r3!, {r0, r1, r4}
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	4a35      	ldr	r2, [pc, #212]	; (8003338 <HAL_RCC_GetSysClockFreq+0xec>)
 8003264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003266:	c313      	stmia	r3!, {r0, r1, r4}
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	220c      	movs	r2, #12
 800328a:	4013      	ands	r3, r2
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x52>
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d043      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xd0>
 8003294:	2b04      	cmp	r3, #4
 8003296:	d144      	bne.n	8003322 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800329c:	e044      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	220f      	movs	r2, #15
 80032a4:	4013      	ands	r3, r2
 80032a6:	2214      	movs	r2, #20
 80032a8:	18ba      	adds	r2, r7, r2
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_RCC_GetSysClockFreq+0xf0>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	220f      	movs	r2, #15
 80032b4:	4013      	ands	r3, r2
 80032b6:	1d3a      	adds	r2, r7, #4
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032be:	23c0      	movs	r3, #192	; 0xc0
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	401a      	ands	r2, r3
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d109      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ce:	481c      	ldr	r0, [pc, #112]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 80032d0:	f7fc ff1a 	bl	8000108 <__udivsi3>
 80032d4:	0003      	movs	r3, r0
 80032d6:	001a      	movs	r2, r3
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	4353      	muls	r3, r2
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
 80032de:	e01a      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	025b      	lsls	r3, r3, #9
 80032e6:	401a      	ands	r2, r3
 80032e8:	23c0      	movs	r3, #192	; 0xc0
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d109      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	4814      	ldr	r0, [pc, #80]	; (8003344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f4:	f7fc ff08 	bl	8000108 <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	001a      	movs	r2, r3
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	4353      	muls	r3, r2
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
 8003302:	e008      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003306:	480e      	ldr	r0, [pc, #56]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003308:	f7fc fefe 	bl	8000108 <__udivsi3>
 800330c:	0003      	movs	r3, r0
 800330e:	001a      	movs	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	4353      	muls	r3, r2
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800331a:	e005      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003320:	e002      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003326:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b00f      	add	sp, #60	; 0x3c
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	08003748 	.word	0x08003748
 8003338:	08003758 	.word	0x08003758
 800333c:	40021000 	.word	0x40021000
 8003340:	007a1200 	.word	0x007a1200
 8003344:	02dc6c00 	.word	0x02dc6c00

08003348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e01e      	b.n	8003398 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223d      	movs	r2, #61	; 0x3d
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	223c      	movs	r2, #60	; 0x3c
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fb6b 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	223d      	movs	r2, #61	; 0x3d
 800337a:	2102      	movs	r1, #2
 800337c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	0019      	movs	r1, r3
 8003388:	0010      	movs	r0, r2
 800338a:	f000 f855 	bl	8003438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223d      	movs	r2, #61	; 0x3d
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2207      	movs	r2, #7
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d007      	beq.n	80033da <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b004      	add	sp, #16
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	438a      	bics	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_TIM_Base_Stop_IT+0x4c>)
 8003404:	4013      	ands	r3, r2
 8003406:	d10d      	bne.n	8003424 <HAL_TIM_Base_Stop_IT+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_TIM_Base_Stop_IT+0x50>)
 8003410:	4013      	ands	r3, r2
 8003412:	d107      	bne.n	8003424 <HAL_TIM_Base_Stop_IT+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	438a      	bics	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	00001111 	.word	0x00001111
 8003434:	00000444 	.word	0x00000444

08003438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a34      	ldr	r2, [pc, #208]	; (800351c <TIM_Base_SetConfig+0xe4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d008      	beq.n	8003462 <TIM_Base_SetConfig+0x2a>
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	05db      	lsls	r3, r3, #23
 8003456:	429a      	cmp	r2, r3
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0x2a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <TIM_Base_SetConfig+0xe8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2270      	movs	r2, #112	; 0x70
 8003466:	4393      	bics	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0xe4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	429a      	cmp	r2, r3
 8003484:	d013      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a25      	ldr	r2, [pc, #148]	; (8003520 <TIM_Base_SetConfig+0xe8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00f      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <TIM_Base_SetConfig+0xec>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <TIM_Base_SetConfig+0xf0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a22      	ldr	r2, [pc, #136]	; (800352c <TIM_Base_SetConfig+0xf4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x76>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <TIM_Base_SetConfig+0xf8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_Base_SetConfig+0xfc>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	4393      	bics	r3, r2
 80034c6:	001a      	movs	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <TIM_Base_SetConfig+0xe4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00b      	beq.n	8003506 <TIM_Base_SetConfig+0xce>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <TIM_Base_SetConfig+0xf0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0xce>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0xf4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0xce>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <TIM_Base_SetConfig+0xf8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d103      	bne.n	800350e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	615a      	str	r2, [r3, #20]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40002000 	.word	0x40002000
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800
 8003534:	fffffcff 	.word	0xfffffcff

08003538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223c      	movs	r2, #60	; 0x3c
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e047      	b.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	223d      	movs	r2, #61	; 0x3d
 800355c:	2102      	movs	r1, #2
 800355e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2270      	movs	r2, #112	; 0x70
 8003574:	4393      	bics	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	05db      	lsls	r3, r3, #23
 800359c:	429a      	cmp	r2, r3
 800359e:	d009      	beq.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a11      	ldr	r2, [pc, #68]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10c      	bne.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	4393      	bics	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	223d      	movs	r2, #61	; 0x3d
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223c      	movs	r2, #60	; 0x3c
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40014000 	.word	0x40014000

080035f4 <__cxa_pure_virtual>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	f000 f805 	bl	8003604 <_ZSt9terminatev>

080035fa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80035fa:	b510      	push	{r4, lr}
 80035fc:	4780      	blx	r0
 80035fe:	f000 f809 	bl	8003614 <abort>
	...

08003604 <_ZSt9terminatev>:
 8003604:	4b02      	ldr	r3, [pc, #8]	; (8003610 <_ZSt9terminatev+0xc>)
 8003606:	b510      	push	{r4, lr}
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	f7ff fff6 	bl	80035fa <_ZN10__cxxabiv111__terminateEPFvvE>
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	2000000c 	.word	0x2000000c

08003614 <abort>:
 8003614:	b510      	push	{r4, lr}
 8003616:	2006      	movs	r0, #6
 8003618:	f000 f86a 	bl	80036f0 <raise>
 800361c:	2001      	movs	r0, #1
 800361e:	f7fd fa78 	bl	8000b12 <_exit>
	...

08003624 <__errno>:
 8003624:	4b01      	ldr	r3, [pc, #4]	; (800362c <__errno+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	4770      	bx	lr
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	20000010 	.word	0x20000010

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	2600      	movs	r6, #0
 8003634:	4d0c      	ldr	r5, [pc, #48]	; (8003668 <__libc_init_array+0x38>)
 8003636:	4c0d      	ldr	r4, [pc, #52]	; (800366c <__libc_init_array+0x3c>)
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	42a6      	cmp	r6, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	2600      	movs	r6, #0
 8003642:	f000 f875 	bl	8003730 <_init>
 8003646:	4d0a      	ldr	r5, [pc, #40]	; (8003670 <__libc_init_array+0x40>)
 8003648:	4c0a      	ldr	r4, [pc, #40]	; (8003674 <__libc_init_array+0x44>)
 800364a:	1b64      	subs	r4, r4, r5
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	42a6      	cmp	r6, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	00b3      	lsls	r3, r6, #2
 8003656:	58eb      	ldr	r3, [r5, r3]
 8003658:	4798      	blx	r3
 800365a:	3601      	adds	r6, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	00b3      	lsls	r3, r6, #2
 8003660:	58eb      	ldr	r3, [r5, r3]
 8003662:	4798      	blx	r3
 8003664:	3601      	adds	r6, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	0800379c 	.word	0x0800379c
 800366c:	0800379c 	.word	0x0800379c
 8003670:	0800379c 	.word	0x0800379c
 8003674:	080037a8 	.word	0x080037a8

08003678 <memcpy>:
 8003678:	2300      	movs	r3, #0
 800367a:	b510      	push	{r4, lr}
 800367c:	429a      	cmp	r2, r3
 800367e:	d100      	bne.n	8003682 <memcpy+0xa>
 8003680:	bd10      	pop	{r4, pc}
 8003682:	5ccc      	ldrb	r4, [r1, r3]
 8003684:	54c4      	strb	r4, [r0, r3]
 8003686:	3301      	adds	r3, #1
 8003688:	e7f8      	b.n	800367c <memcpy+0x4>

0800368a <memset>:
 800368a:	0003      	movs	r3, r0
 800368c:	1812      	adds	r2, r2, r0
 800368e:	4293      	cmp	r3, r2
 8003690:	d100      	bne.n	8003694 <memset+0xa>
 8003692:	4770      	bx	lr
 8003694:	7019      	strb	r1, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	e7f9      	b.n	800368e <memset+0x4>

0800369a <_raise_r>:
 800369a:	b570      	push	{r4, r5, r6, lr}
 800369c:	0004      	movs	r4, r0
 800369e:	000d      	movs	r5, r1
 80036a0:	291f      	cmp	r1, #31
 80036a2:	d904      	bls.n	80036ae <_raise_r+0x14>
 80036a4:	2316      	movs	r3, #22
 80036a6:	6003      	str	r3, [r0, #0]
 80036a8:	2001      	movs	r0, #1
 80036aa:	4240      	negs	r0, r0
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <_raise_r+0x24>
 80036b4:	008a      	lsls	r2, r1, #2
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d108      	bne.n	80036d0 <_raise_r+0x36>
 80036be:	0020      	movs	r0, r4
 80036c0:	f000 f832 	bl	8003728 <_getpid_r>
 80036c4:	002a      	movs	r2, r5
 80036c6:	0001      	movs	r1, r0
 80036c8:	0020      	movs	r0, r4
 80036ca:	f000 f81b 	bl	8003704 <_kill_r>
 80036ce:	e7ed      	b.n	80036ac <_raise_r+0x12>
 80036d0:	2000      	movs	r0, #0
 80036d2:	2a01      	cmp	r2, #1
 80036d4:	d0ea      	beq.n	80036ac <_raise_r+0x12>
 80036d6:	1c51      	adds	r1, r2, #1
 80036d8:	d103      	bne.n	80036e2 <_raise_r+0x48>
 80036da:	2316      	movs	r3, #22
 80036dc:	3001      	adds	r0, #1
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	e7e4      	b.n	80036ac <_raise_r+0x12>
 80036e2:	2400      	movs	r4, #0
 80036e4:	0028      	movs	r0, r5
 80036e6:	601c      	str	r4, [r3, #0]
 80036e8:	4790      	blx	r2
 80036ea:	0020      	movs	r0, r4
 80036ec:	e7de      	b.n	80036ac <_raise_r+0x12>
	...

080036f0 <raise>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4b03      	ldr	r3, [pc, #12]	; (8003700 <raise+0x10>)
 80036f4:	0001      	movs	r1, r0
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	f7ff ffcf 	bl	800369a <_raise_r>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000010 	.word	0x20000010

08003704 <_kill_r>:
 8003704:	2300      	movs	r3, #0
 8003706:	b570      	push	{r4, r5, r6, lr}
 8003708:	4c06      	ldr	r4, [pc, #24]	; (8003724 <_kill_r+0x20>)
 800370a:	0005      	movs	r5, r0
 800370c:	0008      	movs	r0, r1
 800370e:	0011      	movs	r1, r2
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	f7fd f9ee 	bl	8000af2 <_kill>
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d103      	bne.n	8003722 <_kill_r+0x1e>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d000      	beq.n	8003722 <_kill_r+0x1e>
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	200001c4 	.word	0x200001c4

08003728 <_getpid_r>:
 8003728:	b510      	push	{r4, lr}
 800372a:	f7fd f9dc 	bl	8000ae6 <_getpid>
 800372e:	bd10      	pop	{r4, pc}

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
