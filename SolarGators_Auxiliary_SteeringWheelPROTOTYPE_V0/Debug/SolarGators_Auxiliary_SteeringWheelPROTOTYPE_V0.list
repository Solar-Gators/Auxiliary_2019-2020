
SolarGators_Auxiliary_SteeringWheelPROTOTYPE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003900  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a14  08003a14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003a14  08003a14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a14  08003a14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  08003a98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003a98  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c568  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000233e  00000000  00000000  0002c604  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f27  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009348  00000000  00000000  00047fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008017e  00000000  00000000  000512ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d146d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc0  00000000  00000000  000d14e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039a8 	.word	0x080039a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080039a8 	.word	0x080039a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

//For timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003fc:	2390      	movs	r3, #144	; 0x90
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	2120      	movs	r1, #32
 8000402:	0018      	movs	r0, r3
 8000404:	f002 fa9d 	bl	8002942 <HAL_GPIO_TogglePin>

	if(auxPacket.hazardsOn == true)
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d00e      	beq.n	800042e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000416:	0019      	movs	r1, r3
 8000418:	0010      	movs	r0, r2
 800041a:	f002 fa92 	bl	8002942 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	011b      	lsls	r3, r3, #4
 8000422:	4a11      	ldr	r2, [pc, #68]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000424:	0019      	movs	r1, r3
 8000426:	0010      	movs	r0, r2
 8000428:	f002 fa8b 	bl	8002942 <HAL_GPIO_TogglePin>
	else if (auxPacket.rightOn == true)
	{
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
	}

}
 800042c:	e016      	b.n	800045c <HAL_TIM_PeriodElapsedCallback+0x68>
	else if (auxPacket.leftOn == true)
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000430:	795b      	ldrb	r3, [r3, #5]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d007      	beq.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_GPIO_TogglePin(LT_out_GPIO_Port, LT_out_Pin);
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800043c:	0019      	movs	r1, r3
 800043e:	0010      	movs	r0, r2
 8000440:	f002 fa7f 	bl	8002942 <HAL_GPIO_TogglePin>
}
 8000444:	e00a      	b.n	800045c <HAL_TIM_PeriodElapsedCallback+0x68>
	else if (auxPacket.rightOn == true)
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000448:	799b      	ldrb	r3, [r3, #6]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d006      	beq.n	800045c <HAL_TIM_PeriodElapsedCallback+0x68>
		HAL_GPIO_TogglePin(RT_out_GPIO_Port, RT_out_Pin);
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000454:	0019      	movs	r1, r3
 8000456:	0010      	movs	r0, r2
 8000458:	f002 fa73 	bl	8002942 <HAL_GPIO_TogglePin>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000090 	.word	0x20000090
 8000468:	48000800 	.word	0x48000800

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b5b0      	push	{r4, r5, r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	aux0.SetupReceive(ReceiveAndSend);
 8000472:	4a4d      	ldr	r2, [pc, #308]	; (80005a8 <main+0x13c>)
 8000474:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <main+0x140>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fd7d 	bl	8000f78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f001 f9d1 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f89d 	bl	80005c0 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f923 	bl	80006d0 <_ZL12MX_GPIO_Initv>

  MX_TIM6_Init();
 800048a:	f000 f8dd 	bl	8000648 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  SUBSYSTEM_DATA_MODULE::StartCAN();
 800048e:	f000 fda5 	bl	8000fdc <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>

  HAL_TIM_Base_Start_IT(&htim6);
 8000492:	4b47      	ldr	r3, [pc, #284]	; (80005b0 <main+0x144>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 ff79 	bl	800338c <HAL_TIM_Base_Start_IT>

  while (1)

  {

	  	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 800049a:	4c46      	ldr	r4, [pc, #280]	; (80005b4 <main+0x148>)
 800049c:	003b      	movs	r3, r7
 800049e:	250f      	movs	r5, #15
 80004a0:	197a      	adds	r2, r7, r5
 80004a2:	4942      	ldr	r1, [pc, #264]	; (80005ac <main+0x140>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fa26 	bl	80008f6 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 80004aa:	003b      	movs	r3, r7
 80004ac:	0020      	movs	r0, r4
 80004ae:	0019      	movs	r1, r3
 80004b0:	2308      	movs	r3, #8
 80004b2:	001a      	movs	r2, r3
 80004b4:	f003 fa1c 	bl	80038f0 <memcpy>
	  	if(receivedSomething)
 80004b8:	197b      	adds	r3, r7, r5
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d0ec      	beq.n	800049a <main+0x2e>
	  	{
	  		if (auxPacket.hazardsOn)
 80004c0:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <main+0x148>)
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d004      	beq.n	80004d2 <main+0x66>
	  		{
	  			//Turn on Interrupt
	  			HAL_TIM_Base_Start_IT(&htim6);
 80004c8:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <main+0x144>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 ff5e 	bl	800338c <HAL_TIM_Base_Start_IT>
 80004d0:	e011      	b.n	80004f6 <main+0x8a>
	  			//The interrupt is going to toggle the hazards
	  		}
	  		else
	  		{
	  			//Turn off the Interrupt
	  			HAL_TIM_Base_Stop_IT(&htim6);
 80004d2:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <main+0x144>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 ff7b 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
	  			//Turn off left and right
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	4836      	ldr	r0, [pc, #216]	; (80005b8 <main+0x14c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f002 fa10 	bl	8002908 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	011b      	lsls	r3, r3, #4
 80004ec:	4832      	ldr	r0, [pc, #200]	; (80005b8 <main+0x14c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0019      	movs	r1, r3
 80004f2:	f002 fa09 	bl	8002908 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.headlightsOn)
 80004f6:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <main+0x148>)
 80004f8:	79db      	ldrb	r3, [r3, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d006      	beq.n	800050c <main+0xa0>
	  		{
	  			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <main+0x150>)
 8000500:	2201      	movs	r2, #1
 8000502:	2120      	movs	r1, #32
 8000504:	0018      	movs	r0, r3
 8000506:	f002 f9ff 	bl	8002908 <HAL_GPIO_WritePin>
 800050a:	e005      	b.n	8000518 <main+0xac>
	  		}
	  		else
	  		{
	  			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <main+0x150>)
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	0018      	movs	r0, r3
 8000514:	f002 f9f8 	bl	8002908 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.leftOn)
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <main+0x148>)
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00b      	beq.n	8000538 <main+0xcc>
	  		{
	  			HAL_TIM_Base_Start_IT(&htim6);
 8000520:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <main+0x144>)
 8000522:	0018      	movs	r0, r3
 8000524:	f002 ff32 	bl	800338c <HAL_TIM_Base_Start_IT>
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_SET);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	4822      	ldr	r0, [pc, #136]	; (80005b8 <main+0x14c>)
 800052e:	2201      	movs	r2, #1
 8000530:	0019      	movs	r1, r3
 8000532:	f002 f9e9 	bl	8002908 <HAL_GPIO_WritePin>
 8000536:	e00a      	b.n	800054e <main+0xe2>
	  		}
	  		else
	  		{
	  			HAL_TIM_Base_Stop_IT(&htim6);
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <main+0x144>)
 800053a:	0018      	movs	r0, r3
 800053c:	f002 ff48 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
	  			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	481c      	ldr	r0, [pc, #112]	; (80005b8 <main+0x14c>)
 8000546:	2200      	movs	r2, #0
 8000548:	0019      	movs	r1, r3
 800054a:	f002 f9dd 	bl	8002908 <HAL_GPIO_WritePin>
	  		}
	  		if (auxPacket.rightOn)
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <main+0x148>)
 8000550:	799b      	ldrb	r3, [r3, #6]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00b      	beq.n	800056e <main+0x102>
	  		{
	  			HAL_TIM_Base_Start_IT(&htim6);
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <main+0x144>)
 8000558:	0018      	movs	r0, r3
 800055a:	f002 ff17 	bl	800338c <HAL_TIM_Base_Start_IT>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_SET);
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4815      	ldr	r0, [pc, #84]	; (80005b8 <main+0x14c>)
 8000564:	2201      	movs	r2, #1
 8000566:	0019      	movs	r1, r3
 8000568:	f002 f9ce 	bl	8002908 <HAL_GPIO_WritePin>
 800056c:	e00a      	b.n	8000584 <main+0x118>
	  		}
	  		else
	  		{
	  			HAL_TIM_Base_Stop_IT(&htim6);
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <main+0x144>)
 8000570:	0018      	movs	r0, r3
 8000572:	f002 ff2d 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
	  			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0x14c>)
 800057c:	2200      	movs	r2, #0
 800057e:	0019      	movs	r1, r3
 8000580:	f002 f9c2 	bl	8002908 <HAL_GPIO_WritePin>
	  		}

	  		if (auxPacket.hornOn)
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0x148>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <main+0x12e>
	  		{
	  			HAL_GPIO_WritePin(Horn_out_GPIO_Port, Horn_out_Pin, GPIO_PIN_SET);
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0x150>)
 800058e:	2201      	movs	r2, #1
 8000590:	2110      	movs	r1, #16
 8000592:	0018      	movs	r0, r3
 8000594:	f002 f9b8 	bl	8002908 <HAL_GPIO_WritePin>
 8000598:	e77f      	b.n	800049a <main+0x2e>
	  		}
	  		else
	  		{
	  			HAL_GPIO_WritePin(Horn_out_GPIO_Port, Horn_out_Pin, GPIO_PIN_RESET);
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <main+0x150>)
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 f9b1 	bl	8002908 <HAL_GPIO_WritePin>
	  	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 80005a6:	e778      	b.n	800049a <main+0x2e>
 80005a8:	080007b9 	.word	0x080007b9
 80005ac:	20000098 	.word	0x20000098
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	20000090 	.word	0x20000090
 80005b8:	48000800 	.word	0x48000800
 80005bc:	48000400 	.word	0x48000400

080005c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b093      	sub	sp, #76	; 0x4c
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	2414      	movs	r4, #20
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2334      	movs	r3, #52	; 0x34
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 f996 	bl	8003902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2310      	movs	r3, #16
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 f98f 	bl	8003902 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2220      	movs	r2, #32
 80005e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2201      	movs	r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 f9bd 	bl	8002978 <HAL_RCC_OscConfig>
 80005fe:	0003      	movs	r3, r0
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	4193      	sbcs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 800060a:	f000 f96f 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2207      	movs	r2, #7
 8000612:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2203      	movs	r2, #3
 8000618:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2101      	movs	r1, #1
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fd2a 	bl	8003084 <HAL_RCC_ClockConfig>
 8000630:	0003      	movs	r3, r0
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800063c:	f000 f956 	bl	80008ec <Error_Handler>
  }
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b013      	add	sp, #76	; 0x4c
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <_ZL12MX_TIM6_Initv>:


/* USER CODE BEGIN 4 */

static void MX_TIM6_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
//
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064e:	003b      	movs	r3, r7
 8000650:	0018      	movs	r0, r3
 8000652:	2308      	movs	r3, #8
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f003 f953 	bl	8003902 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */
//
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 800065e:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <_ZL12MX_TIM6_Initv+0x80>)
 8000660:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 8000664:	22fa      	movs	r2, #250	; 0xfa
 8000666:	01d2      	lsls	r2, r2, #7
 8000668:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 750;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <_ZL12MX_TIM6_Initv+0x84>)
 8000674:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fe58 	bl	8003334 <HAL_TIM_Base_Init>
 8000684:	0003      	movs	r3, r0
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	4193      	sbcs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 8000690:	f000 f92c 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006a0:	003a      	movs	r2, r7
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_ZL12MX_TIM6_Initv+0x7c>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 f872 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	0003      	movs	r3, r0
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_ZL12MX_TIM6_Initv+0x74>
  {
    Error_Handler();
 80006b8:	f000 f918 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
//
  /* USER CODE END TIM6_Init 2 */

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000e0 	.word	0x200000e0
 80006c8:	40001000 	.word	0x40001000
 80006cc:	000002ee 	.word	0x000002ee

080006d0 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f003 f90e 	bl	8003902 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0289      	lsls	r1, r1, #10
 80006f0:	430a      	orrs	r2, r1
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 80006f6:	695a      	ldr	r2, [r3, #20]
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	029b      	lsls	r3, r3, #10
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000704:	695a      	ldr	r2, [r3, #20]
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0309      	lsls	r1, r1, #12
 800070c:	430a      	orrs	r2, r1
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	031b      	lsls	r3, r3, #12
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	02c9      	lsls	r1, r1, #11
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	02db      	lsls	r3, r3, #11
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LT_out_Pin|RT_out_Pin, GPIO_PIN_RESET);
 800073a:	23c0      	movs	r3, #192	; 0xc0
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	481c      	ldr	r0, [pc, #112]	; (80007b0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	0019      	movs	r1, r3
 8000744:	f002 f8e0 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Horn_out_Pin|Headlights_out_Pin, GPIO_PIN_RESET);
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <_ZL12MX_GPIO_Initv+0xe4>)
 800074a:	2200      	movs	r2, #0
 800074c:	2130      	movs	r1, #48	; 0x30
 800074e:	0018      	movs	r0, r3
 8000750:	f002 f8da 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LT_out_Pin RT_out_Pin */
  GPIO_InitStruct.Pin = LT_out_Pin|RT_out_Pin;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	22c0      	movs	r2, #192	; 0xc0
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2201      	movs	r2, #1
 8000760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	0021      	movs	r1, r4
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	000c      	movs	r4, r1
 8000772:	187b      	adds	r3, r7, r1
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f001 ff4d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : Horn_out_Pin Headlights_out_Pin */
  GPIO_InitStruct.Pin = Horn_out_Pin|Headlights_out_Pin;
 800077e:	0021      	movs	r1, r4
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	187b      	adds	r3, r7, r1
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <_ZL12MX_GPIO_Initv+0xe4>)
 800079c:	0019      	movs	r1, r3
 800079e:	0010      	movs	r0, r2
 80007a0:	f001 ff3a 	bl	8002618 <HAL_GPIO_Init>

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b009      	add	sp, #36	; 0x24
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000800 	.word	0x48000800
 80007b4:	48000400 	.word	0x48000400

080007b8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE>:

void ReceiveAndSend(SUBSYSTEM_DATA_MODULE*)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
	auxPacket = aux0.GetOldestDataPacket(&receivedSomething);
 80007c0:	4c44      	ldr	r4, [pc, #272]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 80007c2:	003b      	movs	r3, r7
 80007c4:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x120>)
 80007c6:	4945      	ldr	r1, [pc, #276]	; (80008dc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x124>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 f894 	bl	80008f6 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
 80007ce:	003b      	movs	r3, r7
 80007d0:	0020      	movs	r0, r4
 80007d2:	0019      	movs	r1, r3
 80007d4:	2308      	movs	r3, #8
 80007d6:	001a      	movs	r2, r3
 80007d8:	f003 f88a 	bl	80038f0 <memcpy>
	if(receivedSomething)
 80007dc:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x120>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d100      	bne.n	80007e6 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x2e>
 80007e4:	e072      	b.n	80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x114>
	{
		if (auxPacket.hazardsOn)
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x40>
		{
			//Turn on Interrupt
			HAL_TIM_Base_Start_IT(&htim6);
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fdcb 	bl	800338c <HAL_TIM_Base_Start_IT>
 80007f6:	e011      	b.n	800081c <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x64>
			//The interrupt is going to toggle the hazards
		}
		else
		{
			//Turn off the Interrupt
			HAL_TIM_Base_Stop_IT(&htim6);
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fde8 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
			//Turn off left and right
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	4837      	ldr	r0, [pc, #220]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 8000806:	2200      	movs	r2, #0
 8000808:	0019      	movs	r1, r3
 800080a:	f002 f87d 	bl	8002908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4834      	ldr	r0, [pc, #208]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 8000814:	2200      	movs	r2, #0
 8000816:	0019      	movs	r1, r3
 8000818:	f002 f876 	bl	8002908 <HAL_GPIO_WritePin>
		}
		if (auxPacket.headlightsOn)
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 800081e:	79db      	ldrb	r3, [r3, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x7a>
		{
			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_SET);
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x130>)
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	0018      	movs	r0, r3
 800082c:	f002 f86c 	bl	8002908 <HAL_GPIO_WritePin>
 8000830:	e005      	b.n	800083e <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x86>
		}
		else
		{
			HAL_GPIO_WritePin(Headlights_out_GPIO_Port, Headlights_out_Pin, GPIO_PIN_RESET);
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x130>)
 8000834:	2200      	movs	r2, #0
 8000836:	2120      	movs	r1, #32
 8000838:	0018      	movs	r0, r3
 800083a:	f002 f865 	bl	8002908 <HAL_GPIO_WritePin>
		}
		if (auxPacket.leftOn)
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00b      	beq.n	800085e <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xa6>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fd9f 	bl	800338c <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_SET);
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 8000854:	2201      	movs	r2, #1
 8000856:	0019      	movs	r1, r3
 8000858:	f002 f856 	bl	8002908 <HAL_GPIO_WritePin>
 800085c:	e00a      	b.n	8000874 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xbc>
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim6);
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fdb5 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LT_out_GPIO_Port, LT_out_Pin, GPIO_PIN_RESET);
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	481e      	ldr	r0, [pc, #120]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 800086c:	2200      	movs	r2, #0
 800086e:	0019      	movs	r1, r3
 8000870:	f002 f84a 	bl	8002908 <HAL_GPIO_WritePin>
		}
		if (auxPacket.rightOn)
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 8000876:	799b      	ldrb	r3, [r3, #6]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00b      	beq.n	8000894 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xdc>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fd84 	bl	800338c <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_SET);
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4816      	ldr	r0, [pc, #88]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 800088a:	2201      	movs	r2, #1
 800088c:	0019      	movs	r1, r3
 800088e:	f002 f83b 	bl	8002908 <HAL_GPIO_WritePin>
 8000892:	e00a      	b.n	80008aa <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0xf2>
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim6);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x128>)
 8000896:	0018      	movs	r0, r3
 8000898:	f002 fd9a 	bl	80033d0 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(RT_out_GPIO_Port, RT_out_Pin, GPIO_PIN_RESET);
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x12c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	0019      	movs	r1, r3
 80008a6:	f002 f82f 	bl	8002908 <HAL_GPIO_WritePin>
		}

		if (auxPacket.hornOn)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x11c>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d006      	beq.n	80008c0 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x108>
		{
			HAL_GPIO_WritePin(Horn_out_GPIO_Port, Horn_out_Pin, GPIO_PIN_SET);
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x130>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 f825 	bl	8002908 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(Horn_out_GPIO_Port, Horn_out_Pin, GPIO_PIN_RESET);
		}
	}
}
 80008be:	e005      	b.n	80008cc <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x114>
			HAL_GPIO_WritePin(Horn_out_GPIO_Port, Horn_out_Pin, GPIO_PIN_RESET);
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <_Z14ReceiveAndSendP21SUBSYSTEM_DATA_MODULE+0x130>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 f81e 	bl	8002908 <HAL_GPIO_WritePin>
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b005      	add	sp, #20
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	20000090 	.word	0x20000090
 80008d8:	200000dc 	.word	0x200000dc
 80008dc:	20000098 	.word	0x20000098
 80008e0:	200000e0 	.word	0x200000e0
 80008e4:	48000800 	.word	0x48000800
 80008e8:	48000400 	.word	0x48000400

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 80008f6:	b590      	push	{r4, r7, lr}
 80008f8:	b089      	sub	sp, #36	; 0x24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6178      	str	r0, [r7, #20]
 80008fe:	6139      	str	r1, [r7, #16]
 8000900:	60fa      	str	r2, [r7, #12]
	{
		CHILD_DATA returnData;
	    if(success)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d01a      	beq.n	800093e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	3312      	adds	r3, #18
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f000 f819 	bl	8000948 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000916:	0003      	movs	r3, r0
 8000918:	61fb      	str	r3, [r7, #28]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00d      	beq.n	800093e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8000922:	697c      	ldr	r4, [r7, #20]
 8000924:	003b      	movs	r3, r7
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f9c5 	bl	8000cba <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>
 8000930:	003b      	movs	r3, r7
 8000932:	0020      	movs	r0, r4
 8000934:	0019      	movs	r1, r3
 8000936:	2308      	movs	r3, #8
 8000938:	001a      	movs	r2, r3
 800093a:	f002 ffd9 	bl	80038f0 <memcpy>
	        }
	    }
	    return returnData;
 800093e:	46c0      	nop			; (mov r8, r8)
	}
 8000940:	6978      	ldr	r0, [r7, #20]
 8000942:	46bd      	mov	sp, r7
 8000944:	b009      	add	sp, #36	; 0x24
 8000946:	bd90      	pop	{r4, r7, pc}

08000948 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 8000952:	230e      	movs	r3, #14
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	8b5a      	ldrh	r2, [r3, #26]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	8b1b      	ldrh	r3, [r3, #24]
 8000962:	429a      	cmp	r2, r3
 8000964:	d10a      	bne.n	800097c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d022      	beq.n	80009ba <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
            if(success)
 800097a:	e01e      	b.n	80009ba <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000988:	230e      	movs	r3, #14
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	8b52      	ldrh	r2, [r2, #26]
 8000990:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	8b5b      	ldrh	r3, [r3, #26]
 8000996:	3301      	adds	r3, #1
 8000998:	2103      	movs	r1, #3
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fd24 	bl	80003e8 <__aeabi_idivmod>
 80009a0:	000b      	movs	r3, r1
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	8b5a      	ldrh	r2, [r3, #26]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	8b1b      	ldrh	r3, [r3, #24]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d102      	bne.n	80009ba <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80009ba:	230e      	movs	r3, #14
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	18d3      	adds	r3, r2, r3
    }
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <_Z41__static_initialization_and_destruction_0ii>:
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d107      	bne.n	80009f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d103      	bne.n	80009f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
AUX_MESSAGE_0 aux0;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f9be 	bl	8000d6c <_ZN13AUX_MESSAGE_0C1Ev>
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	0000ffff 	.word	0x0000ffff
 80009fc:	20000098 	.word	0x20000098

08000a00 <_GLOBAL__sub_I_auxPacket>:
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <_GLOBAL__sub_I_auxPacket+0x14>)
 8000a06:	0019      	movs	r1, r3
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffe1 	bl	80009d0 <_Z41__static_initialization_and_destruction_0ii>
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	0000ffff 	.word	0x0000ffff

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	699a      	ldr	r2, [r3, #24]
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	619a      	str	r2, [r3, #24]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_MspInit+0x44>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	2314      	movs	r3, #20
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2314      	movs	r3, #20
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f002 ff45 	bl	8003902 <memset>
  if(hcan->Instance==CAN)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_CAN_MspInit+0x94>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d133      	bne.n	8000aea <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */
//
  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000a84:	69da      	ldr	r2, [r3, #28]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0489      	lsls	r1, r1, #18
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	049b      	lsls	r3, r3, #18
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0289      	lsls	r1, r1, #10
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_CAN_MspInit+0x98>)
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	029b      	lsls	r3, r3, #10
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aba:	2114      	movs	r1, #20
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	22c0      	movs	r2, #192	; 0xc0
 8000ac0:	0152      	lsls	r2, r2, #5
 8000ac2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2204      	movs	r2, #4
 8000ada:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	187a      	adds	r2, r7, r1
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fd97 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */
//
  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b00a      	add	sp, #40	; 0x28
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40006400 	.word	0x40006400
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	2110      	movs	r1, #16
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	2210      	movs	r2, #16
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2011      	movs	r0, #17
 8000b2c:	f001 fd42 	bl	80025b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b30:	2011      	movs	r0, #17
 8000b32:	f001 fd54 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40001000 	.word	0x40001000
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 fea0 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <TIM6_DAC_IRQHandler+0x14>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fc4e 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	200000e0 	.word	0x200000e0

08000b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	return 1;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_kill>:

int _kill(int pid, int sig)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000baa:	f002 fe77 	bl	800389c <__errno>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	2216      	movs	r2, #22
 8000bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	425b      	negs	r3, r3
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_exit>:

void _exit (int status)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425a      	negs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ffe5 	bl	8000ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bd6:	e7fe      	b.n	8000bd6 <_exit+0x16>

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	2408      	movs	r4, #8
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	6018      	str	r0, [r3, #0]
 8000bee:	6059      	str	r1, [r3, #4]
 8000bf0:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	187a      	adds	r2, r7, r1
 8000c00:	7912      	ldrb	r2, [r2, #4]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	79db      	ldrb	r3, [r3, #7]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	799b      	ldrb	r3, [r3, #6]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b25a      	sxtb	r2, r3
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	78db      	ldrb	r3, [r3, #3]
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b005      	add	sp, #20
 8000cb8:	bd90      	pop	{r4, r7, pc}

08000cba <_ZN13AUX_MESSAGE_017arrayToDataPacketEPh>:

AUX_MESSAGE_0_DATA_PACKET AUX_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
	assert_param(input != nullptr);

	AUX_MESSAGE_0_DATA_PACKET output;
	output.hazardsOn = input[0] & (1 << 0);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4193      	sbcs	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	711a      	strb	r2, [r3, #4]
	output.headlightsOn = input[0] & (1 << 1);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	1e5a      	subs	r2, r3, #1
 8000ce4:	4193      	sbcs	r3, r2
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	71da      	strb	r2, [r3, #7]
	output.leftOn = input[0] & (1 << 2);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	715a      	strb	r2, [r3, #5]
	output.rightOn = input[0] & (1 << 3);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	001a      	movs	r2, r3
 8000d06:	2308      	movs	r3, #8
 8000d08:	4013      	ands	r3, r2
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4193      	sbcs	r3, r2
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	719a      	strb	r2, [r3, #6]
	output.cplusOn = input[0] & (1 << 4);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	4193      	sbcs	r3, r2
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	701a      	strb	r2, [r3, #0]
	output.cminusOn = input[0] & (1 << 5);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2320      	movs	r3, #32
 8000d30:	4013      	ands	r3, r2
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	4193      	sbcs	r3, r2
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	705a      	strb	r2, [r3, #1]
	output.hornOn = input[0] & (1 << 6);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001a      	movs	r2, r3
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	4013      	ands	r3, r2
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	4193      	sbcs	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	709a      	strb	r2, [r3, #2]
	output.regenOn = input[0] & (1 << 7);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	09db      	lsrs	r3, r3, #7
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	70da      	strb	r2, [r3, #3]

	return output;
 8000d60:	46c0      	nop			; (mov r8, r8)
}
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN13AUX_MESSAGE_0C1Ev>:

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	2201      	movs	r2, #1
 8000d84:	f000 f80c 	bl	8000da0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
{}
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	000003ff 	.word	0x000003ff
 8000d9c:	080039f8 	.word	0x080039f8

08000da0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	0019      	movs	r1, r3
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	1c0a      	adds	r2, r1, #0
 8000db4:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	781c      	ldrb	r4, [r3, #0]
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	2324      	movs	r3, #36	; 0x24
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2320      	movs	r3, #32
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	0023      	movs	r3, r4
 8000dd4:	f000 f884 	bl	8000ee0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	601a      	str	r2, [r3, #0]
		{}
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b005      	add	sp, #20
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	08003a04 	.word	0x08003a04

08000dec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3309      	adds	r3, #9
 8000df8:	001c      	movs	r4, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2239      	movs	r2, #57	; 0x39
 8000dfe:	5c99      	ldrb	r1, [r3, r2]
 8000e00:	1898      	adds	r0, r3, r2
 8000e02:	7840      	ldrb	r0, [r0, #1]
 8000e04:	0200      	lsls	r0, r0, #8
 8000e06:	4301      	orrs	r1, r0
 8000e08:	1898      	adds	r0, r3, r2
 8000e0a:	7880      	ldrb	r0, [r0, #2]
 8000e0c:	0400      	lsls	r0, r0, #16
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	1898      	adds	r0, r3, r2
 8000e12:	78c0      	ldrb	r0, [r0, #3]
 8000e14:	0600      	lsls	r0, r0, #24
 8000e16:	4301      	orrs	r1, r0
 8000e18:	2000      	movs	r0, #0
 8000e1a:	0008      	movs	r0, r1
 8000e1c:	189b      	adds	r3, r3, r2
 8000e1e:	791a      	ldrb	r2, [r3, #4]
 8000e20:	7959      	ldrb	r1, [r3, #5]
 8000e22:	0209      	lsls	r1, r1, #8
 8000e24:	430a      	orrs	r2, r1
 8000e26:	7999      	ldrb	r1, [r3, #6]
 8000e28:	0409      	lsls	r1, r1, #16
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	79db      	ldrb	r3, [r3, #7]
 8000e2e:	061b      	lsls	r3, r3, #24
 8000e30:	4313      	orrs	r3, r2
 8000e32:	2100      	movs	r1, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	0022      	movs	r2, r4
 8000e38:	f7ff fed3 	bl	8000be2 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b003      	add	sp, #12
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b08d      	sub	sp, #52	; 0x34
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 f89d 	bl	8001f90 <HAL_CAN_GetRxFifoFillLevel>
 8000e56:	0003      	movs	r3, r0
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	4193      	sbcs	r3, r2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d02e      	beq.n	8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8000e62:	2308      	movs	r3, #8
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2410      	movs	r4, #16
 8000e68:	193a      	adds	r2, r7, r4
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f000 ff73 	bl	8001d58 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	e002      	b.n	8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000e82:	2310      	movs	r3, #16
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 f863 	bl	8000f54 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0d9      	beq.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	7a1b      	ldrb	r3, [r3, #8]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d1d1      	bne.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	18fa      	adds	r2, r7, r3
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 f8f5 	bl	80010a0 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 f87d 	bl	8000fb8 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000ebe:	e7c5      	b.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b00d      	add	sp, #52	; 0x34
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <CEC_CAN_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f8b3 	bl	800203a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000198 	.word	0x20000198

08000ee0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	0019      	movs	r1, r3
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	1c0a      	adds	r2, r1, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1dfa      	adds	r2, r7, #7
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	721a      	strb	r2, [r3, #8]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3312      	adds	r3, #18
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 f8d9 	bl	80010c6 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1dba      	adds	r2, r7, #6
 8000f18:	2130      	movs	r1, #48	; 0x30
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	545a      	strb	r2, [r3, r1]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2218      	movs	r2, #24
 8000f22:	18ba      	adds	r2, r7, r2
 8000f24:	2131      	movs	r1, #49	; 0x31
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	545a      	strb	r2, [r3, r1]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	221c      	movs	r2, #28
 8000f2e:	18ba      	adds	r2, r7, r2
 8000f30:	2132      	movs	r1, #50	; 0x32
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	545a      	strb	r2, [r3, r1]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2238      	movs	r2, #56	; 0x38
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]
{}
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	08003a10 	.word	0x08003a10

08000f54 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8000f60:	0011      	movs	r1, r2
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 f97d 	bl	8001262 <_ZN14RX_BINARY_TREE11FindElementEm>
 8000f68:	0003      	movs	r3, r0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000120 	.word	0x20000120

08000f78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2238      	movs	r2, #56	; 0x38
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4053      	eors	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x34>
    {
        SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x3c>)
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f944 	bl	800122c <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
        //TODO: Fix We are currently receiving even if add Node fails.
        isReceiving = true;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2238      	movs	r2, #56	; 0x38
 8000fa8:	2101      	movs	r1, #1
 8000faa:	5499      	strb	r1, [r3, r2]
    } 
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000120 	.word	0x20000120

08000fb8 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	0010      	movs	r0, r2
 8000fd0:	4798      	blx	r3
    }
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000fe4:	4a2d      	ldr	r2, [pc, #180]	; (800109c <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8000fe6:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	605a      	str	r2, [r3, #4]
	//hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	05d2      	lsls	r2, r2, #23
 8000ff4:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8000ffe:	22c0      	movs	r2, #192	; 0xc0
 8001000:	0312      	lsls	r2, r2, #12
 8001002:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	0352      	lsls	r2, r2, #13
 800100a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800102c:	2200      	movs	r2, #0
 800102e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fc5a 	bl	80018ec <HAL_CAN_Init>
 8001038:	0003      	movs	r3, r0
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	4193      	sbcs	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6c>
	{
		Error_Handler();
 8001044:	f7ff fc52 	bl	80008ec <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001048:	003b      	movs	r3, r7
 800104a:	2201      	movs	r2, #1
 800104c:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001054:	003b      	movs	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 800105a:	003b      	movs	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 8001060:	003b      	movs	r3, r7
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8001066:	003b      	movs	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 800106c:	003b      	movs	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001072:	003a      	movs	r2, r7
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fd35 	bl	8001ae8 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001080:	2102      	movs	r1, #2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 ffaf 	bl	8001fe6 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fe1e 	bl	8001ccc <HAL_CAN_Start>
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b00a      	add	sp, #40	; 0x28
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000198 	.word	0x20000198
 800109c:	40006400 	.word	0x40006400

080010a0 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3312      	adds	r3, #18
 80010ae:	240f      	movs	r4, #15
 80010b0:	193a      	adds	r2, r7, r4
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 f818 	bl	80010ea <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b005      	add	sp, #20
 80010c4:	bd90      	pop	{r4, r7, pc}

080010c6 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	831a      	strh	r2, [r3, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	835a      	strh	r2, [r3, #26]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	771a      	strb	r2, [r3, #28]
    {}
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8b5a      	ldrh	r2, [r3, #26]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8b1b      	ldrh	r3, [r3, #24]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10d      	bne.n	800111e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	7f1b      	ldrb	r3, [r3, #28]
 8001106:	2201      	movs	r2, #1
 8001108:	4053      	eors	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d025      	beq.n	8001162 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
            if(success)
 800111c:	e021      	b.n	8001162 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8b19      	ldrh	r1, [r3, #24]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f819 	bl	800116a <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8b1b      	ldrh	r3, [r3, #24]
 800113c:	3301      	adds	r3, #1
 800113e:	2103      	movs	r1, #3
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff f951 	bl	80003e8 <__aeabi_idivmod>
 8001146:	000b      	movs	r3, r1
 8001148:	b29a      	uxth	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8b1a      	ldrh	r2, [r3, #24]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8b5b      	ldrh	r3, [r3, #26]
 8001156:	429a      	cmp	r2, r3
 8001158:	d103      	bne.n	8001162 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	771a      	strb	r2, [r3, #28]
    }
 8001160:	e7ff      	b.n	8001162 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 800116a:	b590      	push	{r4, r7, lr}
 800116c:	b087      	sub	sp, #28
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	230a      	movs	r3, #10
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 800117c:	2316      	movs	r3, #22
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]
 8001184:	2316      	movs	r3, #22
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d815      	bhi.n	80011ba <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 800118e:	2416      	movs	r4, #22
 8001190:	193b      	adds	r3, r7, r4
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	18d1      	adds	r1, r2, r3
 8001198:	230a      	movs	r3, #10
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	7808      	ldrb	r0, [r1, #0]
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	188a      	adds	r2, r1, r2
 80011aa:	1c01      	adds	r1, r0, #0
 80011ac:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	3201      	adds	r2, #1
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	e7e4      	b.n	8001184 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b007      	add	sp, #28
 80011c0:	bd90      	pop	{r4, r7, pc}
	...

080011c4 <_Z41__static_initialization_and_destruction_0ii>:

}
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d103      	bne.n	80011e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f814 	bl	800120c <_ZN14RX_BINARY_TREEC1Ev>
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0000ffff 	.word	0x0000ffff
 80011f0:	20000120 	.word	0x20000120

080011f4 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80011fa:	0019      	movs	r1, r3
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ffe1 	bl	80011c4 <_Z41__static_initialization_and_destruction_0ii>
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	0000ffff 	.word	0x0000ffff

0800120c <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	671a      	str	r2, [r3, #112]	; 0x70
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2274      	movs	r2, #116	; 0x74
 800121e:	2100      	movs	r1, #0
 8001220:	5299      	strh	r1, [r3, r2]
{}
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}

0800122c <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

void RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2274      	movs	r2, #116	; 0x74
 800123a:	5a9b      	ldrh	r3, [r3, r2]
 800123c:	2b06      	cmp	r3, #6
 800123e:	d80c      	bhi.n	800125a <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
    {
        root = insert(root,new_element);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f9a6 	bl	80015a0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001254:	0002      	movs	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	671a      	str	r2, [r3, #112]	; 0x70
    }
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f80d 	bl	8001294 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 800127a:	0003      	movs	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001284:	2300      	movs	r3, #0
 8001286:	e001      	b.n	800128c <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
    }
    
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	e034      	b.n	8001314 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 f88b 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80012b6:	0002      	movs	r2, r0
 80012b8:	2301      	movs	r3, #1
 80012ba:	1c19      	adds	r1, r3, #0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4293      	cmp	r3, r2
 80012c0:	db01      	blt.n	80012c6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 80012c2:	2300      	movs	r3, #0
 80012c4:	1c19      	adds	r1, r3, #0
 80012c6:	b2cb      	uxtb	r3, r1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff ffdd 	bl	8001294 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 80012da:	0003      	movs	r3, r0
 80012dc:	e01a      	b.n	8001314 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 f871 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80012ea:	0002      	movs	r2, r0
 80012ec:	2301      	movs	r3, #1
 80012ee:	1c19      	adds	r1, r3, #0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	dc01      	bgt.n	80012fa <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 80012f6:	2300      	movs	r3, #0
 80012f8:	1c19      	adds	r1, r3, #0
 80012fa:	b2cb      	uxtb	r3, r1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	6899      	ldr	r1, [r3, #8]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ffc3 	bl	8001294 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 800130e:	0003      	movs	r3, r0
 8001310:	e000      	b.n	8001314 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001312:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b004      	add	sp, #16
 800131a:	bd80      	pop	{r7, pc}

0800131c <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2274      	movs	r2, #116	; 0x74
 800132a:	5a9b      	ldrh	r3, [r3, r2]
 800132c:	001a      	movs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2274      	movs	r2, #116	; 0x74
 800133a:	5a9b      	ldrh	r3, [r3, r2]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	3304      	adds	r3, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2274      	movs	r2, #116	; 0x74
 800134c:	5a9b      	ldrh	r3, [r3, r2]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	3308      	adds	r3, #8
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2274      	movs	r2, #116	; 0x74
 800135e:	5a9b      	ldrh	r3, [r3, r2]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	18d3      	adds	r3, r2, r3
 8001366:	330c      	adds	r3, #12
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2274      	movs	r2, #116	; 0x74
 8001370:	5a9b      	ldrh	r3, [r3, r2]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	b290      	uxth	r0, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	2174      	movs	r1, #116	; 0x74
 800137a:	5250      	strh	r0, [r2, r1]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	18d3      	adds	r3, r2, r3
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d901      	bls.n	80013a2 <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	e000      	b.n	80013a4 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 80013a2:	687b      	ldr	r3, [r7, #4]
}  
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 80013bc:	2300      	movs	r3, #0
 80013be:	e001      	b.n	80013c4 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
 80013e0:	e009      	b.n	80013f6 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
 80013ee:	e002      	b.n	80013f6 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 800140e:	2301      	movs	r3, #1
 8001410:	425b      	negs	r3, r3
 8001412:	e001      	b.n	8001418 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0011      	movs	r1, r2
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ffae 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001450:	0003      	movs	r3, r0
 8001452:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff ffa5 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001462:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001464:	001a      	movs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0021      	movs	r1, r4
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff8d 	bl	800138a <_ZN14RX_BINARY_TREE3maxEmm>
 8001470:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff91 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 800148a:	0003      	movs	r3, r0
 800148c:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0011      	movs	r1, r2
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff88 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 800149c:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 800149e:	001a      	movs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0021      	movs	r1, r4
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff70 	bl	800138a <_ZN14RX_BINARY_TREE3maxEmm>
 80014aa:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 80014b6:	68fb      	ldr	r3, [r7, #12]
} 
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b005      	add	sp, #20
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff5e 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 80014f0:	0003      	movs	r3, r0
 80014f2:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff55 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001502:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8001504:	001a      	movs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0021      	movs	r1, r4
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff ff3d 	bl	800138a <_ZN14RX_BINARY_TREE3maxEmm>
 8001510:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff ff41 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 800152a:	0003      	movs	r3, r0
 800152c:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff ff38 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 800153c:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 800153e:	001a      	movs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0021      	movs	r1, r4
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ff20 	bl	800138a <_ZN14RX_BINARY_TREE3maxEmm>
 800154a:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001556:	68fb      	ldr	r3, [r7, #12]
}  
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b005      	add	sp, #20
 800155e:	bd90      	pop	{r4, r7, pc}

08001560 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 8001570:	2300      	movs	r3, #0
 8001572:	e011      	b.n	8001598 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ff15 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001582:	0003      	movs	r3, r0
 8001584:	001c      	movs	r4, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0011      	movs	r1, r2
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff ff0c 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001594:	0003      	movs	r3, r0
 8001596:	1ae3      	subs	r3, r4, r3
}  
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b003      	add	sp, #12
 800159e:	bd90      	pop	{r4, r7, pc}

080015a0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff feaf 	bl	800131c <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 80015be:	0003      	movs	r3, r0
 80015c0:	e101      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ff18 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80015ce:	0004      	movs	r4, r0
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7ff fef8 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80015dc:	0003      	movs	r3, r0
 80015de:	2201      	movs	r2, #1
 80015e0:	429c      	cmp	r4, r3
 80015e2:	db01      	blt.n	80015e8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 80015e4:	2300      	movs	r3, #0
 80015e6:	1c1a      	adds	r2, r3, #0
 80015e8:	b2d3      	uxtb	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff ffd2 	bl	80015a0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80015fc:	0002      	movs	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e022      	b.n	800164a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff fef7 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001610:	0004      	movs	r4, r0
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fed7 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800161e:	0003      	movs	r3, r0
 8001620:	2201      	movs	r2, #1
 8001622:	429c      	cmp	r4, r3
 8001624:	dc01      	bgt.n	800162a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 8001626:	2300      	movs	r3, #0
 8001628:	1c1a      	adds	r2, r3, #0
 800162a:	b2d3      	uxtb	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00a      	beq.n	8001646 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff ffb1 	bl	80015a0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 800163e:	0002      	movs	r2, r0
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	e001      	b.n	800164a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	e0bd      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff feaa 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001658:	0003      	movs	r3, r0
 800165a:	001c      	movs	r4, r3
                        height(node->right));  
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fea1 	bl	80013ac <_ZN14RX_BINARY_TREE6heightEP4Node>
 800166a:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 800166c:	001a      	movs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0021      	movs	r1, r4
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fe89 	bl	800138a <_ZN14RX_BINARY_TREE3maxEmm>
 8001678:	0003      	movs	r3, r0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff ff68 	bl	8001560 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b01      	cmp	r3, #1
 8001698:	dd12      	ble.n	80016c0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff feac 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016a6:	0004      	movs	r4, r0
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fe8b 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016b6:	0003      	movs	r3, r0
 80016b8:	429c      	cmp	r4, r3
 80016ba:	da01      	bge.n	80016c0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff fea7 	bl	8001420 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80016d2:	0003      	movs	r3, r0
 80016d4:	e077      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	da12      	bge.n	8001702 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff fe8b 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80016e8:	0004      	movs	r4, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	0011      	movs	r1, r2
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff fe6a 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80016f8:	0003      	movs	r3, r0
 80016fa:	429c      	cmp	r4, r3
 80016fc:	dd01      	ble.n	8001702 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 8001702:	2300      	movs	r3, #0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0011      	movs	r1, r2
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fed6 	bl	80014c0 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001714:	0003      	movs	r3, r0
 8001716:	e056      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b01      	cmp	r3, #1
 800171c:	dd12      	ble.n	8001744 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff fe6a 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800172a:	0004      	movs	r4, r0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fe49 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800173a:	0003      	movs	r3, r0
 800173c:	429c      	cmp	r4, r3
 800173e:	dd01      	ble.n	8001744 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8001744:	2300      	movs	r3, #0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d011      	beq.n	800176e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff feb4 	bl	80014c0 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8001758:	0002      	movs	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fe5b 	bl	8001420 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 800176a:	0003      	movs	r3, r0
 800176c:	e02b      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	da12      	bge.n	800179a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff fe3f 	bl	80013fe <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8001780:	0004      	movs	r4, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	0011      	movs	r1, r2
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff fe1e 	bl	80013cc <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001790:	0003      	movs	r3, r0
 8001792:	429c      	cmp	r4, r3
 8001794:	da01      	bge.n	800179a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 800179a:	2300      	movs	r3, #0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d011      	beq.n	80017c4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	0011      	movs	r1, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fe39 	bl	8001420 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80017ae:	0002      	movs	r2, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0011      	movs	r1, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fe80 	bl	80014c0 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80017c0:	0003      	movs	r3, r0
 80017c2:	e000      	b.n	80017c6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 80017c4:	68bb      	ldr	r3, [r7, #8]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b007      	add	sp, #28
 80017cc:	bd90      	pop	{r4, r7, pc}
	...

080017d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopForever+0x6>)
  ldr r1, =_edata
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <LoopForever+0xe>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <LoopForever+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017fa:	f7ff f9ed 	bl	8000bd8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017fe:	f002 f853 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7fe fe33 	bl	800046c <main>

08001806 <LoopForever>:

LoopForever:
    b LoopForever
 8001806:	e7fe      	b.n	8001806 <LoopForever>
  ldr   r0, =_estack
 8001808:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001814:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8001818:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800181c:	200001c8 	.word	0x200001c8

08001820 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_COMP_IRQHandler>
	...

08001824 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_Init+0x24>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_Init+0x24>)
 800182e:	2110      	movs	r1, #16
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f809 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183a:	f7ff f8ed 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_InitTick+0x5c>)
 8001856:	681c      	ldr	r4, [r3, #0]
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_InitTick+0x60>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	0019      	movs	r1, r3
 800185e:	23fa      	movs	r3, #250	; 0xfa
 8001860:	0098      	lsls	r0, r3, #2
 8001862:	f7fe fc51 	bl	8000108 <__udivsi3>
 8001866:	0003      	movs	r3, r0
 8001868:	0019      	movs	r1, r3
 800186a:	0020      	movs	r0, r4
 800186c:	f7fe fc4c 	bl	8000108 <__udivsi3>
 8001870:	0003      	movs	r3, r0
 8001872:	0018      	movs	r0, r3
 8001874:	f000 fec3 	bl	80025fe <HAL_SYSTICK_Config>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00f      	b.n	80018a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d80b      	bhi.n	800189e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	2301      	movs	r3, #1
 800188a:	425b      	negs	r3, r3
 800188c:	2200      	movs	r2, #0
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fe90 	bl	80025b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_InitTick+0x64>)
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b003      	add	sp, #12
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	001a      	movs	r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	18d2      	adds	r2, r2, r3
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_IncTick+0x20>)
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200001c0 	.word	0x200001c0

080018d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GetTick+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	200001c0 	.word	0x200001c0

080018ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0f0      	b.n	8001ae0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff f8a7 	bl	8000a60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2102      	movs	r1, #2
 800191e:	438a      	bics	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001922:	f7ff ffd9 	bl	80018d8 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192a:	e013      	b.n	8001954 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800192c:	f7ff ffd4 	bl	80018d8 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d90c      	bls.n	8001954 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	0292      	lsls	r2, r2, #10
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	2105      	movs	r1, #5
 800194e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0c5      	b.n	8001ae0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d1e5      	bne.n	800192c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff ffb2 	bl	80018d8 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001978:	e013      	b.n	80019a2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800197a:	f7ff ffad 	bl	80018d8 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b0a      	cmp	r3, #10
 8001986:	d90c      	bls.n	80019a2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	0292      	lsls	r2, r2, #10
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2220      	movs	r2, #32
 800199a:	2105      	movs	r1, #5
 800199c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e09e      	b.n	8001ae0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0e5      	beq.n	800197a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7e1b      	ldrb	r3, [r3, #24]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e5b      	ldrb	r3, [r3, #25]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	438a      	bics	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e9b      	ldrb	r3, [r3, #26]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2120      	movs	r1, #32
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2120      	movs	r1, #32
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7edb      	ldrb	r3, [r3, #27]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2110      	movs	r1, #16
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2110      	movs	r1, #16
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2108      	movs	r1, #8
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f5b      	ldrb	r3, [r3, #29]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d108      	bne.n	8001a9a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2104      	movs	r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e007      	b.n	8001aaa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	1e5a      	subs	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2101      	movs	r1, #1
 8001adc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001af8:	2013      	movs	r0, #19
 8001afa:	183b      	adds	r3, r7, r0
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	2120      	movs	r1, #32
 8001b00:	5c52      	ldrb	r2, [r2, r1]
 8001b02:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d005      	beq.n	8001b18 <HAL_CAN_ConfigFilter+0x30>
 8001b0c:	2313      	movs	r3, #19
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d000      	beq.n	8001b18 <HAL_CAN_ConfigFilter+0x30>
 8001b16:	e0cd      	b.n	8001cb4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	58d3      	ldr	r3, [r2, r3]
 8001b20:	2201      	movs	r2, #1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	0011      	movs	r1, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	221f      	movs	r2, #31
 8001b34:	4013      	ands	r3, r2
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	2387      	movs	r3, #135	; 0x87
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	58d3      	ldr	r3, [r2, r3]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	43d2      	mvns	r2, r2
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	2387      	movs	r3, #135	; 0x87
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d129      	bne.n	8001bb2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	2383      	movs	r3, #131	; 0x83
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	58d3      	ldr	r3, [r2, r3]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	2383      	movs	r3, #131	; 0x83
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b88:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3248      	adds	r2, #72	; 0x48
 8001b8e:	00d2      	lsls	r2, r2, #3
 8001b90:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	3348      	adds	r3, #72	; 0x48
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	18cb      	adds	r3, r1, r3
 8001bae:	3304      	adds	r3, #4
 8001bb0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d128      	bne.n	8001c0c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	2383      	movs	r3, #131	; 0x83
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	58d2      	ldr	r2, [r2, r3]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	2383      	movs	r3, #131	; 0x83
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001be2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3248      	adds	r2, #72	; 0x48
 8001be8:	00d2      	lsls	r2, r2, #3
 8001bea:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	3348      	adds	r3, #72	; 0x48
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	18cb      	adds	r3, r1, r3
 8001c08:	3304      	adds	r3, #4
 8001c0a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	2381      	movs	r3, #129	; 0x81
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	58d3      	ldr	r3, [r2, r3]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	401a      	ands	r2, r3
 8001c22:	0011      	movs	r1, r2
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	2381      	movs	r3, #129	; 0x81
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	50d1      	str	r1, [r2, r3]
 8001c2c:	e00a      	b.n	8001c44 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	2381      	movs	r3, #129	; 0x81
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	58d2      	ldr	r2, [r2, r3]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	2381      	movs	r3, #129	; 0x81
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	2385      	movs	r3, #133	; 0x85
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	58d3      	ldr	r3, [r2, r3]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	43d2      	mvns	r2, r2
 8001c58:	401a      	ands	r2, r3
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	2385      	movs	r3, #133	; 0x85
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	50d1      	str	r1, [r2, r3]
 8001c64:	e00a      	b.n	8001c7c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	2385      	movs	r3, #133	; 0x85
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	58d2      	ldr	r2, [r2, r3]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	0011      	movs	r1, r2
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	2385      	movs	r3, #133	; 0x85
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10a      	bne.n	8001c9a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	2387      	movs	r3, #135	; 0x87
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	58d2      	ldr	r2, [r2, r3]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	0011      	movs	r1, r2
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	2387      	movs	r3, #135	; 0x87
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	58d3      	ldr	r3, [r2, r3]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e007      	b.n	8001cc4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	02d2      	lsls	r2, r2, #11
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	5c9b      	ldrb	r3, [r3, r2]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d12f      	bne.n	8001d40 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fdee 	bl	80018d8 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d00:	e013      	b.n	8001d2a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d02:	f7ff fde9 	bl	80018d8 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b0a      	cmp	r3, #10
 8001d0e:	d90c      	bls.n	8001d2a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0292      	lsls	r2, r2, #10
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	2105      	movs	r1, #5
 8001d24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e012      	b.n	8001d50 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1e5      	bne.n	8001d02 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e007      	b.n	8001d50 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	0312      	lsls	r2, r2, #12
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
  }
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b004      	add	sp, #16
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d66:	2017      	movs	r0, #23
 8001d68:	183b      	adds	r3, r7, r0
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5c52      	ldrb	r2, [r2, r1]
 8001d70:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d005      	beq.n	8001d86 <HAL_CAN_GetRxMessage+0x2e>
 8001d7a:	2317      	movs	r3, #23
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d000      	beq.n	8001d86 <HAL_CAN_GetRxMessage+0x2e>
 8001d84:	e0f8      	b.n	8001f78 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10e      	bne.n	8001daa <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4013      	ands	r3, r2
 8001d96:	d117      	bne.n	8001dc8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	0392      	lsls	r2, r2, #14
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0ee      	b.n	8001f88 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4013      	ands	r3, r2
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0392      	lsls	r2, r2, #14
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0df      	b.n	8001f88 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	321b      	adds	r2, #27
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	58d3      	ldr	r3, [r2, r3]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	321b      	adds	r2, #27
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	58d3      	ldr	r3, [r2, r3]
 8001df0:	0d5b      	lsrs	r3, r3, #21
 8001df2:	055b      	lsls	r3, r3, #21
 8001df4:	0d5a      	lsrs	r2, r3, #21
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00a      	b.n	8001e12 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	321b      	adds	r2, #27
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	58d3      	ldr	r3, [r2, r3]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	321b      	adds	r2, #27
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	58d3      	ldr	r3, [r2, r3]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	331b      	adds	r3, #27
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	3304      	adds	r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	220f      	movs	r2, #15
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	331b      	adds	r3, #27
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	331b      	adds	r3, #27
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	18d3      	adds	r3, r2, r3
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	0c1a      	lsrs	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	23dc      	movs	r3, #220	; 0xdc
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	188a      	adds	r2, r1, r2
 8001e80:	18d3      	adds	r3, r2, r3
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	23dc      	movs	r3, #220	; 0xdc
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	188a      	adds	r2, r1, r2
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0a1a      	lsrs	r2, r3, #8
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	23dc      	movs	r3, #220	; 0xdc
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	188a      	adds	r2, r1, r2
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1a      	lsrs	r2, r3, #16
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	23dc      	movs	r3, #220	; 0xdc
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	188a      	adds	r2, r1, r2
 8001ed0:	18d3      	adds	r3, r2, r3
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e1a      	lsrs	r2, r3, #24
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	23de      	movs	r3, #222	; 0xde
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	188a      	adds	r2, r1, r2
 8001eec:	18d3      	adds	r3, r2, r3
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	23de      	movs	r3, #222	; 0xde
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	188a      	adds	r2, r1, r2
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0a1a      	lsrs	r2, r3, #8
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3305      	adds	r3, #5
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	23de      	movs	r3, #222	; 0xde
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	188a      	adds	r2, r1, r2
 8001f22:	18d3      	adds	r3, r2, r3
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0c1a      	lsrs	r2, r3, #16
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3306      	adds	r3, #6
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	23de      	movs	r3, #222	; 0xde
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	188a      	adds	r2, r1, r2
 8001f3e:	18d3      	adds	r3, r2, r3
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e1a      	lsrs	r2, r3, #24
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3307      	adds	r3, #7
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2120      	movs	r1, #32
 8001f70:	430a      	orrs	r2, r1
 8001f72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e007      	b.n	8001f88 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	02d2      	lsls	r2, r2, #11
 8001f80:	431a      	orrs	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
  }
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b006      	add	sp, #24
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9e:	200b      	movs	r0, #11
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	5c52      	ldrb	r2, [r2, r1]
 8001fa8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001fb2:	230b      	movs	r3, #11
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d10f      	bne.n	8001fdc <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e005      	b.n	8001fdc <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ff0:	200f      	movs	r0, #15
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	5c52      	ldrb	r2, [r2, r1]
 8001ffa:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffc:	183b      	adds	r3, r7, r0
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d004      	beq.n	800200e <HAL_CAN_ActivateNotification+0x28>
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d109      	bne.n	8002022 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e007      	b.n	8002032 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	02d2      	lsls	r2, r2, #11
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
  }
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b004      	add	sp, #16
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b08a      	sub	sp, #40	; 0x28
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d100      	bne.n	8002080 <HAL_CAN_IRQHandler+0x46>
 800207e:	e084      	b.n	800218a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2201      	movs	r2, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d024      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f97e 	bl	800239c <HAL_CAN_TxMailbox0CompleteCallback>
 80020a0:	e017      	b.n	80020d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2204      	movs	r2, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	d005      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	4313      	orrs	r3, r2
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	e00d      	b.n	80020d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d005      	beq.n	80020ca <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	0152      	lsls	r2, r2, #5
 80020c4:	4313      	orrs	r3, r2
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	e003      	b.n	80020d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f97d 	bl	80023cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d028      	beq.n	800212e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	0052      	lsls	r2, r2, #1
 80020e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 f95a 	bl	80023ac <HAL_CAN_TxMailbox1CompleteCallback>
 80020f8:	e019      	b.n	800212e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4013      	ands	r3, r2
 8002102:	d005      	beq.n	8002110 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	0192      	lsls	r2, r2, #6
 800210a:	4313      	orrs	r3, r2
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	e00e      	b.n	800212e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4013      	ands	r3, r2
 8002118:	d005      	beq.n	8002126 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	01d2      	lsls	r2, r2, #7
 8002120:	4313      	orrs	r3, r2
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e003      	b.n	800212e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f957 	bl	80023dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	4013      	ands	r3, r2
 8002136:	d028      	beq.n	800218a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0252      	lsls	r2, r2, #9
 8002140:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	4013      	ands	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f934 	bl	80023bc <HAL_CAN_TxMailbox2CompleteCallback>
 8002154:	e019      	b.n	800218a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	02db      	lsls	r3, r3, #11
 800215c:	4013      	ands	r3, r2
 800215e:	d005      	beq.n	800216c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	0212      	lsls	r2, r2, #8
 8002166:	4313      	orrs	r3, r2
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	e00e      	b.n	800218a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	031b      	lsls	r3, r3, #12
 8002172:	4013      	ands	r3, r2
 8002174:	d005      	beq.n	8002182 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0252      	lsls	r2, r2, #9
 800217c:	4313      	orrs	r3, r2
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	e003      	b.n	800218a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 f931 	bl	80023ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d00c      	beq.n	80021ac <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2210      	movs	r2, #16
 8002196:	4013      	ands	r3, r2
 8002198:	d008      	beq.n	80021ac <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4313      	orrs	r3, r2
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2210      	movs	r2, #16
 80021aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	d00b      	beq.n	80021cc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2208      	movs	r2, #8
 80021b8:	4013      	ands	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2208      	movs	r2, #8
 80021c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f918 	bl	80023fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2203      	movs	r2, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fe fe2e 	bl	8000e44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	4013      	ands	r3, r2
 80021ee:	d00c      	beq.n	800220a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4013      	ands	r3, r2
 80021f6:	d008      	beq.n	800220a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	4313      	orrs	r3, r2
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	2220      	movs	r2, #32
 800220e:	4013      	ands	r3, r2
 8002210:	d00b      	beq.n	800222a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2208      	movs	r2, #8
 8002216:	4013      	ands	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2208      	movs	r2, #8
 8002220:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f8f9 	bl	800241c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2210      	movs	r2, #16
 800222e:	4013      	ands	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2203      	movs	r2, #3
 800223a:	4013      	ands	r3, r2
 800223c:	d003      	beq.n	8002246 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f8e3 	bl	800240c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	029b      	lsls	r3, r3, #10
 800224c:	4013      	ands	r3, r2
 800224e:	d00b      	beq.n	8002268 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2210      	movs	r2, #16
 8002254:	4013      	ands	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2210      	movs	r2, #16
 800225e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f8e2 	bl	800242c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	025b      	lsls	r3, r3, #9
 800226e:	4013      	ands	r3, r2
 8002270:	d00b      	beq.n	800228a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2208      	movs	r2, #8
 8002280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f8d9 	bl	800243c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800228a:	6a3a      	ldr	r2, [r7, #32]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4013      	ands	r3, r2
 8002292:	d100      	bne.n	8002296 <HAL_CAN_IRQHandler+0x25c>
 8002294:	e071      	b.n	800237a <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2204      	movs	r2, #4
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_CAN_IRQHandler+0x266>
 800229e:	e068      	b.n	8002372 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022b0:	d003      	beq.n	80022ba <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2201      	movs	r2, #1
 80022b6:	4313      	orrs	r3, r2
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ca:	d003      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	2202      	movs	r2, #2
 80022d0:	4313      	orrs	r3, r2
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4013      	ands	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022e4:	d003      	beq.n	80022ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	2204      	movs	r2, #4
 80022ea:	4313      	orrs	r3, r2
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d03c      	beq.n	8002372 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2270      	movs	r2, #112	; 0x70
 80022fc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022fe:	d038      	beq.n	8002372 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2270      	movs	r2, #112	; 0x70
 8002304:	4013      	ands	r3, r2
 8002306:	2b30      	cmp	r3, #48	; 0x30
 8002308:	d016      	beq.n	8002338 <HAL_CAN_IRQHandler+0x2fe>
 800230a:	d804      	bhi.n	8002316 <HAL_CAN_IRQHandler+0x2dc>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d009      	beq.n	8002324 <HAL_CAN_IRQHandler+0x2ea>
 8002310:	2b20      	cmp	r3, #32
 8002312:	d00c      	beq.n	800232e <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002314:	e025      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8002316:	2b50      	cmp	r3, #80	; 0x50
 8002318:	d018      	beq.n	800234c <HAL_CAN_IRQHandler+0x312>
 800231a:	2b60      	cmp	r3, #96	; 0x60
 800231c:	d01b      	beq.n	8002356 <HAL_CAN_IRQHandler+0x31c>
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d00f      	beq.n	8002342 <HAL_CAN_IRQHandler+0x308>
            break;
 8002322:	e01e      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	2208      	movs	r2, #8
 8002328:	4313      	orrs	r3, r2
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e019      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2210      	movs	r2, #16
 8002332:	4313      	orrs	r3, r2
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e014      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2220      	movs	r2, #32
 800233c:	4313      	orrs	r3, r2
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002340:	e00f      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	4313      	orrs	r3, r2
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800234a:	e00a      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	4313      	orrs	r3, r2
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002354:	e005      	b.n	8002362 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	0052      	lsls	r2, r2, #1
 800235c:	4313      	orrs	r3, r2
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002360:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2170      	movs	r1, #112	; 0x70
 800236e:	438a      	bics	r2, r1
 8002370:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f85c 	bl	800244c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b00a      	add	sp, #40	; 0x28
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	0002      	movs	r2, r0
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b7f      	cmp	r3, #127	; 0x7f
 800246e:	d809      	bhi.n	8002484 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	001a      	movs	r2, r3
 8002476:	231f      	movs	r3, #31
 8002478:	401a      	ands	r2, r3
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_EnableIRQ+0x30>)
 800247c:	2101      	movs	r1, #1
 800247e:	4091      	lsls	r1, r2
 8002480:	000a      	movs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
  }
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b7f      	cmp	r3, #127	; 0x7f
 80024a4:	d828      	bhi.n	80024f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a6:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <__NVIC_SetPriority+0xd4>)
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	33c0      	adds	r3, #192	; 0xc0
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	589b      	ldr	r3, [r3, r2]
 80024b6:	1dfa      	adds	r2, r7, #7
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	0011      	movs	r1, r2
 80024bc:	2203      	movs	r2, #3
 80024be:	400a      	ands	r2, r1
 80024c0:	00d2      	lsls	r2, r2, #3
 80024c2:	21ff      	movs	r1, #255	; 0xff
 80024c4:	4091      	lsls	r1, r2
 80024c6:	000a      	movs	r2, r1
 80024c8:	43d2      	mvns	r2, r2
 80024ca:	401a      	ands	r2, r3
 80024cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	401a      	ands	r2, r3
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	0018      	movs	r0, r3
 80024dc:	2303      	movs	r3, #3
 80024de:	4003      	ands	r3, r0
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e4:	481f      	ldr	r0, [pc, #124]	; (8002564 <__NVIC_SetPriority+0xd4>)
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	430a      	orrs	r2, r1
 80024f0:	33c0      	adds	r3, #192	; 0xc0
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024f6:	e031      	b.n	800255c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <__NVIC_SetPriority+0xd8>)
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0019      	movs	r1, r3
 8002500:	230f      	movs	r3, #15
 8002502:	400b      	ands	r3, r1
 8002504:	3b08      	subs	r3, #8
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3306      	adds	r3, #6
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	18d3      	adds	r3, r2, r3
 800250e:	3304      	adds	r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1dfa      	adds	r2, r7, #7
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	0011      	movs	r1, r2
 8002518:	2203      	movs	r2, #3
 800251a:	400a      	ands	r2, r1
 800251c:	00d2      	lsls	r2, r2, #3
 800251e:	21ff      	movs	r1, #255	; 0xff
 8002520:	4091      	lsls	r1, r2
 8002522:	000a      	movs	r2, r1
 8002524:	43d2      	mvns	r2, r2
 8002526:	401a      	ands	r2, r3
 8002528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	401a      	ands	r2, r3
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	0018      	movs	r0, r3
 8002538:	2303      	movs	r3, #3
 800253a:	4003      	ands	r3, r0
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <__NVIC_SetPriority+0xd8>)
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	001c      	movs	r4, r3
 8002548:	230f      	movs	r3, #15
 800254a:	4023      	ands	r3, r4
 800254c:	3b08      	subs	r3, #8
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	430a      	orrs	r2, r1
 8002552:	3306      	adds	r3, #6
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	18c3      	adds	r3, r0, r3
 8002558:	3304      	adds	r3, #4
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b003      	add	sp, #12
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <SysTick_Config+0x40>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e010      	b.n	80025a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <SysTick_Config+0x44>)
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	3a01      	subs	r2, #1
 8002588:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	2301      	movs	r3, #1
 800258c:	425b      	negs	r3, r3
 800258e:	2103      	movs	r1, #3
 8002590:	0018      	movs	r0, r3
 8002592:	f7ff ff7d 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <SysTick_Config+0x44>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x44>)
 800259e:	2207      	movs	r2, #7
 80025a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00ffffff 	.word	0x00ffffff
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	210f      	movs	r1, #15
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	1c02      	adds	r2, r0, #0
 80025c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	0002      	movs	r2, r0
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff ff33 	bl	800245c <__NVIC_EnableIRQ>
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ffaf 	bl	800256c <SysTick_Config>
 800260e:	0003      	movs	r3, r0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e155      	b.n	80028d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d100      	bne.n	8002640 <HAL_GPIO_Init+0x28>
 800263e:	e146      	b.n	80028ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x38>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b12      	cmp	r3, #18
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	58d3      	ldr	r3, [r2, r3]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2207      	movs	r2, #7
 8002662:	4013      	ands	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	409a      	lsls	r2, r3
 800266a:	0013      	movs	r3, r2
 800266c:	43da      	mvns	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2107      	movs	r1, #7
 800267c:	400b      	ands	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	409a      	lsls	r2, r3
 8002682:	0013      	movs	r3, r2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	43da      	mvns	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	409a      	lsls	r2, r3
 80026be:	0013      	movs	r3, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00b      	beq.n	80026ec <HAL_GPIO_Init+0xd4>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d007      	beq.n	80026ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	43da      	mvns	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	2201      	movs	r2, #1
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	43da      	mvns	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	055b      	lsls	r3, r3, #21
 8002786:	4013      	ands	r3, r2
 8002788:	d100      	bne.n	800278c <HAL_GPIO_Init+0x174>
 800278a:	e0a0      	b.n	80028ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b57      	ldr	r3, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x2d4>)
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_GPIO_Init+0x2d4>)
 8002792:	2101      	movs	r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
 8002798:	4b54      	ldr	r3, [pc, #336]	; (80028ec <HAL_GPIO_Init+0x2d4>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_GPIO_Init+0x2d8>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	589b      	ldr	r3, [r3, r2]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	43da      	mvns	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	2390      	movs	r3, #144	; 0x90
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_GPIO_Init+0x2dc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x1ea>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_GPIO_Init+0x2e0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x1e6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_GPIO_Init+0x2e4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x1e2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a44      	ldr	r2, [pc, #272]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x1de>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x1f0>
 80027f6:	2305      	movs	r3, #5
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x1f0>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x1f0>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x1f0>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x1f0>
 8002806:	2300      	movs	r3, #0
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	2103      	movs	r1, #3
 800280c:	400a      	ands	r2, r1
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002818:	4935      	ldr	r1, [pc, #212]	; (80028f0 <HAL_GPIO_Init+0x2d8>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43da      	mvns	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	4013      	ands	r3, r2
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002850:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43da      	mvns	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	4013      	ands	r3, r2
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	035b      	lsls	r3, r3, #13
 8002892:	4013      	ands	r3, r2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	039b      	lsls	r3, r3, #14
 80028bc:	4013      	ands	r3, r2
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	40da      	lsrs	r2, r3
 80028dc:	1e13      	subs	r3, r2, #0
 80028de:	d000      	beq.n	80028e2 <HAL_GPIO_Init+0x2ca>
 80028e0:	e6a2      	b.n	8002628 <HAL_GPIO_Init+0x10>
  } 
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b006      	add	sp, #24
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	48000400 	.word	0x48000400
 80028f8:	48000800 	.word	0x48000800
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	48001000 	.word	0x48001000
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	0008      	movs	r0, r1
 8002912:	0011      	movs	r1, r2
 8002914:	1cbb      	adds	r3, r7, #2
 8002916:	1c02      	adds	r2, r0, #0
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	1c7b      	adds	r3, r7, #1
 800291c:	1c0a      	adds	r2, r1, #0
 800291e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002920:	1c7b      	adds	r3, r7, #1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002928:	1cbb      	adds	r3, r7, #2
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002932:	1cbb      	adds	r3, r7, #2
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	000a      	movs	r2, r1
 800294c:	1cbb      	adds	r3, r7, #2
 800294e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	1cba      	adds	r2, r7, #2
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	4013      	ands	r3, r2
 800295a:	d005      	beq.n	8002968 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800295c:	1cbb      	adds	r3, r7, #2
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002966:	e003      	b.n	8002970 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002968:	1cbb      	adds	r3, r7, #2
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f000 fb76 	bl	8003078 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d100      	bne.n	8002998 <HAL_RCC_OscConfig+0x20>
 8002996:	e08e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002998:	4bc5      	ldr	r3, [pc, #788]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	220c      	movs	r2, #12
 800299e:	4013      	ands	r3, r2
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d00e      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a4:	4bc2      	ldr	r3, [pc, #776]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	220c      	movs	r2, #12
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d117      	bne.n	80029e0 <HAL_RCC_OscConfig+0x68>
 80029b0:	4bbf      	ldr	r3, [pc, #764]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	23c0      	movs	r3, #192	; 0xc0
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	401a      	ands	r2, r3
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	025b      	lsls	r3, r3, #9
 80029be:	429a      	cmp	r2, r3
 80029c0:	d10e      	bne.n	80029e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4bbb      	ldr	r3, [pc, #748]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d100      	bne.n	80029d0 <HAL_RCC_OscConfig+0x58>
 80029ce:	e071      	b.n	8002ab4 <HAL_RCC_OscConfig+0x13c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d000      	beq.n	80029da <HAL_RCC_OscConfig+0x62>
 80029d8:	e06c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f000 fb4c 	bl	8003078 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x80>
 80029e8:	4bb1      	ldr	r3, [pc, #708]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4bb0      	ldr	r3, [pc, #704]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	0249      	lsls	r1, r1, #9
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e02f      	b.n	8002a58 <HAL_RCC_OscConfig+0xe0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10c      	bne.n	8002a1a <HAL_RCC_OscConfig+0xa2>
 8002a00:	4bab      	ldr	r3, [pc, #684]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4baa      	ldr	r3, [pc, #680]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a06:	49ab      	ldr	r1, [pc, #684]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	4ba8      	ldr	r3, [pc, #672]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4ba7      	ldr	r3, [pc, #668]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a12:	49a9      	ldr	r1, [pc, #676]	; (8002cb8 <HAL_RCC_OscConfig+0x340>)
 8002a14:	400a      	ands	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e01e      	b.n	8002a58 <HAL_RCC_OscConfig+0xe0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCC_OscConfig+0xc8>
 8002a22:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4ba2      	ldr	r3, [pc, #648]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	02c9      	lsls	r1, r1, #11
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b9f      	ldr	r3, [pc, #636]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b9e      	ldr	r3, [pc, #632]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0249      	lsls	r1, r1, #9
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xe0>
 8002a40:	4b9b      	ldr	r3, [pc, #620]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b9a      	ldr	r3, [pc, #616]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a46:	499b      	ldr	r1, [pc, #620]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b98      	ldr	r3, [pc, #608]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b97      	ldr	r3, [pc, #604]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a52:	4999      	ldr	r1, [pc, #612]	; (8002cb8 <HAL_RCC_OscConfig+0x340>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d014      	beq.n	8002a8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff3a 	bl	80018d8 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6a:	f7fe ff35 	bl	80018d8 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2fd      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0xf2>
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe ff25 	bl	80018d8 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe ff20 	bl	80018d8 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2e8      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	029b      	lsls	r3, r3, #10
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x11c>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x14a>
 8002ac0:	e06c      	b.n	8002b9c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002acc:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	220c      	movs	r2, #12
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d11f      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1a0>
 8002ad8:	4b75      	ldr	r3, [pc, #468]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d116      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x188>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e2bb      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	22f8      	movs	r2, #248	; 0xf8
 8002b06:	4393      	bics	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00da      	lsls	r2, r3, #3
 8002b10:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	e041      	b.n	8002b9c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d024      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b20:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fed4 	bl	80018d8 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe fecf 	bl	80018d8 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e297      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f1      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	22f8      	movs	r2, #248	; 0xf8
 8002b58:	4393      	bics	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00da      	lsls	r2, r3, #3
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	438a      	bics	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe feaf 	bl	80018d8 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fe feaa 	bl	80018d8 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e272      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fe8d 	bl	80018d8 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fe88 	bl	80018d8 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e250      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0f1      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fe73 	bl	80018d8 <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fe6e 	bl	80018d8 <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e236      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0a:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d1f1      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d100      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2a8>
 8002c1e:	e0b5      	b.n	8002d8c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	055b      	lsls	r3, r3, #21
 8002c30:	4013      	ands	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	0549      	lsls	r1, r1, #21
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	61da      	str	r2, [r3, #28]
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	055b      	lsls	r3, r3, #21
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c50:	231f      	movs	r3, #31
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_RCC_OscConfig+0x344>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d11a      	bne.n	8002c9a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x344>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_RCC_OscConfig+0x344>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0049      	lsls	r1, r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fe31 	bl	80018d8 <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe fe2c 	bl	80018d8 <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f4      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x344>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x348>
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	621a      	str	r2, [r3, #32]
 8002cae:	e035      	b.n	8002d1c <HAL_RCC_OscConfig+0x3a4>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	fffeffff 	.word	0xfffeffff
 8002cb8:	fffbffff 	.word	0xfffbffff
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x36a>
 8002cc8:	4bca      	ldr	r3, [pc, #808]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	4bc9      	ldr	r3, [pc, #804]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	621a      	str	r2, [r3, #32]
 8002cd4:	4bc7      	ldr	r3, [pc, #796]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	4bc6      	ldr	r3, [pc, #792]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	2104      	movs	r1, #4
 8002cdc:	438a      	bics	r2, r1
 8002cde:	621a      	str	r2, [r3, #32]
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x3a4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x38c>
 8002cea:	4bc2      	ldr	r3, [pc, #776]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	4bc1      	ldr	r3, [pc, #772]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	621a      	str	r2, [r3, #32]
 8002cf6:	4bbf      	ldr	r3, [pc, #764]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	4bbe      	ldr	r3, [pc, #760]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	621a      	str	r2, [r3, #32]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x3a4>
 8002d04:	4bbb      	ldr	r3, [pc, #748]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	4bba      	ldr	r3, [pc, #744]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	621a      	str	r2, [r3, #32]
 8002d10:	4bb8      	ldr	r3, [pc, #736]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	4bb7      	ldr	r3, [pc, #732]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d16:	2104      	movs	r1, #4
 8002d18:	438a      	bics	r2, r1
 8002d1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fdd8 	bl	80018d8 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fdd3 	bl	80018d8 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4aaf      	ldr	r2, [pc, #700]	; (8002ff8 <HAL_RCC_OscConfig+0x680>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e19a      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	4bac      	ldr	r3, [pc, #688]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x3b6>
 8002d4c:	e013      	b.n	8002d76 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fdc3 	bl	80018d8 <HAL_GetTick>
 8002d52:	0003      	movs	r3, r0
 8002d54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	e009      	b.n	8002d6c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe fdbe 	bl	80018d8 <HAL_GetTick>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4aa5      	ldr	r2, [pc, #660]	; (8002ff8 <HAL_RCC_OscConfig+0x680>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e185      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4ba1      	ldr	r3, [pc, #644]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d76:	231f      	movs	r3, #31
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b9c      	ldr	r3, [pc, #624]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	4b9b      	ldr	r3, [pc, #620]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	499d      	ldr	r1, [pc, #628]	; (8002ffc <HAL_RCC_OscConfig+0x684>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d12a      	bne.n	8002df4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d9e:	4b95      	ldr	r3, [pc, #596]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da2:	4b94      	ldr	r3, [pc, #592]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002da4:	2104      	movs	r1, #4
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002daa:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dae:	4b91      	ldr	r3, [pc, #580]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fd8f 	bl	80018d8 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002dc0:	f7fe fd8a 	bl	80018d8 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e152      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dd2:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f1      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ddc:	4b85      	ldr	r3, [pc, #532]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	22f8      	movs	r2, #248	; 0xf8
 8002de2:	4393      	bics	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	00da      	lsls	r2, r3, #3
 8002dec:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
 8002df2:	e034      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	3305      	adds	r3, #5
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002dfc:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e00:	4b7c      	ldr	r3, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	2104      	movs	r1, #4
 8002e04:	438a      	bics	r2, r1
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e08:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	22f8      	movs	r2, #248	; 0xf8
 8002e0e:	4393      	bics	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	00da      	lsls	r2, r3, #3
 8002e18:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1e:	e01e      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e20:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e24:	4b73      	ldr	r3, [pc, #460]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e26:	2104      	movs	r1, #4
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e2c:	4b71      	ldr	r3, [pc, #452]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	438a      	bics	r2, r1
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7fe fd4e 	bl	80018d8 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e42:	f7fe fd49 	bl	80018d8 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e111      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e54:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d1f1      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d05c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e68:	4b62      	ldr	r3, [pc, #392]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d00e      	beq.n	8002e92 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e74:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	220c      	movs	r2, #12
 8002e7a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d114      	bne.n	8002eaa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e80:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	23c0      	movs	r3, #192	; 0xc0
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	401a      	ands	r2, r3
 8002e8a:	23c0      	movs	r3, #192	; 0xc0
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e92:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5a8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d03c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0e6      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01b      	beq.n	8002eea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002eb2:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb6:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0249      	lsls	r1, r1, #9
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fd0a 	bl	80018d8 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eca:	f7fe fd05 	bl	80018d8 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0cd      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x552>
 8002ee8:	e01b      	b.n	8002f22 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002eea:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002ef0:	4943      	ldr	r1, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0x688>)
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fcef 	bl	80018d8 <HAL_GetTick>
 8002efa:	0003      	movs	r3, r0
 8002efc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f00:	f7fe fcea 	bl	80018d8 <HAL_GetTick>
 8002f04:	0002      	movs	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0b2      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	025b      	lsls	r3, r3, #9
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x588>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d100      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5b4>
 8002f2a:	e0a4      	b.n	8003076 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	220c      	movs	r2, #12
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5c2>
 8002f38:	e078      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d14c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f48:	492e      	ldr	r1, [pc, #184]	; (8003004 <HAL_RCC_OscConfig+0x68c>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fcc3 	bl	80018d8 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fcbe 	bl	80018d8 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e086      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	049b      	lsls	r3, r3, #18
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f76:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_RCC_OscConfig+0x690>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0449      	lsls	r1, r1, #17
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fc91 	bl	80018d8 <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fc8c 	bl	80018d8 <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e054      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x644>
 8002fda:	e04c      	b.n	8003076 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <HAL_RCC_OscConfig+0x68c>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fc76 	bl	80018d8 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x6a6>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	00001388 	.word	0x00001388
 8002ffc:	efffffff 	.word	0xefffffff
 8003000:	fffeffff 	.word	0xfffeffff
 8003004:	feffffff 	.word	0xfeffffff
 8003008:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fc64 	bl	80018d8 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e02c      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_RCC_OscConfig+0x708>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	049b      	lsls	r3, r3, #18
 8003026:	4013      	ands	r3, r2
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x694>
 800302a:	e024      	b.n	8003076 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01f      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_OscConfig+0x708>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x708>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	23c0      	movs	r3, #192	; 0xc0
 8003048:	025b      	lsls	r3, r3, #9
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	429a      	cmp	r2, r3
 8003052:	d10e      	bne.n	8003072 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	220f      	movs	r2, #15
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d107      	bne.n	8003072 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	23f0      	movs	r3, #240	; 0xf0
 8003066:	039b      	lsls	r3, r3, #14
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b008      	add	sp, #32
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0bf      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b61      	ldr	r3, [pc, #388]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d911      	bls.n	80030ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4393      	bics	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0a6      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	d015      	beq.n	8003100 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2204      	movs	r2, #4
 80030da:	4013      	ands	r3, r2
 80030dc:	d006      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4b50      	ldr	r3, [pc, #320]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80030e4:	21e0      	movs	r1, #224	; 0xe0
 80030e6:	00c9      	lsls	r1, r1, #3
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	22f0      	movs	r2, #240	; 0xf0
 80030f2:	4393      	bics	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	d04c      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	4013      	ands	r3, r2
 800311c:	d120      	bne.n	8003160 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07a      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	049b      	lsls	r3, r3, #18
 8003132:	4013      	ands	r3, r2
 8003134:	d114      	bne.n	8003160 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06e      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	025b      	lsls	r3, r3, #9
 800314a:	4013      	ands	r3, r2
 800314c:	d108      	bne.n	8003160 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e062      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e05b      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	4393      	bics	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fbb0 	bl	80018d8 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317c:	e009      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317e:	f7fe fbab 	bl	80018d8 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	4a27      	ldr	r2, [pc, #156]	; (8003228 <HAL_RCC_ClockConfig+0x1a4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e042      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	220c      	movs	r2, #12
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1ec      	bne.n	800317e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d211      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4393      	bics	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x19c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e020      	b.n	8003218 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2204      	movs	r2, #4
 80031dc:	4013      	ands	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_RCC_ClockConfig+0x1a8>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031f4:	f000 f820 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f8:	0001      	movs	r1, r0
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1a0>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	220f      	movs	r2, #15
 8003202:	4013      	ands	r3, r2
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1ac>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	000a      	movs	r2, r1
 800320a:	40da      	lsrs	r2, r3
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1b0>)
 800320e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fe fb1b 	bl	800184c <HAL_InitTick>
  
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	00001388 	.word	0x00001388
 800322c:	fffff8ff 	.word	0xfffff8ff
 8003230:	080039e0 	.word	0x080039e0
 8003234:	20000000 	.word	0x20000000

08003238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b08f      	sub	sp, #60	; 0x3c
 800323c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800323e:	2314      	movs	r3, #20
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003246:	c313      	stmia	r3!, {r0, r1, r4}
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	4a35      	ldr	r2, [pc, #212]	; (8003324 <HAL_RCC_GetSysClockFreq+0xec>)
 8003250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003252:	c313      	stmia	r3!, {r0, r1, r4}
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_GetSysClockFreq+0xf0>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	220c      	movs	r2, #12
 8003276:	4013      	ands	r3, r2
 8003278:	2b08      	cmp	r3, #8
 800327a:	d006      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x52>
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d043      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xd0>
 8003280:	2b04      	cmp	r3, #4
 8003282:	d144      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003288:	e044      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	220f      	movs	r2, #15
 8003290:	4013      	ands	r3, r2
 8003292:	2214      	movs	r2, #20
 8003294:	18ba      	adds	r2, r7, r2
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_RCC_GetSysClockFreq+0xf0>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	220f      	movs	r2, #15
 80032a0:	4013      	ands	r3, r2
 80032a2:	1d3a      	adds	r2, r7, #4
 80032a4:	5cd3      	ldrb	r3, [r2, r3]
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032aa:	23c0      	movs	r3, #192	; 0xc0
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	401a      	ands	r2, r3
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ba:	481c      	ldr	r0, [pc, #112]	; (800332c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032bc:	f7fc ff24 	bl	8000108 <__udivsi3>
 80032c0:	0003      	movs	r3, r0
 80032c2:	001a      	movs	r2, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	4353      	muls	r3, r2
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ca:	e01a      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80032cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ce:	23c0      	movs	r3, #192	; 0xc0
 80032d0:	025b      	lsls	r3, r3, #9
 80032d2:	401a      	ands	r2, r3
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	429a      	cmp	r2, r3
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032de:	4814      	ldr	r0, [pc, #80]	; (8003330 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032e0:	f7fc ff12 	bl	8000108 <__udivsi3>
 80032e4:	0003      	movs	r3, r0
 80032e6:	001a      	movs	r2, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	4353      	muls	r3, r2
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
 80032ee:	e008      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032f4:	f7fc ff08 	bl	8000108 <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	001a      	movs	r2, r3
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	4353      	muls	r3, r2
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_GetSysClockFreq+0xf8>)
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800330c:	e002      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003312:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b00f      	add	sp, #60	; 0x3c
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	080039c0 	.word	0x080039c0
 8003324:	080039d0 	.word	0x080039d0
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	02dc6c00 	.word	0x02dc6c00

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e01e      	b.n	8003384 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223d      	movs	r2, #61	; 0x3d
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	223c      	movs	r2, #60	; 0x3c
 8003356:	2100      	movs	r1, #0
 8003358:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f7fd fbcd 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223d      	movs	r2, #61	; 0x3d
 8003366:	2102      	movs	r1, #2
 8003368:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	0019      	movs	r1, r3
 8003374:	0010      	movs	r0, r2
 8003376:	f000 f98b 	bl	8003690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223d      	movs	r2, #61	; 0x3d
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2207      	movs	r2, #7
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d007      	beq.n	80033c6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_TIM_Base_Stop_IT+0x4c>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	d10d      	bne.n	8003410 <HAL_TIM_Base_Stop_IT+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_TIM_Base_Stop_IT+0x50>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_Base_Stop_IT+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	438a      	bics	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	00001111 	.word	0x00001111
 8003420:	00000444 	.word	0x00000444

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d124      	bne.n	8003484 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11d      	bne.n	8003484 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2203      	movs	r2, #3
 800344e:	4252      	negs	r2, r2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2203      	movs	r2, #3
 8003460:	4013      	ands	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f8fa 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 800346c:	e007      	b.n	800347e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f8ed 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 f8f9 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2204      	movs	r2, #4
 800348c:	4013      	ands	r3, r2
 800348e:	2b04      	cmp	r3, #4
 8003490:	d125      	bne.n	80034de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2204      	movs	r2, #4
 800349a:	4013      	ands	r3, r2
 800349c:	2b04      	cmp	r3, #4
 800349e:	d11e      	bne.n	80034de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2205      	movs	r2, #5
 80034a6:	4252      	negs	r2, r2
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	23c0      	movs	r3, #192	; 0xc0
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f8cd 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 80034c6:	e007      	b.n	80034d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f8c0 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f8cc 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2208      	movs	r2, #8
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d124      	bne.n	8003536 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11d      	bne.n	8003536 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2209      	movs	r2, #9
 8003500:	4252      	negs	r2, r2
 8003502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2203      	movs	r2, #3
 8003512:	4013      	ands	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f8a1 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 800351e:	e007      	b.n	8003530 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f894 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f8a0 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	2b10      	cmp	r3, #16
 8003542:	d125      	bne.n	8003590 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2210      	movs	r2, #16
 800354c:	4013      	ands	r3, r2
 800354e:	2b10      	cmp	r3, #16
 8003550:	d11e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2211      	movs	r2, #17
 8003558:	4252      	negs	r2, r2
 800355a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2208      	movs	r2, #8
 8003560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	23c0      	movs	r3, #192	; 0xc0
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f874 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 8003578:	e007      	b.n	800358a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f867 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f873 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2201      	movs	r2, #1
 8003598:	4013      	ands	r3, r2
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10f      	bne.n	80035be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4252      	negs	r2, r2
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fc ff1b 	bl	80003f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d10f      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	d108      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2281      	movs	r2, #129	; 0x81
 80035e0:	4252      	negs	r2, r2
 80035e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f938 	bl	800385c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2240      	movs	r2, #64	; 0x40
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d10f      	bne.n	800361a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	4013      	ands	r3, r2
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d108      	bne.n	800361a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2241      	movs	r2, #65	; 0x41
 800360e:	4252      	negs	r2, r2
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f833 	bl	8003680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2220      	movs	r2, #32
 8003622:	4013      	ands	r3, r2
 8003624:	2b20      	cmp	r3, #32
 8003626:	d10f      	bne.n	8003648 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	4013      	ands	r3, r2
 8003632:	2b20      	cmp	r3, #32
 8003634:	d108      	bne.n	8003648 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2221      	movs	r2, #33	; 0x21
 800363c:	4252      	negs	r2, r2
 800363e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 f902 	bl	800384c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a34      	ldr	r2, [pc, #208]	; (8003774 <TIM_Base_SetConfig+0xe4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d008      	beq.n	80036ba <TIM_Base_SetConfig+0x2a>
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d003      	beq.n	80036ba <TIM_Base_SetConfig+0x2a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a30      	ldr	r2, [pc, #192]	; (8003778 <TIM_Base_SetConfig+0xe8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2270      	movs	r2, #112	; 0x70
 80036be:	4393      	bics	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <TIM_Base_SetConfig+0xe4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	05db      	lsls	r3, r3, #23
 80036da:	429a      	cmp	r2, r3
 80036dc:	d013      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_Base_SetConfig+0xe8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <TIM_Base_SetConfig+0xec>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <TIM_Base_SetConfig+0xf0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a22      	ldr	r2, [pc, #136]	; (8003784 <TIM_Base_SetConfig+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x76>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a21      	ldr	r2, [pc, #132]	; (8003788 <TIM_Base_SetConfig+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <TIM_Base_SetConfig+0xfc>)
 800370a:	4013      	ands	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	4393      	bics	r3, r2
 800371e:	001a      	movs	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a0c      	ldr	r2, [pc, #48]	; (8003774 <TIM_Base_SetConfig+0xe4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_Base_SetConfig+0xce>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <TIM_Base_SetConfig+0xf0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_Base_SetConfig+0xce>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <TIM_Base_SetConfig+0xf4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0xce>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <TIM_Base_SetConfig+0xf8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d103      	bne.n	8003766 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	615a      	str	r2, [r3, #20]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40002000 	.word	0x40002000
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800
 800378c:	fffffcff 	.word	0xfffffcff

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	223c      	movs	r2, #60	; 0x3c
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e047      	b.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	223c      	movs	r2, #60	; 0x3c
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	223d      	movs	r2, #61	; 0x3d
 80037b4:	2102      	movs	r1, #2
 80037b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2270      	movs	r2, #112	; 0x70
 80037cc:	4393      	bics	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00f      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	05db      	lsls	r3, r3, #23
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d009      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10c      	bne.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	4393      	bics	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223d      	movs	r2, #61	; 0x3d
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223c      	movs	r2, #60	; 0x3c
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40014000 	.word	0x40014000

0800384c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <__cxa_pure_virtual>:
 800386c:	b510      	push	{r4, lr}
 800386e:	f000 f805 	bl	800387c <_ZSt9terminatev>

08003872 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003872:	b510      	push	{r4, lr}
 8003874:	4780      	blx	r0
 8003876:	f000 f809 	bl	800388c <abort>
	...

0800387c <_ZSt9terminatev>:
 800387c:	4b02      	ldr	r3, [pc, #8]	; (8003888 <_ZSt9terminatev+0xc>)
 800387e:	b510      	push	{r4, lr}
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	f7ff fff6 	bl	8003872 <_ZN10__cxxabiv111__terminateEPFvvE>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	2000000c 	.word	0x2000000c

0800388c <abort>:
 800388c:	b510      	push	{r4, lr}
 800388e:	2006      	movs	r0, #6
 8003890:	f000 f86a 	bl	8003968 <raise>
 8003894:	2001      	movs	r0, #1
 8003896:	f7fd f993 	bl	8000bc0 <_exit>
	...

0800389c <__errno>:
 800389c:	4b01      	ldr	r3, [pc, #4]	; (80038a4 <__errno+0x8>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4770      	bx	lr
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000010 	.word	0x20000010

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	2600      	movs	r6, #0
 80038ac:	4d0c      	ldr	r5, [pc, #48]	; (80038e0 <__libc_init_array+0x38>)
 80038ae:	4c0d      	ldr	r4, [pc, #52]	; (80038e4 <__libc_init_array+0x3c>)
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	2600      	movs	r6, #0
 80038ba:	f000 f875 	bl	80039a8 <_init>
 80038be:	4d0a      	ldr	r5, [pc, #40]	; (80038e8 <__libc_init_array+0x40>)
 80038c0:	4c0a      	ldr	r4, [pc, #40]	; (80038ec <__libc_init_array+0x44>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	00b3      	lsls	r3, r6, #2
 80038ce:	58eb      	ldr	r3, [r5, r3]
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	00b3      	lsls	r3, r6, #2
 80038d8:	58eb      	ldr	r3, [r5, r3]
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	08003a14 	.word	0x08003a14
 80038e4:	08003a14 	.word	0x08003a14
 80038e8:	08003a14 	.word	0x08003a14
 80038ec:	08003a20 	.word	0x08003a20

080038f0 <memcpy>:
 80038f0:	2300      	movs	r3, #0
 80038f2:	b510      	push	{r4, lr}
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d100      	bne.n	80038fa <memcpy+0xa>
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	5ccc      	ldrb	r4, [r1, r3]
 80038fc:	54c4      	strb	r4, [r0, r3]
 80038fe:	3301      	adds	r3, #1
 8003900:	e7f8      	b.n	80038f4 <memcpy+0x4>

08003902 <memset>:
 8003902:	0003      	movs	r3, r0
 8003904:	1812      	adds	r2, r2, r0
 8003906:	4293      	cmp	r3, r2
 8003908:	d100      	bne.n	800390c <memset+0xa>
 800390a:	4770      	bx	lr
 800390c:	7019      	strb	r1, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	e7f9      	b.n	8003906 <memset+0x4>

08003912 <_raise_r>:
 8003912:	b570      	push	{r4, r5, r6, lr}
 8003914:	0004      	movs	r4, r0
 8003916:	000d      	movs	r5, r1
 8003918:	291f      	cmp	r1, #31
 800391a:	d904      	bls.n	8003926 <_raise_r+0x14>
 800391c:	2316      	movs	r3, #22
 800391e:	6003      	str	r3, [r0, #0]
 8003920:	2001      	movs	r0, #1
 8003922:	4240      	negs	r0, r0
 8003924:	bd70      	pop	{r4, r5, r6, pc}
 8003926:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <_raise_r+0x24>
 800392c:	008a      	lsls	r2, r1, #2
 800392e:	189b      	adds	r3, r3, r2
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2a00      	cmp	r2, #0
 8003934:	d108      	bne.n	8003948 <_raise_r+0x36>
 8003936:	0020      	movs	r0, r4
 8003938:	f000 f832 	bl	80039a0 <_getpid_r>
 800393c:	002a      	movs	r2, r5
 800393e:	0001      	movs	r1, r0
 8003940:	0020      	movs	r0, r4
 8003942:	f000 f81b 	bl	800397c <_kill_r>
 8003946:	e7ed      	b.n	8003924 <_raise_r+0x12>
 8003948:	2000      	movs	r0, #0
 800394a:	2a01      	cmp	r2, #1
 800394c:	d0ea      	beq.n	8003924 <_raise_r+0x12>
 800394e:	1c51      	adds	r1, r2, #1
 8003950:	d103      	bne.n	800395a <_raise_r+0x48>
 8003952:	2316      	movs	r3, #22
 8003954:	3001      	adds	r0, #1
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7e4      	b.n	8003924 <_raise_r+0x12>
 800395a:	2400      	movs	r4, #0
 800395c:	0028      	movs	r0, r5
 800395e:	601c      	str	r4, [r3, #0]
 8003960:	4790      	blx	r2
 8003962:	0020      	movs	r0, r4
 8003964:	e7de      	b.n	8003924 <_raise_r+0x12>
	...

08003968 <raise>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <raise+0x10>)
 800396c:	0001      	movs	r1, r0
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f7ff ffcf 	bl	8003912 <_raise_r>
 8003974:	bd10      	pop	{r4, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	20000010 	.word	0x20000010

0800397c <_kill_r>:
 800397c:	2300      	movs	r3, #0
 800397e:	b570      	push	{r4, r5, r6, lr}
 8003980:	4c06      	ldr	r4, [pc, #24]	; (800399c <_kill_r+0x20>)
 8003982:	0005      	movs	r5, r0
 8003984:	0008      	movs	r0, r1
 8003986:	0011      	movs	r1, r2
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	f7fd f909 	bl	8000ba0 <_kill>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d103      	bne.n	800399a <_kill_r+0x1e>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d000      	beq.n	800399a <_kill_r+0x1e>
 8003998:	602b      	str	r3, [r5, #0]
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	200001c4 	.word	0x200001c4

080039a0 <_getpid_r>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	f7fd f8f7 	bl	8000b94 <_getpid>
 80039a6:	bd10      	pop	{r4, pc}

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr
