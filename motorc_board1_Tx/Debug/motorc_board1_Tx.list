
motorc_board1_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004be8  08004be8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be8  08004be8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000074  08004c6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004c6c  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbeb  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002777  00000000  00000000  0002fc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000330f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b580  00000000  00000000  00033cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbe9  00000000  00000000  0004f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009acd7  00000000  00000000  0005ce61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7b38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  000f7b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b34 	.word	0x08004b34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004b34 	.word	0x08004b34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f002 f857 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f891 	bl	8000524 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f96d 	bl	80006e0 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000406:	f000 f8d1 	bl	80005ac <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 800040a:	f000 f909 	bl	8000620 <_ZL12MX_TIM2_Initv>
   * the data is split up in 3 frames. The details of what data is available in which
   * frame is described in "subsystem-can-driver/mitsuba-driver-data.cpp"
   *
   * For this example, we will request all 3 frames.
   */
  mcRequest.txData.requestFrame0 = true;
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <main+0xf8>)
 8000410:	2239      	movs	r2, #57	; 0x39
 8000412:	2101      	movs	r1, #1
 8000414:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame1 = true;
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <main+0xf8>)
 8000418:	223a      	movs	r2, #58	; 0x3a
 800041a:	2101      	movs	r1, #1
 800041c:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame2 = true;
 800041e:	4b33      	ldr	r3, [pc, #204]	; (80004ec <main+0xf8>)
 8000420:	223b      	movs	r2, #59	; 0x3b
 8000422:	2101      	movs	r1, #1
 8000424:	5499      	strb	r1, [r3, r2]
   * dataframe from the Mitsuba. Since each of the 3 dataframes are unique, we need 3 different
   * callback functions.
   *
   * Also, don't forget to start CAN!
   */
  mcFrame0.SetupReceive(MC_0_Receive_Callback);
 8000426:	4a32      	ldr	r2, [pc, #200]	; (80004f0 <main+0xfc>)
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <main+0x100>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fb13 	bl	8001a58 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  mcFrame1.SetupReceive(MC_1_Receive_Callback);
 8000432:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <main+0x104>)
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <main+0x108>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fb0d 	bl	8001a58 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  mcFrame2.SetupReceive(MC_2_Receive_Callback);
 800043e:	4a30      	ldr	r2, [pc, #192]	; (8000500 <main+0x10c>)
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <main+0x110>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fb07 	bl	8001a58 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 800044a:	f001 fb63 	bl	8001b14 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>

  uint16_t motorRPM = 0;
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	2200      	movs	r2, #0
 8000452:	801a      	strh	r2, [r3, #0]
  uint16_t AcceleratorPosition = 0;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	801a      	strh	r2, [r3, #0]
  bool accelPosError = false;
 800045a:	1cfb      	adds	r3, r7, #3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
  uint16_t sum = 0;
 8000460:	003b      	movs	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	801a      	strh	r2, [r3, #0]

  mcRequest.SendData();
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <main+0xf8>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fb21 	bl	8001ab0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(newInput_CAN)
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <main+0x114>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0fb      	beq.n	800046e <main+0x7a>
		{
			//reset flag
			newInput_CAN = false;
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <main+0x114>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]

			if (mc_0_flag)
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <main+0x118>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d006      	beq.n	8000492 <main+0x9e>
			{
				mc_0_flag = false;
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <main+0x118>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
				motorRPM = mcFrame0Packet.motorRPM;
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <main+0x11c>)
 800048e:	8952      	ldrh	r2, [r2, #10]
 8000490:	801a      	strh	r2, [r3, #0]
			}
			if (mc_1_flag)
 8000492:	4b20      	ldr	r3, [pc, #128]	; (8000514 <main+0x120>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d006      	beq.n	80004a8 <main+0xb4>
			{
				mc_1_flag = false;
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <main+0x120>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
				AcceleratorPosition = mcFrame1Packet.AcceleratorPosition;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <main+0x124>)
 80004a4:	8852      	ldrh	r2, [r2, #2]
 80004a6:	801a      	strh	r2, [r3, #0]
			}
			if (mc_2_flag)
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <main+0x128>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d006      	beq.n	80004be <main+0xca>
			{
				mc_2_flag = false;
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <main+0x128>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
				accelPosError = mcFrame2Packet.accelPosError;
 80004b6:	1cfb      	adds	r3, r7, #3
 80004b8:	4a19      	ldr	r2, [pc, #100]	; (8000520 <main+0x12c>)
 80004ba:	7a12      	ldrb	r2, [r2, #8]
 80004bc:	701a      	strb	r2, [r3, #0]
			}
			sum = motorRPM + AcceleratorPosition + accelPosError;
 80004be:	1dba      	adds	r2, r7, #6
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	b299      	uxth	r1, r3
 80004ca:	1cfb      	adds	r3, r7, #3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	003b      	movs	r3, r7
 80004d2:	188a      	adds	r2, r1, r2
 80004d4:	801a      	strh	r2, [r3, #0]
			sum--;
 80004d6:	003b      	movs	r3, r7
 80004d8:	881a      	ldrh	r2, [r3, #0]
 80004da:	003b      	movs	r3, r7
 80004dc:	3a01      	subs	r2, #1
 80004de:	801a      	strh	r2, [r3, #0]
			sum++;
 80004e0:	003b      	movs	r3, r7
 80004e2:	881a      	ldrh	r2, [r3, #0]
 80004e4:	003b      	movs	r3, r7
 80004e6:	3201      	adds	r2, #1
 80004e8:	801a      	strh	r2, [r3, #0]
		if(newInput_CAN)
 80004ea:	e7c0      	b.n	800046e <main+0x7a>
 80004ec:	20000140 	.word	0x20000140
 80004f0:	08000765 	.word	0x08000765
 80004f4:	2000017c 	.word	0x2000017c
 80004f8:	080007bd 	.word	0x080007bd
 80004fc:	200001d8 	.word	0x200001d8
 8000500:	08000815 	.word	0x08000815
 8000504:	2000022c 	.word	0x2000022c
 8000508:	2000013f 	.word	0x2000013f
 800050c:	2000013c 	.word	0x2000013c
 8000510:	200001c8 	.word	0x200001c8
 8000514:	2000013d 	.word	0x2000013d
 8000518:	20000220 	.word	0x20000220
 800051c:	2000013e 	.word	0x2000013e
 8000520:	20000278 	.word	0x20000278

08000524 <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b093      	sub	sp, #76	; 0x4c
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2414      	movs	r4, #20
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f004 faaa 	bl	8004a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	0018      	movs	r0, r3
 800053e:	2310      	movs	r3, #16
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f004 faa3 	bl	8004a8e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2220      	movs	r2, #32
 800054c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2201      	movs	r2, #1
 8000552:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	f003 f989 	bl	8003874 <HAL_RCC_OscConfig>
 8000562:	0003      	movs	r3, r0
 8000564:	1e5a      	subs	r2, r3, #1
 8000566:	4193      	sbcs	r3, r2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 800056e:	f000 f8dd 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2207      	movs	r2, #7
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2101      	movs	r1, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f003 fcf6 	bl	8003f80 <HAL_RCC_ClockConfig>
 8000594:	0003      	movs	r3, r0
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4193      	sbcs	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80005a0:	f000 f8c4 	bl	800072c <Error_Handler>
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b013      	add	sp, #76	; 0x4c
 80005aa:	bd90      	pop	{r4, r7, pc}

080005ac <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005b2:	4a1a      	ldr	r2, [pc, #104]	; (800061c <_ZL11MX_CAN_Initv+0x70>)
 80005b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_ZL11MX_CAN_Initv+0x6c>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 ffba 	bl	8002574 <HAL_CAN_Init>
 8000600:	0003      	movs	r3, r0
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	4193      	sbcs	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 800060c:	f000 f88e 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000090 	.word	0x20000090
 800061c:	40006400 	.word	0x40006400

08000620 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	2308      	movs	r3, #8
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f004 fa2c 	bl	8004a8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2308      	movs	r3, #8
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f004 fa25 	bl	8004a8e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	05d2      	lsls	r2, r2, #23
 800064a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800064e:	222f      	movs	r2, #47	; 0x2f
 8000650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <_ZL12MX_TIM2_Initv+0xbc>)
 800065c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 800066c:	0018      	movs	r0, r3
 800066e:	f003 fde1 	bl	8004234 <HAL_TIM_Base_Init>
 8000672:	0003      	movs	r3, r0
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	4193      	sbcs	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800067e:	f000 f855 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000682:	2108      	movs	r1, #8
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0152      	lsls	r2, r2, #5
 800068a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068c:	187a      	adds	r2, r7, r1
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f003 ff34 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8000698:	0003      	movs	r3, r0
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80006a4:	f000 f842 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	003b      	movs	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	003b      	movs	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b4:	003a      	movs	r2, r7
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_ZL12MX_TIM2_Initv+0xb8>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f004 f92e 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	0003      	movs	r3, r0
 80006c2:	1e5a      	subs	r2, r3, #1
 80006c4:	4193      	sbcs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80006cc:	f000 f82e 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b006      	add	sp, #24
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000f4 	.word	0x200000f4
 80006dc:	000003e7 	.word	0x000003e7

080006e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	03c9      	lsls	r1, r1, #15
 80006f0:	430a      	orrs	r2, r1
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 80006f6:	695a      	ldr	r2, [r3, #20]
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 8000704:	695a      	ldr	r2, [r3, #20]
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0289      	lsls	r1, r1, #10
 800070c:	430a      	orrs	r2, r1
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <_ZL12MX_GPIO_Initv+0x48>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	029b      	lsls	r3, r3, #10
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_TIM_PeriodElapsedCallback>:

// -----------------------------
// --- ISR DEFINITION(S) -------
// -----------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// check which timer triggered interrupt
	if(htim->Instance == TIM2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	429a      	cmp	r2, r3
 800074a:	d104      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x1e>
		/**
		 * SG
		 * Send out a MC Tx message to ask Mitsuba for data
		 * This timer elapses every 1 millisecond
		 */
		mcRequest.SendData();
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800074e:	0018      	movs	r0, r3
 8000750:	f001 f9ae 	bl	8001ab0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
	}
	else __NOP();	// no operation
}
 8000754:	e000      	b.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x20>
	else __NOP();	// no operation
 8000756:	46c0      	nop			; (mov r8, r8)
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000140 	.word	0x20000140

08000764 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
 * The callback that runs automatically whenever we receive a new message from
 * Mitsuba. One for each type of dataframe. The method "GetOldestDataPacket" sets
 * the input flag to true.
 *
 */
void MC_0_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6178      	str	r0, [r7, #20]
	if(!mcFrame0.isFifoEmpty())
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fab6 	bl	8001ce0 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000774:	0003      	movs	r3, r0
 8000776:	001a      	movs	r2, r3
 8000778:	2301      	movs	r3, #1
 800077a:	4053      	eors	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00d      	beq.n	800079e <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame0Packet = mcFrame0.GetOldestDataPacket(&mc_0_flag);
 8000782:	4c0b      	ldr	r4, [pc, #44]	; (80007b0 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 8000784:	003b      	movs	r3, r7
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000788:	4908      	ldr	r1, [pc, #32]	; (80007ac <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f86e 	bl	800086c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>
 8000790:	003b      	movs	r3, r7
 8000792:	0020      	movs	r0, r4
 8000794:	0019      	movs	r1, r3
 8000796:	2310      	movs	r3, #16
 8000798:	001a      	movs	r2, r3
 800079a:	f004 f96f 	bl	8004a7c <memcpy>
	newInput_CAN = true;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b007      	add	sp, #28
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	2000017c 	.word	0x2000017c
 80007b0:	200001c8 	.word	0x200001c8
 80007b4:	2000013c 	.word	0x2000013c
 80007b8:	2000013f 	.word	0x2000013f

080007bc <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
void MC_1_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6178      	str	r0, [r7, #20]
	if(!mcFrame1.isFifoEmpty())
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fa8a 	bl	8001ce0 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 80007cc:	0003      	movs	r3, r0
 80007ce:	001a      	movs	r2, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	4053      	eors	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00d      	beq.n	80007f6 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame1Packet = mcFrame1.GetOldestDataPacket(&mc_1_flag);
 80007da:	4c0b      	ldr	r4, [pc, #44]	; (8000808 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 80007dc:	003b      	movs	r3, r7
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 80007e0:	4908      	ldr	r1, [pc, #32]	; (8000804 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f86b 	bl	80008be <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb>
 80007e8:	003b      	movs	r3, r7
 80007ea:	0020      	movs	r0, r4
 80007ec:	0019      	movs	r1, r3
 80007ee:	230c      	movs	r3, #12
 80007f0:	001a      	movs	r2, r3
 80007f2:	f004 f943 	bl	8004a7c <memcpy>
	newInput_CAN = true;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b007      	add	sp, #28
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	200001d8 	.word	0x200001d8
 8000808:	20000220 	.word	0x20000220
 800080c:	2000013d 	.word	0x2000013d
 8000810:	2000013f 	.word	0x2000013f

08000814 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
void MC_2_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	61f8      	str	r0, [r7, #28]
	if(!mcFrame2.isFifoEmpty())
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fa5e 	bl	8001ce0 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000824:	0003      	movs	r3, r0
 8000826:	001a      	movs	r2, r3
 8000828:	2301      	movs	r3, #1
 800082a:	4053      	eors	r3, r2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00d      	beq.n	800084e <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame2Packet = mcFrame2.GetOldestDataPacket(&mc_2_flag);
 8000832:	4c0b      	ldr	r4, [pc, #44]	; (8000860 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 8000834:	003b      	movs	r3, r7
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000838:	4908      	ldr	r1, [pc, #32]	; (800085c <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f868 	bl	8000910 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>
 8000840:	003b      	movs	r3, r7
 8000842:	0020      	movs	r0, r4
 8000844:	0019      	movs	r1, r3
 8000846:	2313      	movs	r3, #19
 8000848:	001a      	movs	r2, r3
 800084a:	f004 f917 	bl	8004a7c <memcpy>
	newInput_CAN = true;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b009      	add	sp, #36	; 0x24
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	2000022c 	.word	0x2000022c
 8000860:	20000278 	.word	0x20000278
 8000864:	2000013e 	.word	0x2000013e
 8000868:	2000013f 	.word	0x2000013f

0800086c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b08b      	sub	sp, #44	; 0x2c
 8000870:	af00      	add	r7, sp, #0
 8000872:	61f8      	str	r0, [r7, #28]
 8000874:	61b9      	str	r1, [r7, #24]
 8000876:	617a      	str	r2, [r7, #20]
	{
		CHILD_DATA returnData;
	    if(success)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d01a      	beq.n	80008b4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	3312      	adds	r3, #18
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f86b 	bl	8000962 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 800088c:	0003      	movs	r3, r0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00d      	beq.n	80008b4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8000898:	69fc      	ldr	r4, [r7, #28]
 800089a:	003b      	movs	r3, r7
 800089c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fafd 	bl	8000ea0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>
 80008a6:	003b      	movs	r3, r7
 80008a8:	0020      	movs	r0, r4
 80008aa:	0019      	movs	r1, r3
 80008ac:	2310      	movs	r3, #16
 80008ae:	001a      	movs	r2, r3
 80008b0:	f004 f8e4 	bl	8004a7c <memcpy>
	        }
	    }
	    return returnData;
 80008b4:	46c0      	nop			; (mov r8, r8)
	}
 80008b6:	69f8      	ldr	r0, [r7, #28]
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00b      	add	sp, #44	; 0x2c
 80008bc:	bd90      	pop	{r4, r7, pc}

080008be <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 80008be:	b590      	push	{r4, r7, lr}
 80008c0:	b08b      	sub	sp, #44	; 0x2c
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	61f8      	str	r0, [r7, #28]
 80008c6:	61b9      	str	r1, [r7, #24]
 80008c8:	617a      	str	r2, [r7, #20]
	    if(success)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01a      	beq.n	8000906 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	3312      	adds	r3, #18
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f842 	bl	8000962 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 80008de:	0003      	movs	r3, r0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	        if(*success)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00d      	beq.n	8000906 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 80008ea:	69fc      	ldr	r4, [r7, #28]
 80008ec:	003b      	movs	r3, r7
 80008ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fc20 	bl	8001138 <_ZN25MITSUBA_DRIVER_RX_FRAME_117arrayToDataPacketEPh>
 80008f8:	003b      	movs	r3, r7
 80008fa:	0020      	movs	r0, r4
 80008fc:	0019      	movs	r1, r3
 80008fe:	230c      	movs	r3, #12
 8000900:	001a      	movs	r2, r3
 8000902:	f004 f8bb 	bl	8004a7c <memcpy>
	    return returnData;
 8000906:	46c0      	nop			; (mov r8, r8)
	}
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	46bd      	mov	sp, r7
 800090c:	b00b      	add	sp, #44	; 0x2c
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08d      	sub	sp, #52	; 0x34
 8000914:	af00      	add	r7, sp, #0
 8000916:	6278      	str	r0, [r7, #36]	; 0x24
 8000918:	6239      	str	r1, [r7, #32]
 800091a:	61fa      	str	r2, [r7, #28]
	    if(success)
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d01a      	beq.n	8000958 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	3312      	adds	r3, #18
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f819 	bl	8000962 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000930:	0003      	movs	r3, r0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
	        if(*success)
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00d      	beq.n	8000958 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 800093c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800093e:	003b      	movs	r3, r7
 8000940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fd9e 	bl	8001486 <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>
 800094a:	003b      	movs	r3, r7
 800094c:	0020      	movs	r0, r4
 800094e:	0019      	movs	r1, r3
 8000950:	2313      	movs	r3, #19
 8000952:	001a      	movs	r2, r3
 8000954:	f004 f892 	bl	8004a7c <memcpy>
	    return returnData;
 8000958:	46c0      	nop			; (mov r8, r8)
	}
 800095a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800095c:	46bd      	mov	sp, r7
 800095e:	b00d      	add	sp, #52	; 0x34
 8000960:	bd90      	pop	{r4, r7, pc}

08000962 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 800096c:	230e      	movs	r3, #14
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	8b5a      	ldrh	r2, [r3, #26]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	8b1b      	ldrh	r3, [r3, #24]
 800097c:	429a      	cmp	r2, r3
 800097e:	d10a      	bne.n	8000996 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7f1b      	ldrb	r3, [r3, #28]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d022      	beq.n	80009d4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
            if(success)
 8000994:	e01e      	b.n	80009d4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 80009a2:	230e      	movs	r3, #14
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	8b52      	ldrh	r2, [r2, #26]
 80009aa:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	8b5b      	ldrh	r3, [r3, #26]
 80009b0:	3301      	adds	r3, #1
 80009b2:	2103      	movs	r1, #3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fd17 	bl	80003e8 <__aeabi_idivmod>
 80009ba:	000b      	movs	r3, r1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8b5a      	ldrh	r2, [r3, #26]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	8b1b      	ldrh	r3, [r3, #24]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d102      	bne.n	80009d4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80009d4:	230e      	movs	r3, #14
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	18d3      	adds	r3, r2, r3
    }
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_Z41__static_initialization_and_destruction_0ii>:
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d11b      	bne.n	8000a30 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d117      	bne.n	8000a30 <_Z41__static_initialization_and_destruction_0ii+0x48>
static MITSUBA_DRIVER_TX_RL_MESSAGE mcRequest(MC_REQUEST_ID);
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f94c 	bl	8000ca4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>
static MITSUBA_DRIVER_RX_FRAME_0 mcFrame0(MC_RX_FRAME0_ID);
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 faca 	bl	8000fac <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>
static MITSUBA_DRIVER_RX_FRAME_1 mcFrame1(MC_RX_FRAME1_ID);
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fc04 	bl	800122c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>
static MITSUBA_DRIVER_RX_FRAME_2 mcFrame2(MC_RX_FRAME2_ID);
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fdfa 	bl	8001624 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	0000ffff 	.word	0x0000ffff
 8000a3c:	08f89540 	.word	0x08f89540
 8000a40:	20000140 	.word	0x20000140
 8000a44:	08850225 	.word	0x08850225
 8000a48:	2000017c 	.word	0x2000017c
 8000a4c:	08950225 	.word	0x08950225
 8000a50:	200001d8 	.word	0x200001d8
 8000a54:	08a50225 	.word	0x08a50225
 8000a58:	2000022c 	.word	0x2000022c

08000a5c <_GLOBAL__sub_I_hcan>:
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <_GLOBAL__sub_I_hcan+0x14>)
 8000a62:	0019      	movs	r1, r3
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff ffbf 	bl	80009e8 <_Z41__static_initialization_and_destruction_0ii>
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	0000ffff 	.word	0x0000ffff

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	699a      	ldr	r2, [r3, #24]
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	619a      	str	r2, [r3, #24]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	69da      	ldr	r2, [r3, #28]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0549      	lsls	r1, r1, #21
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	61da      	str	r2, [r3, #28]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa2:	69da      	ldr	r2, [r3, #28]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	055b      	lsls	r3, r3, #21
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 ffdd 	bl	8004a8e <memset>
  if(hcan->Instance==CAN)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <HAL_CAN_MspInit+0xa4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d13b      	bne.n	8000b56 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000ae0:	69da      	ldr	r2, [r3, #28]
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0489      	lsls	r1, r1, #18
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	61da      	str	r2, [r3, #28]
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	049b      	lsls	r3, r3, #18
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_CAN_MspInit+0xa8>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	22c0      	movs	r2, #192	; 0xc0
 8000b1a:	0152      	lsls	r2, r2, #5
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	0021      	movs	r1, r4
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2202      	movs	r2, #2
 8000b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2204      	movs	r2, #4
 8000b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	2390      	movs	r3, #144	; 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 fd1f 	bl	8003584 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201e      	movs	r0, #30
 8000b4c:	f002 fce8 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000b50:	201e      	movs	r0, #30
 8000b52:	f002 fcfa 	bl	800354a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b00b      	add	sp, #44	; 0x2c
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40006400 	.word	0x40006400
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d113      	bne.n	8000ba4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_TIM_Base_MspInit+0x44>)
 8000b7e:	69da      	ldr	r2, [r3, #28]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_TIM_Base_MspInit+0x44>)
 8000b82:	2101      	movs	r1, #1
 8000b84:	430a      	orrs	r2, r1
 8000b86:	61da      	str	r2, [r3, #28]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_Base_MspInit+0x44>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	200f      	movs	r0, #15
 8000b9a:	f002 fcc1 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f002 fcd3 	bl	800354a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f001 fcb0 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <TIM2_IRQHandler+0x14>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f003 fb72 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	200000f4 	.word	0x200000f4

08000bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_kill>:

int _kill(int pid, int sig)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c12:	f003 ff09 	bl	8004a28 <__errno>
 8000c16:	0003      	movs	r3, r0
 8000c18:	2216      	movs	r2, #22
 8000c1a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_exit>:

void _exit (int status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c30:	2301      	movs	r3, #1
 8000c32:	425a      	negs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffe5 	bl	8000c08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c3e:	e7fe      	b.n	8000c3e <_exit+0x16>

08000c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>:
//Private Function Definitions

//Protected Function Definitions
/*****************TX Classes*****************/
void MITSUBA_DRIVER_TX_RL_MESSAGE::dataPacketToArray(MITSUBA_DRIVER_TX_RL_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	6018      	str	r0, [r3, #0]
 8000c54:	6039      	str	r1, [r7, #0]
	output[0] = 0;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.requestFrame0) << 0;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	1d3a      	adds	r2, r7, #4
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame1) << 1;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25a      	sxtb	r2, r3
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame2) << 2;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>:

	return output;
}

//Public Function Definitions
MITSUBA_DRIVER_TX_RL_MESSAGE::MITSUBA_DRIVER_TX_RL_MESSAGE(uint32_t message_id):
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_TX_RL_MESSAGE, MITSUBA_DRIVER_TX_RL_DATA_PACKET>{message_id,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	6839      	ldr	r1, [r7, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f000 fccb 	bl	8001658 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em+0x30>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
{}
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	08004bcc 	.word	0x08004bcc

08000cd8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
/*****************RX Classes*****************/
//RX Frame 0
void MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	003c      	movs	r4, r7
 8000ce0:	6020      	str	r0, [r4, #0]
 8000ce2:	6061      	str	r1, [r4, #4]
 8000ce4:	60a2      	str	r2, [r4, #8]
 8000ce6:	60e3      	str	r3, [r4, #12]
	output[0] = 0;
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltage);
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	3301      	adds	r3, #1
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.battVoltage >> 8);
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	7819      	ldrb	r1, [r3, #0]
 8000d0e:	003b      	movs	r3, r7
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	121b      	asrs	r3, r3, #8
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d18:	3301      	adds	r3, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrent) << 2);
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	3301      	adds	r3, #1
 8000d24:	7819      	ldrb	r1, [r3, #0]
 8000d26:	003b      	movs	r3, r7
 8000d28:	885b      	ldrh	r3, [r3, #2]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	3301      	adds	r3, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.battCurrent >> 6);
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	3302      	adds	r3, #2
 8000d46:	7819      	ldrb	r1, [r3, #0]
 8000d48:	003b      	movs	r3, r7
 8000d4a:	885b      	ldrh	r3, [r3, #2]
 8000d4c:	119b      	asrs	r3, r3, #6
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	3302      	adds	r3, #2
 8000d54:	430a      	orrs	r2, r1
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrentDir) << 3);
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	7819      	ldrb	r1, [r3, #0]
 8000d60:	003b      	movs	r3, r7
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.motorCurrentPkAvg << 4);
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	3302      	adds	r3, #2
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	003b      	movs	r3, r7
 8000d7a:	88db      	ldrh	r3, [r3, #6]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	3302      	adds	r3, #2
 8000d86:	430a      	orrs	r2, r1
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8e:	3303      	adds	r3, #3
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorCurrentPkAvg >> 4);
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	3303      	adds	r3, #3
 8000d98:	7819      	ldrb	r1, [r3, #0]
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	88db      	ldrh	r3, [r3, #6]
 8000d9e:	111b      	asrs	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	3303      	adds	r3, #3
 8000da6:	430a      	orrs	r2, r1
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(static_cast<uint32_t>(input.FETtemp) << 6);
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	3303      	adds	r3, #3
 8000db0:	7819      	ldrb	r1, [r3, #0]
 8000db2:	003b      	movs	r3, r7
 8000db4:	7a1b      	ldrb	r3, [r3, #8]
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]


	uint32_t convMotorRPM = input.motorRPM * 1;
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	895b      	ldrh	r3, [r3, #10]
 8000dc8:	617b      	str	r3, [r7, #20]
	output[4] = 0;
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.FETtemp >> 2);
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	7819      	ldrb	r1, [r3, #0]
 8000dd8:	003b      	movs	r3, r7
 8000dda:	7a1b      	ldrb	r3, [r3, #8]
 8000ddc:	109b      	asrs	r3, r3, #2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	3304      	adds	r3, #4
 8000de4:	430a      	orrs	r2, r1
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	701a      	strb	r2, [r3, #0]
	output[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	3304      	adds	r3, #4
 8000dee:	7819      	ldrb	r1, [r3, #0]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	701a      	strb	r2, [r3, #0]

	output[5] = 0;
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e04:	3305      	adds	r3, #5
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	3305      	adds	r3, #5
 8000e0e:	7819      	ldrb	r1, [r3, #0]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	227f      	movs	r2, #127	; 0x7f
 8000e18:	4013      	ands	r3, r2
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	3305      	adds	r3, #5
 8000e20:	430a      	orrs	r2, r1
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint8_t>(input.PWMDuty << 7));
 8000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e28:	3305      	adds	r3, #5
 8000e2a:	7819      	ldrb	r1, [r3, #0]
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	899b      	ldrh	r3, [r3, #12]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	01db      	lsls	r3, r3, #7
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	3305      	adds	r3, #5
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]

	output[6] = 0;
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e42:	3306      	adds	r3, #6
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	output[6] |= static_cast<uint8_t>(input.PWMDuty >> 1);
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	3306      	adds	r3, #6
 8000e4c:	7819      	ldrb	r1, [r3, #0]
 8000e4e:	003b      	movs	r3, r7
 8000e50:	899b      	ldrh	r3, [r3, #12]
 8000e52:	105b      	asrs	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	3306      	adds	r3, #6
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	701a      	strb	r2, [r3, #0]

	output[7] = 0;
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	3307      	adds	r3, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(input.PWMDuty >> 9);
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	7819      	ldrb	r1, [r3, #0]
 8000e6e:	003b      	movs	r3, r7
 8000e70:	899b      	ldrh	r3, [r3, #12]
 8000e72:	125b      	asrs	r3, r3, #9
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	3307      	adds	r3, #7
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(static_cast<uint32_t>(input.LeadAngle) << 1);
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	3307      	adds	r3, #7
 8000e84:	7819      	ldrb	r1, [r3, #0]
 8000e86:	003b      	movs	r3, r7
 8000e88:	7b9b      	ldrb	r3, [r3, #14]
 8000e8a:	18db      	adds	r3, r3, r3
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	3307      	adds	r3, #7
 8000e92:	430a      	orrs	r2, r1
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	701a      	strb	r2, [r3, #0]
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b007      	add	sp, #28
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET output;
	uint32_t preBattVoltage = (static_cast<uint32_t>(input[1] & 3) << 8) | (input[0]);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021a      	lsls	r2, r3, #8
 8000eb2:	23c0      	movs	r3, #192	; 0xc0
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	7812      	ldrb	r2, [r2, #0]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61fb      	str	r3, [r7, #28]
	output.battVoltage = static_cast<uint16_t>(preBattVoltage);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	801a      	strh	r2, [r3, #0]

	uint32_t preBattCurrent = (static_cast<uint32_t>(input[2] & 7) << 6) | (input[1] >> 2);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	019a      	lsls	r2, r3, #6
 8000ed0:	23e0      	movs	r3, #224	; 0xe0
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	3201      	adds	r2, #1
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	1092      	asrs	r2, r2, #2
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
	output.battCurrent = static_cast<uint16_t>(preBattCurrent);
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	805a      	strh	r2, [r3, #2]

	output.battCurrentDir = static_cast<bool>(input[2] & 8);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3302      	adds	r3, #2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4193      	sbcs	r3, r2
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	711a      	strb	r2, [r3, #4]

	uint32_t preMotorCurrent = static_cast<uint32_t>((input[3] & 0x3F) << 4) | (input[2] >> 4);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	3303      	adds	r3, #3
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	001a      	movs	r2, r3
 8000f0a:	23fc      	movs	r3, #252	; 0xfc
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	3202      	adds	r2, #2
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	1112      	asrs	r2, r2, #4
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
	output.motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	80da      	strh	r2, [r3, #6]

	uint32_t preFETtemp = static_cast<uint32_t>((input[4] & 7) << 2) | (input[3] >> 6);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3304      	adds	r3, #4
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	231c      	movs	r3, #28
 8000f30:	4013      	ands	r3, r2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	3203      	adds	r2, #3
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	1192      	asrs	r2, r2, #6
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
	output.FETtemp = static_cast<uint8_t>(preFETtemp);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	721a      	strb	r2, [r3, #8]

	uint32_t preMotorRPM = (static_cast<uint32_t>(input[5] & 0x7F) << 5) | (input[4] >> 3);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3305      	adds	r3, #5
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	23fe      	movs	r3, #254	; 0xfe
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4013      	ands	r3, r2
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	3204      	adds	r2, #4
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	10d2      	asrs	r2, r2, #3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	output.motorRPM = static_cast<uint16_t>(preMotorRPM);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	815a      	strh	r2, [r3, #10]

	uint32_t preDuty = (static_cast<uint32_t>(input[7] & 1) << 9) | (input[6] << 1) | (input[5] >> 7);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	025a      	lsls	r2, r3, #9
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	3206      	adds	r2, #6
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	0052      	lsls	r2, r2, #1
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	3205      	adds	r2, #5
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	11d2      	asrs	r2, r2, #7
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
	output.PWMDuty = static_cast<uint16_t>(preDuty);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	819a      	strh	r2, [r3, #12]

	output.LeadAngle = static_cast<uint8_t>((input[7] >> 1));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3307      	adds	r3, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	105b      	asrs	r3, r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	739a      	strb	r2, [r3, #14]

	return output;
 8000fa2:	46c0      	nop			; (mov r8, r8)
}
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b008      	add	sp, #32
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>:

MITSUBA_DRIVER_RX_FRAME_0::MITSUBA_DRIVER_RX_FRAME_0(uint32_t message_id):
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_0, MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET>{message_id,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, true, false}
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	f000 fb6d 	bl	80016a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em+0x30>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
{}
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	08004bb4 	.word	0x08004bb4

08000fe0 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>:

//RX Frame 1
void MITSUBA_DRIVER_RX_FRAME_1::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	1d3c      	adds	r4, r7, #4
 8000fe8:	6020      	str	r0, [r4, #0]
 8000fea:	6061      	str	r1, [r4, #4]
 8000fec:	60a2      	str	r2, [r4, #8]
 8000fee:	603b      	str	r3, [r7, #0]
	output[0] = 0;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.powerMode);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.MCmode) << 1;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b25a      	sxtb	r2, r3
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b25b      	sxtb	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b25b      	sxtb	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.AcceleratorPosition << 2);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	885b      	ldrh	r3, [r3, #2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b2da      	uxtb	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.AcceleratorPosition >> 6);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	7819      	ldrb	r1, [r3, #0]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	885b      	ldrh	r3, [r3, #2]
 8001046:	119b      	asrs	r3, r3, #6
 8001048:	b2da      	uxtb	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.regenVRposition << 4);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	7819      	ldrb	r1, [r3, #0]
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	b2da      	uxtb	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3302      	adds	r3, #2
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.regenVRposition >> 4);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3302      	adds	r3, #2
 800107a:	7819      	ldrb	r1, [r3, #0]
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	111b      	asrs	r3, r3, #4
 8001082:	b2da      	uxtb	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3302      	adds	r3, #2
 8001088:	430a      	orrs	r2, r1
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.digitSWposition) << 6);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3302      	adds	r3, #2
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	799b      	ldrb	r3, [r3, #6]
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	b2da      	uxtb	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	3302      	adds	r3, #2
 80010a0:	430a      	orrs	r2, r1
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3303      	adds	r3, #3
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.digitSWposition >> 2);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3303      	adds	r3, #3
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	799b      	ldrb	r3, [r3, #6]
 80010b8:	109b      	asrs	r3, r3, #2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3303      	adds	r3, #3
 80010c0:	430a      	orrs	r2, r1
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.outTargetVal << 2);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3303      	adds	r3, #3
 80010ca:	7819      	ldrb	r1, [r3, #0]
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	891b      	ldrh	r3, [r3, #8]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3303      	adds	r3, #3
 80010da:	430a      	orrs	r2, r1
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	701a      	strb	r2, [r3, #0]

	output[4] = 0;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.outTargetVal >> 6);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3304      	adds	r3, #4
 80010ec:	7819      	ldrb	r1, [r3, #0]
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	891b      	ldrh	r3, [r3, #8]
 80010f2:	119b      	asrs	r3, r3, #6
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	430a      	orrs	r2, r1
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.driveActStat << 4);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3304      	adds	r3, #4
 8001104:	7819      	ldrb	r1, [r3, #0]
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	7a9b      	ldrb	r3, [r3, #10]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	430a      	orrs	r2, r1
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(static_cast<uint8_t>(input.regenStat) << 6);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	7adb      	ldrb	r3, [r3, #11]
 8001122:	019b      	lsls	r3, r3, #6
 8001124:	b2da      	uxtb	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	430a      	orrs	r2, r1
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b005      	add	sp, #20
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <_ZN25MITSUBA_DRIVER_RX_FRAME_117arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_1::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET output;

	output.powerMode = input[0] & 1;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	001a      	movs	r2, r3
 8001148:	2301      	movs	r3, #1
 800114a:	4013      	ands	r3, r2
 800114c:	1e5a      	subs	r2, r3, #1
 800114e:	4193      	sbcs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	701a      	strb	r2, [r3, #0]

	output.MCmode = (input[0] >> 1) & 1;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	001a      	movs	r2, r3
 800115c:	2302      	movs	r3, #2
 800115e:	4013      	ands	r3, r2
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	4193      	sbcs	r3, r2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	705a      	strb	r2, [r3, #1]

	uint32_t preAccelPos = static_cast<uint32_t>((input[1] & 0xF) << 6) | (input[0] >> 2);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	001a      	movs	r2, r3
 8001174:	23f0      	movs	r3, #240	; 0xf0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4013      	ands	r3, r2
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	1092      	asrs	r2, r2, #2
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
	output.AcceleratorPosition = static_cast<uint16_t>(preAccelPos);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	805a      	strh	r2, [r3, #2]

	uint32_t preRegenVRposition = static_cast<uint32_t>((input[2] & 0x3F) << 4) | (input[1] >> 4);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3302      	adds	r3, #2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	001a      	movs	r2, r3
 8001196:	23fc      	movs	r3, #252	; 0xfc
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4013      	ands	r3, r2
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	3201      	adds	r2, #1
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	1112      	asrs	r2, r2, #4
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
	output.regenVRposition = static_cast<uint16_t>(preRegenVRposition);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	809a      	strh	r2, [r3, #4]

	uint32_t preDigitSWposition = static_cast<uint32_t>((input[3] & 0x3) << 2) | (input[2] >> 6);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3303      	adds	r3, #3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	001a      	movs	r2, r3
 80011ba:	230c      	movs	r3, #12
 80011bc:	4013      	ands	r3, r2
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	3202      	adds	r2, #2
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	1192      	asrs	r2, r2, #6
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
	output.digitSWposition = static_cast<uint8_t>(preDigitSWposition);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	719a      	strb	r2, [r3, #6]

	uint32_t preOutTargetVal = static_cast<uint32_t>((input[4] & 0xF) << 6) | (input[3] >> 2);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	001a      	movs	r2, r3
 80011dc:	23f0      	movs	r3, #240	; 0xf0
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	3203      	adds	r2, #3
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	1092      	asrs	r2, r2, #2
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
	output.outTargetVal = static_cast<uint16_t>(preOutTargetVal);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	811a      	strh	r2, [r3, #8]

	output.driveActStat = static_cast<uint8_t>((input[4] >> 4) & 3);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	111b      	asrs	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	729a      	strb	r2, [r3, #10]

	output.regenStat = static_cast<bool>((input[4] >> 6) & 1);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3304      	adds	r3, #4
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	2340      	movs	r3, #64	; 0x40
 8001214:	4013      	ands	r3, r2
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	4193      	sbcs	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	72da      	strb	r2, [r3, #11]

	return output;
 8001220:	46c0      	nop			; (mov r8, r8)
}
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	46bd      	mov	sp, r7
 8001226:	b006      	add	sp, #24
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>:

MITSUBA_DRIVER_RX_FRAME_1::MITSUBA_DRIVER_RX_FRAME_1(uint32_t message_id):
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_1, MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET>{message_id,subsystem_info::MOTORRX1_RL_MSG_LENGTH, true, true, false}
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2301      	movs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2205      	movs	r2, #5
 8001246:	f000 fa53 	bl	80016f0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em+0x30>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
{}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	08004b9c 	.word	0x08004b9c

08001260 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>:

//RX Frame 2
void MITSUBA_DRIVER_RX_FRAME_2::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8001260:	b084      	sub	sp, #16
 8001262:	b5b0      	push	{r4, r5, r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	2518      	movs	r5, #24
 800126a:	197c      	adds	r4, r7, r5
 800126c:	6020      	str	r0, [r4, #0]
 800126e:	6061      	str	r1, [r4, #4]
 8001270:	60a2      	str	r2, [r4, #8]
 8001272:	60e3      	str	r3, [r4, #12]
	uint32_t convOverHeadLevel = input.overHeatLevel;
 8001274:	0029      	movs	r1, r5
 8001276:	187b      	adds	r3, r7, r1
 8001278:	7c9b      	ldrb	r3, [r3, #18]
 800127a:	607b      	str	r3, [r7, #4]

	output[0] = 0;
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.adSensorError) << 0;
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	187b      	adds	r3, r7, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorUError) << 1;
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25a      	sxtb	r2, r3
 8001298:	187b      	adds	r3, r7, r1
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorWError) << 2;
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25a      	sxtb	r2, r3
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.fetThermError) << 3;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltSensorError) << 5;
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorError) << 6;
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	795b      	ldrb	r3, [r3, #5]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorAdjError) << 7;
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25a      	sxtb	r2, r3
 8001310:	187b      	adds	r3, r7, r1
 8001312:	799b      	ldrb	r3, [r3, #6]
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	b25b      	sxtb	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001324:	3301      	adds	r3, #1
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.motorCurrSensorAdjError) << 0;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	3301      	adds	r3, #1
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	0008      	movs	r0, r1
 8001332:	187b      	adds	r3, r7, r1
 8001334:	79db      	ldrb	r3, [r3, #7]
 8001336:	0019      	movs	r1, r3
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	3301      	adds	r3, #1
 800133c:	430a      	orrs	r2, r1
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.accelPosError) << 1;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3301      	adds	r3, #1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25a      	sxtb	r2, r3
 800134a:	0001      	movs	r1, r0
 800134c:	187b      	adds	r3, r7, r1
 800134e:	7a1b      	ldrb	r3, [r3, #8]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	b25b      	sxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b25a      	sxtb	r2, r3
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	3301      	adds	r3, #1
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.contVoltSensorError) << 3;
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	3301      	adds	r3, #1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b25a      	sxtb	r2, r3
 8001368:	187b      	adds	r3, r7, r1
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25a      	sxtb	r2, r3
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	3301      	adds	r3, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	3302      	adds	r3, #2
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.powerSystemError) << 0;
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	3302      	adds	r3, #2
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	0008      	movs	r0, r1
 800138c:	187b      	adds	r3, r7, r1
 800138e:	7a9b      	ldrb	r3, [r3, #10]
 8001390:	0019      	movs	r1, r3
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	3302      	adds	r3, #2
 8001396:	430a      	orrs	r2, r1
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrError) << 1;
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	3302      	adds	r3, #2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	0001      	movs	r1, r0
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	7adb      	ldrb	r3, [r3, #11]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	3302      	adds	r3, #2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overVoltError) << 3;
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	3302      	adds	r3, #2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	7b1b      	ldrb	r3, [r3, #12]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	3302      	adds	r3, #2
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrLimit) << 5;
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	3302      	adds	r3, #2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	7b5b      	ldrb	r3, [r3, #13]
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	3302      	adds	r3, #2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	3303      	adds	r3, #3
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorSystemError) << 0;
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	3303      	adds	r3, #3
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	0008      	movs	r0, r1
 8001402:	187b      	adds	r3, r7, r1
 8001404:	7b9b      	ldrb	r3, [r3, #14]
 8001406:	0019      	movs	r1, r3
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	3303      	adds	r3, #3
 800140c:	430a      	orrs	r2, r1
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorLock) << 1;
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	3303      	adds	r3, #3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25a      	sxtb	r2, r3
 800141a:	0001      	movs	r1, r0
 800141c:	187b      	adds	r3, r7, r1
 800141e:	7bdb      	ldrb	r3, [r3, #15]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b25b      	sxtb	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b25a      	sxtb	r2, r3
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	3303      	adds	r3, #3
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorShort) << 2;
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	3303      	adds	r3, #3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b25a      	sxtb	r2, r3
 8001438:	187b      	adds	r3, r7, r1
 800143a:	7c1b      	ldrb	r3, [r3, #16]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b25a      	sxtb	r2, r3
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	3303      	adds	r3, #3
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorOpen) << 3;
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3303      	adds	r3, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25a      	sxtb	r2, r3
 8001454:	187b      	adds	r3, r7, r1
 8001456:	7c5b      	ldrb	r3, [r3, #17]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25a      	sxtb	r2, r3
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	3303      	adds	r3, #3
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	701a      	strb	r2, [r3, #0]

	output[4] = static_cast<uint32_t>(convOverHeadLevel) & 0x3;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	3304      	adds	r3, #4
 8001470:	2103      	movs	r1, #3
 8001472:	400a      	ands	r2, r1
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bcb0      	pop	{r4, r5, r7}
 8001480:	bc08      	pop	{r3}
 8001482:	b004      	add	sp, #16
 8001484:	4718      	bx	r3

08001486 <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_2::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET output;

	output.adSensorError 			= input[0] & (1 << 0);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	001a      	movs	r2, r3
 8001496:	2301      	movs	r3, #1
 8001498:	4013      	ands	r3, r2
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	4193      	sbcs	r3, r2
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	701a      	strb	r2, [r3, #0]
	output.motorCurrSensorUError 	= input[0] & (1 << 1);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	001a      	movs	r2, r3
 80014aa:	2302      	movs	r3, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	4193      	sbcs	r3, r2
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	705a      	strb	r2, [r3, #1]
	output.motorCurrSensorWError 	= input[0] & (1 << 2);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	2304      	movs	r3, #4
 80014c0:	4013      	ands	r3, r2
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	4193      	sbcs	r3, r2
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	709a      	strb	r2, [r3, #2]
	output.fetThermError 			= input[0] & (1 << 3);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	001a      	movs	r2, r3
 80014d2:	2308      	movs	r3, #8
 80014d4:	4013      	ands	r3, r2
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	4193      	sbcs	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	70da      	strb	r2, [r3, #3]
	output.battVoltSensorError 		= input[0] & (1 << 5);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	001a      	movs	r2, r3
 80014e6:	2320      	movs	r3, #32
 80014e8:	4013      	ands	r3, r2
 80014ea:	1e5a      	subs	r2, r3, #1
 80014ec:	4193      	sbcs	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	711a      	strb	r2, [r3, #4]
	output.battCurrSensorError 		= input[0] & (1 << 6);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	001a      	movs	r2, r3
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	4013      	ands	r3, r2
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	4193      	sbcs	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	715a      	strb	r2, [r3, #5]
	output.battCurrSensorAdjError 	= input[0] & (1 << 7);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	09db      	lsrs	r3, r3, #7
 8001512:	b2da      	uxtb	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	719a      	strb	r2, [r3, #6]

	output.motorCurrSensorAdjError	= input[1] & (1 << 0);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	001a      	movs	r2, r3
 8001520:	2301      	movs	r3, #1
 8001522:	4013      	ands	r3, r2
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	4193      	sbcs	r3, r2
 8001528:	b2da      	uxtb	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	71da      	strb	r2, [r3, #7]
	output.accelPosError			= input[1] & (1 << 1);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	001a      	movs	r2, r3
 8001536:	2302      	movs	r3, #2
 8001538:	4013      	ands	r3, r2
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4193      	sbcs	r3, r2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	721a      	strb	r2, [r3, #8]
	output.contVoltSensorError		= input[1] & (1 << 3);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	001a      	movs	r2, r3
 800154c:	2308      	movs	r3, #8
 800154e:	4013      	ands	r3, r2
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	4193      	sbcs	r3, r2
 8001554:	b2da      	uxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	725a      	strb	r2, [r3, #9]

	output.powerSystemError 		= input[2] & (1 << 0);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3302      	adds	r3, #2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	001a      	movs	r2, r3
 8001562:	2301      	movs	r3, #1
 8001564:	4013      	ands	r3, r2
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	4193      	sbcs	r3, r2
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	729a      	strb	r2, [r3, #10]
	output.overCurrError			= input[2] & (1 << 1);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3302      	adds	r3, #2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	001a      	movs	r2, r3
 8001578:	2302      	movs	r3, #2
 800157a:	4013      	ands	r3, r2
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	4193      	sbcs	r3, r2
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	72da      	strb	r2, [r3, #11]
	output.overVoltError			= input[2] & (1 << 3);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3302      	adds	r3, #2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	001a      	movs	r2, r3
 800158e:	2308      	movs	r3, #8
 8001590:	4013      	ands	r3, r2
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	4193      	sbcs	r3, r2
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	731a      	strb	r2, [r3, #12]
	output.overCurrLimit			= input[2] & (1 << 5);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	001a      	movs	r2, r3
 80015a4:	2320      	movs	r3, #32
 80015a6:	4013      	ands	r3, r2
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	4193      	sbcs	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	735a      	strb	r2, [r3, #13]

	output.motorSystemError 		= input[3] & (1 << 0);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3303      	adds	r3, #3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	001a      	movs	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	4193      	sbcs	r3, r2
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	739a      	strb	r2, [r3, #14]
	output.motorLock		 		= input[3] & (1 << 1);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3303      	adds	r3, #3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	001a      	movs	r2, r3
 80015d0:	2302      	movs	r3, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	4193      	sbcs	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	73da      	strb	r2, [r3, #15]
	output.hallSensorShort			= input[3] & (1 << 2);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	3303      	adds	r3, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	2304      	movs	r3, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	4193      	sbcs	r3, r2
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	741a      	strb	r2, [r3, #16]
	output.hallSensorOpen			= input[3] & (1 << 3);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3303      	adds	r3, #3
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	001a      	movs	r2, r3
 80015fc:	2308      	movs	r3, #8
 80015fe:	4013      	ands	r3, r2
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	4193      	sbcs	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	745a      	strb	r2, [r3, #17]

	output.overHeatLevel			= input[4] & 0x3;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2203      	movs	r2, #3
 8001612:	4013      	ands	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	749a      	strb	r2, [r3, #18]

	return output;
 800161a:	46c0      	nop			; (mov r8, r8)
}
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>:

//Public Function Definitions
MITSUBA_DRIVER_RX_FRAME_2::MITSUBA_DRIVER_RX_FRAME_2(uint32_t message_id):
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_2, MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET>{message_id,subsystem_info::MOTORRX2_RL_MSG_LENGTH, true, true, false}
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2301      	movs	r3, #1
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	2205      	movs	r2, #5
 800163e:	f000 f87d 	bl	800173c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em+0x30>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
{}
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	08004b84 	.word	0x08004b84

08001658 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b087      	sub	sp, #28
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	0019      	movs	r1, r3
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	1c0a      	adds	r2, r1, #0
 800166c:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	781c      	ldrb	r4, [r3, #0]
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	2324      	movs	r3, #36	; 0x24
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	2320      	movs	r3, #32
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	0023      	movs	r3, r4
 800168c:	f000 f998 	bl	80019c0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb+0x48>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
		{}
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b005      	add	sp, #20
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	08004bd8 	.word	0x08004bd8

080016a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	0019      	movs	r1, r3
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	1dbb      	adds	r3, r7, #6
 80016b6:	1c0a      	adds	r2, r1, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	781c      	ldrb	r4, [r3, #0]
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	2324      	movs	r3, #36	; 0x24
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	2320      	movs	r3, #32
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	0023      	movs	r3, r4
 80016d8:	f000 f972 	bl	80019c0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]
		{}
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b005      	add	sp, #20
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	08004bc0 	.word	0x08004bc0

080016f0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	0019      	movs	r1, r3
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	1c0a      	adds	r2, r1, #0
 8001704:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	1dbb      	adds	r3, r7, #6
 800170a:	781c      	ldrb	r4, [r3, #0]
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	2324      	movs	r3, #36	; 0x24
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2320      	movs	r3, #32
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	0023      	movs	r3, r4
 8001724:	f000 f94c 	bl	80019c0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb+0x48>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]
		{}
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b005      	add	sp, #20
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	08004ba8 	.word	0x08004ba8

0800173c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	0019      	movs	r1, r3
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	1c0a      	adds	r2, r1, #0
 8001750:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	781c      	ldrb	r4, [r3, #0]
 8001758:	1dfb      	adds	r3, r7, #7
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	2324      	movs	r3, #36	; 0x24
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2320      	movs	r3, #32
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	0023      	movs	r3, r4
 8001770:	f000 f926 	bl	80019c0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb+0x48>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	601a      	str	r2, [r3, #0]
		{}
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b005      	add	sp, #20
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	08004b90 	.word	0x08004b90

08001788 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	46c6      	mov	lr, r8
 800178c:	b500      	push	{lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af02      	add	r7, sp, #8
 8001792:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3309      	adds	r3, #9
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2239      	movs	r2, #57	; 0x39
 800179e:	9101      	str	r1, [sp, #4]
 80017a0:	5c99      	ldrb	r1, [r3, r2]
 80017a2:	1898      	adds	r0, r3, r2
 80017a4:	7840      	ldrb	r0, [r0, #1]
 80017a6:	0200      	lsls	r0, r0, #8
 80017a8:	4301      	orrs	r1, r0
 80017aa:	1898      	adds	r0, r3, r2
 80017ac:	7880      	ldrb	r0, [r0, #2]
 80017ae:	0400      	lsls	r0, r0, #16
 80017b0:	4301      	orrs	r1, r0
 80017b2:	1898      	adds	r0, r3, r2
 80017b4:	78c0      	ldrb	r0, [r0, #3]
 80017b6:	0600      	lsls	r0, r0, #24
 80017b8:	4301      	orrs	r1, r0
 80017ba:	2000      	movs	r0, #0
 80017bc:	4688      	mov	r8, r1
 80017be:	1899      	adds	r1, r3, r2
 80017c0:	7908      	ldrb	r0, [r1, #4]
 80017c2:	794c      	ldrb	r4, [r1, #5]
 80017c4:	0224      	lsls	r4, r4, #8
 80017c6:	4320      	orrs	r0, r4
 80017c8:	798c      	ldrb	r4, [r1, #6]
 80017ca:	0424      	lsls	r4, r4, #16
 80017cc:	4320      	orrs	r0, r4
 80017ce:	79c9      	ldrb	r1, [r1, #7]
 80017d0:	0609      	lsls	r1, r1, #24
 80017d2:	4301      	orrs	r1, r0
 80017d4:	2600      	movs	r6, #0
 80017d6:	000e      	movs	r6, r1
 80017d8:	1899      	adds	r1, r3, r2
 80017da:	7a08      	ldrb	r0, [r1, #8]
 80017dc:	7a4c      	ldrb	r4, [r1, #9]
 80017de:	0224      	lsls	r4, r4, #8
 80017e0:	4320      	orrs	r0, r4
 80017e2:	7a8c      	ldrb	r4, [r1, #10]
 80017e4:	0424      	lsls	r4, r4, #16
 80017e6:	4320      	orrs	r0, r4
 80017e8:	7ac9      	ldrb	r1, [r1, #11]
 80017ea:	0609      	lsls	r1, r1, #24
 80017ec:	4301      	orrs	r1, r0
 80017ee:	2500      	movs	r5, #0
 80017f0:	000d      	movs	r5, r1
 80017f2:	1899      	adds	r1, r3, r2
 80017f4:	7b08      	ldrb	r0, [r1, #12]
 80017f6:	7b4c      	ldrb	r4, [r1, #13]
 80017f8:	0224      	lsls	r4, r4, #8
 80017fa:	4320      	orrs	r0, r4
 80017fc:	7b8c      	ldrb	r4, [r1, #14]
 80017fe:	0424      	lsls	r4, r4, #16
 8001800:	4320      	orrs	r0, r4
 8001802:	7bc9      	ldrb	r1, [r1, #15]
 8001804:	0609      	lsls	r1, r1, #24
 8001806:	4301      	orrs	r1, r0
 8001808:	2400      	movs	r4, #0
 800180a:	000c      	movs	r4, r1
 800180c:	2110      	movs	r1, #16
 800180e:	189b      	adds	r3, r3, r2
 8001810:	185a      	adds	r2, r3, r1
 8001812:	466b      	mov	r3, sp
 8001814:	0018      	movs	r0, r3
 8001816:	0011      	movs	r1, r2
 8001818:	2303      	movs	r3, #3
 800181a:	001a      	movs	r2, r3
 800181c:	f003 f92e 	bl	8004a7c <memcpy>
 8001820:	4640      	mov	r0, r8
 8001822:	0031      	movs	r1, r6
 8001824:	002a      	movs	r2, r5
 8001826:	0023      	movs	r3, r4
 8001828:	f7ff fd1a 	bl	8001260 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>
	}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bc80      	pop	{r7}
 8001834:	46b8      	mov	r8, r7
 8001836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001838 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3309      	adds	r3, #9
 8001844:	001c      	movs	r4, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	223a      	movs	r2, #58	; 0x3a
 800184a:	5a99      	ldrh	r1, [r3, r2]
 800184c:	1898      	adds	r0, r3, r2
 800184e:	8840      	ldrh	r0, [r0, #2]
 8001850:	0400      	lsls	r0, r0, #16
 8001852:	4301      	orrs	r1, r0
 8001854:	2500      	movs	r5, #0
 8001856:	000d      	movs	r5, r1
 8001858:	1899      	adds	r1, r3, r2
 800185a:	8888      	ldrh	r0, [r1, #4]
 800185c:	88c9      	ldrh	r1, [r1, #6]
 800185e:	0409      	lsls	r1, r1, #16
 8001860:	4308      	orrs	r0, r1
 8001862:	2100      	movs	r1, #0
 8001864:	0001      	movs	r1, r0
 8001866:	189b      	adds	r3, r3, r2
 8001868:	891a      	ldrh	r2, [r3, #8]
 800186a:	895b      	ldrh	r3, [r3, #10]
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	4313      	orrs	r3, r2
 8001870:	2200      	movs	r2, #0
 8001872:	001a      	movs	r2, r3
 8001874:	0023      	movs	r3, r4
 8001876:	0028      	movs	r0, r5
 8001878:	f7ff fbb2 	bl	8000fe0 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>
	}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bdb0      	pop	{r4, r5, r7, pc}

08001884 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3309      	adds	r3, #9
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	223a      	movs	r2, #58	; 0x3a
 8001896:	9100      	str	r1, [sp, #0]
 8001898:	5a99      	ldrh	r1, [r3, r2]
 800189a:	1898      	adds	r0, r3, r2
 800189c:	8840      	ldrh	r0, [r0, #2]
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	4301      	orrs	r1, r0
 80018a2:	2600      	movs	r6, #0
 80018a4:	000e      	movs	r6, r1
 80018a6:	1899      	adds	r1, r3, r2
 80018a8:	8888      	ldrh	r0, [r1, #4]
 80018aa:	88c9      	ldrh	r1, [r1, #6]
 80018ac:	0409      	lsls	r1, r1, #16
 80018ae:	4301      	orrs	r1, r0
 80018b0:	2500      	movs	r5, #0
 80018b2:	000d      	movs	r5, r1
 80018b4:	1899      	adds	r1, r3, r2
 80018b6:	8908      	ldrh	r0, [r1, #8]
 80018b8:	8949      	ldrh	r1, [r1, #10]
 80018ba:	0409      	lsls	r1, r1, #16
 80018bc:	4301      	orrs	r1, r0
 80018be:	2400      	movs	r4, #0
 80018c0:	000c      	movs	r4, r1
 80018c2:	189b      	adds	r3, r3, r2
 80018c4:	899a      	ldrh	r2, [r3, #12]
 80018c6:	89db      	ldrh	r3, [r3, #14]
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	0013      	movs	r3, r2
 80018d0:	0030      	movs	r0, r6
 80018d2:	0029      	movs	r1, r5
 80018d4:	0022      	movs	r2, r4
 80018d6:	f7ff f9ff 	bl	8000cd8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b003      	add	sp, #12
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e2 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80018e2:	b590      	push	{r4, r7, lr}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3309      	adds	r3, #9
 80018ee:	001c      	movs	r4, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2239      	movs	r2, #57	; 0x39
 80018f4:	5c99      	ldrb	r1, [r3, r2]
 80018f6:	1898      	adds	r0, r3, r2
 80018f8:	7840      	ldrb	r0, [r0, #1]
 80018fa:	0200      	lsls	r0, r0, #8
 80018fc:	4301      	orrs	r1, r0
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	789b      	ldrb	r3, [r3, #2]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	430b      	orrs	r3, r1
 8001906:	001a      	movs	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	0a12      	lsrs	r2, r2, #8
 800190e:	0e1b      	lsrs	r3, r3, #24
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	4313      	orrs	r3, r2
 8001914:	0021      	movs	r1, r4
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff f997 	bl	8000c4a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>
	}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b003      	add	sp, #12
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08d      	sub	sp, #52	; 0x34
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2100      	movs	r1, #0
 8001930:	0018      	movs	r0, r3
 8001932:	f001 fad3 	bl	8002edc <HAL_CAN_GetRxFifoFillLevel>
 8001936:	0003      	movs	r3, r0
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	4193      	sbcs	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02e      	beq.n	80019a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8001942:	2308      	movs	r3, #8
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2410      	movs	r4, #16
 8001948:	193a      	adds	r2, r7, r4
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	2100      	movs	r1, #0
 800194e:	f001 f9a9 	bl	8002ca4 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8001952:	0022      	movs	r2, r4
 8001954:	18bb      	adds	r3, r7, r2
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 800195c:	18bb      	adds	r3, r7, r2
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e002      	b.n	8001968 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001962:	2310      	movs	r3, #16
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0018      	movs	r0, r3
 800196a:	f000 f863 	bl	8001a34 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 800196e:	0003      	movs	r3, r0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0d9      	beq.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	001a      	movs	r2, r3
 800197e:	2310      	movs	r3, #16
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d1d1      	bne.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8001988:	2308      	movs	r3, #8
 800198a:	18fa      	adds	r2, r7, r3
 800198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f9b3 	bl	8001cfc <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	0018      	movs	r0, r3
 800199a:	f000 f8aa 	bl	8001af2 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800199e:	e7c5      	b.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b00d      	add	sp, #52	; 0x34
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <CEC_CAN_IRQHandler+0x14>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 fae9 	bl	8002f86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20000304 	.word	0x20000304

080019c0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	0019      	movs	r1, r3
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	1c0a      	adds	r2, r1, #0
 80019d4:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1dfa      	adds	r2, r7, #7
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	721a      	strb	r2, [r3, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3312      	adds	r3, #18
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f997 	bl	8001d22 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1dba      	adds	r2, r7, #6
 80019f8:	2130      	movs	r1, #48	; 0x30
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	545a      	strb	r2, [r3, r1]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	2318      	movs	r3, #24
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2131      	movs	r1, #49	; 0x31
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	5453      	strb	r3, [r2, r1]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	221c      	movs	r2, #28
 8001a0e:	18ba      	adds	r2, r7, r2
 8001a10:	2132      	movs	r1, #50	; 0x32
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	545a      	strb	r2, [r3, r1]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2238      	movs	r2, #56	; 0x38
 8001a20:	2100      	movs	r1, #0
 8001a22:	5499      	strb	r1, [r3, r2]
{}
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	08004be4 	.word	0x08004be4

08001a34 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 fa52 	bl	8001eec <_ZN14RX_BINARY_TREE11FindElementEm>
 8001a48:	0003      	movs	r3, r0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	2000028c 	.word	0x2000028c

08001a58 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2238      	movs	r2, #56	; 0x38
 8001a6c:	5c9b      	ldrb	r3, [r3, r2]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4053      	eors	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x4c>
    {
        bool success = SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 8001a78:	250f      	movs	r5, #15
 8001a7a:	197c      	adds	r4, r7, r5
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x54>)
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fa14 	bl	8001eb0 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	7023      	strb	r3, [r4, #0]
        // TODO figure out a way to make this better
		#ifdef DEBUG
        	if(!success)
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4053      	eors	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d000      	beq.n	8001a9c <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x44>
        	{
        		__BKPT(0);
 8001a9a:	be00      	bkpt	0x0000
        	}
			  // If you are at this breakpoint then your number of messages is incorrect
		#endif
        isReceiving = true;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2238      	movs	r2, #56	; 0x38
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	5499      	strb	r1, [r3, r2]
    } 
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001aac:	2000028c 	.word	0x2000028c

08001ab0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2231      	movs	r2, #49	; 0x31
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2232      	movs	r2, #50	; 0x32
 8001ac6:	5c9b      	ldrb	r3, [r3, r2]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 f8c4 	bl	8001c5c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 8001ad4:	e009      	b.n	8001aea <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	0010      	movs	r0, r2
 8001ae0:	4798      	blx	r3
	    this->sendTransmitBufferData();
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f877 	bl	8001bd8 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	0010      	movs	r0, r2
 8001b0a:	4798      	blx	r3
    }
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8001b1e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b22:	2206      	movs	r2, #6
 8001b24:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b34:	22c0      	movs	r2, #192	; 0xc0
 8001b36:	0312      	lsls	r2, r2, #12
 8001b38:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0352      	lsls	r2, r2, #13
 8001b40:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 fd03 	bl	8002574 <HAL_CAN_Init>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	4193      	sbcs	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 8001b7a:	f7fe fdd7 	bl	800072c <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001b7e:	003b      	movs	r3, r7
 8001b80:	2201      	movs	r2, #1
 8001b82:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 8001b84:	003b      	movs	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001b8a:	003b      	movs	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8001b90:	003b      	movs	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 8001b96:	003b      	movs	r3, r7
 8001b98:	2201      	movs	r2, #1
 8001b9a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001ba8:	003a      	movs	r2, r7
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001bac:	0011      	movs	r1, r2
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 fe2a 	bl	8002808 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f001 f9ba 	bl	8002f32 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 ff13 	bl	80029ec <HAL_CAN_Start>
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b00a      	add	sp, #40	; 0x28
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	20000304 	.word	0x20000304
 8001bd4:	40006400 	.word	0x40006400

08001bd8 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d032      	beq.n	8001c4e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 f822 	bl	8002c34 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	425a      	negs	r2, r3
 8001bf4:	4153      	adcs	r3, r2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d000      	beq.n	8001bfe <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8001bfc:	e7f4      	b.n	8001be8 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8001bfe:	210c      	movs	r1, #12
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7a1b      	ldrb	r3, [r3, #8]
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2204      	movs	r2, #4
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e007      	b.n	8001c3a <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	210c      	movs	r1, #12
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3309      	adds	r3, #9
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2324      	movs	r3, #36	; 0x24
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	210c      	movs	r1, #12
 8001c46:	1879      	adds	r1, r7, r1
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001c4a:	f000 ff15 	bl	8002a78 <HAL_CAN_AddTxMessage>
	}
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b00a      	add	sp, #40	; 0x28
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	20000304 	.word	0x20000304

08001c5c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d032      	beq.n	8001cd2 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 ffe0 	bl	8002c34 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c74:	0003      	movs	r3, r0
 8001c76:	425a      	negs	r2, r3
 8001c78:	4153      	adcs	r3, r2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d000      	beq.n	8001c82 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 8001c80:	e7f4      	b.n	8001c6c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 8001c82:	210c      	movs	r1, #12
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2202      	movs	r2, #2
 8001c88:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	001a      	movs	r2, r3
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2230      	movs	r2, #48	; 0x30
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2204      	movs	r2, #4
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	e007      	b.n	8001cbe <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	210c      	movs	r1, #12
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3309      	adds	r3, #9
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	2324      	movs	r3, #36	; 0x24
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	210c      	movs	r1, #12
 8001cca:	1879      	adds	r1, r7, r1
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001cce:	f000 fed3 	bl	8002a78 <HAL_CAN_AddTxMessage>
	}
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b00a      	add	sp, #40	; 0x28
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	20000304 	.word	0x20000304

08001ce0 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3312      	adds	r3, #18
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 f82a 	bl	8001d46 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8001cf2:	0003      	movs	r3, r0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3312      	adds	r3, #18
 8001d0a:	240f      	movs	r4, #15
 8001d0c:	193a      	adds	r2, r7, r4
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 f82d 	bl	8001d70 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	781b      	ldrb	r3, [r3, #0]
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b005      	add	sp, #20
 8001d20:	bd90      	pop	{r4, r7, pc}

08001d22 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	831a      	strh	r2, [r3, #24]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	835a      	strh	r2, [r3, #26]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	771a      	strb	r2, [r3, #28]
    {}
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b002      	add	sp, #8
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8b1a      	ldrh	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8b5b      	ldrh	r3, [r3, #26]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d105      	bne.n	8001d66 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7f1b      	ldrb	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8001d66:	2300      	movs	r3, #0
    }
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8b5a      	ldrh	r2, [r3, #26]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8b1b      	ldrh	r3, [r3, #24]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10d      	bne.n	8001da4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7f1b      	ldrb	r3, [r3, #28]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4053      	eors	r3, r2
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d025      	beq.n	8001de8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
            if(success)
 8001da2:	e021      	b.n	8001de8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8b19      	ldrh	r1, [r3, #24]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f819 	bl	8001df0 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8b1b      	ldrh	r3, [r3, #24]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe fb0e 	bl	80003e8 <__aeabi_idivmod>
 8001dcc:	000b      	movs	r3, r1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8b1a      	ldrh	r2, [r3, #24]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8b5b      	ldrh	r3, [r3, #26]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d103      	bne.n	8001de8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	771a      	strb	r2, [r3, #28]
    }
 8001de6:	e7ff      	b.n	8001de8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	1c0a      	adds	r2, r1, #0
 8001e00:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8001e02:	2316      	movs	r3, #22
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	2416      	movs	r4, #22
 8001e0c:	193b      	adds	r3, r7, r4
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	d814      	bhi.n	8001e3e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	18d1      	adds	r1, r2, r3
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	7808      	ldrb	r0, [r1, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	188a      	adds	r2, r1, r2
 8001e2e:	1c01      	adds	r1, r0, #0
 8001e30:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	3201      	adds	r2, #1
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e7e5      	b.n	8001e0a <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b007      	add	sp, #28
 8001e44:	bd90      	pop	{r4, r7, pc}
	...

08001e48 <_Z41__static_initialization_and_destruction_0ii>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d103      	bne.n	8001e68 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 f814 	bl	8001e90 <_ZN14RX_BINARY_TREEC1Ev>
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	0000ffff 	.word	0x0000ffff
 8001e74:	2000028c 	.word	0x2000028c

08001e78 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8001e7e:	0019      	movs	r1, r3
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7ff ffe1 	bl	8001e48 <_Z41__static_initialization_and_destruction_0ii>
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	0000ffff 	.word	0x0000ffff

08001e90 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	671a      	str	r2, [r3, #112]	; 0x70
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2274      	movs	r2, #116	; 0x74
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5299      	strh	r1, [r3, r2]
{}
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

bool RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2274      	movs	r2, #116	; 0x74
 8001ebe:	5a9b      	ldrh	r3, [r3, r2]
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d80e      	bhi.n	8001ee2 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
    {
        root = insert(root,new_element);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f9a9 	bl	800222a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	671a      	str	r2, [r3, #112]	; 0x70
        return true;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x34>
    }
    return false;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f80d 	bl	8001f1e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e001      	b.n	8001f16 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	e034      	b.n	8001f9e <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f88b 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f40:	0002      	movs	r2, r0
 8001f42:	2301      	movs	r3, #1
 8001f44:	1c19      	adds	r1, r3, #0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	db01      	blt.n	8001f50 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	1c19      	adds	r1, r3, #0
 8001f50:	b2cb      	uxtb	r3, r1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff ffdd 	bl	8001f1e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001f64:	0003      	movs	r3, r0
 8001f66:	e01a      	b.n	8001f9e <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f871 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f74:	0002      	movs	r2, r0
 8001f76:	2301      	movs	r3, #1
 8001f78:	1c19      	adds	r1, r3, #0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	dc01      	bgt.n	8001f84 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001f80:	2300      	movs	r3, #0
 8001f82:	1c19      	adds	r1, r3, #0
 8001f84:	b2cb      	uxtb	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff ffc3 	bl	8001f1e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	e000      	b.n	8001f9e <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2274      	movs	r2, #116	; 0x74
 8001fb4:	5a9b      	ldrh	r3, [r3, r2]
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2274      	movs	r2, #116	; 0x74
 8001fc4:	5a9b      	ldrh	r3, [r3, r2]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2274      	movs	r2, #116	; 0x74
 8001fd6:	5a9b      	ldrh	r3, [r3, r2]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	18d3      	adds	r3, r2, r3
 8001fde:	3308      	adds	r3, #8
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2274      	movs	r2, #116	; 0x74
 8001fe8:	5a9b      	ldrh	r3, [r3, r2]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	18d3      	adds	r3, r2, r3
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2274      	movs	r2, #116	; 0x74
 8001ffa:	5a9b      	ldrh	r3, [r3, r2]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	b290      	uxth	r0, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	2174      	movs	r1, #116	; 0x74
 8002004:	5250      	strh	r0, [r2, r1]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	18d3      	adds	r3, r2, r3
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d901      	bls.n	800202c <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	e000      	b.n	800202e <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 800202c:	687b      	ldr	r3, [r7, #4]
}  
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}

08002036 <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 8002046:	2300      	movs	r3, #0
 8002048:	e001      	b.n	800204e <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8002066:	2301      	movs	r3, #1
 8002068:	425b      	negs	r3, r3
 800206a:	e009      	b.n	8002080 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8002074:	2301      	movs	r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	e002      	b.n	8002080 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8002098:	2301      	movs	r3, #1
 800209a:	425b      	negs	r3, r3
 800209c:	e001      	b.n	80020a2 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b002      	add	sp, #8
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ffae 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80020da:	0003      	movs	r3, r0
 80020dc:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0011      	movs	r1, r2
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff ffa5 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80020ec:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 80020ee:	001a      	movs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0021      	movs	r1, r4
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ff8d 	bl	8002014 <_ZN14RX_BINARY_TREE3maxEmm>
 80020fa:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0011      	movs	r1, r2
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff ff91 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002114:	0003      	movs	r3, r0
 8002116:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff88 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002126:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8002128:	001a      	movs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0021      	movs	r1, r4
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff ff70 	bl	8002014 <_ZN14RX_BINARY_TREE3maxEmm>
 8002134:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8002140:	68fb      	ldr	r3, [r7, #12]
} 
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b005      	add	sp, #20
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff ff5e 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800217a:	0003      	movs	r3, r0
 800217c:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0011      	movs	r1, r2
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff ff55 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800218c:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 800218e:	001a      	movs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0021      	movs	r1, r4
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ff3d 	bl	8002014 <_ZN14RX_BINARY_TREE3maxEmm>
 800219a:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff ff41 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80021b4:	0003      	movs	r3, r0
 80021b6:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff ff38 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80021c6:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 80021c8:	001a      	movs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0021      	movs	r1, r4
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff ff20 	bl	8002014 <_ZN14RX_BINARY_TREE3maxEmm>
 80021d4:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 80021e0:	68fb      	ldr	r3, [r7, #12]
}  
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b005      	add	sp, #20
 80021e8:	bd90      	pop	{r4, r7, pc}

080021ea <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 80021ea:	b590      	push	{r4, r7, lr}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 80021fa:	2300      	movs	r3, #0
 80021fc:	e011      	b.n	8002222 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0011      	movs	r1, r2
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff ff15 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800220c:	0003      	movs	r3, r0
 800220e:	001c      	movs	r4, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff0c 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800221e:	0003      	movs	r3, r0
 8002220:	1ae3      	subs	r3, r4, r3
}  
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b003      	add	sp, #12
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 800222a:	b590      	push	{r4, r7, lr}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff feaf 	bl	8001fa6 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 8002248:	0003      	movs	r3, r0
 800224a:	e101      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0011      	movs	r1, r2
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ff18 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002258:	0004      	movs	r4, r0
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0011      	movs	r1, r2
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff fef8 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002266:	0003      	movs	r3, r0
 8002268:	2201      	movs	r2, #1
 800226a:	429c      	cmp	r4, r3
 800226c:	db01      	blt.n	8002272 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 800226e:	2300      	movs	r3, #0
 8002270:	1c1a      	adds	r2, r3, #0
 8002272:	b2d3      	uxtb	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ffd2 	bl	800222a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8002286:	0002      	movs	r2, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	e022      	b.n	80022d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff fef7 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800229a:	0004      	movs	r4, r0
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff fed7 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80022a8:	0003      	movs	r3, r0
 80022aa:	2201      	movs	r2, #1
 80022ac:	429c      	cmp	r4, r3
 80022ae:	dc01      	bgt.n	80022b4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 80022b0:	2300      	movs	r3, #0
 80022b2:	1c1a      	adds	r2, r3, #0
 80022b4:	b2d3      	uxtb	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff ffb1 	bl	800222a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80022c8:	0002      	movs	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	e001      	b.n	80022d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	e0bd      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff feaa 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80022e2:	0003      	movs	r3, r0
 80022e4:	001c      	movs	r4, r3
                        height(node->right));  
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0011      	movs	r1, r2
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7ff fea1 	bl	8002036 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80022f4:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 80022f6:	001a      	movs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0021      	movs	r1, r4
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fe89 	bl	8002014 <_ZN14RX_BINARY_TREE3maxEmm>
 8002302:	0003      	movs	r3, r0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff ff68 	bl	80021ea <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 800231a:	0003      	movs	r3, r0
 800231c:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b01      	cmp	r3, #1
 8002322:	dd12      	ble.n	800234a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	0011      	movs	r1, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff feac 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002330:	0004      	movs	r4, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff fe8b 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002340:	0003      	movs	r3, r0
 8002342:	429c      	cmp	r4, r3
 8002344:	da01      	bge.n	800234a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	0011      	movs	r1, r2
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff fea7 	bl	80020aa <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 800235c:	0003      	movs	r3, r0
 800235e:	e077      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	da12      	bge.n	800238c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0011      	movs	r1, r2
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fe8b 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002372:	0004      	movs	r4, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff fe6a 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002382:	0003      	movs	r3, r0
 8002384:	429c      	cmp	r4, r3
 8002386:	dd01      	ble.n	800238c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	0011      	movs	r1, r2
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fed6 	bl	800214a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 800239e:	0003      	movs	r3, r0
 80023a0:	e056      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	dd12      	ble.n	80023ce <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff fe6a 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80023b4:	0004      	movs	r4, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fe49 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80023c4:	0003      	movs	r3, r0
 80023c6:	429c      	cmp	r4, r3
 80023c8:	dd01      	ble.n	80023ce <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d011      	beq.n	80023f8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff feb4 	bl	800214a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80023e2:	0002      	movs	r2, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff fe5b 	bl	80020aa <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80023f4:	0003      	movs	r3, r0
 80023f6:	e02b      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3301      	adds	r3, #1
 80023fc:	da12      	bge.n	8002424 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fe3f 	bl	8002088 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800240a:	0004      	movs	r4, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0011      	movs	r1, r2
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fe1e 	bl	8002056 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800241a:	0003      	movs	r3, r0
 800241c:	429c      	cmp	r4, r3
 800241e:	da01      	bge.n	8002424 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d011      	beq.n	800244e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0011      	movs	r1, r2
 8002432:	0018      	movs	r0, r3
 8002434:	f7ff fe39 	bl	80020aa <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8002438:	0002      	movs	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff fe80 	bl	800214a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 800244a:	0003      	movs	r3, r0
 800244c:	e000      	b.n	8002450 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 800244e:	68bb      	ldr	r3, [r7, #8]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b007      	add	sp, #28
 8002456:	bd90      	pop	{r4, r7, pc}

08002458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800245a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <LoopForever+0x6>)
  ldr r1, =_edata
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <LoopForever+0xe>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002474:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <LoopForever+0x16>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002482:	f7fe fbdd 	bl	8000c40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002486:	f002 fad5 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248a:	f7fd ffb3 	bl	80003f4 <main>

0800248e <LoopForever>:

LoopForever:
    b LoopForever
 800248e:	e7fe      	b.n	800248e <LoopForever>
  ldr   r0, =_estack
 8002490:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800249c:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 80024a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024a4:	20000370 	.word	0x20000370

080024a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_COMP_IRQHandler>
	...

080024ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_Init+0x24>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_Init+0x24>)
 80024b6:	2110      	movs	r1, #16
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80024bc:	2000      	movs	r0, #0
 80024be:	f000 f809 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c2:	f7fe fad7 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40022000 	.word	0x40022000

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_InitTick+0x5c>)
 80024de:	681c      	ldr	r4, [r3, #0]
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_InitTick+0x60>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	0019      	movs	r1, r3
 80024e6:	23fa      	movs	r3, #250	; 0xfa
 80024e8:	0098      	lsls	r0, r3, #2
 80024ea:	f7fd fe0d 	bl	8000108 <__udivsi3>
 80024ee:	0003      	movs	r3, r0
 80024f0:	0019      	movs	r1, r3
 80024f2:	0020      	movs	r0, r4
 80024f4:	f7fd fe08 	bl	8000108 <__udivsi3>
 80024f8:	0003      	movs	r3, r0
 80024fa:	0018      	movs	r0, r3
 80024fc:	f001 f835 	bl	800356a <HAL_SYSTICK_Config>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d001      	beq.n	8002508 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00f      	b.n	8002528 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d80b      	bhi.n	8002526 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	2301      	movs	r3, #1
 8002512:	425b      	negs	r3, r3
 8002514:	2200      	movs	r2, #0
 8002516:	0018      	movs	r0, r3
 8002518:	f001 f802 	bl	8003520 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_InitTick+0x64>)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b003      	add	sp, #12
 800252e:	bd90      	pop	{r4, r7, pc}
 8002530:	20000000 	.word	0x20000000
 8002534:	20000008 	.word	0x20000008
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_IncTick+0x1c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_IncTick+0x20>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	18d2      	adds	r2, r2, r3
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_IncTick+0x20>)
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	20000008 	.word	0x20000008
 800255c:	20000368 	.word	0x20000368

08002560 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <HAL_GetTick+0x10>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	20000368 	.word	0x20000368

08002574 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e11f      	b.n	80027c6 <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d132      	bne.n	80025f8 <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a8e      	ldr	r2, [pc, #568]	; (80027d0 <HAL_CAN_Init+0x25c>)
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a8e      	ldr	r2, [pc, #568]	; (80027d4 <HAL_CAN_Init+0x260>)
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a8d      	ldr	r2, [pc, #564]	; (80027d8 <HAL_CAN_Init+0x264>)
 80025a2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a8d      	ldr	r2, [pc, #564]	; (80027dc <HAL_CAN_Init+0x268>)
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a8c      	ldr	r2, [pc, #560]	; (80027e0 <HAL_CAN_Init+0x26c>)
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a8c      	ldr	r2, [pc, #560]	; (80027e4 <HAL_CAN_Init+0x270>)
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a8b      	ldr	r2, [pc, #556]	; (80027e8 <HAL_CAN_Init+0x274>)
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a8b      	ldr	r2, [pc, #556]	; (80027ec <HAL_CAN_Init+0x278>)
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a8a      	ldr	r2, [pc, #552]	; (80027f0 <HAL_CAN_Init+0x27c>)
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a8a      	ldr	r2, [pc, #552]	; (80027f4 <HAL_CAN_Init+0x280>)
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a89      	ldr	r2, [pc, #548]	; (80027f8 <HAL_CAN_Init+0x284>)
 80025d2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a89      	ldr	r2, [pc, #548]	; (80027fc <HAL_CAN_Init+0x288>)
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a88      	ldr	r2, [pc, #544]	; (8002800 <HAL_CAN_Init+0x28c>)
 80025de:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a86      	ldr	r2, [pc, #536]	; (8002804 <HAL_CAN_Init+0x290>)
 80025ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	0010      	movs	r0, r2
 80025f6:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002608:	f7ff ffaa 	bl	8002560 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002610:	e013      	b.n	800263a <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002612:	f7ff ffa5 	bl	8002560 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d90c      	bls.n	800263a <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0292      	lsls	r2, r2, #10
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	2105      	movs	r1, #5
 8002634:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0c5      	b.n	80027c6 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d0e5      	beq.n	8002612 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2102      	movs	r1, #2
 8002652:	438a      	bics	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002656:	f7ff ff83 	bl	8002560 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800265e:	e013      	b.n	8002688 <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002660:	f7ff ff7e 	bl	8002560 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b0a      	cmp	r3, #10
 800266c:	d90c      	bls.n	8002688 <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0292      	lsls	r2, r2, #10
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	2105      	movs	r1, #5
 8002682:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e09e      	b.n	80027c6 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d1e5      	bne.n	8002660 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e1b      	ldrb	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e007      	b.n	80026be <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	438a      	bics	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7e5b      	ldrb	r3, [r3, #25]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e9b      	ldrb	r3, [r3, #26]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2120      	movs	r1, #32
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e007      	b.n	8002712 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2120      	movs	r1, #32
 800270e:	438a      	bics	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7edb      	ldrb	r3, [r3, #27]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2110      	movs	r1, #16
 8002726:	438a      	bics	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e007      	b.n	800273c <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2110      	movs	r1, #16
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7f1b      	ldrb	r3, [r3, #28]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2108      	movs	r1, #8
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e007      	b.n	8002766 <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2108      	movs	r1, #8
 8002762:	438a      	bics	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7f5b      	ldrb	r3, [r3, #29]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2104      	movs	r1, #4
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e007      	b.n	8002790 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	0011      	movs	r1, r2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	2101      	movs	r1, #1
 80027c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	08001925 	.word	0x08001925
 80027d4:	08003369 	.word	0x08003369
 80027d8:	08003379 	.word	0x08003379
 80027dc:	08003389 	.word	0x08003389
 80027e0:	08003309 	.word	0x08003309
 80027e4:	08003319 	.word	0x08003319
 80027e8:	08003329 	.word	0x08003329
 80027ec:	08003339 	.word	0x08003339
 80027f0:	08003349 	.word	0x08003349
 80027f4:	08003359 	.word	0x08003359
 80027f8:	08003399 	.word	0x08003399
 80027fc:	080033a9 	.word	0x080033a9
 8002800:	080033b9 	.word	0x080033b9
 8002804:	08000abd 	.word	0x08000abd

08002808 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002818:	2013      	movs	r0, #19
 800281a:	183b      	adds	r3, r7, r0
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	2120      	movs	r1, #32
 8002820:	5c52      	ldrb	r2, [r2, r1]
 8002822:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002824:	0002      	movs	r2, r0
 8002826:	18bb      	adds	r3, r7, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d004      	beq.n	8002838 <HAL_CAN_ConfigFilter+0x30>
 800282e:	18bb      	adds	r3, r7, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d000      	beq.n	8002838 <HAL_CAN_ConfigFilter+0x30>
 8002836:	e0cd      	b.n	80029d4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	58d3      	ldr	r3, [r2, r3]
 8002840:	2201      	movs	r2, #1
 8002842:	431a      	orrs	r2, r3
 8002844:	0011      	movs	r1, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	221f      	movs	r2, #31
 8002854:	4013      	ands	r3, r2
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	0013      	movs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	2387      	movs	r3, #135	; 0x87
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	58d3      	ldr	r3, [r2, r3]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	43d2      	mvns	r2, r2
 800286a:	401a      	ands	r2, r3
 800286c:	0011      	movs	r1, r2
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	2387      	movs	r3, #135	; 0x87
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d129      	bne.n	80028d2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	2383      	movs	r3, #131	; 0x83
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	58d3      	ldr	r3, [r2, r3]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	43d2      	mvns	r2, r2
 800288a:	401a      	ands	r2, r3
 800288c:	0011      	movs	r1, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	2383      	movs	r3, #131	; 0x83
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028a8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3248      	adds	r2, #72	; 0x48
 80028ae:	00d2      	lsls	r2, r2, #3
 80028b0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	3348      	adds	r3, #72	; 0x48
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	18cb      	adds	r3, r1, r3
 80028ce:	3304      	adds	r3, #4
 80028d0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d128      	bne.n	800292c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	2383      	movs	r3, #131	; 0x83
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	58d2      	ldr	r2, [r2, r3]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	0011      	movs	r1, r2
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	2383      	movs	r3, #131	; 0x83
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002902:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3248      	adds	r2, #72	; 0x48
 8002908:	00d2      	lsls	r2, r2, #3
 800290a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	18cb      	adds	r3, r1, r3
 8002928:	3304      	adds	r3, #4
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10c      	bne.n	800294e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	2381      	movs	r3, #129	; 0x81
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	58d3      	ldr	r3, [r2, r3]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	43d2      	mvns	r2, r2
 8002940:	401a      	ands	r2, r3
 8002942:	0011      	movs	r1, r2
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	2381      	movs	r3, #129	; 0x81
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	50d1      	str	r1, [r2, r3]
 800294c:	e00a      	b.n	8002964 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	2381      	movs	r3, #129	; 0x81
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	58d2      	ldr	r2, [r2, r3]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	431a      	orrs	r2, r3
 800295a:	0011      	movs	r1, r2
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	2381      	movs	r3, #129	; 0x81
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	2385      	movs	r3, #133	; 0x85
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	58d3      	ldr	r3, [r2, r3]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	43d2      	mvns	r2, r2
 8002978:	401a      	ands	r2, r3
 800297a:	0011      	movs	r1, r2
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	2385      	movs	r3, #133	; 0x85
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	50d1      	str	r1, [r2, r3]
 8002984:	e00a      	b.n	800299c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	2385      	movs	r3, #133	; 0x85
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	58d2      	ldr	r2, [r2, r3]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	431a      	orrs	r2, r3
 8002992:	0011      	movs	r1, r2
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	2385      	movs	r3, #133	; 0x85
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10a      	bne.n	80029ba <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	2387      	movs	r3, #135	; 0x87
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	58d2      	ldr	r2, [r2, r3]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	0011      	movs	r1, r2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	2387      	movs	r3, #135	; 0x87
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	58d3      	ldr	r3, [r2, r3]
 80029c2:	2201      	movs	r2, #1
 80029c4:	4393      	bics	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e007      	b.n	80029e4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	02d2      	lsls	r2, r2, #11
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
  }
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b006      	add	sp, #24
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d12f      	bne.n	8002a60 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	2102      	movs	r1, #2
 8002a06:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a18:	f7ff fda2 	bl	8002560 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a20:	e013      	b.n	8002a4a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a22:	f7ff fd9d 	bl	8002560 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b0a      	cmp	r3, #10
 8002a2e:	d90c      	bls.n	8002a4a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	0292      	lsls	r2, r2, #10
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	2105      	movs	r1, #5
 8002a44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e012      	b.n	8002a70 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d1e5      	bne.n	8002a22 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e007      	b.n	8002a70 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0312      	lsls	r2, r2, #12
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
  }
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a86:	201f      	movs	r0, #31
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	5c52      	ldrb	r2, [r2, r1]
 8002a90:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d004      	beq.n	8002aac <HAL_CAN_AddTxMessage+0x34>
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d000      	beq.n	8002aac <HAL_CAN_AddTxMessage+0x34>
 8002aaa:	e0b7      	b.n	8002c1c <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	04db      	lsls	r3, r3, #19
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d10a      	bne.n	8002acc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002abe:	d105      	bne.n	8002acc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	055b      	lsls	r3, r3, #21
 8002ac6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ac8:	d100      	bne.n	8002acc <HAL_CAN_AddTxMessage+0x54>
 8002aca:	e09e      	b.n	8002c0a <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	0e1b      	lsrs	r3, r3, #24
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d908      	bls.n	8002aee <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	0412      	lsls	r2, r2, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e09e      	b.n	8002c2c <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	3218      	adds	r2, #24
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	50d1      	str	r1, [r2, r3]
 8002b18:	e00f      	b.n	8002b3a <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b24:	431a      	orrs	r2, r3
 8002b26:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002b30:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	3218      	adds	r2, #24
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3318      	adds	r3, #24
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	18cb      	adds	r3, r1, r3
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	7d1b      	ldrb	r3, [r3, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d112      	bne.n	8002b7c <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	3304      	adds	r3, #4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3318      	adds	r3, #24
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	18cb      	adds	r3, r1, r3
 8002b78:	3304      	adds	r3, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	061a      	lsls	r2, r3, #24
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3306      	adds	r3, #6
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3305      	adds	r3, #5
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	23c6      	movs	r3, #198	; 0xc6
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	0109      	lsls	r1, r1, #4
 8002bae:	1841      	adds	r1, r0, r1
 8002bb0:	18cb      	adds	r3, r1, r3
 8002bb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	061a      	lsls	r2, r3, #24
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	23c4      	movs	r3, #196	; 0xc4
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	0109      	lsls	r1, r1, #4
 8002be4:	1841      	adds	r1, r0, r1
 8002be6:	18cb      	adds	r3, r1, r3
 8002be8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	3218      	adds	r2, #24
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	58d2      	ldr	r2, [r2, r3]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	3218      	adds	r2, #24
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e010      	b.n	8002c2c <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	0392      	lsls	r2, r2, #14
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	02d2      	lsls	r2, r2, #11
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
  }
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b008      	add	sp, #32
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c40:	200b      	movs	r0, #11
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	2120      	movs	r1, #32
 8002c48:	5c52      	ldrb	r2, [r2, r1]
 8002c4a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	18bb      	adds	r3, r7, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d003      	beq.n	8002c5e <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002c56:	18bb      	adds	r3, r7, r2
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11d      	bne.n	8002c9a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	04db      	lsls	r3, r3, #19
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d002      	beq.n	8002c72 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	051b      	lsls	r3, r3, #20
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d002      	beq.n	8002c86 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	4013      	ands	r3, r2
 8002c92:	d002      	beq.n	8002c9a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cb2:	2017      	movs	r0, #23
 8002cb4:	183b      	adds	r3, r7, r0
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	2120      	movs	r1, #32
 8002cba:	5c52      	ldrb	r2, [r2, r1]
 8002cbc:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	18bb      	adds	r3, r7, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d004      	beq.n	8002cd2 <HAL_CAN_GetRxMessage+0x2e>
 8002cc8:	18bb      	adds	r3, r7, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d000      	beq.n	8002cd2 <HAL_CAN_GetRxMessage+0x2e>
 8002cd0:	e0f8      	b.n	8002ec4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d117      	bne.n	8002d14 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	0392      	lsls	r2, r2, #14
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0ee      	b.n	8002ed4 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d108      	bne.n	8002d14 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0392      	lsls	r2, r2, #14
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0df      	b.n	8002ed4 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	321b      	adds	r2, #27
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	58d3      	ldr	r3, [r2, r3]
 8002d20:	2204      	movs	r2, #4
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	321b      	adds	r2, #27
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	58d3      	ldr	r3, [r2, r3]
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	055b      	lsls	r3, r3, #21
 8002d40:	0d5a      	lsrs	r2, r3, #21
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e00a      	b.n	8002d5e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	321b      	adds	r2, #27
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	58d3      	ldr	r3, [r2, r3]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	321b      	adds	r2, #27
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	58d3      	ldr	r3, [r2, r3]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	331b      	adds	r3, #27
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	18d3      	adds	r3, r2, r3
 8002d7e:	3304      	adds	r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	220f      	movs	r2, #15
 8002d84:	401a      	ands	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	331b      	adds	r3, #27
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	18d3      	adds	r3, r2, r3
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	401a      	ands	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	331b      	adds	r3, #27
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	18d3      	adds	r3, r2, r3
 8002db0:	3304      	adds	r3, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	0c1a      	lsrs	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	23dc      	movs	r3, #220	; 0xdc
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	188a      	adds	r2, r1, r2
 8002dcc:	18d3      	adds	r3, r2, r3
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	23dc      	movs	r3, #220	; 0xdc
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	188a      	adds	r2, r1, r2
 8002de4:	18d3      	adds	r3, r2, r3
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0a1a      	lsrs	r2, r3, #8
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	23dc      	movs	r3, #220	; 0xdc
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	188a      	adds	r2, r1, r2
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0c1a      	lsrs	r2, r3, #16
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	23dc      	movs	r3, #220	; 0xdc
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	188a      	adds	r2, r1, r2
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e1a      	lsrs	r2, r3, #24
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3303      	adds	r3, #3
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	23de      	movs	r3, #222	; 0xde
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	188a      	adds	r2, r1, r2
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	23de      	movs	r3, #222	; 0xde
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	188a      	adds	r2, r1, r2
 8002e52:	18d3      	adds	r3, r2, r3
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0a1a      	lsrs	r2, r3, #8
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3305      	adds	r3, #5
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	23de      	movs	r3, #222	; 0xde
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	188a      	adds	r2, r1, r2
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0c1a      	lsrs	r2, r3, #16
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3306      	adds	r3, #6
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	23de      	movs	r3, #222	; 0xde
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	188a      	adds	r2, r1, r2
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e1a      	lsrs	r2, r3, #24
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	3307      	adds	r3, #7
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	e007      	b.n	8002ec0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2120      	movs	r1, #32
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e007      	b.n	8002ed4 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	02d2      	lsls	r2, r2, #11
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b006      	add	sp, #24
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eea:	200b      	movs	r0, #11
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	5c52      	ldrb	r2, [r2, r1]
 8002ef4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	18bb      	adds	r3, r7, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d003      	beq.n	8002f08 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002f00:	18bb      	adds	r3, r7, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d10f      	bne.n	8002f28 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2203      	movs	r2, #3
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e005      	b.n	8002f28 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2203      	movs	r2, #3
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002f28:	68fb      	ldr	r3, [r7, #12]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f3c:	200f      	movs	r0, #15
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	2120      	movs	r1, #32
 8002f44:	5c52      	ldrb	r2, [r2, r1]
 8002f46:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f48:	0002      	movs	r2, r0
 8002f4a:	18bb      	adds	r3, r7, r2
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d003      	beq.n	8002f5a <HAL_CAN_ActivateNotification+0x28>
 8002f52:	18bb      	adds	r3, r7, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d109      	bne.n	8002f6e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6959      	ldr	r1, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e007      	b.n	8002f7e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	02d2      	lsls	r2, r2, #11
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
  }
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d100      	bne.n	8002fcc <HAL_CAN_IRQHandler+0x46>
 8002fca:	e08a      	b.n	80030e2 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d026      	beq.n	8003022 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d005      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	0010      	movs	r0, r2
 8002fec:	4798      	blx	r3
 8002fee:	e018      	b.n	8003022 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d005      	beq.n	8003004 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	4313      	orrs	r3, r2
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	e00e      	b.n	8003022 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2208      	movs	r2, #8
 8003008:	4013      	ands	r3, r2
 800300a:	d005      	beq.n	8003018 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	0152      	lsls	r2, r2, #5
 8003012:	4313      	orrs	r3, r2
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e004      	b.n	8003022 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	0010      	movs	r0, r2
 8003020:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4013      	ands	r3, r2
 800302a:	d02a      	beq.n	8003082 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0052      	lsls	r2, r2, #1
 8003034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d005      	beq.n	800304c <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	0010      	movs	r0, r2
 8003048:	4798      	blx	r3
 800304a:	e01a      	b.n	8003082 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4013      	ands	r3, r2
 8003054:	d005      	beq.n	8003062 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	0192      	lsls	r2, r2, #6
 800305c:	4313      	orrs	r3, r2
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
 8003060:	e00f      	b.n	8003082 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4013      	ands	r3, r2
 800306a:	d005      	beq.n	8003078 <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	01d2      	lsls	r2, r2, #7
 8003072:	4313      	orrs	r3, r2
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e004      	b.n	8003082 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	0010      	movs	r0, r2
 8003080:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	025b      	lsls	r3, r3, #9
 8003088:	4013      	ands	r3, r2
 800308a:	d02a      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	0252      	lsls	r2, r2, #9
 8003094:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d005      	beq.n	80030ac <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	0010      	movs	r0, r2
 80030a8:	4798      	blx	r3
 80030aa:	e01a      	b.n	80030e2 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	02db      	lsls	r3, r3, #11
 80030b2:	4013      	ands	r3, r2
 80030b4:	d005      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	0212      	lsls	r2, r2, #8
 80030bc:	4313      	orrs	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	e00f      	b.n	80030e2 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	031b      	lsls	r3, r3, #12
 80030c8:	4013      	ands	r3, r2
 80030ca:	d005      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	0252      	lsls	r2, r2, #9
 80030d2:	4313      	orrs	r3, r2
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
 80030d6:	e004      	b.n	80030e2 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	0010      	movs	r0, r2
 80030e0:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2208      	movs	r2, #8
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00c      	beq.n	8003104 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d008      	beq.n	8003104 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2204      	movs	r2, #4
 8003108:	4013      	ands	r3, r2
 800310a:	d00c      	beq.n	8003126 <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2208      	movs	r2, #8
 8003110:	4013      	ands	r3, r2
 8003112:	d008      	beq.n	8003126 <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	0010      	movs	r0, r2
 8003124:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2202      	movs	r2, #2
 800312a:	4013      	ands	r3, r2
 800312c:	d00a      	beq.n	8003144 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2203      	movs	r2, #3
 8003136:	4013      	ands	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	0010      	movs	r0, r2
 8003142:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	4013      	ands	r3, r2
 800314a:	d00c      	beq.n	8003166 <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2210      	movs	r2, #16
 8003150:	4013      	ands	r3, r2
 8003152:	d008      	beq.n	8003166 <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	4313      	orrs	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2210      	movs	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2220      	movs	r2, #32
 800316a:	4013      	ands	r3, r2
 800316c:	d00c      	beq.n	8003188 <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2208      	movs	r2, #8
 8003172:	4013      	ands	r3, r2
 8003174:	d008      	beq.n	8003188 <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2208      	movs	r2, #8
 800317c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	0010      	movs	r0, r2
 8003186:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2210      	movs	r2, #16
 800318c:	4013      	ands	r3, r2
 800318e:	d00a      	beq.n	80031a6 <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2203      	movs	r2, #3
 8003198:	4013      	ands	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	0010      	movs	r0, r2
 80031a4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00c      	beq.n	80031ca <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2210      	movs	r2, #16
 80031b4:	4013      	ands	r3, r2
 80031b6:	d008      	beq.n	80031ca <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2210      	movs	r2, #16
 80031be:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	0010      	movs	r0, r2
 80031c8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	025b      	lsls	r3, r3, #9
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00c      	beq.n	80031ee <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2208      	movs	r2, #8
 80031d8:	4013      	ands	r3, r2
 80031da:	d008      	beq.n	80031ee <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2208      	movs	r2, #8
 80031e2:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	0010      	movs	r0, r2
 80031ec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_CAN_IRQHandler+0x274>
 80031f8:	e074      	b.n	80032e4 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2204      	movs	r2, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_CAN_IRQHandler+0x27e>
 8003202:	e06b      	b.n	80032dc <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4013      	ands	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003214:	d003      	beq.n	800321e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2201      	movs	r2, #1
 800321a:	4313      	orrs	r3, r2
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800321e:	6a3a      	ldr	r2, [r7, #32]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d007      	beq.n	8003238 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800322e:	d003      	beq.n	8003238 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2202      	movs	r2, #2
 8003234:	4313      	orrs	r3, r2
 8003236:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4013      	ands	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003248:	d003      	beq.n	8003252 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2204      	movs	r2, #4
 800324e:	4313      	orrs	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d03f      	beq.n	80032dc <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2270      	movs	r2, #112	; 0x70
 8003260:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003262:	d03b      	beq.n	80032dc <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2270      	movs	r2, #112	; 0x70
 8003268:	4013      	ands	r3, r2
 800326a:	2b60      	cmp	r3, #96	; 0x60
 800326c:	d027      	beq.n	80032be <HAL_CAN_IRQHandler+0x338>
 800326e:	d82c      	bhi.n	80032ca <HAL_CAN_IRQHandler+0x344>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d01f      	beq.n	80032b4 <HAL_CAN_IRQHandler+0x32e>
 8003274:	d829      	bhi.n	80032ca <HAL_CAN_IRQHandler+0x344>
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d017      	beq.n	80032aa <HAL_CAN_IRQHandler+0x324>
 800327a:	d826      	bhi.n	80032ca <HAL_CAN_IRQHandler+0x344>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d00f      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x31a>
 8003280:	d823      	bhi.n	80032ca <HAL_CAN_IRQHandler+0x344>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d002      	beq.n	800328c <HAL_CAN_IRQHandler+0x306>
 8003286:	2b20      	cmp	r3, #32
 8003288:	d005      	beq.n	8003296 <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800328a:	e01e      	b.n	80032ca <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	2208      	movs	r2, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003294:	e01a      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	2210      	movs	r2, #16
 800329a:	4313      	orrs	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800329e:	e015      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2220      	movs	r2, #32
 80032a4:	4313      	orrs	r3, r2
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a8:	e010      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	4313      	orrs	r3, r2
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b2:	e00b      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	4313      	orrs	r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032bc:	e006      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0052      	lsls	r2, r2, #1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c8:	e000      	b.n	80032cc <HAL_CAN_IRQHandler+0x346>
            break;
 80032ca:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2170      	movs	r1, #112	; 0x70
 80032d8:	438a      	bics	r2, r1
 80032da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2204      	movs	r2, #4
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	0010      	movs	r0, r2
 80032fe:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b00a      	add	sp, #40	; 0x28
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	0002      	movs	r2, r0
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b7f      	cmp	r3, #127	; 0x7f
 80033da:	d809      	bhi.n	80033f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	231f      	movs	r3, #31
 80033e4:	401a      	ands	r2, r3
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_EnableIRQ+0x30>)
 80033e8:	2101      	movs	r1, #1
 80033ea:	4091      	lsls	r1, r2
 80033ec:	000a      	movs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
  }
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	0002      	movs	r2, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b7f      	cmp	r3, #127	; 0x7f
 8003410:	d828      	bhi.n	8003464 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003412:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <__NVIC_SetPriority+0xd4>)
 8003414:	1dfb      	adds	r3, r7, #7
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b25b      	sxtb	r3, r3
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	33c0      	adds	r3, #192	; 0xc0
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	589b      	ldr	r3, [r3, r2]
 8003422:	1dfa      	adds	r2, r7, #7
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	0011      	movs	r1, r2
 8003428:	2203      	movs	r2, #3
 800342a:	400a      	ands	r2, r1
 800342c:	00d2      	lsls	r2, r2, #3
 800342e:	21ff      	movs	r1, #255	; 0xff
 8003430:	4091      	lsls	r1, r2
 8003432:	000a      	movs	r2, r1
 8003434:	43d2      	mvns	r2, r2
 8003436:	401a      	ands	r2, r3
 8003438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	401a      	ands	r2, r3
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	0018      	movs	r0, r3
 8003448:	2303      	movs	r3, #3
 800344a:	4003      	ands	r3, r0
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	481f      	ldr	r0, [pc, #124]	; (80034d0 <__NVIC_SetPriority+0xd4>)
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b25b      	sxtb	r3, r3
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	430a      	orrs	r2, r1
 800345c:	33c0      	adds	r3, #192	; 0xc0
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003462:	e031      	b.n	80034c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <__NVIC_SetPriority+0xd8>)
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	0019      	movs	r1, r3
 800346c:	230f      	movs	r3, #15
 800346e:	400b      	ands	r3, r1
 8003470:	3b08      	subs	r3, #8
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3306      	adds	r3, #6
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1dfa      	adds	r2, r7, #7
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	0011      	movs	r1, r2
 8003484:	2203      	movs	r2, #3
 8003486:	400a      	ands	r2, r1
 8003488:	00d2      	lsls	r2, r2, #3
 800348a:	21ff      	movs	r1, #255	; 0xff
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	43d2      	mvns	r2, r2
 8003492:	401a      	ands	r2, r3
 8003494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	401a      	ands	r2, r3
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	0018      	movs	r0, r3
 80034a4:	2303      	movs	r3, #3
 80034a6:	4003      	ands	r3, r0
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ac:	4809      	ldr	r0, [pc, #36]	; (80034d4 <__NVIC_SetPriority+0xd8>)
 80034ae:	1dfb      	adds	r3, r7, #7
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	001c      	movs	r4, r3
 80034b4:	230f      	movs	r3, #15
 80034b6:	4023      	ands	r3, r4
 80034b8:	3b08      	subs	r3, #8
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	430a      	orrs	r2, r1
 80034be:	3306      	adds	r3, #6
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	18c3      	adds	r3, r0, r3
 80034c4:	3304      	adds	r3, #4
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b003      	add	sp, #12
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	045b      	lsls	r3, r3, #17
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d301      	bcc.n	80034f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ec:	2301      	movs	r3, #1
 80034ee:	e010      	b.n	8003512 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <SysTick_Config+0x44>)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	3a01      	subs	r2, #1
 80034f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f8:	2301      	movs	r3, #1
 80034fa:	425b      	negs	r3, r3
 80034fc:	2103      	movs	r1, #3
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff ff7c 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x44>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x44>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	210f      	movs	r1, #15
 800352c:	187b      	adds	r3, r7, r1
 800352e:	1c02      	adds	r2, r0, #0
 8003530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	187b      	adds	r3, r7, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b25b      	sxtb	r3, r3
 800353a:	0011      	movs	r1, r2
 800353c:	0018      	movs	r0, r3
 800353e:	f7ff ff5d 	bl	80033fc <__NVIC_SetPriority>
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	0002      	movs	r2, r0
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b25b      	sxtb	r3, r3
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff33 	bl	80033c8 <__NVIC_EnableIRQ>
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f7ff ffaf 	bl	80034d8 <SysTick_Config>
 800357a:	0003      	movs	r3, r0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003592:	e155      	b.n	8003840 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4091      	lsls	r1, r2
 800359e:	000a      	movs	r2, r1
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d100      	bne.n	80035ac <HAL_GPIO_Init+0x28>
 80035aa:	e146      	b.n	800383a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d005      	beq.n	80035c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d130      	bne.n	8003626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	409a      	lsls	r2, r3
 80035d2:	0013      	movs	r3, r2
 80035d4:	43da      	mvns	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	409a      	lsls	r2, r3
 80035e6:	0013      	movs	r3, r2
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fa:	2201      	movs	r2, #1
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	409a      	lsls	r2, r3
 8003600:	0013      	movs	r3, r2
 8003602:	43da      	mvns	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	2201      	movs	r2, #1
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
 8003618:	0013      	movs	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	4013      	ands	r3, r2
 800362e:	2b03      	cmp	r3, #3
 8003630:	d017      	beq.n	8003662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	409a      	lsls	r2, r3
 8003640:	0013      	movs	r3, r2
 8003642:	43da      	mvns	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	4013      	ands	r3, r2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d123      	bne.n	80036b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	58d3      	ldr	r3, [r2, r3]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2207      	movs	r2, #7
 8003680:	4013      	ands	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	409a      	lsls	r2, r3
 8003688:	0013      	movs	r3, r2
 800368a:	43da      	mvns	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2107      	movs	r1, #7
 800369a:	400b      	ands	r3, r1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	409a      	lsls	r2, r3
 80036a0:	0013      	movs	r3, r2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	0092      	lsls	r2, r2, #2
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	409a      	lsls	r2, r3
 80036c4:	0013      	movs	r3, r2
 80036c6:	43da      	mvns	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2203      	movs	r2, #3
 80036d4:	401a      	ands	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	23c0      	movs	r3, #192	; 0xc0
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	4013      	ands	r3, r2
 80036f4:	d100      	bne.n	80036f8 <HAL_GPIO_Init+0x174>
 80036f6:	e0a0      	b.n	800383a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f8:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_GPIO_Init+0x2d4>)
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	4b56      	ldr	r3, [pc, #344]	; (8003858 <HAL_GPIO_Init+0x2d4>)
 80036fe:	2101      	movs	r1, #1
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	4b54      	ldr	r3, [pc, #336]	; (8003858 <HAL_GPIO_Init+0x2d4>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2201      	movs	r2, #1
 800370a:	4013      	ands	r3, r2
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_GPIO_Init+0x2d8>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	589b      	ldr	r3, [r3, r2]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2203      	movs	r2, #3
 8003722:	4013      	ands	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	409a      	lsls	r2, r3
 800372a:	0013      	movs	r3, r2
 800372c:	43da      	mvns	r2, r3
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	2390      	movs	r3, #144	; 0x90
 8003738:	05db      	lsls	r3, r3, #23
 800373a:	429a      	cmp	r2, r3
 800373c:	d019      	beq.n	8003772 <HAL_GPIO_Init+0x1ee>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a47      	ldr	r2, [pc, #284]	; (8003860 <HAL_GPIO_Init+0x2dc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_GPIO_Init+0x1ea>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a46      	ldr	r2, [pc, #280]	; (8003864 <HAL_GPIO_Init+0x2e0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00d      	beq.n	800376a <HAL_GPIO_Init+0x1e6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a45      	ldr	r2, [pc, #276]	; (8003868 <HAL_GPIO_Init+0x2e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_Init+0x1e2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a44      	ldr	r2, [pc, #272]	; (800386c <HAL_GPIO_Init+0x2e8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_GPIO_Init+0x1de>
 800375e:	2304      	movs	r3, #4
 8003760:	e008      	b.n	8003774 <HAL_GPIO_Init+0x1f0>
 8003762:	2305      	movs	r3, #5
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x1f0>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_Init+0x1f0>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_Init+0x1f0>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x1f0>
 8003772:	2300      	movs	r3, #0
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	2103      	movs	r1, #3
 8003778:	400a      	ands	r2, r1
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003784:	4935      	ldr	r1, [pc, #212]	; (800385c <HAL_GPIO_Init+0x2d8>)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43da      	mvns	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	025b      	lsls	r3, r3, #9
 80037aa:	4013      	ands	r3, r2
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	4013      	ands	r3, r2
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	035b      	lsls	r3, r3, #13
 80037fe:	4013      	ands	r3, r2
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	43da      	mvns	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	039b      	lsls	r3, r3, #14
 8003828:	4013      	ands	r3, r2
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	40da      	lsrs	r2, r3
 8003848:	1e13      	subs	r3, r2, #0
 800384a:	d000      	beq.n	800384e <HAL_GPIO_Init+0x2ca>
 800384c:	e6a2      	b.n	8003594 <HAL_GPIO_Init+0x10>
  } 
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	40010000 	.word	0x40010000
 8003860:	48000400 	.word	0x48000400
 8003864:	48000800 	.word	0x48000800
 8003868:	48000c00 	.word	0x48000c00
 800386c:	48001000 	.word	0x48001000
 8003870:	40010400 	.word	0x40010400

08003874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f000 fb76 	bl	8003f74 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d100      	bne.n	8003894 <HAL_RCC_OscConfig+0x20>
 8003892:	e08e      	b.n	80039b2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003894:	4bc5      	ldr	r3, [pc, #788]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	220c      	movs	r2, #12
 800389a:	4013      	ands	r3, r2
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00e      	beq.n	80038be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038a0:	4bc2      	ldr	r3, [pc, #776]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	220c      	movs	r2, #12
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d117      	bne.n	80038dc <HAL_RCC_OscConfig+0x68>
 80038ac:	4bbf      	ldr	r3, [pc, #764]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	23c0      	movs	r3, #192	; 0xc0
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	401a      	ands	r2, r3
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	025b      	lsls	r3, r3, #9
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10e      	bne.n	80038dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038be:	4bbb      	ldr	r3, [pc, #748]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_RCC_OscConfig+0x58>
 80038ca:	e071      	b.n	80039b0 <HAL_RCC_OscConfig+0x13c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d000      	beq.n	80038d6 <HAL_RCC_OscConfig+0x62>
 80038d4:	e06c      	b.n	80039b0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f000 fb4c 	bl	8003f74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x80>
 80038e4:	4bb1      	ldr	r3, [pc, #708]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4bb0      	ldr	r3, [pc, #704]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0249      	lsls	r1, r1, #9
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e02f      	b.n	8003954 <HAL_RCC_OscConfig+0xe0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <HAL_RCC_OscConfig+0xa2>
 80038fc:	4bab      	ldr	r3, [pc, #684]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4baa      	ldr	r3, [pc, #680]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003902:	49ab      	ldr	r1, [pc, #684]	; (8003bb0 <HAL_RCC_OscConfig+0x33c>)
 8003904:	400a      	ands	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4ba8      	ldr	r3, [pc, #672]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4ba7      	ldr	r3, [pc, #668]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800390e:	49a9      	ldr	r1, [pc, #676]	; (8003bb4 <HAL_RCC_OscConfig+0x340>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e01e      	b.n	8003954 <HAL_RCC_OscConfig+0xe0>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d10e      	bne.n	800393c <HAL_RCC_OscConfig+0xc8>
 800391e:	4ba3      	ldr	r3, [pc, #652]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4ba2      	ldr	r3, [pc, #648]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	02c9      	lsls	r1, r1, #11
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b9f      	ldr	r3, [pc, #636]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b9e      	ldr	r3, [pc, #632]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0249      	lsls	r1, r1, #9
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xe0>
 800393c:	4b9b      	ldr	r3, [pc, #620]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b9a      	ldr	r3, [pc, #616]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003942:	499b      	ldr	r1, [pc, #620]	; (8003bb0 <HAL_RCC_OscConfig+0x33c>)
 8003944:	400a      	ands	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	4b98      	ldr	r3, [pc, #608]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b97      	ldr	r3, [pc, #604]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800394e:	4999      	ldr	r1, [pc, #612]	; (8003bb4 <HAL_RCC_OscConfig+0x340>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d014      	beq.n	8003986 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fe00 	bl	8002560 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003966:	f7fe fdfb 	bl	8002560 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e2fd      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003978:	4b8c      	ldr	r3, [pc, #560]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	4013      	ands	r3, r2
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0xf2>
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fe fdeb 	bl	8002560 <HAL_GetTick>
 800398a:	0003      	movs	r3, r0
 800398c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fde6 	bl	8002560 <HAL_GetTick>
 8003994:	0002      	movs	r2, r0
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e2e8      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	4013      	ands	r3, r2
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x11c>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d100      	bne.n	80039be <HAL_RCC_OscConfig+0x14a>
 80039bc:	e06c      	b.n	8003a98 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039be:	4b7b      	ldr	r3, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	220c      	movs	r2, #12
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	220c      	movs	r2, #12
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d11f      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1a0>
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	23c0      	movs	r3, #192	; 0xc0
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	401a      	ands	r2, r3
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b71      	ldr	r3, [pc, #452]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2202      	movs	r2, #2
 80039ec:	4013      	ands	r3, r2
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x188>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2bb      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	22f8      	movs	r2, #248	; 0xf8
 8003a02:	4393      	bics	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00da      	lsls	r2, r3, #3
 8003a0c:	4b67      	ldr	r3, [pc, #412]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e041      	b.n	8003a98 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d024      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fd9a 	bl	8002560 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe fd95 	bl	8002560 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e297      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d0f1      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4e:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	22f8      	movs	r2, #248	; 0xf8
 8003a54:	4393      	bics	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00da      	lsls	r2, r3, #3
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e018      	b.n	8003a98 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	438a      	bics	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fe fd75 	bl	8002560 <HAL_GetTick>
 8003a76:	0003      	movs	r3, r0
 8003a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fe fd70 	bl	8002560 <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e272      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	4013      	ands	r3, r2
 8003a96:	d1f1      	bne.n	8003a7c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d036      	beq.n	8003b10 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d019      	beq.n	8003ade <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fd53 	bl	8002560 <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fd4e 	bl	8002560 <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e250      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d0f1      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
 8003adc:	e018      	b.n	8003b10 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae2:	4b32      	ldr	r3, [pc, #200]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	438a      	bics	r2, r1
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fd39 	bl	8002560 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe fd34 	bl	8002560 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e236      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d1f1      	bne.n	8003af4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2204      	movs	r2, #4
 8003b16:	4013      	ands	r3, r2
 8003b18:	d100      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2a8>
 8003b1a:	e0b5      	b.n	8003c88 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1c:	201f      	movs	r0, #31
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	055b      	lsls	r3, r3, #21
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d110      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0549      	lsls	r1, r1, #21
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	61da      	str	r2, [r3, #28]
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	055b      	lsls	r3, r3, #21
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_OscConfig+0x344>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d11a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_RCC_OscConfig+0x344>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x344>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0049      	lsls	r1, r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fcf8 	bl	8002560 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7fe fcf3 	bl	8002560 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b64      	cmp	r3, #100	; 0x64
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e1f5      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x344>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10f      	bne.n	8003bbc <HAL_RCC_OscConfig+0x348>
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <HAL_RCC_OscConfig+0x338>)
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	e036      	b.n	8003c18 <HAL_RCC_OscConfig+0x3a4>
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	fffeffff 	.word	0xfffeffff
 8003bb4:	fffbffff 	.word	0xfffbffff
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCC_OscConfig+0x36a>
 8003bc4:	4bca      	ldr	r3, [pc, #808]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	4bc9      	ldr	r3, [pc, #804]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	438a      	bics	r2, r1
 8003bce:	621a      	str	r2, [r3, #32]
 8003bd0:	4bc7      	ldr	r3, [pc, #796]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	4bc6      	ldr	r3, [pc, #792]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	438a      	bics	r2, r1
 8003bda:	621a      	str	r2, [r3, #32]
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x3a4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x38c>
 8003be6:	4bc2      	ldr	r3, [pc, #776]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	4bc1      	ldr	r3, [pc, #772]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bec:	2104      	movs	r1, #4
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	621a      	str	r2, [r3, #32]
 8003bf2:	4bbf      	ldr	r3, [pc, #764]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	4bbe      	ldr	r3, [pc, #760]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	621a      	str	r2, [r3, #32]
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x3a4>
 8003c00:	4bbb      	ldr	r3, [pc, #748]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	4bba      	ldr	r3, [pc, #744]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	621a      	str	r2, [r3, #32]
 8003c0c:	4bb8      	ldr	r3, [pc, #736]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	4bb7      	ldr	r3, [pc, #732]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c12:	2104      	movs	r1, #4
 8003c14:	438a      	bics	r2, r1
 8003c16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d014      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fc9e 	bl	8002560 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	e009      	b.n	8003c3e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe fc99 	bl	8002560 <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	4aaf      	ldr	r2, [pc, #700]	; (8003ef4 <HAL_RCC_OscConfig+0x680>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e19a      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4bac      	ldr	r3, [pc, #688]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3b6>
 8003c48:	e013      	b.n	8003c72 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fc89 	bl	8002560 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e009      	b.n	8003c68 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe fc84 	bl	8002560 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	4aa5      	ldr	r2, [pc, #660]	; (8003ef4 <HAL_RCC_OscConfig+0x680>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e185      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	4ba1      	ldr	r3, [pc, #644]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c72:	231f      	movs	r3, #31
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b9c      	ldr	r3, [pc, #624]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c82:	499d      	ldr	r1, [pc, #628]	; (8003ef8 <HAL_RCC_OscConfig+0x684>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d12a      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c9a:	4b95      	ldr	r3, [pc, #596]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9e:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ca6:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fc55 	bl	8002560 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cbc:	f7fe fc50 	bl	8002560 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e152      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d0f1      	beq.n	8003cbc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cdc:	22f8      	movs	r2, #248	; 0xf8
 8003cde:	4393      	bics	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	00da      	lsls	r2, r3, #3
 8003ce8:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
 8003cee:	e034      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	3305      	adds	r3, #5
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003cf8:	4b7d      	ldr	r3, [pc, #500]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	4b7c      	ldr	r3, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003cfe:	2104      	movs	r1, #4
 8003d00:	438a      	bics	r2, r1
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d04:	4b7a      	ldr	r3, [pc, #488]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	22f8      	movs	r2, #248	; 0xf8
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	00da      	lsls	r2, r3, #3
 8003d14:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1a:	e01e      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d1c:	4b74      	ldr	r3, [pc, #464]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d22:	2104      	movs	r1, #4
 8003d24:	430a      	orrs	r2, r1
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d28:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2c:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fe fc14 	bl	8002560 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d3e:	f7fe fc0f 	bl	8002560 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e111      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d50:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	2202      	movs	r2, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1f1      	bne.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	4013      	ands	r3, r2
 8003d62:	d05c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d64:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	220c      	movs	r2, #12
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d00e      	beq.n	8003d8e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	220c      	movs	r2, #12
 8003d76:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d114      	bne.n	8003da6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d7c:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	23c0      	movs	r3, #192	; 0xc0
 8003d82:	025b      	lsls	r3, r3, #9
 8003d84:	401a      	ands	r2, r3
 8003d86:	23c0      	movs	r3, #192	; 0xc0
 8003d88:	025b      	lsls	r3, r3, #9
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	2380      	movs	r3, #128	; 0x80
 8003d94:	025b      	lsls	r3, r3, #9
 8003d96:	4013      	ands	r3, r2
 8003d98:	d040      	beq.n	8003e1c <HAL_RCC_OscConfig+0x5a8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d03c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0e6      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dae:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	0249      	lsls	r1, r1, #9
 8003db8:	430a      	orrs	r2, r1
 8003dba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fbd0 	bl	8002560 <HAL_GetTick>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc6:	f7fe fbcb 	bl	8002560 <HAL_GetTick>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0cd      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	025b      	lsls	r3, r3, #9
 8003de0:	4013      	ands	r3, r2
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x552>
 8003de4:	e01b      	b.n	8003e1e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003dec:	4943      	ldr	r1, [pc, #268]	; (8003efc <HAL_RCC_OscConfig+0x688>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fbb5 	bl	8002560 <HAL_GetTick>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dfc:	f7fe fbb0 	bl	8002560 <HAL_GetTick>
 8003e00:	0002      	movs	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b2      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	4013      	ands	r3, r2
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x588>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e1c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d100      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5b4>
 8003e26:	e0a4      	b.n	8003f72 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	220c      	movs	r2, #12
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5c2>
 8003e34:	e078      	b.n	8003f28 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d14c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e44:	492e      	ldr	r1, [pc, #184]	; (8003f00 <HAL_RCC_OscConfig+0x68c>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fb89 	bl	8002560 <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fb84 	bl	8002560 <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e086      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	049b      	lsls	r3, r3, #18
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	220f      	movs	r2, #15
 8003e78:	4393      	bics	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e82:	430a      	orrs	r2, r1
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_RCC_OscConfig+0x690>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0449      	lsls	r1, r1, #17
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fe fb57 	bl	8002560 <HAL_GetTick>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe fb52 	bl	8002560 <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e054      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	049b      	lsls	r3, r3, #18
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x644>
 8003ed6:	e04c      	b.n	8003f72 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_RCC_OscConfig+0x67c>)
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <HAL_RCC_OscConfig+0x68c>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fb3c 	bl	8002560 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x6a6>
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	00001388 	.word	0x00001388
 8003ef8:	efffffff 	.word	0xefffffff
 8003efc:	fffeffff 	.word	0xfffeffff
 8003f00:	feffffff 	.word	0xfeffffff
 8003f04:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe fb2a 	bl	8002560 <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e02c      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x708>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	049b      	lsls	r3, r3, #18
 8003f22:	4013      	ands	r3, r2
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x694>
 8003f26:	e024      	b.n	8003f72 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e01f      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_OscConfig+0x708>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x708>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	23c0      	movs	r3, #192	; 0xc0
 8003f44:	025b      	lsls	r3, r3, #9
 8003f46:	401a      	ands	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d10e      	bne.n	8003f6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	220f      	movs	r2, #15
 8003f54:	401a      	ands	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	23f0      	movs	r3, #240	; 0xf0
 8003f62:	039b      	lsls	r3, r3, #14
 8003f64:	401a      	ands	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b008      	add	sp, #32
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0bf      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d911      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0a6      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8003fe0:	21e0      	movs	r1, #224	; 0xe0
 8003fe2:	00c9      	lsls	r1, r1, #3
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	4393      	bics	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	d04c      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	4013      	ands	r3, r2
 8004018:	d120      	bne.n	800405c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07a      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	049b      	lsls	r3, r3, #18
 800402e:	4013      	ands	r3, r2
 8004030:	d114      	bne.n	800405c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06e      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	025b      	lsls	r3, r3, #9
 8004046:	4013      	ands	r3, r2
 8004048:	d108      	bne.n	800405c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e062      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404e:	4b34      	ldr	r3, [pc, #208]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2202      	movs	r2, #2
 8004054:	4013      	ands	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e05b      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405c:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	4393      	bics	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004070:	f7fe fa76 	bl	8002560 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	e009      	b.n	800408e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407a:	f7fe fa71 	bl	8002560 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	4a27      	ldr	r2, [pc, #156]	; (8004124 <HAL_RCC_ClockConfig+0x1a4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e042      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	220c      	movs	r2, #12
 8004094:	401a      	ands	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1ec      	bne.n	800407a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a0:	4b1e      	ldr	r3, [pc, #120]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d211      	bcs.n	80040d2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	4393      	bics	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x19c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e020      	b.n	8004114 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2204      	movs	r2, #4
 80040d8:	4013      	ands	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_RCC_ClockConfig+0x1a8>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040f0:	f000 f820 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040f4:	0001      	movs	r1, r0
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1a0>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	220f      	movs	r2, #15
 80040fe:	4013      	ands	r3, r2
 8004100:	4a0a      	ldr	r2, [pc, #40]	; (800412c <HAL_RCC_ClockConfig+0x1ac>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	000a      	movs	r2, r1
 8004106:	40da      	lsrs	r2, r3
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1b0>)
 800410a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800410c:	2000      	movs	r0, #0
 800410e:	f7fe f9e1 	bl	80024d4 <HAL_InitTick>
  
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b004      	add	sp, #16
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40022000 	.word	0x40022000
 8004120:	40021000 	.word	0x40021000
 8004124:	00001388 	.word	0x00001388
 8004128:	fffff8ff 	.word	0xfffff8ff
 800412c:	08004b6c 	.word	0x08004b6c
 8004130:	20000000 	.word	0x20000000

08004134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b08f      	sub	sp, #60	; 0x3c
 8004138:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800413a:	2314      	movs	r3, #20
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	4a38      	ldr	r2, [pc, #224]	; (8004220 <HAL_RCC_GetSysClockFreq+0xec>)
 8004140:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004142:	c313      	stmia	r3!, {r0, r1, r4}
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4a36      	ldr	r2, [pc, #216]	; (8004224 <HAL_RCC_GetSysClockFreq+0xf0>)
 800414c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800414e:	c313      	stmia	r3!, {r0, r1, r4}
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004158:	2300      	movs	r3, #0
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	2300      	movs	r3, #0
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCC_GetSysClockFreq+0xf4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	220c      	movs	r2, #12
 8004172:	4013      	ands	r3, r2
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d047      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0xd4>
 8004178:	d849      	bhi.n	800420e <HAL_RCC_GetSysClockFreq+0xda>
 800417a:	2b04      	cmp	r3, #4
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x50>
 800417e:	2b08      	cmp	r3, #8
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x56>
 8004182:	e044      	b.n	800420e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004188:	e044      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	0c9b      	lsrs	r3, r3, #18
 800418e:	220f      	movs	r2, #15
 8004190:	4013      	ands	r3, r2
 8004192:	2214      	movs	r2, #20
 8004194:	18ba      	adds	r2, r7, r2
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_RCC_GetSysClockFreq+0xf4>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	220f      	movs	r2, #15
 80041a0:	4013      	ands	r3, r2
 80041a2:	1d3a      	adds	r2, r7, #4
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	23c0      	movs	r3, #192	; 0xc0
 80041ac:	025b      	lsls	r3, r3, #9
 80041ae:	401a      	ands	r2, r3
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	025b      	lsls	r3, r3, #9
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ba:	481c      	ldr	r0, [pc, #112]	; (800422c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041bc:	f7fb ffa4 	bl	8000108 <__udivsi3>
 80041c0:	0003      	movs	r3, r0
 80041c2:	001a      	movs	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	4353      	muls	r3, r2
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ca:	e01a      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ce:	23c0      	movs	r3, #192	; 0xc0
 80041d0:	025b      	lsls	r3, r3, #9
 80041d2:	401a      	ands	r2, r3
 80041d4:	23c0      	movs	r3, #192	; 0xc0
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	429a      	cmp	r2, r3
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041de:	4814      	ldr	r0, [pc, #80]	; (8004230 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041e0:	f7fb ff92 	bl	8000108 <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	001a      	movs	r2, r3
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	4353      	muls	r3, r2
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	e008      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f2:	480e      	ldr	r0, [pc, #56]	; (800422c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f4:	f7fb ff88 	bl	8000108 <__udivsi3>
 80041f8:	0003      	movs	r3, r0
 80041fa:	001a      	movs	r2, r3
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	4353      	muls	r3, r2
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004206:	e005      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_GetSysClockFreq+0xfc>)
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800420c:	e002      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004212:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b00f      	add	sp, #60	; 0x3c
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	08004b4c 	.word	0x08004b4c
 8004224:	08004b5c 	.word	0x08004b5c
 8004228:	40021000 	.word	0x40021000
 800422c:	007a1200 	.word	0x007a1200
 8004230:	02dc6c00 	.word	0x02dc6c00

08004234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e042      	b.n	80042cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	223d      	movs	r2, #61	; 0x3d
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	223c      	movs	r2, #60	; 0x3c
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f7fc fc83 	bl	8000b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	223d      	movs	r2, #61	; 0x3d
 8004266:	2102      	movs	r1, #2
 8004268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	0019      	movs	r1, r3
 8004274:	0010      	movs	r0, r2
 8004276:	f000 fa37 	bl	80046e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2246      	movs	r2, #70	; 0x46
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	223e      	movs	r2, #62	; 0x3e
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	223f      	movs	r2, #63	; 0x3f
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2240      	movs	r2, #64	; 0x40
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2241      	movs	r2, #65	; 0x41
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2242      	movs	r2, #66	; 0x42
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2243      	movs	r2, #67	; 0x43
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2244      	movs	r2, #68	; 0x44
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2245      	movs	r2, #69	; 0x45
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	223d      	movs	r2, #61	; 0x3d
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d124      	bne.n	8004334 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d11d      	bne.n	8004334 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2203      	movs	r2, #3
 80042fe:	4252      	negs	r2, r2
 8004300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2203      	movs	r2, #3
 8004310:	4013      	ands	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f000 f9ce 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 800431c:	e007      	b.n	800432e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f9c1 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f9cd 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	2b04      	cmp	r3, #4
 8004340:	d125      	bne.n	800438e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2204      	movs	r2, #4
 800434a:	4013      	ands	r3, r2
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11e      	bne.n	800438e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2205      	movs	r2, #5
 8004356:	4252      	negs	r2, r2
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	23c0      	movs	r3, #192	; 0xc0
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4013      	ands	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f9a1 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 8004376:	e007      	b.n	8004388 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f994 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f9a0 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2208      	movs	r2, #8
 8004396:	4013      	ands	r3, r2
 8004398:	2b08      	cmp	r3, #8
 800439a:	d124      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2208      	movs	r2, #8
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11d      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2209      	movs	r2, #9
 80043b0:	4252      	negs	r2, r2
 80043b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2203      	movs	r2, #3
 80043c2:	4013      	ands	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f975 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 80043ce:	e007      	b.n	80043e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 f968 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 f974 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d125      	bne.n	8004440 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2210      	movs	r2, #16
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d11e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2211      	movs	r2, #17
 8004408:	4252      	negs	r2, r2
 800440a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2208      	movs	r2, #8
 8004410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	23c0      	movs	r3, #192	; 0xc0
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f000 f948 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 8004428:	e007      	b.n	800443a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 f93b 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f000 f947 	bl	80046c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10f      	bne.n	800446e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	4013      	ands	r3, r2
 8004458:	2b01      	cmp	r3, #1
 800445a:	d108      	bne.n	800446e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2202      	movs	r2, #2
 8004462:	4252      	negs	r2, r2
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f7fc f965 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	4013      	ands	r3, r2
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d10f      	bne.n	800449c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	4013      	ands	r3, r2
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d108      	bne.n	800449c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2281      	movs	r2, #129	; 0x81
 8004490:	4252      	negs	r2, r2
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 faa6 	bl	80049e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d10f      	bne.n	80044ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d108      	bne.n	80044ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2241      	movs	r2, #65	; 0x41
 80044be:	4252      	negs	r2, r2
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f907 	bl	80046d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d10f      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d108      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2221      	movs	r2, #33	; 0x21
 80044ec:	4252      	negs	r2, r2
 80044ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 fa70 	bl	80049d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	230f      	movs	r3, #15
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	223c      	movs	r2, #60	; 0x3c
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIM_ConfigClockSource+0x20>
 800451c:	2302      	movs	r3, #2
 800451e:	e0bc      	b.n	800469a <HAL_TIM_ConfigClockSource+0x19a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	223c      	movs	r2, #60	; 0x3c
 8004524:	2101      	movs	r1, #1
 8004526:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223d      	movs	r2, #61	; 0x3d
 800452c:	2102      	movs	r1, #2
 800452e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2277      	movs	r2, #119	; 0x77
 800453c:	4393      	bics	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2280      	movs	r2, #128	; 0x80
 8004556:	0192      	lsls	r2, r2, #6
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xde>
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	0192      	lsls	r2, r2, #6
 8004560:	4293      	cmp	r3, r2
 8004562:	d900      	bls.n	8004566 <HAL_TIM_ConfigClockSource+0x66>
 8004564:	e088      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 8004566:	2280      	movs	r2, #128	; 0x80
 8004568:	0152      	lsls	r2, r2, #5
 800456a:	4293      	cmp	r3, r2
 800456c:	d100      	bne.n	8004570 <HAL_TIM_ConfigClockSource+0x70>
 800456e:	e088      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x182>
 8004570:	2280      	movs	r2, #128	; 0x80
 8004572:	0152      	lsls	r2, r2, #5
 8004574:	4293      	cmp	r3, r2
 8004576:	d900      	bls.n	800457a <HAL_TIM_ConfigClockSource+0x7a>
 8004578:	e07e      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 800457a:	2b70      	cmp	r3, #112	; 0x70
 800457c:	d018      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0xb0>
 800457e:	d900      	bls.n	8004582 <HAL_TIM_ConfigClockSource+0x82>
 8004580:	e07a      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 8004582:	2b60      	cmp	r3, #96	; 0x60
 8004584:	d04f      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x126>
 8004586:	d900      	bls.n	800458a <HAL_TIM_ConfigClockSource+0x8a>
 8004588:	e076      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 800458a:	2b50      	cmp	r3, #80	; 0x50
 800458c:	d03b      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x106>
 800458e:	d900      	bls.n	8004592 <HAL_TIM_ConfigClockSource+0x92>
 8004590:	e072      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d057      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x146>
 8004596:	d900      	bls.n	800459a <HAL_TIM_ConfigClockSource+0x9a>
 8004598:	e06e      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 800459a:	2b30      	cmp	r3, #48	; 0x30
 800459c:	d063      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x166>
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x166>
 80045a4:	d868      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d05d      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x166>
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d05b      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x166>
 80045ae:	e063      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f000 f98c 	bl	80048dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2277      	movs	r2, #119	; 0x77
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
      break;
 80045dc:	e052      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f000 f975 	bl	80048dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	01c9      	lsls	r1, r1, #7
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03e      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	001a      	movs	r2, r3
 8004614:	f000 f8e8 	bl	80047e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	; 0x50
 800461e:	0018      	movs	r0, r3
 8004620:	f000 f942 	bl	80048a8 <TIM_ITRx_SetConfig>
      break;
 8004624:	e02e      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	001a      	movs	r2, r3
 8004634:	f000 f906 	bl	8004844 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	; 0x60
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f932 	bl	80048a8 <TIM_ITRx_SetConfig>
      break;
 8004644:	e01e      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	001a      	movs	r2, r3
 8004654:	f000 f8c8 	bl	80047e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	0018      	movs	r0, r3
 8004660:	f000 f922 	bl	80048a8 <TIM_ITRx_SetConfig>
      break;
 8004664:	e00e      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	0019      	movs	r1, r3
 8004670:	0010      	movs	r0, r2
 8004672:	f000 f919 	bl	80048a8 <TIM_ITRx_SetConfig>
      break;
 8004676:	e005      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004678:	230f      	movs	r3, #15
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
      break;
 8004680:	e000      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004682:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	223d      	movs	r2, #61	; 0x3d
 8004688:	2101      	movs	r1, #1
 800468a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	223c      	movs	r2, #60	; 0x3c
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

  return status;
 8004694:	230f      	movs	r3, #15
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	781b      	ldrb	r3, [r3, #0]
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	ffff00ff 	.word	0xffff00ff

080046a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a34      	ldr	r2, [pc, #208]	; (80047cc <TIM_Base_SetConfig+0xe4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d008      	beq.n	8004712 <TIM_Base_SetConfig+0x2a>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	05db      	lsls	r3, r3, #23
 8004706:	429a      	cmp	r2, r3
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0x2a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a30      	ldr	r2, [pc, #192]	; (80047d0 <TIM_Base_SetConfig+0xe8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2270      	movs	r2, #112	; 0x70
 8004716:	4393      	bics	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a29      	ldr	r2, [pc, #164]	; (80047cc <TIM_Base_SetConfig+0xe4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	05db      	lsls	r3, r3, #23
 8004732:	429a      	cmp	r2, r3
 8004734:	d013      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0xe8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <TIM_Base_SetConfig+0xec>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <TIM_Base_SetConfig+0xf0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a22      	ldr	r2, [pc, #136]	; (80047dc <TIM_Base_SetConfig+0xf4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0x76>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <TIM_Base_SetConfig+0xf8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a20      	ldr	r2, [pc, #128]	; (80047e4 <TIM_Base_SetConfig+0xfc>)
 8004762:	4013      	ands	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	4393      	bics	r3, r2
 8004776:	001a      	movs	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <TIM_Base_SetConfig+0xe4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_Base_SetConfig+0xce>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <TIM_Base_SetConfig+0xf0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <TIM_Base_SetConfig+0xce>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <TIM_Base_SetConfig+0xf4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_Base_SetConfig+0xce>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <TIM_Base_SetConfig+0xf8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d103      	bne.n	80047be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	615a      	str	r2, [r3, #20]
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40002000 	.word	0x40002000
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	fffffcff 	.word	0xfffffcff

080047e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	2201      	movs	r2, #1
 8004800:	4393      	bics	r3, r2
 8004802:	001a      	movs	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	22f0      	movs	r2, #240	; 0xf0
 8004812:	4393      	bics	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	220a      	movs	r2, #10
 8004824:	4393      	bics	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b006      	add	sp, #24
 8004842:	bd80      	pop	{r7, pc}

08004844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	2210      	movs	r2, #16
 8004856:	4393      	bics	r3, r2
 8004858:	001a      	movs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4a0d      	ldr	r2, [pc, #52]	; (80048a4 <TIM_TI2_ConfigInputStage+0x60>)
 800486e:	4013      	ands	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	031b      	lsls	r3, r3, #12
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	22a0      	movs	r2, #160	; 0xa0
 8004880:	4393      	bics	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b006      	add	sp, #24
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	ffff0fff 	.word	0xffff0fff

080048a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2270      	movs	r2, #112	; 0x70
 80048bc:	4393      	bics	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	2207      	movs	r2, #7
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	609a      	str	r2, [r3, #8]
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <TIM_ETR_SetConfig+0x3c>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	431a      	orrs	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b006      	add	sp, #24
 8004916:	bd80      	pop	{r7, pc}
 8004918:	ffff00ff 	.word	0xffff00ff

0800491c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223c      	movs	r2, #60	; 0x3c
 800492a:	5c9b      	ldrb	r3, [r3, r2]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004930:	2302      	movs	r3, #2
 8004932:	e047      	b.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	223c      	movs	r2, #60	; 0x3c
 8004938:	2101      	movs	r1, #1
 800493a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	223d      	movs	r2, #61	; 0x3d
 8004940:	2102      	movs	r1, #2
 8004942:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2270      	movs	r2, #112	; 0x70
 8004958:	4393      	bics	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	05db      	lsls	r3, r3, #23
 8004980:	429a      	cmp	r2, r3
 8004982:	d009      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10c      	bne.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	4393      	bics	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	223d      	movs	r2, #61	; 0x3d
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40014000 	.word	0x40014000

080049d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <__cxa_pure_virtual>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	f000 f805 	bl	8004a08 <_ZSt9terminatev>

080049fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4780      	blx	r0
 8004a02:	f000 f809 	bl	8004a18 <abort>
	...

08004a08 <_ZSt9terminatev>:
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <_ZSt9terminatev+0xc>)
 8004a0a:	b510      	push	{r4, lr}
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	f7ff fff6 	bl	80049fe <_ZN10__cxxabiv111__terminateEPFvvE>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <abort>:
 8004a18:	2006      	movs	r0, #6
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	f000 f86a 	bl	8004af4 <raise>
 8004a20:	2001      	movs	r0, #1
 8004a22:	f7fc f901 	bl	8000c28 <_exit>
	...

08004a28 <__errno>:
 8004a28:	4b01      	ldr	r3, [pc, #4]	; (8004a30 <__errno+0x8>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4770      	bx	lr
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	20000010 	.word	0x20000010

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	2600      	movs	r6, #0
 8004a38:	4d0c      	ldr	r5, [pc, #48]	; (8004a6c <__libc_init_array+0x38>)
 8004a3a:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	2600      	movs	r6, #0
 8004a46:	f000 f875 	bl	8004b34 <_init>
 8004a4a:	4d0a      	ldr	r5, [pc, #40]	; (8004a74 <__libc_init_array+0x40>)
 8004a4c:	4c0a      	ldr	r4, [pc, #40]	; (8004a78 <__libc_init_array+0x44>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	00b3      	lsls	r3, r6, #2
 8004a5a:	58eb      	ldr	r3, [r5, r3]
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	00b3      	lsls	r3, r6, #2
 8004a64:	58eb      	ldr	r3, [r5, r3]
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	08004be8 	.word	0x08004be8
 8004a70:	08004be8 	.word	0x08004be8
 8004a74:	08004be8 	.word	0x08004be8
 8004a78:	08004bf4 	.word	0x08004bf4

08004a7c <memcpy>:
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d100      	bne.n	8004a86 <memcpy+0xa>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	5ccc      	ldrb	r4, [r1, r3]
 8004a88:	54c4      	strb	r4, [r0, r3]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	e7f8      	b.n	8004a80 <memcpy+0x4>

08004a8e <memset>:
 8004a8e:	0003      	movs	r3, r0
 8004a90:	1882      	adds	r2, r0, r2
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d100      	bne.n	8004a98 <memset+0xa>
 8004a96:	4770      	bx	lr
 8004a98:	7019      	strb	r1, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	e7f9      	b.n	8004a92 <memset+0x4>

08004a9e <_raise_r>:
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	0004      	movs	r4, r0
 8004aa2:	000d      	movs	r5, r1
 8004aa4:	291f      	cmp	r1, #31
 8004aa6:	d904      	bls.n	8004ab2 <_raise_r+0x14>
 8004aa8:	2316      	movs	r3, #22
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	2001      	movs	r0, #1
 8004aae:	4240      	negs	r0, r0
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <_raise_r+0x24>
 8004ab8:	008a      	lsls	r2, r1, #2
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	d108      	bne.n	8004ad4 <_raise_r+0x36>
 8004ac2:	0020      	movs	r0, r4
 8004ac4:	f000 f832 	bl	8004b2c <_getpid_r>
 8004ac8:	002a      	movs	r2, r5
 8004aca:	0001      	movs	r1, r0
 8004acc:	0020      	movs	r0, r4
 8004ace:	f000 f81b 	bl	8004b08 <_kill_r>
 8004ad2:	e7ed      	b.n	8004ab0 <_raise_r+0x12>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	2a01      	cmp	r2, #1
 8004ad8:	d0ea      	beq.n	8004ab0 <_raise_r+0x12>
 8004ada:	1c51      	adds	r1, r2, #1
 8004adc:	d103      	bne.n	8004ae6 <_raise_r+0x48>
 8004ade:	2316      	movs	r3, #22
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	e7e4      	b.n	8004ab0 <_raise_r+0x12>
 8004ae6:	2400      	movs	r4, #0
 8004ae8:	0028      	movs	r0, r5
 8004aea:	601c      	str	r4, [r3, #0]
 8004aec:	4790      	blx	r2
 8004aee:	0020      	movs	r0, r4
 8004af0:	e7de      	b.n	8004ab0 <_raise_r+0x12>
	...

08004af4 <raise>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <raise+0x10>)
 8004af8:	0001      	movs	r1, r0
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	f7ff ffcf 	bl	8004a9e <_raise_r>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20000010 	.word	0x20000010

08004b08 <_kill_r>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b570      	push	{r4, r5, r6, lr}
 8004b0c:	4d06      	ldr	r5, [pc, #24]	; (8004b28 <_kill_r+0x20>)
 8004b0e:	0004      	movs	r4, r0
 8004b10:	0008      	movs	r0, r1
 8004b12:	0011      	movs	r1, r2
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	f7fc f877 	bl	8000c08 <_kill>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d103      	bne.n	8004b26 <_kill_r+0x1e>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d000      	beq.n	8004b26 <_kill_r+0x1e>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	2000036c 	.word	0x2000036c

08004b2c <_getpid_r>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	f7fc f865 	bl	8000bfc <_getpid>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <_init>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr

08004b40 <_fini>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr
