
motorc_board1_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cac  08004cac  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004cac  08004cac  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cac  08004cac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000078  08004d34  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004d34  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbfd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002777  00000000  00000000  0002fc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00033110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b580  00000000  00000000  00033d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbf2  00000000  00000000  0004f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009acdd  00000000  00000000  0005ce82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  000f7bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bf8 	.word	0x08004bf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004bf8 	.word	0x08004bf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f002 f867 	bl	80024cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f89b 	bl	8000538 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f977 	bl	80006f4 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000406:	f000 f8db 	bl	80005c0 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 800040a:	f000 f913 	bl	8000634 <_ZL12MX_TIM2_Initv>
   * the data is split up in 3 frames. The details of what data is available in which
   * frame is described in "subsystem-can-driver/mitsuba-driver-data.cpp"
   *
   * For this example, we will request all 3 frames.
   */
  mcRequest.txData.requestFrame0 = true;
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <main+0x108>)
 8000410:	2239      	movs	r2, #57	; 0x39
 8000412:	2101      	movs	r1, #1
 8000414:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame1 = true;
 8000416:	4b39      	ldr	r3, [pc, #228]	; (80004fc <main+0x108>)
 8000418:	223a      	movs	r2, #58	; 0x3a
 800041a:	2101      	movs	r1, #1
 800041c:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame2 = true;
 800041e:	4b37      	ldr	r3, [pc, #220]	; (80004fc <main+0x108>)
 8000420:	223b      	movs	r2, #59	; 0x3b
 8000422:	2101      	movs	r1, #1
 8000424:	5499      	strb	r1, [r3, r2]
   * dataframe from the Mitsuba. Since each of the 3 dataframes are unique, we need 3 different
   * callback functions.
   *
   * Also, don't forget to start CAN!
   */
  mcFrame0.SetupReceive(MC_0_Receive_Callback);
 8000426:	4a36      	ldr	r2, [pc, #216]	; (8000500 <main+0x10c>)
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <main+0x110>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fb23 	bl	8001a78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  mcFrame1.SetupReceive(MC_1_Receive_Callback);
 8000432:	4a35      	ldr	r2, [pc, #212]	; (8000508 <main+0x114>)
 8000434:	4b35      	ldr	r3, [pc, #212]	; (800050c <main+0x118>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fb1d 	bl	8001a78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  mcFrame2.SetupReceive(MC_2_Receive_Callback);
 800043e:	4a34      	ldr	r2, [pc, #208]	; (8000510 <main+0x11c>)
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <main+0x120>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fb17 	bl	8001a78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 800044a:	f001 fb73 	bl	8001b34 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>

  uint16_t motorRPM = 0;
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	2200      	movs	r2, #0
 8000452:	801a      	strh	r2, [r3, #0]
  uint16_t AcceleratorPosition = 0;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	801a      	strh	r2, [r3, #0]
  bool accelPosError = false;
 800045a:	1cfb      	adds	r3, r7, #3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
  uint16_t sum = 0;
 8000460:	003b      	movs	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	801a      	strh	r2, [r3, #0]

  mcRequest.SendData();
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <main+0x108>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fb31 	bl	8001ad0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>

  __HAL_TIM_SET_COUNTER(&htim2, 0);		// initial count = 0
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <main+0x124>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);		// Start timer
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <main+0x124>)
 8000478:	0018      	movs	r0, r3
 800047a:	f003 ff3b 	bl	80042f4 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(newInput_CAN)
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <main+0x128>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0fb      	beq.n	800047e <main+0x8a>
		{
			//reset flag
			newInput_CAN = false;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <main+0x128>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]

			if (mc_0_flag)
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <main+0x12c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d006      	beq.n	80004a2 <main+0xae>
			{
				mc_0_flag = false;
 8000494:	4b22      	ldr	r3, [pc, #136]	; (8000520 <main+0x12c>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
				motorRPM = mcFrame0Packet.motorRPM;
 800049a:	1dbb      	adds	r3, r7, #6
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <main+0x130>)
 800049e:	8952      	ldrh	r2, [r2, #10]
 80004a0:	801a      	strh	r2, [r3, #0]
			}
			if (mc_1_flag)
 80004a2:	4b21      	ldr	r3, [pc, #132]	; (8000528 <main+0x134>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d006      	beq.n	80004b8 <main+0xc4>
			{
				mc_1_flag = false;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <main+0x134>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
				AcceleratorPosition = mcFrame1Packet.AcceleratorPosition;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <main+0x138>)
 80004b4:	8852      	ldrh	r2, [r2, #2]
 80004b6:	801a      	strh	r2, [r3, #0]
			}
			if (mc_2_flag)
 80004b8:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <main+0x13c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d006      	beq.n	80004ce <main+0xda>
			{
				mc_2_flag = false;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <main+0x13c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
				accelPosError = mcFrame2Packet.accelPosError;
 80004c6:	1cfb      	adds	r3, r7, #3
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <main+0x140>)
 80004ca:	7a12      	ldrb	r2, [r2, #8]
 80004cc:	701a      	strb	r2, [r3, #0]
			}
			sum = motorRPM + AcceleratorPosition + accelPosError;
 80004ce:	1dba      	adds	r2, r7, #6
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	8812      	ldrh	r2, [r2, #0]
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	b299      	uxth	r1, r3
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	003b      	movs	r3, r7
 80004e2:	188a      	adds	r2, r1, r2
 80004e4:	801a      	strh	r2, [r3, #0]
			// Useless code just used to suppress warnings.
			sum--;
 80004e6:	003b      	movs	r3, r7
 80004e8:	881a      	ldrh	r2, [r3, #0]
 80004ea:	003b      	movs	r3, r7
 80004ec:	3a01      	subs	r2, #1
 80004ee:	801a      	strh	r2, [r3, #0]
			sum++;
 80004f0:	003b      	movs	r3, r7
 80004f2:	881a      	ldrh	r2, [r3, #0]
 80004f4:	003b      	movs	r3, r7
 80004f6:	3201      	adds	r2, #1
 80004f8:	801a      	strh	r2, [r3, #0]
		if(newInput_CAN)
 80004fa:	e7c0      	b.n	800047e <main+0x8a>
 80004fc:	20000144 	.word	0x20000144
 8000500:	08000785 	.word	0x08000785
 8000504:	20000180 	.word	0x20000180
 8000508:	080007dd 	.word	0x080007dd
 800050c:	200001dc 	.word	0x200001dc
 8000510:	08000835 	.word	0x08000835
 8000514:	20000230 	.word	0x20000230
 8000518:	200000f8 	.word	0x200000f8
 800051c:	20000143 	.word	0x20000143
 8000520:	20000140 	.word	0x20000140
 8000524:	200001cc 	.word	0x200001cc
 8000528:	20000141 	.word	0x20000141
 800052c:	20000224 	.word	0x20000224
 8000530:	20000142 	.word	0x20000142
 8000534:	2000027c 	.word	0x2000027c

08000538 <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b093      	sub	sp, #76	; 0x4c
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	2414      	movs	r4, #20
 8000540:	193b      	adds	r3, r7, r4
 8000542:	0018      	movs	r0, r3
 8000544:	2334      	movs	r3, #52	; 0x34
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f004 fb02 	bl	8004b52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	2310      	movs	r3, #16
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f004 fafb 	bl	8004b52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2220      	movs	r2, #32
 8000560:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	f003 f98f 	bl	8003894 <HAL_RCC_OscConfig>
 8000576:	0003      	movs	r3, r0
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	4193      	sbcs	r3, r2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 8000582:	f000 f8dd 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2207      	movs	r2, #7
 800058a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f003 fcfc 	bl	8003fa0 <HAL_RCC_ClockConfig>
 80005a8:	0003      	movs	r3, r0
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	4193      	sbcs	r3, r2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80005b4:	f000 f8c4 	bl	8000740 <Error_Handler>
  }
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b013      	add	sp, #76	; 0x4c
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <_ZL11MX_CAN_Initv+0x70>)
 80005c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005cc:	2210      	movs	r2, #16
 80005ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <_ZL11MX_CAN_Initv+0x6c>)
 800060e:	0018      	movs	r0, r3
 8000610:	f001 ffc0 	bl	8002594 <HAL_CAN_Init>
 8000614:	0003      	movs	r3, r0
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4193      	sbcs	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 8000620:	f000 f88e 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000094 	.word	0x20000094
 8000630:	40006400 	.word	0x40006400

08000634 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2308      	movs	r3, #8
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f004 fa84 	bl	8004b52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	2308      	movs	r3, #8
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f004 fa7d 	bl	8004b52 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	05d2      	lsls	r2, r2, #23
 800065e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 8000662:	222f      	movs	r2, #47	; 0x2f
 8000664:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <_ZL12MX_TIM2_Initv+0xbc>)
 8000670:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 8000680:	0018      	movs	r0, r3
 8000682:	f003 fde7 	bl	8004254 <HAL_TIM_Base_Init>
 8000686:	0003      	movs	r3, r0
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	4193      	sbcs	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000692:	f000 f855 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000696:	2108      	movs	r1, #8
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0152      	lsls	r2, r2, #5
 800069e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 ff8c 	bl	80045c4 <HAL_TIM_ConfigClockSource>
 80006ac:	0003      	movs	r3, r0
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80006b8:	f000 f842 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c8:	003a      	movs	r2, r7
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <_ZL12MX_TIM2_Initv+0xb8>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 f986 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	0003      	movs	r3, r0
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4193      	sbcs	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80006e0:	f000 f82e 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b006      	add	sp, #24
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000f8 	.word	0x200000f8
 80006f0:	0000270f 	.word	0x0000270f

080006f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	03c9      	lsls	r1, r1, #15
 8000704:	430a      	orrs	r2, r1
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	03db      	lsls	r3, r3, #15
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0289      	lsls	r1, r1, #10
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <_ZL12MX_GPIO_Initv+0x48>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	029b      	lsls	r3, r3, #10
 800072c:	4013      	ands	r3, r2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_TIM_PeriodElapsedCallback>:

// -----------------------------
// --- ISR DEFINITION(S) -------
// -----------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	// check which timer triggered interrupt
	if(htim->Instance == TIM2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	429a      	cmp	r2, r3
 800075e:	d108      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x26>
		/**
		 * SG
		 * Send out a MC Tx message to ask Mitsuba for data
		 * This timer elapses every 1 millisecond
		 */
		if (debug)
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x28>
			mcRequest.SendData();
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f9b0 	bl	8001ad0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
	}
	else __NOP();	// no operation
}
 8000770:	e000      	b.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x28>
	else __NOP();	// no operation
 8000772:	46c0      	nop			; (mov r8, r8)
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000144 	.word	0x20000144

08000784 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
 * The callback that runs automatically whenever we receive a new message from
 * Mitsuba. One for each type of dataframe. The method "GetOldestDataPacket" sets
 * the input flag to true.
 *
 */
void MC_0_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6178      	str	r0, [r7, #20]
	if(!mcFrame0.isFifoEmpty())
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fab6 	bl	8001d00 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000794:	0003      	movs	r3, r0
 8000796:	001a      	movs	r2, r3
 8000798:	2301      	movs	r3, #1
 800079a:	4053      	eors	r3, r2
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00d      	beq.n	80007be <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame0Packet = mcFrame0.GetOldestDataPacket(&mc_0_flag);
 80007a2:	4c0b      	ldr	r4, [pc, #44]	; (80007d0 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 80007a4:	003b      	movs	r3, r7
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 f86e 	bl	800088c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>
 80007b0:	003b      	movs	r3, r7
 80007b2:	0020      	movs	r0, r4
 80007b4:	0019      	movs	r1, r3
 80007b6:	2310      	movs	r3, #16
 80007b8:	001a      	movs	r2, r3
 80007ba:	f004 f9c1 	bl	8004b40 <memcpy>
	newInput_CAN = true;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <_Z21MC_0_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b007      	add	sp, #28
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	20000180 	.word	0x20000180
 80007d0:	200001cc 	.word	0x200001cc
 80007d4:	20000140 	.word	0x20000140
 80007d8:	20000143 	.word	0x20000143

080007dc <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
void MC_1_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6178      	str	r0, [r7, #20]
	if(!mcFrame1.isFifoEmpty())
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fa8a 	bl	8001d00 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	2301      	movs	r3, #1
 80007f2:	4053      	eors	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00d      	beq.n	8000816 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame1Packet = mcFrame1.GetOldestDataPacket(&mc_1_flag);
 80007fa:	4c0b      	ldr	r4, [pc, #44]	; (8000828 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 80007fc:	003b      	movs	r3, r7
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f86b 	bl	80008de <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb>
 8000808:	003b      	movs	r3, r7
 800080a:	0020      	movs	r0, r4
 800080c:	0019      	movs	r1, r3
 800080e:	230c      	movs	r3, #12
 8000810:	001a      	movs	r2, r3
 8000812:	f004 f995 	bl	8004b40 <memcpy>
	newInput_CAN = true;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <_Z21MC_1_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b007      	add	sp, #28
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	200001dc 	.word	0x200001dc
 8000828:	20000224 	.word	0x20000224
 800082c:	20000141 	.word	0x20000141
 8000830:	20000143 	.word	0x20000143

08000834 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
void MC_2_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	61f8      	str	r0, [r7, #28]
	if(!mcFrame2.isFifoEmpty())
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fa5e 	bl	8001d00 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000844:	0003      	movs	r3, r0
 8000846:	001a      	movs	r2, r3
 8000848:	2301      	movs	r3, #1
 800084a:	4053      	eors	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00d      	beq.n	800086e <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame2Packet = mcFrame2.GetOldestDataPacket(&mc_2_flag);
 8000852:	4c0b      	ldr	r4, [pc, #44]	; (8000880 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 8000854:	003b      	movs	r3, r7
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000858:	4908      	ldr	r1, [pc, #32]	; (800087c <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x48>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f868 	bl	8000930 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>
 8000860:	003b      	movs	r3, r7
 8000862:	0020      	movs	r0, r4
 8000864:	0019      	movs	r1, r3
 8000866:	2313      	movs	r3, #19
 8000868:	001a      	movs	r2, r3
 800086a:	f004 f969 	bl	8004b40 <memcpy>
	newInput_CAN = true;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <_Z21MC_2_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	; 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	20000230 	.word	0x20000230
 8000880:	2000027c 	.word	0x2000027c
 8000884:	20000142 	.word	0x20000142
 8000888:	20000143 	.word	0x20000143

0800088c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08b      	sub	sp, #44	; 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	61f8      	str	r0, [r7, #28]
 8000894:	61b9      	str	r1, [r7, #24]
 8000896:	617a      	str	r2, [r7, #20]
	{
		CHILD_DATA returnData;
	    if(success)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01a      	beq.n	80008d4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	3312      	adds	r3, #18
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f86b 	bl	8000982 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 80008ac:	0003      	movs	r3, r0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00d      	beq.n	80008d4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 80008b8:	69fc      	ldr	r4, [r7, #28]
 80008ba:	003b      	movs	r3, r7
 80008bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fafd 	bl	8000ec0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>
 80008c6:	003b      	movs	r3, r7
 80008c8:	0020      	movs	r0, r4
 80008ca:	0019      	movs	r1, r3
 80008cc:	2310      	movs	r3, #16
 80008ce:	001a      	movs	r2, r3
 80008d0:	f004 f936 	bl	8004b40 <memcpy>
	        }
	    }
	    return returnData;
 80008d4:	46c0      	nop			; (mov r8, r8)
	}
 80008d6:	69f8      	ldr	r0, [r7, #28]
 80008d8:	46bd      	mov	sp, r7
 80008da:	b00b      	add	sp, #44	; 0x2c
 80008dc:	bd90      	pop	{r4, r7, pc}

080008de <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 80008de:	b590      	push	{r4, r7, lr}
 80008e0:	b08b      	sub	sp, #44	; 0x2c
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	61f8      	str	r0, [r7, #28]
 80008e6:	61b9      	str	r1, [r7, #24]
 80008e8:	617a      	str	r2, [r7, #20]
	    if(success)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01a      	beq.n	8000926 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	3312      	adds	r3, #18
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f842 	bl	8000982 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 80008fe:	0003      	movs	r3, r0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
	        if(*success)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00d      	beq.n	8000926 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 800090a:	69fc      	ldr	r4, [r7, #28]
 800090c:	003b      	movs	r3, r7
 800090e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fc20 	bl	8001158 <_ZN25MITSUBA_DRIVER_RX_FRAME_117arrayToDataPacketEPh>
 8000918:	003b      	movs	r3, r7
 800091a:	0020      	movs	r0, r4
 800091c:	0019      	movs	r1, r3
 800091e:	230c      	movs	r3, #12
 8000920:	001a      	movs	r2, r3
 8000922:	f004 f90d 	bl	8004b40 <memcpy>
	    return returnData;
 8000926:	46c0      	nop			; (mov r8, r8)
	}
 8000928:	69f8      	ldr	r0, [r7, #28]
 800092a:	46bd      	mov	sp, r7
 800092c:	b00b      	add	sp, #44	; 0x2c
 800092e:	bd90      	pop	{r4, r7, pc}

08000930 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08d      	sub	sp, #52	; 0x34
 8000934:	af00      	add	r7, sp, #0
 8000936:	6278      	str	r0, [r7, #36]	; 0x24
 8000938:	6239      	str	r1, [r7, #32]
 800093a:	61fa      	str	r2, [r7, #28]
	    if(success)
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01a      	beq.n	8000978 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	3312      	adds	r3, #18
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f819 	bl	8000982 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000950:	0003      	movs	r3, r0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
	        if(*success)
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00d      	beq.n	8000978 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 800095c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800095e:	003b      	movs	r3, r7
 8000960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fd9e 	bl	80014a6 <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>
 800096a:	003b      	movs	r3, r7
 800096c:	0020      	movs	r0, r4
 800096e:	0019      	movs	r1, r3
 8000970:	2313      	movs	r3, #19
 8000972:	001a      	movs	r2, r3
 8000974:	f004 f8e4 	bl	8004b40 <memcpy>
	    return returnData;
 8000978:	46c0      	nop			; (mov r8, r8)
	}
 800097a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800097c:	46bd      	mov	sp, r7
 800097e:	b00d      	add	sp, #52	; 0x34
 8000980:	bd90      	pop	{r4, r7, pc}

08000982 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 800098c:	230e      	movs	r3, #14
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2200      	movs	r2, #0
 8000992:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8b5a      	ldrh	r2, [r3, #26]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	8b1b      	ldrh	r3, [r3, #24]
 800099c:	429a      	cmp	r2, r3
 800099e:	d10a      	bne.n	80009b6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7f1b      	ldrb	r3, [r3, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d022      	beq.n	80009f4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
            if(success)
 80009b4:	e01e      	b.n	80009f4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 80009c2:	230e      	movs	r3, #14
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	8b52      	ldrh	r2, [r2, #26]
 80009ca:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	8b5b      	ldrh	r3, [r3, #26]
 80009d0:	3301      	adds	r3, #1
 80009d2:	2103      	movs	r1, #3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fd07 	bl	80003e8 <__aeabi_idivmod>
 80009da:	000b      	movs	r3, r1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8b5a      	ldrh	r2, [r3, #26]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	8b1b      	ldrh	r3, [r3, #24]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d102      	bne.n	80009f4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2201      	movs	r2, #1
 80009f2:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80009f4:	230e      	movs	r3, #14
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	18d3      	adds	r3, r2, r3
    }
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_Z41__static_initialization_and_destruction_0ii>:
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d11b      	bne.n	8000a50 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d117      	bne.n	8000a50 <_Z41__static_initialization_and_destruction_0ii+0x48>
static MITSUBA_DRIVER_TX_RL_MESSAGE mcRequest(MC_REQUEST_ID);
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f94c 	bl	8000cc4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>
static MITSUBA_DRIVER_RX_FRAME_0 mcFrame0(MC_RX_FRAME0_ID);
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 faca 	bl	8000fcc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>
static MITSUBA_DRIVER_RX_FRAME_1 mcFrame1(MC_RX_FRAME1_ID);
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fc04 	bl	800124c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>
static MITSUBA_DRIVER_RX_FRAME_2 mcFrame2(MC_RX_FRAME2_ID);
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fdfa 	bl	8001644 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	0000ffff 	.word	0x0000ffff
 8000a5c:	08f89540 	.word	0x08f89540
 8000a60:	20000144 	.word	0x20000144
 8000a64:	08850225 	.word	0x08850225
 8000a68:	20000180 	.word	0x20000180
 8000a6c:	08950225 	.word	0x08950225
 8000a70:	200001dc 	.word	0x200001dc
 8000a74:	08a50225 	.word	0x08a50225
 8000a78:	20000230 	.word	0x20000230

08000a7c <_GLOBAL__sub_I_hcan>:
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <_GLOBAL__sub_I_hcan+0x14>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ffbf 	bl	8000a08 <_Z41__static_initialization_and_destruction_0ii>
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	0000ffff 	.word	0x0000ffff

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0549      	lsls	r1, r1, #21
 8000abc:	430a      	orrs	r2, r1
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	055b      	lsls	r3, r3, #21
 8000ac8:	4013      	ands	r3, r2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08b      	sub	sp, #44	; 0x2c
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	2414      	movs	r4, #20
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f004 f82f 	bl	8004b52 <memset>
  if(hcan->Instance==CAN)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <HAL_CAN_MspInit+0xa4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d13b      	bne.n	8000b76 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b00:	69da      	ldr	r2, [r3, #28]
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0489      	lsls	r1, r1, #18
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	61da      	str	r2, [r3, #28]
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	049b      	lsls	r3, r3, #18
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_CAN_MspInit+0xa8>)
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	22c0      	movs	r2, #192	; 0xc0
 8000b3a:	0152      	lsls	r2, r2, #5
 8000b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	0021      	movs	r1, r4
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2204      	movs	r2, #4
 8000b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	187a      	adds	r2, r7, r1
 8000b5a:	2390      	movs	r3, #144	; 0x90
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 fd1f 	bl	80035a4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201e      	movs	r0, #30
 8000b6c:	f002 fce8 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000b70:	201e      	movs	r0, #30
 8000b72:	f002 fcfa 	bl	800356a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b00b      	add	sp, #44	; 0x2c
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40006400 	.word	0x40006400
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d113      	bne.n	8000bc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_TIM_Base_MspInit+0x44>)
 8000b9e:	69da      	ldr	r2, [r3, #28]
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x44>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_TIM_Base_MspInit+0x44>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	200f      	movs	r0, #15
 8000bba:	f002 fcc1 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f002 fcd3 	bl	800356a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b004      	add	sp, #16
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f001 fcb0 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <TIM2_IRQHandler+0x14>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f003 fbc4 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	200000f8 	.word	0x200000f8

08000c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_kill>:

int _kill(int pid, int sig)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c32:	f003 ff5b 	bl	8004aec <__errno>
 8000c36:	0003      	movs	r3, r0
 8000c38:	2216      	movs	r2, #22
 8000c3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	425b      	negs	r3, r3
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_exit>:

void _exit (int status)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c50:	2301      	movs	r3, #1
 8000c52:	425a      	negs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ffe5 	bl	8000c28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c5e:	e7fe      	b.n	8000c5e <_exit+0x16>

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>:
//Private Function Definitions

//Protected Function Definitions
/*****************TX Classes*****************/
void MITSUBA_DRIVER_TX_RL_MESSAGE::dataPacketToArray(MITSUBA_DRIVER_TX_RL_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	6018      	str	r0, [r3, #0]
 8000c74:	6039      	str	r1, [r7, #0]
	output[0] = 0;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.requestFrame0) << 0;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	1d3a      	adds	r2, r7, #4
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame1) << 1;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b25a      	sxtb	r2, r3
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame2) << 2;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>:

	return output;
}

//Public Function Definitions
MITSUBA_DRIVER_TX_RL_MESSAGE::MITSUBA_DRIVER_TX_RL_MESSAGE(uint32_t message_id):
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_TX_RL_MESSAGE, MITSUBA_DRIVER_TX_RL_DATA_PACKET>{message_id,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f000 fccb 	bl	8001678 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em+0x30>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
{}
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	08004c90 	.word	0x08004c90

08000cf8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
/*****************RX Classes*****************/
//RX Frame 0
void MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	003c      	movs	r4, r7
 8000d00:	6020      	str	r0, [r4, #0]
 8000d02:	6061      	str	r1, [r4, #4]
 8000d04:	60a2      	str	r2, [r4, #8]
 8000d06:	60e3      	str	r3, [r4, #12]
	output[0] = 0;
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltage);
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	003b      	movs	r3, r7
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	3301      	adds	r3, #1
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.battVoltage >> 8);
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	7819      	ldrb	r1, [r3, #0]
 8000d2e:	003b      	movs	r3, r7
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	121b      	asrs	r3, r3, #8
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	3301      	adds	r3, #1
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrent) << 2);
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	3301      	adds	r3, #1
 8000d44:	7819      	ldrb	r1, [r3, #0]
 8000d46:	003b      	movs	r3, r7
 8000d48:	885b      	ldrh	r3, [r3, #2]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	3301      	adds	r3, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.battCurrent >> 6);
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	3302      	adds	r3, #2
 8000d66:	7819      	ldrb	r1, [r3, #0]
 8000d68:	003b      	movs	r3, r7
 8000d6a:	885b      	ldrh	r3, [r3, #2]
 8000d6c:	119b      	asrs	r3, r3, #6
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	3302      	adds	r3, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrentDir) << 3);
 8000d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	7819      	ldrb	r1, [r3, #0]
 8000d80:	003b      	movs	r3, r7
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.motorCurrentPkAvg << 4);
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	3302      	adds	r3, #2
 8000d96:	7819      	ldrb	r1, [r3, #0]
 8000d98:	003b      	movs	r3, r7
 8000d9a:	88db      	ldrh	r3, [r3, #6]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	3302      	adds	r3, #2
 8000da6:	430a      	orrs	r2, r1
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	3303      	adds	r3, #3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorCurrentPkAvg >> 4);
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	3303      	adds	r3, #3
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	003b      	movs	r3, r7
 8000dbc:	88db      	ldrh	r3, [r3, #6]
 8000dbe:	111b      	asrs	r3, r3, #4
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(static_cast<uint32_t>(input.FETtemp) << 6);
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	3303      	adds	r3, #3
 8000dd0:	7819      	ldrb	r1, [r3, #0]
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	7a1b      	ldrb	r3, [r3, #8]
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	3303      	adds	r3, #3
 8000dde:	430a      	orrs	r2, r1
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	701a      	strb	r2, [r3, #0]


	uint32_t convMotorRPM = input.motorRPM * 1;
 8000de4:	003b      	movs	r3, r7
 8000de6:	895b      	ldrh	r3, [r3, #10]
 8000de8:	617b      	str	r3, [r7, #20]
	output[4] = 0;
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	3304      	adds	r3, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.FETtemp >> 2);
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	3304      	adds	r3, #4
 8000df6:	7819      	ldrb	r1, [r3, #0]
 8000df8:	003b      	movs	r3, r7
 8000dfa:	7a1b      	ldrb	r3, [r3, #8]
 8000dfc:	109b      	asrs	r3, r3, #2
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	3304      	adds	r3, #4
 8000e04:	430a      	orrs	r2, r1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
	output[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	7819      	ldrb	r1, [r3, #0]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	701a      	strb	r2, [r3, #0]

	output[5] = 0;
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	3305      	adds	r3, #5
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	3305      	adds	r3, #5
 8000e2e:	7819      	ldrb	r1, [r3, #0]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	227f      	movs	r2, #127	; 0x7f
 8000e38:	4013      	ands	r3, r2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	3305      	adds	r3, #5
 8000e40:	430a      	orrs	r2, r1
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint8_t>(input.PWMDuty << 7));
 8000e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e48:	3305      	adds	r3, #5
 8000e4a:	7819      	ldrb	r1, [r3, #0]
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	899b      	ldrh	r3, [r3, #12]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	3305      	adds	r3, #5
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	701a      	strb	r2, [r3, #0]

	output[6] = 0;
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	3306      	adds	r3, #6
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	output[6] |= static_cast<uint8_t>(input.PWMDuty >> 1);
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	7819      	ldrb	r1, [r3, #0]
 8000e6e:	003b      	movs	r3, r7
 8000e70:	899b      	ldrh	r3, [r3, #12]
 8000e72:	105b      	asrs	r3, r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	3306      	adds	r3, #6
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	701a      	strb	r2, [r3, #0]

	output[7] = 0;
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	3307      	adds	r3, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(input.PWMDuty >> 9);
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	3307      	adds	r3, #7
 8000e8c:	7819      	ldrb	r1, [r3, #0]
 8000e8e:	003b      	movs	r3, r7
 8000e90:	899b      	ldrh	r3, [r3, #12]
 8000e92:	125b      	asrs	r3, r3, #9
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e98:	3307      	adds	r3, #7
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(static_cast<uint32_t>(input.LeadAngle) << 1);
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	3307      	adds	r3, #7
 8000ea4:	7819      	ldrb	r1, [r3, #0]
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	7b9b      	ldrb	r3, [r3, #14]
 8000eaa:	18db      	adds	r3, r3, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b007      	add	sp, #28
 8000ebe:	bd90      	pop	{r4, r7, pc}

08000ec0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET output;
	uint32_t preBattVoltage = (static_cast<uint32_t>(input[1] & 3) << 8) | (input[0]);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	021a      	lsls	r2, r3, #8
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61fb      	str	r3, [r7, #28]
	output.battVoltage = static_cast<uint16_t>(preBattVoltage);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	801a      	strh	r2, [r3, #0]

	uint32_t preBattCurrent = (static_cast<uint32_t>(input[2] & 7) << 6) | (input[1] >> 2);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3302      	adds	r3, #2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	019a      	lsls	r2, r3, #6
 8000ef0:	23e0      	movs	r3, #224	; 0xe0
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	3201      	adds	r2, #1
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	1092      	asrs	r2, r2, #2
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
	output.battCurrent = static_cast<uint16_t>(preBattCurrent);
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	805a      	strh	r2, [r3, #2]

	output.battCurrentDir = static_cast<bool>(input[2] & 8);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	001a      	movs	r2, r3
 8000f12:	2308      	movs	r3, #8
 8000f14:	4013      	ands	r3, r2
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	4193      	sbcs	r3, r2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	711a      	strb	r2, [r3, #4]

	uint32_t preMotorCurrent = static_cast<uint32_t>((input[3] & 0x3F) << 4) | (input[2] >> 4);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3303      	adds	r3, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	001a      	movs	r2, r3
 8000f2a:	23fc      	movs	r3, #252	; 0xfc
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	3202      	adds	r2, #2
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	1112      	asrs	r2, r2, #4
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
	output.motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	80da      	strh	r2, [r3, #6]

	uint32_t preFETtemp = static_cast<uint32_t>((input[4] & 7) << 2) | (input[3] >> 6);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3304      	adds	r3, #4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	231c      	movs	r3, #28
 8000f50:	4013      	ands	r3, r2
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	3203      	adds	r2, #3
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	1192      	asrs	r2, r2, #6
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
	output.FETtemp = static_cast<uint8_t>(preFETtemp);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	721a      	strb	r2, [r3, #8]

	uint32_t preMotorRPM = (static_cast<uint32_t>(input[5] & 0x7F) << 5) | (input[4] >> 3);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3305      	adds	r3, #5
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	015a      	lsls	r2, r3, #5
 8000f6e:	23fe      	movs	r3, #254	; 0xfe
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4013      	ands	r3, r2
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	3204      	adds	r2, #4
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	10d2      	asrs	r2, r2, #3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
	output.motorRPM = static_cast<uint16_t>(preMotorRPM);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	815a      	strh	r2, [r3, #10]

	uint32_t preDuty = (static_cast<uint32_t>(input[7] & 1) << 9) | (input[6] << 1) | (input[5] >> 7);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	025a      	lsls	r2, r3, #9
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	3206      	adds	r2, #6
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	3205      	adds	r2, #5
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	11d2      	asrs	r2, r2, #7
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
	output.PWMDuty = static_cast<uint16_t>(preDuty);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	819a      	strh	r2, [r3, #12]

	output.LeadAngle = static_cast<uint8_t>((input[7] >> 1));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	105b      	asrs	r3, r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	739a      	strb	r2, [r3, #14]

	return output;
 8000fc2:	46c0      	nop			; (mov r8, r8)
}
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b008      	add	sp, #32
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>:

MITSUBA_DRIVER_RX_FRAME_0::MITSUBA_DRIVER_RX_FRAME_0(uint32_t message_id):
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_0, MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET>{message_id,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, true, false}
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	f000 fb6d 	bl	80016c4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em+0x30>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	601a      	str	r2, [r3, #0]
{}
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	08004c78 	.word	0x08004c78

08001000 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>:

//RX Frame 1
void MITSUBA_DRIVER_RX_FRAME_1::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	1d3c      	adds	r4, r7, #4
 8001008:	6020      	str	r0, [r4, #0]
 800100a:	6061      	str	r1, [r4, #4]
 800100c:	60a2      	str	r2, [r4, #8]
 800100e:	603b      	str	r3, [r7, #0]
	output[0] = 0;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.powerMode);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	1d3a      	adds	r2, r7, #4
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	4313      	orrs	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.MCmode) << 1;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25a      	sxtb	r2, r3
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.AcceleratorPosition << 2);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	885b      	ldrh	r3, [r3, #2]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b2da      	uxtb	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.AcceleratorPosition >> 6);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	7819      	ldrb	r1, [r3, #0]
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	885b      	ldrh	r3, [r3, #2]
 8001066:	119b      	asrs	r3, r3, #6
 8001068:	b2da      	uxtb	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.regenVRposition << 4);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	7819      	ldrb	r1, [r3, #0]
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	b2da      	uxtb	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3302      	adds	r3, #2
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.regenVRposition >> 4);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	7819      	ldrb	r1, [r3, #0]
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	111b      	asrs	r3, r3, #4
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3302      	adds	r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.digitSWposition) << 6);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3302      	adds	r3, #2
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	799b      	ldrb	r3, [r3, #6]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3302      	adds	r3, #2
 80010c0:	430a      	orrs	r2, r1
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3303      	adds	r3, #3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.digitSWposition >> 2);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3303      	adds	r3, #3
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	799b      	ldrb	r3, [r3, #6]
 80010d8:	109b      	asrs	r3, r3, #2
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3303      	adds	r3, #3
 80010e0:	430a      	orrs	r2, r1
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.outTargetVal << 2);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3303      	adds	r3, #3
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	891b      	ldrh	r3, [r3, #8]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3303      	adds	r3, #3
 80010fa:	430a      	orrs	r2, r1
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]

	output[4] = 0;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3304      	adds	r3, #4
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.outTargetVal >> 6);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	7819      	ldrb	r1, [r3, #0]
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	891b      	ldrh	r3, [r3, #8]
 8001112:	119b      	asrs	r3, r3, #6
 8001114:	b2da      	uxtb	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	430a      	orrs	r2, r1
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.driveActStat << 4);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3304      	adds	r3, #4
 8001124:	7819      	ldrb	r1, [r3, #0]
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	7a9b      	ldrb	r3, [r3, #10]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	b2da      	uxtb	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3304      	adds	r3, #4
 8001132:	430a      	orrs	r2, r1
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(static_cast<uint8_t>(input.regenStat) << 6);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	3304      	adds	r3, #4
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	7adb      	ldrb	r3, [r3, #11]
 8001142:	019b      	lsls	r3, r3, #6
 8001144:	b2da      	uxtb	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	430a      	orrs	r2, r1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b005      	add	sp, #20
 8001156:	bd90      	pop	{r4, r7, pc}

08001158 <_ZN25MITSUBA_DRIVER_RX_FRAME_117arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_1::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET output;

	output.powerMode = input[0] & 1;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001a      	movs	r2, r3
 8001168:	2301      	movs	r3, #1
 800116a:	4013      	ands	r3, r2
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	4193      	sbcs	r3, r2
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]

	output.MCmode = (input[0] >> 1) & 1;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	001a      	movs	r2, r3
 800117c:	2302      	movs	r3, #2
 800117e:	4013      	ands	r3, r2
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	4193      	sbcs	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	705a      	strb	r2, [r3, #1]

	uint32_t preAccelPos = static_cast<uint32_t>((input[1] & 0xF) << 6) | (input[0] >> 2);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	001a      	movs	r2, r3
 8001194:	23f0      	movs	r3, #240	; 0xf0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4013      	ands	r3, r2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	1092      	asrs	r2, r2, #2
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
	output.AcceleratorPosition = static_cast<uint16_t>(preAccelPos);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	805a      	strh	r2, [r3, #2]

	uint32_t preRegenVRposition = static_cast<uint32_t>((input[2] & 0x3F) << 4) | (input[1] >> 4);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3302      	adds	r3, #2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	001a      	movs	r2, r3
 80011b6:	23fc      	movs	r3, #252	; 0xfc
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	3201      	adds	r2, #1
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	1112      	asrs	r2, r2, #4
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
	output.regenVRposition = static_cast<uint16_t>(preRegenVRposition);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	809a      	strh	r2, [r3, #4]

	uint32_t preDigitSWposition = static_cast<uint32_t>((input[3] & 0x3) << 2) | (input[2] >> 6);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3303      	adds	r3, #3
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	001a      	movs	r2, r3
 80011da:	230c      	movs	r3, #12
 80011dc:	4013      	ands	r3, r2
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	3202      	adds	r2, #2
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	1192      	asrs	r2, r2, #6
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
	output.digitSWposition = static_cast<uint8_t>(preDigitSWposition);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	719a      	strb	r2, [r3, #6]

	uint32_t preOutTargetVal = static_cast<uint32_t>((input[4] & 0xF) << 6) | (input[3] >> 2);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	001a      	movs	r2, r3
 80011fc:	23f0      	movs	r3, #240	; 0xf0
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4013      	ands	r3, r2
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	3203      	adds	r2, #3
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	1092      	asrs	r2, r2, #2
 800120a:	4313      	orrs	r3, r2
 800120c:	60bb      	str	r3, [r7, #8]
	output.outTargetVal = static_cast<uint16_t>(preOutTargetVal);
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	811a      	strh	r2, [r3, #8]

	output.driveActStat = static_cast<uint8_t>((input[4] >> 4) & 3);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3304      	adds	r3, #4
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	111b      	asrs	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	729a      	strb	r2, [r3, #10]

	output.regenStat = static_cast<bool>((input[4] >> 6) & 1);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	4013      	ands	r3, r2
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	4193      	sbcs	r3, r2
 800123a:	b2da      	uxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	72da      	strb	r2, [r3, #11]

	return output;
 8001240:	46c0      	nop			; (mov r8, r8)
}
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	46bd      	mov	sp, r7
 8001246:	b006      	add	sp, #24
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em>:

MITSUBA_DRIVER_RX_FRAME_1::MITSUBA_DRIVER_RX_FRAME_1(uint32_t message_id):
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_1, MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET>{message_id,subsystem_info::MOTORRX1_RL_MSG_LENGTH, true, true, false}
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2301      	movs	r3, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2205      	movs	r2, #5
 8001266:	f000 fa53 	bl	8001710 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <_ZN25MITSUBA_DRIVER_RX_FRAME_1C1Em+0x30>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]
{}
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	08004c60 	.word	0x08004c60

08001280 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>:

//RX Frame 2
void MITSUBA_DRIVER_RX_FRAME_2::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8001280:	b084      	sub	sp, #16
 8001282:	b5b0      	push	{r4, r5, r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	2518      	movs	r5, #24
 800128a:	197c      	adds	r4, r7, r5
 800128c:	6020      	str	r0, [r4, #0]
 800128e:	6061      	str	r1, [r4, #4]
 8001290:	60a2      	str	r2, [r4, #8]
 8001292:	60e3      	str	r3, [r4, #12]
	uint32_t convOverHeadLevel = input.overHeatLevel;
 8001294:	0029      	movs	r1, r5
 8001296:	187b      	adds	r3, r7, r1
 8001298:	7c9b      	ldrb	r3, [r3, #18]
 800129a:	607b      	str	r3, [r7, #4]

	output[0] = 0;
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.adSensorError) << 0;
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorUError) << 1;
 80012b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorWError) << 2;
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.fetThermError) << 3;
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltSensorError) << 5;
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	187b      	adds	r3, r7, r1
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorError) << 6;
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25a      	sxtb	r2, r3
 8001318:	187b      	adds	r3, r7, r1
 800131a:	795b      	ldrb	r3, [r3, #5]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	b25b      	sxtb	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorAdjError) << 7;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25a      	sxtb	r2, r3
 8001330:	187b      	adds	r3, r7, r1
 8001332:	799b      	ldrb	r3, [r3, #6]
 8001334:	01db      	lsls	r3, r3, #7
 8001336:	b25b      	sxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	b2da      	uxtb	r2, r3
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3301      	adds	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.motorCurrSensorAdjError) << 0;
 800134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134c:	3301      	adds	r3, #1
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	0008      	movs	r0, r1
 8001352:	187b      	adds	r3, r7, r1
 8001354:	79db      	ldrb	r3, [r3, #7]
 8001356:	0019      	movs	r1, r3
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	3301      	adds	r3, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.accelPosError) << 1;
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25a      	sxtb	r2, r3
 800136a:	0001      	movs	r1, r0
 800136c:	187b      	adds	r3, r7, r1
 800136e:	7a1b      	ldrb	r3, [r3, #8]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b25a      	sxtb	r2, r3
 8001378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137a:	3301      	adds	r3, #1
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.contVoltSensorError) << 3;
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	3301      	adds	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	187b      	adds	r3, r7, r1
 800138a:	7a5b      	ldrb	r3, [r3, #9]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b25a      	sxtb	r2, r3
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	3301      	adds	r3, #1
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	3302      	adds	r3, #2
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.powerSystemError) << 0;
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	3302      	adds	r3, #2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	0008      	movs	r0, r1
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	7a9b      	ldrb	r3, [r3, #10]
 80013b0:	0019      	movs	r1, r3
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	3302      	adds	r3, #2
 80013b6:	430a      	orrs	r2, r1
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrError) << 1;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	3302      	adds	r3, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25a      	sxtb	r2, r3
 80013c4:	0001      	movs	r1, r0
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	7adb      	ldrb	r3, [r3, #11]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	3302      	adds	r3, #2
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overVoltError) << 3;
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	7b1b      	ldrb	r3, [r3, #12]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	3302      	adds	r3, #2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrLimit) << 5;
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	3302      	adds	r3, #2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	015b      	lsls	r3, r3, #5
 8001404:	b25b      	sxtb	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b25a      	sxtb	r2, r3
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	3302      	adds	r3, #2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	3303      	adds	r3, #3
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorSystemError) << 0;
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	3303      	adds	r3, #3
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	0008      	movs	r0, r1
 8001422:	187b      	adds	r3, r7, r1
 8001424:	7b9b      	ldrb	r3, [r3, #14]
 8001426:	0019      	movs	r1, r3
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	3303      	adds	r3, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorLock) << 1;
 8001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001434:	3303      	adds	r3, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25a      	sxtb	r2, r3
 800143a:	0001      	movs	r1, r0
 800143c:	187b      	adds	r3, r7, r1
 800143e:	7bdb      	ldrb	r3, [r3, #15]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25a      	sxtb	r2, r3
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	3303      	adds	r3, #3
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorShort) << 2;
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	3303      	adds	r3, #3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b25a      	sxtb	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	7c1b      	ldrb	r3, [r3, #16]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25a      	sxtb	r2, r3
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	3303      	adds	r3, #3
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorOpen) << 3;
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	3303      	adds	r3, #3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b25a      	sxtb	r2, r3
 8001474:	187b      	adds	r3, r7, r1
 8001476:	7c5b      	ldrb	r3, [r3, #17]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b25a      	sxtb	r2, r3
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	3303      	adds	r3, #3
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]

	output[4] = static_cast<uint32_t>(convOverHeadLevel) & 0x3;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	3304      	adds	r3, #4
 8001490:	2103      	movs	r1, #3
 8001492:	400a      	ands	r2, r1
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bcb0      	pop	{r4, r5, r7}
 80014a0:	bc08      	pop	{r3}
 80014a2:	b004      	add	sp, #16
 80014a4:	4718      	bx	r3

080014a6 <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_2::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET output;

	output.adSensorError 			= input[0] & (1 << 0);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	4013      	ands	r3, r2
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	4193      	sbcs	r3, r2
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]
	output.motorCurrSensorUError 	= input[0] & (1 << 1);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	2302      	movs	r3, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	705a      	strb	r2, [r3, #1]
	output.motorCurrSensorWError 	= input[0] & (1 << 2);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	001a      	movs	r2, r3
 80014de:	2304      	movs	r3, #4
 80014e0:	4013      	ands	r3, r2
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	4193      	sbcs	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	709a      	strb	r2, [r3, #2]
	output.fetThermError 			= input[0] & (1 << 3);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	001a      	movs	r2, r3
 80014f2:	2308      	movs	r3, #8
 80014f4:	4013      	ands	r3, r2
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	4193      	sbcs	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	70da      	strb	r2, [r3, #3]
	output.battVoltSensorError 		= input[0] & (1 << 5);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	001a      	movs	r2, r3
 8001506:	2320      	movs	r3, #32
 8001508:	4013      	ands	r3, r2
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	4193      	sbcs	r3, r2
 800150e:	b2da      	uxtb	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	711a      	strb	r2, [r3, #4]
	output.battCurrSensorError 		= input[0] & (1 << 6);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	001a      	movs	r2, r3
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	4013      	ands	r3, r2
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	4193      	sbcs	r3, r2
 8001522:	b2da      	uxtb	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	715a      	strb	r2, [r3, #5]
	output.battCurrSensorAdjError 	= input[0] & (1 << 7);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	09db      	lsrs	r3, r3, #7
 8001532:	b2da      	uxtb	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	719a      	strb	r2, [r3, #6]

	output.motorCurrSensorAdjError	= input[1] & (1 << 0);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	001a      	movs	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	4013      	ands	r3, r2
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	4193      	sbcs	r3, r2
 8001548:	b2da      	uxtb	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	71da      	strb	r2, [r3, #7]
	output.accelPosError			= input[1] & (1 << 1);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	2302      	movs	r3, #2
 8001558:	4013      	ands	r3, r2
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	4193      	sbcs	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	721a      	strb	r2, [r3, #8]
	output.contVoltSensorError		= input[1] & (1 << 3);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	001a      	movs	r2, r3
 800156c:	2308      	movs	r3, #8
 800156e:	4013      	ands	r3, r2
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	4193      	sbcs	r3, r2
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	725a      	strb	r2, [r3, #9]

	output.powerSystemError 		= input[2] & (1 << 0);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	001a      	movs	r2, r3
 8001582:	2301      	movs	r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	1e5a      	subs	r2, r3, #1
 8001588:	4193      	sbcs	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	729a      	strb	r2, [r3, #10]
	output.overCurrError			= input[2] & (1 << 1);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	2302      	movs	r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	4193      	sbcs	r3, r2
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	72da      	strb	r2, [r3, #11]
	output.overVoltError			= input[2] & (1 << 3);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3302      	adds	r3, #2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	2308      	movs	r3, #8
 80015b0:	4013      	ands	r3, r2
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	4193      	sbcs	r3, r2
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	731a      	strb	r2, [r3, #12]
	output.overCurrLimit			= input[2] & (1 << 5);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3302      	adds	r3, #2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	001a      	movs	r2, r3
 80015c4:	2320      	movs	r3, #32
 80015c6:	4013      	ands	r3, r2
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	4193      	sbcs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	735a      	strb	r2, [r3, #13]

	output.motorSystemError 		= input[3] & (1 << 0);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3303      	adds	r3, #3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	1e5a      	subs	r2, r3, #1
 80015e0:	4193      	sbcs	r3, r2
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	739a      	strb	r2, [r3, #14]
	output.motorLock		 		= input[3] & (1 << 1);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3303      	adds	r3, #3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	001a      	movs	r2, r3
 80015f0:	2302      	movs	r3, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	4193      	sbcs	r3, r2
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	73da      	strb	r2, [r3, #15]
	output.hallSensorShort			= input[3] & (1 << 2);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	001a      	movs	r2, r3
 8001606:	2304      	movs	r3, #4
 8001608:	4013      	ands	r3, r2
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	4193      	sbcs	r3, r2
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	741a      	strb	r2, [r3, #16]
	output.hallSensorOpen			= input[3] & (1 << 3);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3303      	adds	r3, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	001a      	movs	r2, r3
 800161c:	2308      	movs	r3, #8
 800161e:	4013      	ands	r3, r2
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	4193      	sbcs	r3, r2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	745a      	strb	r2, [r3, #17]

	output.overHeatLevel			= input[4] & 0x3;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3304      	adds	r3, #4
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2203      	movs	r2, #3
 8001632:	4013      	ands	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	749a      	strb	r2, [r3, #18]

	return output;
 800163a:	46c0      	nop			; (mov r8, r8)
}
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>:

//Public Function Definitions
MITSUBA_DRIVER_RX_FRAME_2::MITSUBA_DRIVER_RX_FRAME_2(uint32_t message_id):
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_2, MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET>{message_id,subsystem_info::MOTORRX2_RL_MSG_LENGTH, true, true, false}
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2301      	movs	r3, #1
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	2205      	movs	r2, #5
 800165e:	f000 f87d 	bl	800175c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em+0x30>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
{}
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	08004c48 	.word	0x08004c48

08001678 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	0019      	movs	r1, r3
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	1c0a      	adds	r2, r1, #0
 800168c:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	1dbb      	adds	r3, r7, #6
 8001692:	781c      	ldrb	r4, [r3, #0]
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	2324      	movs	r3, #36	; 0x24
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2320      	movs	r3, #32
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	0023      	movs	r3, r4
 80016ac:	f000 f998 	bl	80019e0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb+0x48>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]
		{}
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b005      	add	sp, #20
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	08004c9c 	.word	0x08004c9c

080016c4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	0019      	movs	r1, r3
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	1c0a      	adds	r2, r1, #0
 80016d8:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	781c      	ldrb	r4, [r3, #0]
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	2324      	movs	r3, #36	; 0x24
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2320      	movs	r3, #32
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	0023      	movs	r3, r4
 80016f8:	f000 f972 	bl	80019e0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
		{}
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b005      	add	sp, #20
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	08004c84 	.word	0x08004c84

08001710 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	0019      	movs	r1, r3
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	1c0a      	adds	r2, r1, #0
 8001724:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	1dbb      	adds	r3, r7, #6
 800172a:	781c      	ldrb	r4, [r3, #0]
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	2324      	movs	r3, #36	; 0x24
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	2320      	movs	r3, #32
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	0023      	movs	r3, r4
 8001744:	f000 f94c 	bl	80019e0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETEC1Emhbbb+0x48>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]
		{}
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b005      	add	sp, #20
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	08004c6c 	.word	0x08004c6c

0800175c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b087      	sub	sp, #28
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	0019      	movs	r1, r3
 8001768:	1dfb      	adds	r3, r7, #7
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	1dbb      	adds	r3, r7, #6
 800176e:	1c0a      	adds	r2, r1, #0
 8001770:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	781c      	ldrb	r4, [r3, #0]
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	2324      	movs	r3, #36	; 0x24
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2320      	movs	r3, #32
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	0023      	movs	r3, r4
 8001790:	f000 f926 	bl	80019e0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb+0x48>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]
		{}
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b005      	add	sp, #20
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	08004c54 	.word	0x08004c54

080017a8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	46c6      	mov	lr, r8
 80017ac:	b500      	push	{lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3309      	adds	r3, #9
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2239      	movs	r2, #57	; 0x39
 80017be:	9101      	str	r1, [sp, #4]
 80017c0:	5c99      	ldrb	r1, [r3, r2]
 80017c2:	1898      	adds	r0, r3, r2
 80017c4:	7840      	ldrb	r0, [r0, #1]
 80017c6:	0200      	lsls	r0, r0, #8
 80017c8:	4301      	orrs	r1, r0
 80017ca:	1898      	adds	r0, r3, r2
 80017cc:	7880      	ldrb	r0, [r0, #2]
 80017ce:	0400      	lsls	r0, r0, #16
 80017d0:	4301      	orrs	r1, r0
 80017d2:	1898      	adds	r0, r3, r2
 80017d4:	78c0      	ldrb	r0, [r0, #3]
 80017d6:	0600      	lsls	r0, r0, #24
 80017d8:	4301      	orrs	r1, r0
 80017da:	2000      	movs	r0, #0
 80017dc:	4688      	mov	r8, r1
 80017de:	1899      	adds	r1, r3, r2
 80017e0:	7908      	ldrb	r0, [r1, #4]
 80017e2:	794c      	ldrb	r4, [r1, #5]
 80017e4:	0224      	lsls	r4, r4, #8
 80017e6:	4320      	orrs	r0, r4
 80017e8:	798c      	ldrb	r4, [r1, #6]
 80017ea:	0424      	lsls	r4, r4, #16
 80017ec:	4320      	orrs	r0, r4
 80017ee:	79c9      	ldrb	r1, [r1, #7]
 80017f0:	0609      	lsls	r1, r1, #24
 80017f2:	4301      	orrs	r1, r0
 80017f4:	2600      	movs	r6, #0
 80017f6:	000e      	movs	r6, r1
 80017f8:	1899      	adds	r1, r3, r2
 80017fa:	7a08      	ldrb	r0, [r1, #8]
 80017fc:	7a4c      	ldrb	r4, [r1, #9]
 80017fe:	0224      	lsls	r4, r4, #8
 8001800:	4320      	orrs	r0, r4
 8001802:	7a8c      	ldrb	r4, [r1, #10]
 8001804:	0424      	lsls	r4, r4, #16
 8001806:	4320      	orrs	r0, r4
 8001808:	7ac9      	ldrb	r1, [r1, #11]
 800180a:	0609      	lsls	r1, r1, #24
 800180c:	4301      	orrs	r1, r0
 800180e:	2500      	movs	r5, #0
 8001810:	000d      	movs	r5, r1
 8001812:	1899      	adds	r1, r3, r2
 8001814:	7b08      	ldrb	r0, [r1, #12]
 8001816:	7b4c      	ldrb	r4, [r1, #13]
 8001818:	0224      	lsls	r4, r4, #8
 800181a:	4320      	orrs	r0, r4
 800181c:	7b8c      	ldrb	r4, [r1, #14]
 800181e:	0424      	lsls	r4, r4, #16
 8001820:	4320      	orrs	r0, r4
 8001822:	7bc9      	ldrb	r1, [r1, #15]
 8001824:	0609      	lsls	r1, r1, #24
 8001826:	4301      	orrs	r1, r0
 8001828:	2400      	movs	r4, #0
 800182a:	000c      	movs	r4, r1
 800182c:	2110      	movs	r1, #16
 800182e:	189b      	adds	r3, r3, r2
 8001830:	185a      	adds	r2, r3, r1
 8001832:	466b      	mov	r3, sp
 8001834:	0018      	movs	r0, r3
 8001836:	0011      	movs	r1, r2
 8001838:	2303      	movs	r3, #3
 800183a:	001a      	movs	r2, r3
 800183c:	f003 f980 	bl	8004b40 <memcpy>
 8001840:	4640      	mov	r0, r8
 8001842:	0031      	movs	r1, r6
 8001844:	002a      	movs	r2, r5
 8001846:	0023      	movs	r3, r4
 8001848:	f7ff fd1a 	bl	8001280 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>
	}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bc80      	pop	{r7}
 8001854:	46b8      	mov	r8, r7
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001858 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_137MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3309      	adds	r3, #9
 8001864:	001c      	movs	r4, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223a      	movs	r2, #58	; 0x3a
 800186a:	5a99      	ldrh	r1, [r3, r2]
 800186c:	1898      	adds	r0, r3, r2
 800186e:	8840      	ldrh	r0, [r0, #2]
 8001870:	0400      	lsls	r0, r0, #16
 8001872:	4301      	orrs	r1, r0
 8001874:	2500      	movs	r5, #0
 8001876:	000d      	movs	r5, r1
 8001878:	1899      	adds	r1, r3, r2
 800187a:	8888      	ldrh	r0, [r1, #4]
 800187c:	88c9      	ldrh	r1, [r1, #6]
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	4308      	orrs	r0, r1
 8001882:	2100      	movs	r1, #0
 8001884:	0001      	movs	r1, r0
 8001886:	189b      	adds	r3, r3, r2
 8001888:	891a      	ldrh	r2, [r3, #8]
 800188a:	895b      	ldrh	r3, [r3, #10]
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	4313      	orrs	r3, r2
 8001890:	2200      	movs	r2, #0
 8001892:	001a      	movs	r2, r3
 8001894:	0023      	movs	r3, r4
 8001896:	0028      	movs	r0, r5
 8001898:	f7ff fbb2 	bl	8001000 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>
	}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}

080018a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3309      	adds	r3, #9
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	223a      	movs	r2, #58	; 0x3a
 80018b6:	9100      	str	r1, [sp, #0]
 80018b8:	5a99      	ldrh	r1, [r3, r2]
 80018ba:	1898      	adds	r0, r3, r2
 80018bc:	8840      	ldrh	r0, [r0, #2]
 80018be:	0400      	lsls	r0, r0, #16
 80018c0:	4301      	orrs	r1, r0
 80018c2:	2600      	movs	r6, #0
 80018c4:	000e      	movs	r6, r1
 80018c6:	1899      	adds	r1, r3, r2
 80018c8:	8888      	ldrh	r0, [r1, #4]
 80018ca:	88c9      	ldrh	r1, [r1, #6]
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	4301      	orrs	r1, r0
 80018d0:	2500      	movs	r5, #0
 80018d2:	000d      	movs	r5, r1
 80018d4:	1899      	adds	r1, r3, r2
 80018d6:	8908      	ldrh	r0, [r1, #8]
 80018d8:	8949      	ldrh	r1, [r1, #10]
 80018da:	0409      	lsls	r1, r1, #16
 80018dc:	4301      	orrs	r1, r0
 80018de:	2400      	movs	r4, #0
 80018e0:	000c      	movs	r4, r1
 80018e2:	189b      	adds	r3, r3, r2
 80018e4:	899a      	ldrh	r2, [r3, #12]
 80018e6:	89db      	ldrh	r3, [r3, #14]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	431a      	orrs	r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	0013      	movs	r3, r2
 80018f0:	0030      	movs	r0, r6
 80018f2:	0029      	movs	r1, r5
 80018f4:	0022      	movs	r2, r4
 80018f6:	f7ff f9ff 	bl	8000cf8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b003      	add	sp, #12
 8001900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001902 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3309      	adds	r3, #9
 800190e:	001c      	movs	r4, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2239      	movs	r2, #57	; 0x39
 8001914:	5c99      	ldrb	r1, [r3, r2]
 8001916:	1898      	adds	r0, r3, r2
 8001918:	7840      	ldrb	r0, [r0, #1]
 800191a:	0200      	lsls	r0, r0, #8
 800191c:	4301      	orrs	r1, r0
 800191e:	189b      	adds	r3, r3, r2
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	430b      	orrs	r3, r1
 8001926:	001a      	movs	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	0212      	lsls	r2, r2, #8
 800192c:	0a12      	lsrs	r2, r2, #8
 800192e:	0e1b      	lsrs	r3, r3, #24
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4313      	orrs	r3, r2
 8001934:	0021      	movs	r1, r4
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff f997 	bl	8000c6a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>
	}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b003      	add	sp, #12
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b08d      	sub	sp, #52	; 0x34
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2100      	movs	r1, #0
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fad3 	bl	8002efc <HAL_CAN_GetRxFifoFillLevel>
 8001956:	0003      	movs	r3, r0
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	4193      	sbcs	r3, r2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d02e      	beq.n	80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8001962:	2308      	movs	r3, #8
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2410      	movs	r4, #16
 8001968:	193a      	adds	r2, r7, r4
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	2100      	movs	r1, #0
 800196e:	f001 f9a9 	bl	8002cc4 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8001972:	0022      	movs	r2, r4
 8001974:	18bb      	adds	r3, r7, r2
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 800197c:	18bb      	adds	r3, r7, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e002      	b.n	8001988 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001982:	2310      	movs	r3, #16
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 f863 	bl	8001a54 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 800198e:	0003      	movs	r3, r0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0d9      	beq.n	800194c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	7a1b      	ldrb	r3, [r3, #8]
 800199c:	001a      	movs	r2, r3
 800199e:	2310      	movs	r3, #16
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1d1      	bne.n	800194c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 80019a8:	2308      	movs	r3, #8
 80019aa:	18fa      	adds	r2, r7, r3
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	0011      	movs	r1, r2
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f9b3 	bl	8001d1c <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 f8aa 	bl	8001b12 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80019be:	e7c5      	b.n	800194c <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b00d      	add	sp, #52	; 0x34
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <CEC_CAN_IRQHandler+0x14>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 fae9 	bl	8002fa6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	20000308 	.word	0x20000308

080019e0 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	0019      	movs	r1, r3
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	1dbb      	adds	r3, r7, #6
 80019f2:	1c0a      	adds	r2, r1, #0
 80019f4:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1dfa      	adds	r2, r7, #7
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	721a      	strb	r2, [r3, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3312      	adds	r3, #18
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f997 	bl	8001d42 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1dba      	adds	r2, r7, #6
 8001a18:	2130      	movs	r1, #48	; 0x30
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	545a      	strb	r2, [r3, r1]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	2318      	movs	r3, #24
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2131      	movs	r1, #49	; 0x31
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	5453      	strb	r3, [r2, r1]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	221c      	movs	r2, #28
 8001a2e:	18ba      	adds	r2, r7, r2
 8001a30:	2132      	movs	r1, #50	; 0x32
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	545a      	strb	r2, [r3, r1]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2238      	movs	r2, #56	; 0x38
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]
{}
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	08004ca8 	.word	0x08004ca8

08001a54 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8001a60:	0011      	movs	r1, r2
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fa52 	bl	8001f0c <_ZN14RX_BINARY_TREE11FindElementEm>
 8001a68:	0003      	movs	r3, r0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	20000290 	.word	0x20000290

08001a78 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2238      	movs	r2, #56	; 0x38
 8001a8c:	5c9b      	ldrb	r3, [r3, r2]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4053      	eors	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x4c>
    {
        bool success = SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 8001a98:	250f      	movs	r5, #15
 8001a9a:	197c      	adds	r4, r7, r5
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x54>)
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fa14 	bl	8001ed0 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	7023      	strb	r3, [r4, #0]
        // TODO figure out a way to make this better
		#ifdef DEBUG
        	if(!success)
 8001aac:	197b      	adds	r3, r7, r5
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4053      	eors	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d000      	beq.n	8001abc <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x44>
        	{
        		__BKPT(0);
 8001aba:	be00      	bkpt	0x0000
        	}
			  // If you are at this breakpoint then your number of messages is incorrect
		#endif
        isReceiving = true;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]
    } 
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	20000290 	.word	0x20000290

08001ad0 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2231      	movs	r2, #49	; 0x31
 8001adc:	5c9b      	ldrb	r3, [r3, r2]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d113      	bne.n	8001b0a <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	5c9b      	ldrb	r3, [r3, r2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f8c4 	bl	8001c7c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 8001af4:	e009      	b.n	8001b0a <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	0010      	movs	r0, r2
 8001b00:	4798      	blx	r3
	    this->sendTransmitBufferData();
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 f877 	bl	8001bf8 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	0010      	movs	r0, r2
 8001b2a:	4798      	blx	r3
    }
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8001b3e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b42:	2206      	movs	r2, #6
 8001b44:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b54:	22c0      	movs	r2, #192	; 0xc0
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	0352      	lsls	r2, r2, #13
 8001b60:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fd03 	bl	8002594 <HAL_CAN_Init>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	4193      	sbcs	r3, r2
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 8001b9a:	f7fe fdd1 	bl	8000740 <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001b9e:	003b      	movs	r3, r7
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 8001ba4:	003b      	movs	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001baa:	003b      	movs	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8001bb0:	003b      	movs	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 8001bb6:	003b      	movs	r3, r7
 8001bb8:	2201      	movs	r2, #1
 8001bba:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 8001bbc:	003b      	movs	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001bc8:	003a      	movs	r2, r7
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001bcc:	0011      	movs	r1, r2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fe2a 	bl	8002828 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f001 f9ba 	bl	8002f52 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 ff13 	bl	8002a0c <HAL_CAN_Start>
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b00a      	add	sp, #40	; 0x28
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	20000308 	.word	0x20000308
 8001bf4:	40006400 	.word	0x40006400

08001bf8 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d032      	beq.n	8001c6e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f001 f822 	bl	8002c54 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c10:	0003      	movs	r3, r0
 8001c12:	425a      	negs	r2, r3
 8001c14:	4153      	adcs	r3, r2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d000      	beq.n	8001c1e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8001c1c:	e7f4      	b.n	8001c08 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8001c1e:	210c      	movs	r1, #12
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7a1b      	ldrb	r3, [r3, #8]
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2230      	movs	r2, #48	; 0x30
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2204      	movs	r2, #4
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e007      	b.n	8001c5a <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	210c      	movs	r1, #12
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3309      	adds	r3, #9
 8001c5e:	001a      	movs	r2, r3
 8001c60:	2324      	movs	r3, #36	; 0x24
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	210c      	movs	r1, #12
 8001c66:	1879      	adds	r1, r7, r1
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001c6a:	f000 ff15 	bl	8002a98 <HAL_CAN_AddTxMessage>
	}
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b00a      	add	sp, #40	; 0x28
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20000308 	.word	0x20000308

08001c7c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d032      	beq.n	8001cf2 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 ffe0 	bl	8002c54 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c94:	0003      	movs	r3, r0
 8001c96:	425a      	negs	r2, r3
 8001c98:	4153      	adcs	r3, r2
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d000      	beq.n	8001ca2 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 8001ca0:	e7f4      	b.n	8001c8c <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 8001ca2:	210c      	movs	r1, #12
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7a1b      	ldrb	r3, [r3, #8]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2230      	movs	r2, #48	; 0x30
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2204      	movs	r2, #4
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	e007      	b.n	8001cde <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	210c      	movs	r1, #12
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3309      	adds	r3, #9
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	2324      	movs	r3, #36	; 0x24
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	210c      	movs	r1, #12
 8001cea:	1879      	adds	r1, r7, r1
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001cee:	f000 fed3 	bl	8002a98 <HAL_CAN_AddTxMessage>
	}
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b00a      	add	sp, #40	; 0x28
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000308 	.word	0x20000308

08001d00 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3312      	adds	r3, #18
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f82a 	bl	8001d66 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8001d12:	0003      	movs	r3, r0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3312      	adds	r3, #18
 8001d2a:	240f      	movs	r4, #15
 8001d2c:	193a      	adds	r2, r7, r4
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 f82d 	bl	8001d90 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b005      	add	sp, #20
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	831a      	strh	r2, [r3, #24]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	835a      	strh	r2, [r3, #26]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	771a      	strb	r2, [r3, #28]
    {}
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8b1a      	ldrh	r2, [r3, #24]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8b5b      	ldrh	r3, [r3, #26]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d105      	bne.n	8001d86 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7f1b      	ldrb	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8001d86:	2300      	movs	r3, #0
    }
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8b5a      	ldrh	r2, [r3, #26]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8b1b      	ldrh	r3, [r3, #24]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10d      	bne.n	8001dc4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	7f1b      	ldrb	r3, [r3, #28]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4053      	eors	r3, r2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d025      	beq.n	8001e08 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
            if(success)
 8001dc2:	e021      	b.n	8001e08 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8b19      	ldrh	r1, [r3, #24]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f819 	bl	8001e10 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8b1b      	ldrh	r3, [r3, #24]
 8001de2:	3301      	adds	r3, #1
 8001de4:	2103      	movs	r1, #3
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7fe fafe 	bl	80003e8 <__aeabi_idivmod>
 8001dec:	000b      	movs	r3, r1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8b1a      	ldrh	r2, [r3, #24]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8b5b      	ldrh	r3, [r3, #26]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d103      	bne.n	8001e08 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	771a      	strb	r2, [r3, #28]
    }
 8001e06:	e7ff      	b.n	8001e08 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	1c0a      	adds	r2, r1, #0
 8001e20:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8001e22:	2316      	movs	r3, #22
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	2416      	movs	r4, #22
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d814      	bhi.n	8001e5e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	18d1      	adds	r1, r2, r3
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	7808      	ldrb	r0, [r1, #0]
 8001e48:	68f9      	ldr	r1, [r7, #12]
 8001e4a:	00d2      	lsls	r2, r2, #3
 8001e4c:	188a      	adds	r2, r1, r2
 8001e4e:	1c01      	adds	r1, r0, #0
 8001e50:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	3201      	adds	r2, #1
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e7e5      	b.n	8001e2a <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b007      	add	sp, #28
 8001e64:	bd90      	pop	{r4, r7, pc}
	...

08001e68 <_Z41__static_initialization_and_destruction_0ii>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d103      	bne.n	8001e88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 f814 	bl	8001eb0 <_ZN14RX_BINARY_TREEC1Ev>
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	0000ffff 	.word	0x0000ffff
 8001e94:	20000290 	.word	0x20000290

08001e98 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ffe1 	bl	8001e68 <_Z41__static_initialization_and_destruction_0ii>
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	0000ffff 	.word	0x0000ffff

08001eb0 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	671a      	str	r2, [r3, #112]	; 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2274      	movs	r2, #116	; 0x74
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5299      	strh	r1, [r3, r2]
{}
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

bool RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2274      	movs	r2, #116	; 0x74
 8001ede:	5a9b      	ldrh	r3, [r3, r2]
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d80e      	bhi.n	8001f02 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
    {
        root = insert(root,new_element);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f9a9 	bl	800224a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	671a      	str	r2, [r3, #112]	; 0x70
        return true;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x34>
    }
    return false;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f80d 	bl	8001f3e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e001      	b.n	8001f36 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	e034      	b.n	8001fbe <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0011      	movs	r1, r2
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f88b 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f60:	0002      	movs	r2, r0
 8001f62:	2301      	movs	r3, #1
 8001f64:	1c19      	adds	r1, r3, #0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	db01      	blt.n	8001f70 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	1c19      	adds	r1, r3, #0
 8001f70:	b2cb      	uxtb	r3, r1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff ffdd 	bl	8001f3e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001f84:	0003      	movs	r3, r0
 8001f86:	e01a      	b.n	8001fbe <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f871 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001f94:	0002      	movs	r2, r0
 8001f96:	2301      	movs	r3, #1
 8001f98:	1c19      	adds	r1, r3, #0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dc01      	bgt.n	8001fa4 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	1c19      	adds	r1, r3, #0
 8001fa4:	b2cb      	uxtb	r3, r1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7ff ffc3 	bl	8001f3e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	e000      	b.n	8001fbe <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2274      	movs	r2, #116	; 0x74
 8001fd4:	5a9b      	ldrh	r3, [r3, r2]
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2274      	movs	r2, #116	; 0x74
 8001fe4:	5a9b      	ldrh	r3, [r3, r2]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	18d3      	adds	r3, r2, r3
 8001fec:	3304      	adds	r3, #4
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2274      	movs	r2, #116	; 0x74
 8001ff6:	5a9b      	ldrh	r3, [r3, r2]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	3308      	adds	r3, #8
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2274      	movs	r2, #116	; 0x74
 8002008:	5a9b      	ldrh	r3, [r3, r2]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	18d3      	adds	r3, r2, r3
 8002010:	330c      	adds	r3, #12
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2274      	movs	r2, #116	; 0x74
 800201a:	5a9b      	ldrh	r3, [r3, r2]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	b290      	uxth	r0, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	2174      	movs	r1, #116	; 0x74
 8002024:	5250      	strh	r0, [r2, r1]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	18d3      	adds	r3, r2, r3
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d901      	bls.n	800204c <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	e000      	b.n	800204e <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 800204c:	687b      	ldr	r3, [r7, #4]
}  
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 8002066:	2300      	movs	r3, #0
 8002068:	e001      	b.n	800206e <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	7b1b      	ldrb	r3, [r3, #12]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8002086:	2301      	movs	r3, #1
 8002088:	425b      	negs	r3, r3
 800208a:	e009      	b.n	80020a0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	e002      	b.n	80020a0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80020b8:	2301      	movs	r3, #1
 80020ba:	425b      	negs	r3, r3
 80020bc:	e001      	b.n	80020c2 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 80020ca:	b590      	push	{r4, r7, lr}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ffae 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80020fa:	0003      	movs	r3, r0
 80020fc:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ffa5 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800210c:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 800210e:	001a      	movs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0021      	movs	r1, r4
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff ff8d 	bl	8002034 <_ZN14RX_BINARY_TREE3maxEmm>
 800211a:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff ff91 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002134:	0003      	movs	r3, r0
 8002136:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff88 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002146:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8002148:	001a      	movs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0021      	movs	r1, r4
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff ff70 	bl	8002034 <_ZN14RX_BINARY_TREE3maxEmm>
 8002154:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8002160:	68fb      	ldr	r3, [r7, #12]
} 
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b005      	add	sp, #20
 8002168:	bd90      	pop	{r4, r7, pc}

0800216a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 800216a:	b590      	push	{r4, r7, lr}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0011      	movs	r1, r2
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ff5e 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800219a:	0003      	movs	r3, r0
 800219c:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0011      	movs	r1, r2
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7ff ff55 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80021ac:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 80021ae:	001a      	movs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0021      	movs	r1, r4
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff ff3d 	bl	8002034 <_ZN14RX_BINARY_TREE3maxEmm>
 80021ba:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff ff41 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80021d4:	0003      	movs	r3, r0
 80021d6:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ff38 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80021e6:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 80021e8:	001a      	movs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0021      	movs	r1, r4
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7ff ff20 	bl	8002034 <_ZN14RX_BINARY_TREE3maxEmm>
 80021f4:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8002200:	68fb      	ldr	r3, [r7, #12]
}  
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b005      	add	sp, #20
 8002208:	bd90      	pop	{r4, r7, pc}

0800220a <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 800221a:	2300      	movs	r3, #0
 800221c:	e011      	b.n	8002242 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0011      	movs	r1, r2
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ff15 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800222c:	0003      	movs	r3, r0
 800222e:	001c      	movs	r4, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff0c 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 800223e:	0003      	movs	r3, r0
 8002240:	1ae3      	subs	r3, r4, r3
}  
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b003      	add	sp, #12
 8002248:	bd90      	pop	{r4, r7, pc}

0800224a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0011      	movs	r1, r2
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff feaf 	bl	8001fc6 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 8002268:	0003      	movs	r3, r0
 800226a:	e101      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0011      	movs	r1, r2
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff ff18 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002278:	0004      	movs	r4, r0
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fef8 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002286:	0003      	movs	r3, r0
 8002288:	2201      	movs	r2, #1
 800228a:	429c      	cmp	r4, r3
 800228c:	db01      	blt.n	8002292 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 800228e:	2300      	movs	r3, #0
 8002290:	1c1a      	adds	r2, r3, #0
 8002292:	b2d3      	uxtb	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff ffd2 	bl	800224a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80022a6:	0002      	movs	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e022      	b.n	80022f4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff fef7 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80022ba:	0004      	movs	r4, r0
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff fed7 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80022c8:	0003      	movs	r3, r0
 80022ca:	2201      	movs	r2, #1
 80022cc:	429c      	cmp	r4, r3
 80022ce:	dc01      	bgt.n	80022d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 80022d0:	2300      	movs	r3, #0
 80022d2:	1c1a      	adds	r2, r3, #0
 80022d4:	b2d3      	uxtb	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7ff ffb1 	bl	800224a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80022e8:	0002      	movs	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e001      	b.n	80022f4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	e0bd      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff feaa 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002302:	0003      	movs	r3, r0
 8002304:	001c      	movs	r4, r3
                        height(node->right));  
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0011      	movs	r1, r2
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff fea1 	bl	8002056 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002314:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 8002316:	001a      	movs	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	0021      	movs	r1, r4
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff fe89 	bl	8002034 <_ZN14RX_BINARY_TREE3maxEmm>
 8002322:	0003      	movs	r3, r0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ff68 	bl	800220a <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 800233a:	0003      	movs	r3, r0
 800233c:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b01      	cmp	r3, #1
 8002342:	dd12      	ble.n	800236a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f7ff feac 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002350:	0004      	movs	r4, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	0011      	movs	r1, r2
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff fe8b 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002360:	0003      	movs	r3, r0
 8002362:	429c      	cmp	r4, r3
 8002364:	da01      	bge.n	800236a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	0011      	movs	r1, r2
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff fea7 	bl	80020ca <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 800237c:	0003      	movs	r3, r0
 800237e:	e077      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	da12      	bge.n	80023ac <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fe8b 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002392:	0004      	movs	r4, r0
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff fe6a 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80023a2:	0003      	movs	r3, r0
 80023a4:	429c      	cmp	r4, r3
 80023a6:	dd01      	ble.n	80023ac <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0011      	movs	r1, r2
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff fed6 	bl	800216a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80023be:	0003      	movs	r3, r0
 80023c0:	e056      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	dd12      	ble.n	80023ee <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0011      	movs	r1, r2
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7ff fe6a 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80023d4:	0004      	movs	r4, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f7ff fe49 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80023e4:	0003      	movs	r3, r0
 80023e6:	429c      	cmp	r4, r3
 80023e8:	dd01      	ble.n	80023ee <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff feb4 	bl	800216a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8002402:	0002      	movs	r2, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	0011      	movs	r1, r2
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fe5b 	bl	80020ca <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8002414:	0003      	movs	r3, r0
 8002416:	e02b      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	da12      	bge.n	8002444 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff fe3f 	bl	80020a8 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800242a:	0004      	movs	r4, r0
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fe1e 	bl	8002076 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800243a:	0003      	movs	r3, r0
 800243c:	429c      	cmp	r4, r3
 800243e:	da01      	bge.n	8002444 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d011      	beq.n	800246e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff fe39 	bl	80020ca <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8002458:	0002      	movs	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff fe80 	bl	800216a <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 800246a:	0003      	movs	r3, r0
 800246c:	e000      	b.n	8002470 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 800246e:	68bb      	ldr	r3, [r7, #8]
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b007      	add	sp, #28
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800247a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0b      	ldr	r4, [pc, #44]	; (80024c4 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024a2:	f7fe fbdd 	bl	8000c60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024a6:	f002 fb27 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024aa:	f7fd ffa3 	bl	80003f4 <main>

080024ae <LoopForever>:

LoopForever:
    b LoopForever
 80024ae:	e7fe      	b.n	80024ae <LoopForever>
  ldr   r0, =_estack
 80024b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024bc:	08004cbc 	.word	0x08004cbc
  ldr r2, =_sbss
 80024c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024c4:	20000374 	.word	0x20000374

080024c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC1_COMP_IRQHandler>
	...

080024cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_Init+0x24>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_Init+0x24>)
 80024d6:	2110      	movs	r1, #16
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80024dc:	2000      	movs	r0, #0
 80024de:	f000 f809 	bl	80024f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e2:	f7fe fad7 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_InitTick+0x5c>)
 80024fe:	681c      	ldr	r4, [r3, #0]
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_InitTick+0x60>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	0019      	movs	r1, r3
 8002506:	23fa      	movs	r3, #250	; 0xfa
 8002508:	0098      	lsls	r0, r3, #2
 800250a:	f7fd fdfd 	bl	8000108 <__udivsi3>
 800250e:	0003      	movs	r3, r0
 8002510:	0019      	movs	r1, r3
 8002512:	0020      	movs	r0, r4
 8002514:	f7fd fdf8 	bl	8000108 <__udivsi3>
 8002518:	0003      	movs	r3, r0
 800251a:	0018      	movs	r0, r3
 800251c:	f001 f835 	bl	800358a <HAL_SYSTICK_Config>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e00f      	b.n	8002548 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d80b      	bhi.n	8002546 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	2301      	movs	r3, #1
 8002532:	425b      	negs	r3, r3
 8002534:	2200      	movs	r2, #0
 8002536:	0018      	movs	r0, r3
 8002538:	f001 f802 	bl	8003540 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_InitTick+0x64>)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b003      	add	sp, #12
 800254e:	bd90      	pop	{r4, r7, pc}
 8002550:	20000004 	.word	0x20000004
 8002554:	2000000c 	.word	0x2000000c
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	001a      	movs	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	18d2      	adds	r2, r2, r3
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_IncTick+0x20>)
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	2000000c 	.word	0x2000000c
 800257c:	2000036c 	.word	0x2000036c

08002580 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	2000036c 	.word	0x2000036c

08002594 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e11f      	b.n	80027e6 <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d132      	bne.n	8002618 <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a8e      	ldr	r2, [pc, #568]	; (80027f0 <HAL_CAN_Init+0x25c>)
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a8e      	ldr	r2, [pc, #568]	; (80027f4 <HAL_CAN_Init+0x260>)
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a8d      	ldr	r2, [pc, #564]	; (80027f8 <HAL_CAN_Init+0x264>)
 80025c2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a8d      	ldr	r2, [pc, #564]	; (80027fc <HAL_CAN_Init+0x268>)
 80025c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a8c      	ldr	r2, [pc, #560]	; (8002800 <HAL_CAN_Init+0x26c>)
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a8c      	ldr	r2, [pc, #560]	; (8002804 <HAL_CAN_Init+0x270>)
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a8b      	ldr	r2, [pc, #556]	; (8002808 <HAL_CAN_Init+0x274>)
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a8b      	ldr	r2, [pc, #556]	; (800280c <HAL_CAN_Init+0x278>)
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a8a      	ldr	r2, [pc, #552]	; (8002810 <HAL_CAN_Init+0x27c>)
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a8a      	ldr	r2, [pc, #552]	; (8002814 <HAL_CAN_Init+0x280>)
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a89      	ldr	r2, [pc, #548]	; (8002818 <HAL_CAN_Init+0x284>)
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a89      	ldr	r2, [pc, #548]	; (800281c <HAL_CAN_Init+0x288>)
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a88      	ldr	r2, [pc, #544]	; (8002820 <HAL_CAN_Init+0x28c>)
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a86      	ldr	r2, [pc, #536]	; (8002824 <HAL_CAN_Init+0x290>)
 800260c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	0010      	movs	r0, r2
 8002616:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2101      	movs	r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002628:	f7ff ffaa 	bl	8002580 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002630:	e013      	b.n	800265a <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002632:	f7ff ffa5 	bl	8002580 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b0a      	cmp	r3, #10
 800263e:	d90c      	bls.n	800265a <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	0292      	lsls	r2, r2, #10
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	2105      	movs	r1, #5
 8002654:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0c5      	b.n	80027e6 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	d0e5      	beq.n	8002632 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2102      	movs	r1, #2
 8002672:	438a      	bics	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002676:	f7ff ff83 	bl	8002580 <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800267e:	e013      	b.n	80026a8 <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002680:	f7ff ff7e 	bl	8002580 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b0a      	cmp	r3, #10
 800268c:	d90c      	bls.n	80026a8 <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	0292      	lsls	r2, r2, #10
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	2105      	movs	r1, #5
 80026a2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09e      	b.n	80027e6 <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d1e5      	bne.n	8002680 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d108      	bne.n	80026ce <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	438a      	bics	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e5b      	ldrb	r3, [r3, #25]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	438a      	bics	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e9b      	ldrb	r3, [r3, #26]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2120      	movs	r1, #32
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2120      	movs	r1, #32
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7edb      	ldrb	r3, [r3, #27]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2110      	movs	r1, #16
 8002746:	438a      	bics	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2110      	movs	r1, #16
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7f1b      	ldrb	r3, [r3, #28]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d108      	bne.n	8002776 <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2108      	movs	r1, #8
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e007      	b.n	8002786 <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2108      	movs	r1, #8
 8002782:	438a      	bics	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7f5b      	ldrb	r3, [r3, #29]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2104      	movs	r1, #4
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e007      	b.n	80027b0 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2104      	movs	r1, #4
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	0011      	movs	r1, r2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	2101      	movs	r1, #1
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	08001945 	.word	0x08001945
 80027f4:	08003389 	.word	0x08003389
 80027f8:	08003399 	.word	0x08003399
 80027fc:	080033a9 	.word	0x080033a9
 8002800:	08003329 	.word	0x08003329
 8002804:	08003339 	.word	0x08003339
 8002808:	08003349 	.word	0x08003349
 800280c:	08003359 	.word	0x08003359
 8002810:	08003369 	.word	0x08003369
 8002814:	08003379 	.word	0x08003379
 8002818:	080033b9 	.word	0x080033b9
 800281c:	080033c9 	.word	0x080033c9
 8002820:	080033d9 	.word	0x080033d9
 8002824:	08000add 	.word	0x08000add

08002828 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002838:	2013      	movs	r0, #19
 800283a:	183b      	adds	r3, r7, r0
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	2120      	movs	r1, #32
 8002840:	5c52      	ldrb	r2, [r2, r1]
 8002842:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002844:	0002      	movs	r2, r0
 8002846:	18bb      	adds	r3, r7, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d004      	beq.n	8002858 <HAL_CAN_ConfigFilter+0x30>
 800284e:	18bb      	adds	r3, r7, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d000      	beq.n	8002858 <HAL_CAN_ConfigFilter+0x30>
 8002856:	e0cd      	b.n	80029f4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	58d3      	ldr	r3, [r2, r3]
 8002860:	2201      	movs	r2, #1
 8002862:	431a      	orrs	r2, r3
 8002864:	0011      	movs	r1, r2
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	221f      	movs	r2, #31
 8002874:	4013      	ands	r3, r2
 8002876:	2201      	movs	r2, #1
 8002878:	409a      	lsls	r2, r3
 800287a:	0013      	movs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	2387      	movs	r3, #135	; 0x87
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	58d3      	ldr	r3, [r2, r3]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	43d2      	mvns	r2, r2
 800288a:	401a      	ands	r2, r3
 800288c:	0011      	movs	r1, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	2387      	movs	r3, #135	; 0x87
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d129      	bne.n	80028f2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	2383      	movs	r3, #131	; 0x83
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	58d3      	ldr	r3, [r2, r3]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	43d2      	mvns	r2, r2
 80028aa:	401a      	ands	r2, r3
 80028ac:	0011      	movs	r1, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	2383      	movs	r3, #131	; 0x83
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028c8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3248      	adds	r2, #72	; 0x48
 80028ce:	00d2      	lsls	r2, r2, #3
 80028d0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	3348      	adds	r3, #72	; 0x48
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	18cb      	adds	r3, r1, r3
 80028ee:	3304      	adds	r3, #4
 80028f0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d128      	bne.n	800294c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	2383      	movs	r3, #131	; 0x83
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	58d2      	ldr	r2, [r2, r3]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	431a      	orrs	r2, r3
 8002906:	0011      	movs	r1, r2
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	2383      	movs	r3, #131	; 0x83
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002922:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3248      	adds	r2, #72	; 0x48
 8002928:	00d2      	lsls	r2, r2, #3
 800292a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800293e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	3348      	adds	r3, #72	; 0x48
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	18cb      	adds	r3, r1, r3
 8002948:	3304      	adds	r3, #4
 800294a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10c      	bne.n	800296e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	2381      	movs	r3, #129	; 0x81
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	58d3      	ldr	r3, [r2, r3]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	43d2      	mvns	r2, r2
 8002960:	401a      	ands	r2, r3
 8002962:	0011      	movs	r1, r2
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	2381      	movs	r3, #129	; 0x81
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	50d1      	str	r1, [r2, r3]
 800296c:	e00a      	b.n	8002984 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	2381      	movs	r3, #129	; 0x81
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	58d2      	ldr	r2, [r2, r3]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	431a      	orrs	r2, r3
 800297a:	0011      	movs	r1, r2
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	2381      	movs	r3, #129	; 0x81
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10c      	bne.n	80029a6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	2385      	movs	r3, #133	; 0x85
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	58d3      	ldr	r3, [r2, r3]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	43d2      	mvns	r2, r2
 8002998:	401a      	ands	r2, r3
 800299a:	0011      	movs	r1, r2
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	2385      	movs	r3, #133	; 0x85
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	50d1      	str	r1, [r2, r3]
 80029a4:	e00a      	b.n	80029bc <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	2385      	movs	r3, #133	; 0x85
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	58d2      	ldr	r2, [r2, r3]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	0011      	movs	r1, r2
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	2385      	movs	r3, #133	; 0x85
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10a      	bne.n	80029da <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	2387      	movs	r3, #135	; 0x87
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	58d2      	ldr	r2, [r2, r3]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	0011      	movs	r1, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	2387      	movs	r3, #135	; 0x87
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	58d3      	ldr	r3, [r2, r3]
 80029e2:	2201      	movs	r2, #1
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e007      	b.n	8002a04 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	02d2      	lsls	r2, r2, #11
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
  }
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d12f      	bne.n	8002a80 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	2102      	movs	r1, #2
 8002a26:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a38:	f7ff fda2 	bl	8002580 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a40:	e013      	b.n	8002a6a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a42:	f7ff fd9d 	bl	8002580 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b0a      	cmp	r3, #10
 8002a4e:	d90c      	bls.n	8002a6a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0292      	lsls	r2, r2, #10
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	2105      	movs	r1, #5
 8002a64:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e012      	b.n	8002a90 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d1e5      	bne.n	8002a42 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e007      	b.n	8002a90 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	0312      	lsls	r2, r2, #12
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
  }
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa6:	201f      	movs	r0, #31
 8002aa8:	183b      	adds	r3, r7, r0
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	2120      	movs	r1, #32
 8002aae:	5c52      	ldrb	r2, [r2, r1]
 8002ab0:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aba:	183b      	adds	r3, r7, r0
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d004      	beq.n	8002acc <HAL_CAN_AddTxMessage+0x34>
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d000      	beq.n	8002acc <HAL_CAN_AddTxMessage+0x34>
 8002aca:	e0b7      	b.n	8002c3c <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	04db      	lsls	r3, r3, #19
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d10a      	bne.n	8002aec <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ade:	d105      	bne.n	8002aec <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	055b      	lsls	r3, r3, #21
 8002ae6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ae8:	d100      	bne.n	8002aec <HAL_CAN_AddTxMessage+0x54>
 8002aea:	e09e      	b.n	8002c2a <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	0e1b      	lsrs	r3, r3, #24
 8002af0:	2203      	movs	r2, #3
 8002af2:	4013      	ands	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d908      	bls.n	8002b0e <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0412      	lsls	r2, r2, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e09e      	b.n	8002c4c <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10c      	bne.n	8002b3a <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	3218      	adds	r2, #24
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	50d1      	str	r1, [r2, r3]
 8002b38:	e00f      	b.n	8002b5a <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b44:	431a      	orrs	r2, r3
 8002b46:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002b50:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	3218      	adds	r2, #24
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3318      	adds	r3, #24
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	18cb      	adds	r3, r1, r3
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	7d1b      	ldrb	r3, [r3, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d112      	bne.n	8002b9c <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	3304      	adds	r3, #4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3318      	adds	r3, #24
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	18cb      	adds	r3, r1, r3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	061a      	lsls	r2, r3, #24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3306      	adds	r3, #6
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3305      	adds	r3, #5
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	23c6      	movs	r3, #198	; 0xc6
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	0109      	lsls	r1, r1, #4
 8002bce:	1841      	adds	r1, r0, r1
 8002bd0:	18cb      	adds	r3, r1, r3
 8002bd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	061a      	lsls	r2, r3, #24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3302      	adds	r3, #2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3301      	adds	r3, #1
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	23c4      	movs	r3, #196	; 0xc4
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	0109      	lsls	r1, r1, #4
 8002c04:	1841      	adds	r1, r0, r1
 8002c06:	18cb      	adds	r3, r1, r3
 8002c08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	3218      	adds	r2, #24
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	58d2      	ldr	r2, [r2, r3]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	3218      	adds	r2, #24
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e010      	b.n	8002c4c <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	0392      	lsls	r2, r2, #14
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	02d2      	lsls	r2, r2, #11
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
  }
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b008      	add	sp, #32
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c60:	200b      	movs	r0, #11
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	2120      	movs	r1, #32
 8002c68:	5c52      	ldrb	r2, [r2, r1]
 8002c6a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	18bb      	adds	r3, r7, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d003      	beq.n	8002c7e <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002c76:	18bb      	adds	r3, r7, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d11d      	bne.n	8002cba <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	04db      	lsls	r3, r3, #19
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d002      	beq.n	8002c92 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	051b      	lsls	r3, r3, #20
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	055b      	lsls	r3, r3, #21
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d002      	beq.n	8002cba <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd2:	2017      	movs	r0, #23
 8002cd4:	183b      	adds	r3, r7, r0
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	2120      	movs	r1, #32
 8002cda:	5c52      	ldrb	r2, [r2, r1]
 8002cdc:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cde:	0002      	movs	r2, r0
 8002ce0:	18bb      	adds	r3, r7, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d004      	beq.n	8002cf2 <HAL_CAN_GetRxMessage+0x2e>
 8002ce8:	18bb      	adds	r3, r7, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d000      	beq.n	8002cf2 <HAL_CAN_GetRxMessage+0x2e>
 8002cf0:	e0f8      	b.n	8002ee4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10e      	bne.n	8002d16 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4013      	ands	r3, r2
 8002d02:	d117      	bne.n	8002d34 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	0392      	lsls	r2, r2, #14
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0ee      	b.n	8002ef4 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	0392      	lsls	r2, r2, #14
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0df      	b.n	8002ef4 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	321b      	adds	r2, #27
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	2204      	movs	r2, #4
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	321b      	adds	r2, #27
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	58d3      	ldr	r3, [r2, r3]
 8002d5c:	0d5b      	lsrs	r3, r3, #21
 8002d5e:	055b      	lsls	r3, r3, #21
 8002d60:	0d5a      	lsrs	r2, r3, #21
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00a      	b.n	8002d7e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	321b      	adds	r2, #27
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	58d3      	ldr	r3, [r2, r3]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	321b      	adds	r2, #27
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	58d3      	ldr	r3, [r2, r3]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	331b      	adds	r3, #27
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	220f      	movs	r2, #15
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	331b      	adds	r3, #27
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	3304      	adds	r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	331b      	adds	r3, #27
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	23dc      	movs	r3, #220	; 0xdc
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	188a      	adds	r2, r1, r2
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	23dc      	movs	r3, #220	; 0xdc
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	188a      	adds	r2, r1, r2
 8002e04:	18d3      	adds	r3, r2, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0a1a      	lsrs	r2, r3, #8
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	23dc      	movs	r3, #220	; 0xdc
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	188a      	adds	r2, r1, r2
 8002e20:	18d3      	adds	r3, r2, r3
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0c1a      	lsrs	r2, r3, #16
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	23dc      	movs	r3, #220	; 0xdc
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	188a      	adds	r2, r1, r2
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e1a      	lsrs	r2, r3, #24
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	3303      	adds	r3, #3
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6819      	ldr	r1, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	23de      	movs	r3, #222	; 0xde
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	188a      	adds	r2, r1, r2
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	23de      	movs	r3, #222	; 0xde
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	188a      	adds	r2, r1, r2
 8002e72:	18d3      	adds	r3, r2, r3
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0a1a      	lsrs	r2, r3, #8
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3305      	adds	r3, #5
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	23de      	movs	r3, #222	; 0xde
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	188a      	adds	r2, r1, r2
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0c1a      	lsrs	r2, r3, #16
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	3306      	adds	r3, #6
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	23de      	movs	r3, #222	; 0xde
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	188a      	adds	r2, r1, r2
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e1a      	lsrs	r2, r3, #24
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3307      	adds	r3, #7
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2120      	movs	r1, #32
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e007      	b.n	8002ee0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2120      	movs	r1, #32
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e007      	b.n	8002ef4 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	02d2      	lsls	r2, r2, #11
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
  }
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b006      	add	sp, #24
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f0a:	200b      	movs	r0, #11
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	2120      	movs	r1, #32
 8002f12:	5c52      	ldrb	r2, [r2, r1]
 8002f14:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f16:	0002      	movs	r2, r0
 8002f18:	18bb      	adds	r3, r7, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d003      	beq.n	8002f28 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002f20:	18bb      	adds	r3, r7, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d10f      	bne.n	8002f48 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e005      	b.n	8002f48 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	183b      	adds	r3, r7, r0
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	2120      	movs	r1, #32
 8002f64:	5c52      	ldrb	r2, [r2, r1]
 8002f66:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f68:	0002      	movs	r2, r0
 8002f6a:	18bb      	adds	r3, r7, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d003      	beq.n	8002f7a <HAL_CAN_ActivateNotification+0x28>
 8002f72:	18bb      	adds	r3, r7, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d109      	bne.n	8002f8e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6959      	ldr	r1, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e007      	b.n	8002f9e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	02d2      	lsls	r2, r2, #11
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
  }
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d100      	bne.n	8002fec <HAL_CAN_IRQHandler+0x46>
 8002fea:	e08a      	b.n	8003102 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d026      	beq.n	8003042 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d005      	beq.n	8003010 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	0010      	movs	r0, r2
 800300c:	4798      	blx	r3
 800300e:	e018      	b.n	8003042 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2204      	movs	r2, #4
 8003014:	4013      	ands	r3, r2
 8003016:	d005      	beq.n	8003024 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	4313      	orrs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e00e      	b.n	8003042 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2208      	movs	r2, #8
 8003028:	4013      	ands	r3, r2
 800302a:	d005      	beq.n	8003038 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0152      	lsls	r2, r2, #5
 8003032:	4313      	orrs	r3, r2
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	e004      	b.n	8003042 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	0010      	movs	r0, r2
 8003040:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d02a      	beq.n	80030a2 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	0052      	lsls	r2, r2, #1
 8003054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d005      	beq.n	800306c <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	0010      	movs	r0, r2
 8003068:	4798      	blx	r3
 800306a:	e01a      	b.n	80030a2 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4013      	ands	r3, r2
 8003074:	d005      	beq.n	8003082 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	0192      	lsls	r2, r2, #6
 800307c:	4313      	orrs	r3, r2
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	e00f      	b.n	80030a2 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	4013      	ands	r3, r2
 800308a:	d005      	beq.n	8003098 <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	01d2      	lsls	r2, r2, #7
 8003092:	4313      	orrs	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	e004      	b.n	80030a2 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	0010      	movs	r0, r2
 80030a0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	025b      	lsls	r3, r3, #9
 80030a8:	4013      	ands	r3, r2
 80030aa:	d02a      	beq.n	8003102 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	0252      	lsls	r2, r2, #9
 80030b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	4013      	ands	r3, r2
 80030be:	d005      	beq.n	80030cc <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	0010      	movs	r0, r2
 80030c8:	4798      	blx	r3
 80030ca:	e01a      	b.n	8003102 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	02db      	lsls	r3, r3, #11
 80030d2:	4013      	ands	r3, r2
 80030d4:	d005      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	0212      	lsls	r2, r2, #8
 80030dc:	4313      	orrs	r3, r2
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	e00f      	b.n	8003102 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	031b      	lsls	r3, r3, #12
 80030e8:	4013      	ands	r3, r2
 80030ea:	d005      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	0252      	lsls	r2, r2, #9
 80030f2:	4313      	orrs	r3, r2
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	e004      	b.n	8003102 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	0010      	movs	r0, r2
 8003100:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2208      	movs	r2, #8
 8003106:	4013      	ands	r3, r2
 8003108:	d00c      	beq.n	8003124 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2210      	movs	r2, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d008      	beq.n	8003124 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4313      	orrs	r3, r2
 800311a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2210      	movs	r2, #16
 8003122:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
 800312a:	d00c      	beq.n	8003146 <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2208      	movs	r2, #8
 8003130:	4013      	ands	r3, r2
 8003132:	d008      	beq.n	8003146 <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2208      	movs	r2, #8
 800313a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	0010      	movs	r0, r2
 8003144:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	2202      	movs	r2, #2
 800314a:	4013      	ands	r3, r2
 800314c:	d00a      	beq.n	8003164 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	4013      	ands	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	0010      	movs	r0, r2
 8003162:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	4013      	ands	r3, r2
 800316a:	d00c      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2210      	movs	r2, #16
 8003170:	4013      	ands	r3, r2
 8003172:	d008      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	00d2      	lsls	r2, r2, #3
 800317a:	4313      	orrs	r3, r2
 800317c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d00c      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2208      	movs	r2, #8
 8003192:	4013      	ands	r3, r2
 8003194:	d008      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2208      	movs	r2, #8
 800319c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	0010      	movs	r0, r2
 80031a6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2210      	movs	r2, #16
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00a      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2203      	movs	r2, #3
 80031b8:	4013      	ands	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	0010      	movs	r0, r2
 80031c4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031c6:	6a3a      	ldr	r2, [r7, #32]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	029b      	lsls	r3, r3, #10
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00c      	beq.n	80031ea <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2210      	movs	r2, #16
 80031d4:	4013      	ands	r3, r2
 80031d6:	d008      	beq.n	80031ea <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	0010      	movs	r0, r2
 80031e8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	4013      	ands	r3, r2
 80031f2:	d00c      	beq.n	800320e <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2208      	movs	r2, #8
 80031f8:	4013      	ands	r3, r2
 80031fa:	d008      	beq.n	800320e <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	0010      	movs	r0, r2
 800320c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_CAN_IRQHandler+0x274>
 8003218:	e074      	b.n	8003304 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d100      	bne.n	8003224 <HAL_CAN_IRQHandler+0x27e>
 8003222:	e06b      	b.n	80032fc <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003234:	d003      	beq.n	800323e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2201      	movs	r2, #1
 800323a:	4313      	orrs	r3, r2
 800323c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800323e:	6a3a      	ldr	r2, [r7, #32]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d007      	beq.n	8003258 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800324e:	d003      	beq.n	8003258 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2202      	movs	r2, #2
 8003254:	4313      	orrs	r3, r2
 8003256:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4013      	ands	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2204      	movs	r2, #4
 8003266:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003268:	d003      	beq.n	8003272 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	2204      	movs	r2, #4
 800326e:	4313      	orrs	r3, r2
 8003270:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003272:	6a3a      	ldr	r2, [r7, #32]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d03f      	beq.n	80032fc <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2270      	movs	r2, #112	; 0x70
 8003280:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003282:	d03b      	beq.n	80032fc <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2270      	movs	r2, #112	; 0x70
 8003288:	4013      	ands	r3, r2
 800328a:	2b60      	cmp	r3, #96	; 0x60
 800328c:	d027      	beq.n	80032de <HAL_CAN_IRQHandler+0x338>
 800328e:	d82c      	bhi.n	80032ea <HAL_CAN_IRQHandler+0x344>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d01f      	beq.n	80032d4 <HAL_CAN_IRQHandler+0x32e>
 8003294:	d829      	bhi.n	80032ea <HAL_CAN_IRQHandler+0x344>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d017      	beq.n	80032ca <HAL_CAN_IRQHandler+0x324>
 800329a:	d826      	bhi.n	80032ea <HAL_CAN_IRQHandler+0x344>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d00f      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x31a>
 80032a0:	d823      	bhi.n	80032ea <HAL_CAN_IRQHandler+0x344>
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d002      	beq.n	80032ac <HAL_CAN_IRQHandler+0x306>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d005      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032aa:	e01e      	b.n	80032ea <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	2208      	movs	r2, #8
 80032b0:	4313      	orrs	r3, r2
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b4:	e01a      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2210      	movs	r2, #16
 80032ba:	4313      	orrs	r3, r2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032be:	e015      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2220      	movs	r2, #32
 80032c4:	4313      	orrs	r3, r2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c8:	e010      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4313      	orrs	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032d2:	e00b      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4313      	orrs	r3, r2
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032dc:	e006      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0052      	lsls	r2, r2, #1
 80032e4:	4313      	orrs	r3, r2
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e8:	e000      	b.n	80032ec <HAL_CAN_IRQHandler+0x346>
            break;
 80032ea:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2170      	movs	r1, #112	; 0x70
 80032f8:	438a      	bics	r2, r1
 80032fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2204      	movs	r2, #4
 8003302:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	0010      	movs	r0, r2
 800331e:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b00a      	add	sp, #40	; 0x28
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b7f      	cmp	r3, #127	; 0x7f
 80033fa:	d809      	bhi.n	8003410 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	231f      	movs	r3, #31
 8003404:	401a      	ands	r2, r3
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <__NVIC_EnableIRQ+0x30>)
 8003408:	2101      	movs	r1, #1
 800340a:	4091      	lsls	r1, r2
 800340c:	000a      	movs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
  }
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000e100 	.word	0xe000e100

0800341c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	0002      	movs	r2, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b7f      	cmp	r3, #127	; 0x7f
 8003430:	d828      	bhi.n	8003484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <__NVIC_SetPriority+0xd4>)
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b25b      	sxtb	r3, r3
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	33c0      	adds	r3, #192	; 0xc0
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	589b      	ldr	r3, [r3, r2]
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	0011      	movs	r1, r2
 8003448:	2203      	movs	r2, #3
 800344a:	400a      	ands	r2, r1
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	21ff      	movs	r1, #255	; 0xff
 8003450:	4091      	lsls	r1, r2
 8003452:	000a      	movs	r2, r1
 8003454:	43d2      	mvns	r2, r2
 8003456:	401a      	ands	r2, r3
 8003458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	401a      	ands	r2, r3
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0018      	movs	r0, r3
 8003468:	2303      	movs	r3, #3
 800346a:	4003      	ands	r3, r0
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	481f      	ldr	r0, [pc, #124]	; (80034f0 <__NVIC_SetPriority+0xd4>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b25b      	sxtb	r3, r3
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	430a      	orrs	r2, r1
 800347c:	33c0      	adds	r3, #192	; 0xc0
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003482:	e031      	b.n	80034e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <__NVIC_SetPriority+0xd8>)
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0019      	movs	r1, r3
 800348c:	230f      	movs	r3, #15
 800348e:	400b      	ands	r3, r1
 8003490:	3b08      	subs	r3, #8
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3306      	adds	r3, #6
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	3304      	adds	r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1dfa      	adds	r2, r7, #7
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	0011      	movs	r1, r2
 80034a4:	2203      	movs	r2, #3
 80034a6:	400a      	ands	r2, r1
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	21ff      	movs	r1, #255	; 0xff
 80034ac:	4091      	lsls	r1, r2
 80034ae:	000a      	movs	r2, r1
 80034b0:	43d2      	mvns	r2, r2
 80034b2:	401a      	ands	r2, r3
 80034b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	401a      	ands	r2, r3
 80034be:	1dfb      	adds	r3, r7, #7
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	0018      	movs	r0, r3
 80034c4:	2303      	movs	r3, #3
 80034c6:	4003      	ands	r3, r0
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034cc:	4809      	ldr	r0, [pc, #36]	; (80034f4 <__NVIC_SetPriority+0xd8>)
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	001c      	movs	r4, r3
 80034d4:	230f      	movs	r3, #15
 80034d6:	4023      	ands	r3, r4
 80034d8:	3b08      	subs	r3, #8
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	430a      	orrs	r2, r1
 80034de:	3306      	adds	r3, #6
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	18c3      	adds	r3, r0, r3
 80034e4:	3304      	adds	r3, #4
 80034e6:	601a      	str	r2, [r3, #0]
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b003      	add	sp, #12
 80034ee:	bd90      	pop	{r4, r7, pc}
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	045b      	lsls	r3, r3, #17
 8003508:	429a      	cmp	r2, r3
 800350a:	d301      	bcc.n	8003510 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350c:	2301      	movs	r3, #1
 800350e:	e010      	b.n	8003532 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <SysTick_Config+0x44>)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	3a01      	subs	r2, #1
 8003516:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003518:	2301      	movs	r3, #1
 800351a:	425b      	negs	r3, r3
 800351c:	2103      	movs	r1, #3
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff ff7c 	bl	800341c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x44>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x44>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	210f      	movs	r1, #15
 800354c:	187b      	adds	r3, r7, r1
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	187b      	adds	r3, r7, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff5d 	bl	800341c <__NVIC_SetPriority>
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b004      	add	sp, #16
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	0002      	movs	r2, r0
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b25b      	sxtb	r3, r3
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff ff33 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff ffaf 	bl	80034f8 <SysTick_Config>
 800359a:	0003      	movs	r3, r0
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b2:	e155      	b.n	8003860 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4091      	lsls	r1, r2
 80035be:	000a      	movs	r2, r1
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <HAL_GPIO_Init+0x28>
 80035ca:	e146      	b.n	800385a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d005      	beq.n	80035e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d130      	bne.n	8003646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	409a      	lsls	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	43da      	mvns	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	409a      	lsls	r2, r3
 8003606:	0013      	movs	r3, r2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361a:	2201      	movs	r2, #1
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	43da      	mvns	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	2201      	movs	r2, #1
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	2b03      	cmp	r3, #3
 8003650:	d017      	beq.n	8003682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	409a      	lsls	r2, r3
 8003660:	0013      	movs	r3, r2
 8003662:	43da      	mvns	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	409a      	lsls	r2, r3
 8003674:	0013      	movs	r3, r2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2203      	movs	r2, #3
 8003688:	4013      	ands	r3, r2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d123      	bne.n	80036d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	58d3      	ldr	r3, [r2, r3]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2207      	movs	r2, #7
 80036a0:	4013      	ands	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	43da      	mvns	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2107      	movs	r1, #7
 80036ba:	400b      	ands	r3, r1
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	409a      	lsls	r2, r3
 80036c0:	0013      	movs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	08da      	lsrs	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3208      	adds	r2, #8
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2203      	movs	r2, #3
 80036f4:	401a      	ands	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	23c0      	movs	r3, #192	; 0xc0
 8003710:	029b      	lsls	r3, r3, #10
 8003712:	4013      	ands	r3, r2
 8003714:	d100      	bne.n	8003718 <HAL_GPIO_Init+0x174>
 8003716:	e0a0      	b.n	800385a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003718:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_GPIO_Init+0x2d4>)
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_GPIO_Init+0x2d4>)
 800371e:	2101      	movs	r1, #1
 8003720:	430a      	orrs	r2, r1
 8003722:	619a      	str	r2, [r3, #24]
 8003724:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_GPIO_Init+0x2d4>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2201      	movs	r2, #1
 800372a:	4013      	ands	r3, r2
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003730:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_GPIO_Init+0x2d8>)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	3302      	adds	r3, #2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	589b      	ldr	r3, [r3, r2]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2203      	movs	r2, #3
 8003742:	4013      	ands	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	409a      	lsls	r2, r3
 800374a:	0013      	movs	r3, r2
 800374c:	43da      	mvns	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	2390      	movs	r3, #144	; 0x90
 8003758:	05db      	lsls	r3, r3, #23
 800375a:	429a      	cmp	r2, r3
 800375c:	d019      	beq.n	8003792 <HAL_GPIO_Init+0x1ee>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a47      	ldr	r2, [pc, #284]	; (8003880 <HAL_GPIO_Init+0x2dc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_GPIO_Init+0x1ea>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_GPIO_Init+0x2e0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00d      	beq.n	800378a <HAL_GPIO_Init+0x1e6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a45      	ldr	r2, [pc, #276]	; (8003888 <HAL_GPIO_Init+0x2e4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <HAL_GPIO_Init+0x1e2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a44      	ldr	r2, [pc, #272]	; (800388c <HAL_GPIO_Init+0x2e8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_GPIO_Init+0x1de>
 800377e:	2304      	movs	r3, #4
 8003780:	e008      	b.n	8003794 <HAL_GPIO_Init+0x1f0>
 8003782:	2305      	movs	r3, #5
 8003784:	e006      	b.n	8003794 <HAL_GPIO_Init+0x1f0>
 8003786:	2303      	movs	r3, #3
 8003788:	e004      	b.n	8003794 <HAL_GPIO_Init+0x1f0>
 800378a:	2302      	movs	r3, #2
 800378c:	e002      	b.n	8003794 <HAL_GPIO_Init+0x1f0>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_GPIO_Init+0x1f0>
 8003792:	2300      	movs	r3, #0
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	2103      	movs	r1, #3
 8003798:	400a      	ands	r2, r1
 800379a:	0092      	lsls	r2, r2, #2
 800379c:	4093      	lsls	r3, r2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037a4:	4935      	ldr	r1, [pc, #212]	; (800387c <HAL_GPIO_Init+0x2d8>)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	3302      	adds	r3, #2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43da      	mvns	r2, r3
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	025b      	lsls	r3, r3, #9
 80037ca:	4013      	ands	r3, r2
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	4013      	ands	r3, r2
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	43da      	mvns	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	035b      	lsls	r3, r3, #13
 800381e:	4013      	ands	r3, r2
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43da      	mvns	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	039b      	lsls	r3, r3, #14
 8003848:	4013      	ands	r3, r2
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_GPIO_Init+0x2ec>)
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	40da      	lsrs	r2, r3
 8003868:	1e13      	subs	r3, r2, #0
 800386a:	d000      	beq.n	800386e <HAL_GPIO_Init+0x2ca>
 800386c:	e6a2      	b.n	80035b4 <HAL_GPIO_Init+0x10>
  } 
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40010000 	.word	0x40010000
 8003880:	48000400 	.word	0x48000400
 8003884:	48000800 	.word	0x48000800
 8003888:	48000c00 	.word	0x48000c00
 800388c:	48001000 	.word	0x48001000
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f000 fb76 	bl	8003f94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_RCC_OscConfig+0x20>
 80038b2:	e08e      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038b4:	4bc5      	ldr	r3, [pc, #788]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	220c      	movs	r2, #12
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00e      	beq.n	80038de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c0:	4bc2      	ldr	r3, [pc, #776]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	220c      	movs	r2, #12
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d117      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
 80038cc:	4bbf      	ldr	r3, [pc, #764]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	23c0      	movs	r3, #192	; 0xc0
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	401a      	ands	r2, r3
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10e      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	4bbb      	ldr	r3, [pc, #748]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	4013      	ands	r3, r2
 80038e8:	d100      	bne.n	80038ec <HAL_RCC_OscConfig+0x58>
 80038ea:	e071      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d000      	beq.n	80038f6 <HAL_RCC_OscConfig+0x62>
 80038f4:	e06c      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f000 fb4c 	bl	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x80>
 8003904:	4bb1      	ldr	r3, [pc, #708]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4bb0      	ldr	r3, [pc, #704]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0249      	lsls	r1, r1, #9
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e02f      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10c      	bne.n	8003936 <HAL_RCC_OscConfig+0xa2>
 800391c:	4bab      	ldr	r3, [pc, #684]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4baa      	ldr	r3, [pc, #680]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003922:	49ab      	ldr	r1, [pc, #684]	; (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4ba8      	ldr	r3, [pc, #672]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4ba7      	ldr	r3, [pc, #668]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392e:	49a9      	ldr	r1, [pc, #676]	; (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e01e      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10e      	bne.n	800395c <HAL_RCC_OscConfig+0xc8>
 800393e:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	02c9      	lsls	r1, r1, #11
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b9f      	ldr	r3, [pc, #636]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b9e      	ldr	r3, [pc, #632]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	0249      	lsls	r1, r1, #9
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 800395c:	4b9b      	ldr	r3, [pc, #620]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b9a      	ldr	r3, [pc, #616]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003962:	499b      	ldr	r1, [pc, #620]	; (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003964:	400a      	ands	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b98      	ldr	r3, [pc, #608]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b97      	ldr	r3, [pc, #604]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396e:	4999      	ldr	r1, [pc, #612]	; (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d014      	beq.n	80039a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fe00 	bl	8002580 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003986:	f7fe fdfb 	bl	8002580 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e2fd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	4013      	ands	r3, r2
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0xf2>
 80039a4:	e015      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe fdeb 	bl	8002580 <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe fde6 	bl	8002580 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e2e8      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b82      	ldr	r3, [pc, #520]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x11c>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_RCC_OscConfig+0x14a>
 80039dc:	e06c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039de:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	220c      	movs	r2, #12
 80039e4:	4013      	ands	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039e8:	4b78      	ldr	r3, [pc, #480]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	220c      	movs	r2, #12
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d11f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	23c0      	movs	r3, #192	; 0xc0
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	401a      	ands	r2, r3
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b71      	ldr	r3, [pc, #452]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2bb      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22f8      	movs	r2, #248	; 0xf8
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e041      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d024      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fd9a 	bl	8002580 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fe fd95 	bl	8002580 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e297      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	22f8      	movs	r2, #248	; 0xf8
 8003a74:	4393      	bics	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00da      	lsls	r2, r3, #3
 8003a7e:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e018      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438a      	bics	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe fd75 	bl	8002580 <HAL_GetTick>
 8003a96:	0003      	movs	r3, r0
 8003a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fd70 	bl	8002580 <HAL_GetTick>
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e272      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d1f1      	bne.n	8003a9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fd53 	bl	8002580 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fe fd4e 	bl	8002580 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e250      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2202      	movs	r2, #2
 8003af8:	4013      	ands	r3, r2
 8003afa:	d0f1      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
 8003afc:	e018      	b.n	8003b30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fd39 	bl	8002580 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe fd34 	bl	8002580 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e236      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d100      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2a8>
 8003b3a:	e0b5      	b.n	8003ca8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	201f      	movs	r0, #31
 8003b3e:	183b      	adds	r3, r7, r0
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	055b      	lsls	r3, r3, #21
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d110      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	0549      	lsls	r1, r1, #21
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b6c:	183b      	adds	r3, r7, r0
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d11a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	0049      	lsls	r1, r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fcf8 	bl	8002580 <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fe fcf3 	bl	8002580 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1f5      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10f      	bne.n	8003bdc <HAL_RCC_OscConfig+0x348>
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	621a      	str	r2, [r3, #32]
 8003bc8:	e036      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	fffeffff 	.word	0xfffeffff
 8003bd4:	fffbffff 	.word	0xfffbffff
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x36a>
 8003be4:	4bca      	ldr	r3, [pc, #808]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	4bc9      	ldr	r3, [pc, #804]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	4bc7      	ldr	r3, [pc, #796]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4bc6      	ldr	r3, [pc, #792]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x38c>
 8003c06:	4bc2      	ldr	r3, [pc, #776]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	4bc1      	ldr	r3, [pc, #772]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	621a      	str	r2, [r3, #32]
 8003c12:	4bbf      	ldr	r3, [pc, #764]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	4bbe      	ldr	r3, [pc, #760]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003c20:	4bbb      	ldr	r3, [pc, #748]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	4bba      	ldr	r3, [pc, #744]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	621a      	str	r2, [r3, #32]
 8003c2c:	4bb8      	ldr	r3, [pc, #736]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	4bb7      	ldr	r3, [pc, #732]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c32:	2104      	movs	r1, #4
 8003c34:	438a      	bics	r2, r1
 8003c36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe fc9e 	bl	8002580 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	e009      	b.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fc99 	bl	8002580 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	4aaf      	ldr	r2, [pc, #700]	; (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e19a      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4bac      	ldr	r3, [pc, #688]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3b6>
 8003c68:	e013      	b.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fc89 	bl	8002580 <HAL_GetTick>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fe fc84 	bl	8002580 <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4aa5      	ldr	r2, [pc, #660]	; (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e185      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4ba1      	ldr	r3, [pc, #644]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b9c      	ldr	r3, [pc, #624]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	4b9b      	ldr	r3, [pc, #620]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ca2:	499d      	ldr	r1, [pc, #628]	; (8003f18 <HAL_RCC_OscConfig+0x684>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cba:	4b95      	ldr	r3, [pc, #596]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b94      	ldr	r3, [pc, #592]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cc6:	4b92      	ldr	r3, [pc, #584]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cca:	4b91      	ldr	r3, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fc55 	bl	8002580 <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cdc:	f7fe fc50 	bl	8002580 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e152      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d0f1      	beq.n	8003cdc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cf8:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	22f8      	movs	r2, #248	; 0xf8
 8003cfe:	4393      	bics	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	00da      	lsls	r2, r3, #3
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0e:	e034      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	3305      	adds	r3, #5
 8003d16:	d111      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d18:	4b7d      	ldr	r3, [pc, #500]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	2104      	movs	r1, #4
 8003d20:	438a      	bics	r2, r1
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d24:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	22f8      	movs	r2, #248	; 0xf8
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	00da      	lsls	r2, r3, #3
 8003d34:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3a:	e01e      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d3c:	4b74      	ldr	r3, [pc, #464]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d40:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d42:	2104      	movs	r1, #4
 8003d44:	430a      	orrs	r2, r1
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d48:	4b71      	ldr	r3, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	4b70      	ldr	r3, [pc, #448]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	438a      	bics	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fe fc14 	bl	8002580 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d5e:	f7fe fc0f 	bl	8002580 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e111      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d70:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2202      	movs	r2, #2
 8003d76:	4013      	ands	r3, r2
 8003d78:	d1f1      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d05c      	beq.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d84:	4b62      	ldr	r3, [pc, #392]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	220c      	movs	r2, #12
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d00e      	beq.n	8003dae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d90:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	220c      	movs	r2, #12
 8003d96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d114      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d9c:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	23c0      	movs	r3, #192	; 0xc0
 8003da2:	025b      	lsls	r3, r3, #9
 8003da4:	401a      	ands	r2, r3
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003dae:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	4013      	ands	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d03c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0e6      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01b      	beq.n	8003e06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dce:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	0249      	lsls	r1, r1, #9
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fbd0 	bl	8002580 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de6:	f7fe fbcb 	bl	8002580 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0cd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x552>
 8003e04:	e01b      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e06:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e0c:	4943      	ldr	r1, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x688>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fbb5 	bl	8002580 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7fe fbb0 	bl	8002580 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0b2      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x588>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5b4>
 8003e46:	e0a4      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x5c2>
 8003e54:	e078      	b.n	8003f48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d14c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e64:	492e      	ldr	r1, [pc, #184]	; (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe fb89 	bl	8002580 <HAL_GetTick>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe fb84 	bl	8002580 <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e086      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	049b      	lsls	r3, r3, #18
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	220f      	movs	r2, #15
 8003e98:	4393      	bics	r3, r2
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_RCC_OscConfig+0x690>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	0449      	lsls	r1, r1, #17
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe fb57 	bl	8002580 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fb52 	bl	8002580 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	049b      	lsls	r3, r3, #18
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x644>
 8003ef6:	e04c      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efe:	4908      	ldr	r1, [pc, #32]	; (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fb3c 	bl	8002580 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	40021000 	.word	0x40021000
 8003f14:	00001388 	.word	0x00001388
 8003f18:	efffffff 	.word	0xefffffff
 8003f1c:	fffeffff 	.word	0xfffeffff
 8003f20:	feffffff 	.word	0xfeffffff
 8003f24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe fb2a 	bl	8002580 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e02c      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	049b      	lsls	r3, r3, #18
 8003f42:	4013      	ands	r3, r2
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x694>
 8003f46:	e024      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01f      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	025b      	lsls	r3, r3, #9
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10e      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	220f      	movs	r2, #15
 8003f74:	401a      	ands	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	23f0      	movs	r3, #240	; 0xf0
 8003f82:	039b      	lsls	r3, r3, #14
 8003f84:	401a      	ands	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b008      	add	sp, #32
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0bf      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d911      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b5e      	ldr	r3, [pc, #376]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4393      	bics	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	4b5b      	ldr	r3, [pc, #364]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0a6      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d015      	beq.n	800401c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d006      	beq.n	8004008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004000:	21e0      	movs	r1, #224	; 0xe0
 8004002:	00c9      	lsls	r1, r1, #3
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	22f0      	movs	r2, #240	; 0xf0
 800400e:	4393      	bics	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	d04c      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	4013      	ands	r3, r2
 8004038:	d120      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07a      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	4013      	ands	r3, r2
 8004050:	d114      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06e      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	025b      	lsls	r3, r3, #9
 8004066:	4013      	ands	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e062      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e05b      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	4393      	bics	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fa76 	bl	8002580 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fe fa71 	bl	8002580 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <HAL_RCC_ClockConfig+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e042      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	220c      	movs	r2, #12
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ec      	bne.n	800409a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d211      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e020      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_RCC_ClockConfig+0x1a8>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004110:	f000 f820 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004114:	0001      	movs	r1, r0
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	220f      	movs	r2, #15
 800411e:	4013      	ands	r3, r2
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1ac>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	000a      	movs	r2, r1
 8004126:	40da      	lsrs	r2, r3
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 800412a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe f9e1 	bl	80024f4 <HAL_InitTick>
  
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	00001388 	.word	0x00001388
 8004148:	fffff8ff 	.word	0xfffff8ff
 800414c:	08004c30 	.word	0x08004c30
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b08f      	sub	sp, #60	; 0x3c
 8004158:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800415a:	2314      	movs	r3, #20
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	4a38      	ldr	r2, [pc, #224]	; (8004240 <HAL_RCC_GetSysClockFreq+0xec>)
 8004160:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004162:	c313      	stmia	r3!, {r0, r1, r4}
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4a36      	ldr	r2, [pc, #216]	; (8004244 <HAL_RCC_GetSysClockFreq+0xf0>)
 800416c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800416e:	c313      	stmia	r3!, {r0, r1, r4}
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004178:	2300      	movs	r3, #0
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
 800417c:	2300      	movs	r3, #0
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	220c      	movs	r2, #12
 8004192:	4013      	ands	r3, r2
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d047      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xd4>
 8004198:	d849      	bhi.n	800422e <HAL_RCC_GetSysClockFreq+0xda>
 800419a:	2b04      	cmp	r3, #4
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x50>
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x56>
 80041a2:	e044      	b.n	800422e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a4:	4b29      	ldr	r3, [pc, #164]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041a8:	e044      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	0c9b      	lsrs	r3, r3, #18
 80041ae:	220f      	movs	r2, #15
 80041b0:	4013      	ands	r3, r2
 80041b2:	2214      	movs	r2, #20
 80041b4:	18ba      	adds	r2, r7, r2
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	220f      	movs	r2, #15
 80041c0:	4013      	ands	r3, r2
 80041c2:	1d3a      	adds	r2, r7, #4
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	23c0      	movs	r3, #192	; 0xc0
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	401a      	ands	r2, r3
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d109      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041da:	481c      	ldr	r0, [pc, #112]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041dc:	f7fb ff94 	bl	8000108 <__udivsi3>
 80041e0:	0003      	movs	r3, r0
 80041e2:	001a      	movs	r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	4353      	muls	r3, r2
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ea:	e01a      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	23c0      	movs	r3, #192	; 0xc0
 80041f0:	025b      	lsls	r3, r3, #9
 80041f2:	401a      	ands	r2, r3
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	025b      	lsls	r3, r3, #9
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d109      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fe:	4814      	ldr	r0, [pc, #80]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004200:	f7fb ff82 	bl	8000108 <__udivsi3>
 8004204:	0003      	movs	r3, r0
 8004206:	001a      	movs	r2, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	4353      	muls	r3, r2
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e008      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	480e      	ldr	r0, [pc, #56]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004214:	f7fb ff78 	bl	8000108 <__udivsi3>
 8004218:	0003      	movs	r3, r0
 800421a:	001a      	movs	r2, r3
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	4353      	muls	r3, r2
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004226:	e005      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800422c:	e002      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004232:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b00f      	add	sp, #60	; 0x3c
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	08004c10 	.word	0x08004c10
 8004244:	08004c20 	.word	0x08004c20
 8004248:	40021000 	.word	0x40021000
 800424c:	007a1200 	.word	0x007a1200
 8004250:	02dc6c00 	.word	0x02dc6c00

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e042      	b.n	80042ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	223d      	movs	r2, #61	; 0x3d
 800426a:	5c9b      	ldrb	r3, [r3, r2]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	223c      	movs	r2, #60	; 0x3c
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f7fc fc83 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	223d      	movs	r2, #61	; 0x3d
 8004286:	2102      	movs	r1, #2
 8004288:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	0019      	movs	r1, r3
 8004294:	0010      	movs	r0, r2
 8004296:	f000 fa89 	bl	80047ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2246      	movs	r2, #70	; 0x46
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223e      	movs	r2, #62	; 0x3e
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	223f      	movs	r2, #63	; 0x3f
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2240      	movs	r2, #64	; 0x40
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2242      	movs	r2, #66	; 0x42
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2243      	movs	r2, #67	; 0x43
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2244      	movs	r2, #68	; 0x44
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2245      	movs	r2, #69	; 0x45
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223d      	movs	r2, #61	; 0x3d
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223d      	movs	r2, #61	; 0x3d
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e03b      	b.n	8004384 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	223d      	movs	r2, #61	; 0x3d
 8004310:	2102      	movs	r1, #2
 8004312:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_TIM_Base_Start_IT+0x98>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <HAL_TIM_Base_Start_IT+0x5a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	05db      	lsls	r3, r3, #23
 8004336:	429a      	cmp	r2, r3
 8004338:	d009      	beq.n	800434e <HAL_TIM_Base_Start_IT+0x5a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_TIM_Base_Start_IT+0x9c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIM_Base_Start_IT+0x5a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a12      	ldr	r2, [pc, #72]	; (8004394 <HAL_TIM_Base_Start_IT+0xa0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d111      	bne.n	8004372 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2207      	movs	r2, #7
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b06      	cmp	r3, #6
 800435e:	d010      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	e007      	b.n	8004382 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b004      	add	sp, #16
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2202      	movs	r2, #2
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d124      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11d      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2203      	movs	r2, #3
 80043c2:	4252      	negs	r2, r2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2203      	movs	r2, #3
 80043d4:	4013      	ands	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 f9ce 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 80043e0:	e007      	b.n	80043f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f000 f9c1 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 f9cd 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2204      	movs	r2, #4
 8004400:	4013      	ands	r3, r2
 8004402:	2b04      	cmp	r3, #4
 8004404:	d125      	bne.n	8004452 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2204      	movs	r2, #4
 800440e:	4013      	ands	r3, r2
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11e      	bne.n	8004452 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2205      	movs	r2, #5
 800441a:	4252      	negs	r2, r2
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	23c0      	movs	r3, #192	; 0xc0
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f000 f9a1 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 800443a:	e007      	b.n	800444c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f994 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f9a0 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2208      	movs	r2, #8
 800445a:	4013      	ands	r3, r2
 800445c:	2b08      	cmp	r3, #8
 800445e:	d124      	bne.n	80044aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2208      	movs	r2, #8
 8004468:	4013      	ands	r3, r2
 800446a:	2b08      	cmp	r3, #8
 800446c:	d11d      	bne.n	80044aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2209      	movs	r2, #9
 8004474:	4252      	negs	r2, r2
 8004476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	2203      	movs	r2, #3
 8004486:	4013      	ands	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f975 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 8004492:	e007      	b.n	80044a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f968 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f974 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2210      	movs	r2, #16
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d125      	bne.n	8004504 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2210      	movs	r2, #16
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d11e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2211      	movs	r2, #17
 80044cc:	4252      	negs	r2, r2
 80044ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2208      	movs	r2, #8
 80044d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	23c0      	movs	r3, #192	; 0xc0
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4013      	ands	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f948 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 80044ec:	e007      	b.n	80044fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f93b 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 f947 	bl	800478c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10f      	bne.n	8004532 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	2b01      	cmp	r3, #1
 800451e:	d108      	bne.n	8004532 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2202      	movs	r2, #2
 8004526:	4252      	negs	r2, r2
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f7fc f90d 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	4013      	ands	r3, r2
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d10f      	bne.n	8004560 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2280      	movs	r2, #128	; 0x80
 8004548:	4013      	ands	r3, r2
 800454a:	2b80      	cmp	r3, #128	; 0x80
 800454c:	d108      	bne.n	8004560 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2281      	movs	r2, #129	; 0x81
 8004554:	4252      	negs	r2, r2
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 faa6 	bl	8004aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	4013      	ands	r3, r2
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d10f      	bne.n	800458e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	4013      	ands	r3, r2
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d108      	bne.n	800458e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	4252      	negs	r2, r2
 8004584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f907 	bl	800479c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2220      	movs	r2, #32
 8004596:	4013      	ands	r3, r2
 8004598:	2b20      	cmp	r3, #32
 800459a:	d10f      	bne.n	80045bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d108      	bne.n	80045bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2221      	movs	r2, #33	; 0x21
 80045b0:	4252      	negs	r2, r2
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 fa70 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	230f      	movs	r3, #15
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	223c      	movs	r2, #60	; 0x3c
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_ConfigClockSource+0x20>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0bc      	b.n	800475e <HAL_TIM_ConfigClockSource+0x19a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	223c      	movs	r2, #60	; 0x3c
 80045e8:	2101      	movs	r1, #1
 80045ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	223d      	movs	r2, #61	; 0x3d
 80045f0:	2102      	movs	r1, #2
 80045f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2277      	movs	r2, #119	; 0x77
 8004600:	4393      	bics	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004608:	4013      	ands	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0192      	lsls	r2, r2, #6
 800461c:	4293      	cmp	r3, r2
 800461e:	d040      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xde>
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	0192      	lsls	r2, r2, #6
 8004624:	4293      	cmp	r3, r2
 8004626:	d900      	bls.n	800462a <HAL_TIM_ConfigClockSource+0x66>
 8004628:	e088      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	0152      	lsls	r2, r2, #5
 800462e:	4293      	cmp	r3, r2
 8004630:	d100      	bne.n	8004634 <HAL_TIM_ConfigClockSource+0x70>
 8004632:	e088      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x182>
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	0152      	lsls	r2, r2, #5
 8004638:	4293      	cmp	r3, r2
 800463a:	d900      	bls.n	800463e <HAL_TIM_ConfigClockSource+0x7a>
 800463c:	e07e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 800463e:	2b70      	cmp	r3, #112	; 0x70
 8004640:	d018      	beq.n	8004674 <HAL_TIM_ConfigClockSource+0xb0>
 8004642:	d900      	bls.n	8004646 <HAL_TIM_ConfigClockSource+0x82>
 8004644:	e07a      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d04f      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x126>
 800464a:	d900      	bls.n	800464e <HAL_TIM_ConfigClockSource+0x8a>
 800464c:	e076      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 800464e:	2b50      	cmp	r3, #80	; 0x50
 8004650:	d03b      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x106>
 8004652:	d900      	bls.n	8004656 <HAL_TIM_ConfigClockSource+0x92>
 8004654:	e072      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d057      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x146>
 800465a:	d900      	bls.n	800465e <HAL_TIM_ConfigClockSource+0x9a>
 800465c:	e06e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	d063      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x166>
 8004662:	d86b      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d060      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x166>
 8004668:	d868      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x178>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d05d      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x166>
 800466e:	2b10      	cmp	r3, #16
 8004670:	d05b      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x166>
 8004672:	e063      	b.n	800473c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f000 f98c 	bl	80049a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2277      	movs	r2, #119	; 0x77
 8004694:	4313      	orrs	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]
      break;
 80046a0:	e052      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 f975 	bl	80049a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	01c9      	lsls	r1, r1, #7
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
      break;
 80046c8:	e03e      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	001a      	movs	r2, r3
 80046d8:	f000 f8e8 	bl	80048ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2150      	movs	r1, #80	; 0x50
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f942 	bl	800496c <TIM_ITRx_SetConfig>
      break;
 80046e8:	e02e      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	001a      	movs	r2, r3
 80046f8:	f000 f906 	bl	8004908 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2160      	movs	r1, #96	; 0x60
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f932 	bl	800496c <TIM_ITRx_SetConfig>
      break;
 8004708:	e01e      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	001a      	movs	r2, r3
 8004718:	f000 f8c8 	bl	80048ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f922 	bl	800496c <TIM_ITRx_SetConfig>
      break;
 8004728:	e00e      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0019      	movs	r1, r3
 8004734:	0010      	movs	r0, r2
 8004736:	f000 f919 	bl	800496c <TIM_ITRx_SetConfig>
      break;
 800473a:	e005      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800473c:	230f      	movs	r3, #15
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
      break;
 8004744:	e000      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004746:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223d      	movs	r2, #61	; 0x3d
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	223c      	movs	r2, #60	; 0x3c
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]

  return status;
 8004758:	230f      	movs	r3, #15
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	ffff00ff 	.word	0xffff00ff

0800476c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b002      	add	sp, #8
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}

080047ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a34      	ldr	r2, [pc, #208]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d008      	beq.n	80047d6 <TIM_Base_SetConfig+0x2a>
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	05db      	lsls	r3, r3, #23
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x2a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a30      	ldr	r2, [pc, #192]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2270      	movs	r2, #112	; 0x70
 80047da:	4393      	bics	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a29      	ldr	r2, [pc, #164]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d018      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	05db      	lsls	r3, r3, #23
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d013      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_Base_SetConfig+0xe8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a24      	ldr	r2, [pc, #144]	; (8004898 <TIM_Base_SetConfig+0xec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a23      	ldr	r2, [pc, #140]	; (800489c <TIM_Base_SetConfig+0xf0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <TIM_Base_SetConfig+0xf4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x76>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <TIM_Base_SetConfig+0xf8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a20      	ldr	r2, [pc, #128]	; (80048a8 <TIM_Base_SetConfig+0xfc>)
 8004826:	4013      	ands	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	4393      	bics	r3, r2
 800483a:	001a      	movs	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <TIM_Base_SetConfig+0xe4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_Base_SetConfig+0xce>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a0d      	ldr	r2, [pc, #52]	; (800489c <TIM_Base_SetConfig+0xf0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_Base_SetConfig+0xce>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <TIM_Base_SetConfig+0xf4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_Base_SetConfig+0xce>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <TIM_Base_SetConfig+0xf8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d103      	bne.n	8004882 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	615a      	str	r2, [r3, #20]
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b004      	add	sp, #16
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40000400 	.word	0x40000400
 8004898:	40002000 	.word	0x40002000
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800
 80048a8:	fffffcff 	.word	0xfffffcff

080048ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	2201      	movs	r2, #1
 80048c4:	4393      	bics	r3, r2
 80048c6:	001a      	movs	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	22f0      	movs	r2, #240	; 0xf0
 80048d6:	4393      	bics	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	220a      	movs	r2, #10
 80048e8:	4393      	bics	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b006      	add	sp, #24
 8004906:	bd80      	pop	{r7, pc}

08004908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	2210      	movs	r2, #16
 800491a:	4393      	bics	r3, r2
 800491c:	001a      	movs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <TIM_TI2_ConfigInputStage+0x60>)
 8004932:	4013      	ands	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	22a0      	movs	r2, #160	; 0xa0
 8004944:	4393      	bics	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b006      	add	sp, #24
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	ffff0fff 	.word	0xffff0fff

0800496c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2270      	movs	r2, #112	; 0x70
 8004980:	4393      	bics	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	2207      	movs	r2, #7
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <TIM_ETR_SetConfig+0x3c>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b006      	add	sp, #24
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	ffff00ff 	.word	0xffff00ff

080049e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223c      	movs	r2, #60	; 0x3c
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e047      	b.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	223c      	movs	r2, #60	; 0x3c
 80049fc:	2101      	movs	r1, #1
 80049fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	223d      	movs	r2, #61	; 0x3d
 8004a04:	2102      	movs	r1, #2
 8004a06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2270      	movs	r2, #112	; 0x70
 8004a1c:	4393      	bics	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00f      	beq.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	05db      	lsls	r3, r3, #23
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d009      	beq.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10c      	bne.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	4393      	bics	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	223d      	movs	r2, #61	; 0x3d
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223c      	movs	r2, #60	; 0x3c
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b004      	add	sp, #16
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <__cxa_pure_virtual>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	f000 f805 	bl	8004acc <_ZSt9terminatev>

08004ac2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	4780      	blx	r0
 8004ac6:	f000 f809 	bl	8004adc <abort>
	...

08004acc <_ZSt9terminatev>:
 8004acc:	4b02      	ldr	r3, [pc, #8]	; (8004ad8 <_ZSt9terminatev+0xc>)
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f7ff fff6 	bl	8004ac2 <_ZN10__cxxabiv111__terminateEPFvvE>
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	20000010 	.word	0x20000010

08004adc <abort>:
 8004adc:	2006      	movs	r0, #6
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	f000 f86a 	bl	8004bb8 <raise>
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fc f8af 	bl	8000c48 <_exit>
	...

08004aec <__errno>:
 8004aec:	4b01      	ldr	r3, [pc, #4]	; (8004af4 <__errno+0x8>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	4770      	bx	lr
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	20000014 	.word	0x20000014

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	2600      	movs	r6, #0
 8004afc:	4d0c      	ldr	r5, [pc, #48]	; (8004b30 <__libc_init_array+0x38>)
 8004afe:	4c0d      	ldr	r4, [pc, #52]	; (8004b34 <__libc_init_array+0x3c>)
 8004b00:	1b64      	subs	r4, r4, r5
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	2600      	movs	r6, #0
 8004b0a:	f000 f875 	bl	8004bf8 <_init>
 8004b0e:	4d0a      	ldr	r5, [pc, #40]	; (8004b38 <__libc_init_array+0x40>)
 8004b10:	4c0a      	ldr	r4, [pc, #40]	; (8004b3c <__libc_init_array+0x44>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	42a6      	cmp	r6, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	00b3      	lsls	r3, r6, #2
 8004b1e:	58eb      	ldr	r3, [r5, r3]
 8004b20:	4798      	blx	r3
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	00b3      	lsls	r3, r6, #2
 8004b28:	58eb      	ldr	r3, [r5, r3]
 8004b2a:	4798      	blx	r3
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	08004cac 	.word	0x08004cac
 8004b34:	08004cac 	.word	0x08004cac
 8004b38:	08004cac 	.word	0x08004cac
 8004b3c:	08004cb8 	.word	0x08004cb8

08004b40 <memcpy>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d100      	bne.n	8004b4a <memcpy+0xa>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	5ccc      	ldrb	r4, [r1, r3]
 8004b4c:	54c4      	strb	r4, [r0, r3]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	e7f8      	b.n	8004b44 <memcpy+0x4>

08004b52 <memset>:
 8004b52:	0003      	movs	r3, r0
 8004b54:	1882      	adds	r2, r0, r2
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d100      	bne.n	8004b5c <memset+0xa>
 8004b5a:	4770      	bx	lr
 8004b5c:	7019      	strb	r1, [r3, #0]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	e7f9      	b.n	8004b56 <memset+0x4>

08004b62 <_raise_r>:
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	0004      	movs	r4, r0
 8004b66:	000d      	movs	r5, r1
 8004b68:	291f      	cmp	r1, #31
 8004b6a:	d904      	bls.n	8004b76 <_raise_r+0x14>
 8004b6c:	2316      	movs	r3, #22
 8004b6e:	6003      	str	r3, [r0, #0]
 8004b70:	2001      	movs	r0, #1
 8004b72:	4240      	negs	r0, r0
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <_raise_r+0x24>
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d108      	bne.n	8004b98 <_raise_r+0x36>
 8004b86:	0020      	movs	r0, r4
 8004b88:	f000 f832 	bl	8004bf0 <_getpid_r>
 8004b8c:	002a      	movs	r2, r5
 8004b8e:	0001      	movs	r1, r0
 8004b90:	0020      	movs	r0, r4
 8004b92:	f000 f81b 	bl	8004bcc <_kill_r>
 8004b96:	e7ed      	b.n	8004b74 <_raise_r+0x12>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	2a01      	cmp	r2, #1
 8004b9c:	d0ea      	beq.n	8004b74 <_raise_r+0x12>
 8004b9e:	1c51      	adds	r1, r2, #1
 8004ba0:	d103      	bne.n	8004baa <_raise_r+0x48>
 8004ba2:	2316      	movs	r3, #22
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	e7e4      	b.n	8004b74 <_raise_r+0x12>
 8004baa:	2400      	movs	r4, #0
 8004bac:	0028      	movs	r0, r5
 8004bae:	601c      	str	r4, [r3, #0]
 8004bb0:	4790      	blx	r2
 8004bb2:	0020      	movs	r0, r4
 8004bb4:	e7de      	b.n	8004b74 <_raise_r+0x12>
	...

08004bb8 <raise>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <raise+0x10>)
 8004bbc:	0001      	movs	r1, r0
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	f7ff ffcf 	bl	8004b62 <_raise_r>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	20000014 	.word	0x20000014

08004bcc <_kill_r>:
 8004bcc:	2300      	movs	r3, #0
 8004bce:	b570      	push	{r4, r5, r6, lr}
 8004bd0:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_kill_r+0x20>)
 8004bd2:	0004      	movs	r4, r0
 8004bd4:	0008      	movs	r0, r1
 8004bd6:	0011      	movs	r1, r2
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	f7fc f825 	bl	8000c28 <_kill>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	d103      	bne.n	8004bea <_kill_r+0x1e>
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d000      	beq.n	8004bea <_kill_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	20000370 	.word	0x20000370

08004bf0 <_getpid_r>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f7fc f813 	bl	8000c1c <_getpid>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <_init>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr

08004c04 <_fini>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr
