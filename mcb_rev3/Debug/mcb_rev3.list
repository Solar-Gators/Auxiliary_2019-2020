
mcb_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080052a4  080052a4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052a4  080052a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080052b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000088  08005338  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005338  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c4c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e42  00000000  00000000  00032cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be2e  00000000  00000000  000378b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a82  00000000  00000000  000536e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7e7  00000000  00000000  00064168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010194f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  001019a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005208 	.word	0x08005208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08005208 	.word	0x08005208

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b090      	sub	sp, #64	; 0x40
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 ff59 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f915 	bl	800062c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fa5b 	bl	80008bc <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000406:	f000 f955 	bl	80006b4 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 800040a:	f000 f995 	bl	8000738 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800040e:	f000 f9f3 	bl	80007f8 <_ZL12MX_TIM3_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DAC_Write(cruiseDAC, DAC_Init);
 8000412:	4b70      	ldr	r3, [pc, #448]	; (80005d4 <main+0x1e0>)
 8000414:	0019      	movs	r1, r3
 8000416:	2000      	movs	r0, #0
 8000418:	f000 fbfe 	bl	8000c18 <_Z9DAC_Write5slavePh>
  DAC_Write(regenDAC, DAC_Init);
 800041c:	4b6d      	ldr	r3, [pc, #436]	; (80005d4 <main+0x1e0>)
 800041e:	0019      	movs	r1, r3
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fbf9 	bl	8000c18 <_Z9DAC_Write5slavePh>

  //startup functions
  HAL_GPIO_WritePin(PRE_MOTOR_GPIO_Port, PRE_MOTOR_Pin, GPIO_PIN_SET); //set PRE_MOTOR high
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2201      	movs	r2, #1
 800042c:	2140      	movs	r1, #64	; 0x40
 800042e:	0018      	movs	r0, r3
 8000430:	f003 f93f 	bl	80036b2 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000434:	4b68      	ldr	r3, [pc, #416]	; (80005d8 <main+0x1e4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <main+0x1e4>)
 800043e:	0018      	movs	r0, r3
 8000440:	f004 fa32 	bl	80048a8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <main+0x1e8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim3);
 800044c:	4b63      	ldr	r3, [pc, #396]	; (80005dc <main+0x1e8>)
 800044e:	0018      	movs	r0, r3
 8000450:	f004 fa2a 	bl	80048a8 <HAL_TIM_Base_Start_IT>

  //Debugging mcrequest here
  MITSUBA_DRIVER_TX_RL_MESSAGE mcRequest(0x08F89540);
 8000454:	4a62      	ldr	r2, [pc, #392]	; (80005e0 <main+0x1ec>)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f000 ff2a 	bl	80012b4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>
  mcRequest.txData.requestFrame0 = true;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2239      	movs	r2, #57	; 0x39
 8000464:	2101      	movs	r1, #1
 8000466:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame1 = false;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	223a      	movs	r2, #58	; 0x3a
 800046c:	2100      	movs	r1, #0
 800046e:	5499      	strb	r1, [r3, r2]
  mcRequest.txData.requestFrame2 = false;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	223b      	movs	r2, #59	; 0x3b
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  mcRequest.SendData();
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fa1a 	bl	80018b4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>

  mcFrame0.SetupReceive(MC_Receive_Callback);
 8000480:	4a58      	ldr	r2, [pc, #352]	; (80005e4 <main+0x1f0>)
 8000482:	4b59      	ldr	r3, [pc, #356]	; (80005e8 <main+0x1f4>)
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f001 f9e8 	bl	800185c <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 800048c:	f001 fa44 	bl	8001918 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  while (1)
  {
	  mcRequest.SendData(); // Send our mc.request
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fa0e 	bl	80018b4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(newInput_CT)
 8000498:	4b54      	ldr	r3, [pc, #336]	; (80005ec <main+0x1f8>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d041      	beq.n	8000524 <main+0x130>
		{
			if(!active_CT) //if charge trip was turned off. CHG_TRIP/PB0 is low
 80004a0:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <main+0x1fc>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2201      	movs	r2, #1
 80004a6:	4053      	eors	r3, r2
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d025      	beq.n	80004fa <main+0x106>
			{
				// Turn off MPPT coil
				HAL_GPIO_WritePin(CON_MPPT_GPIO_Port, CON_MPPT_Pin, GPIO_PIN_RESET);
 80004ae:	4b51      	ldr	r3, [pc, #324]	; (80005f4 <main+0x200>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	2120      	movs	r1, #32
 80004b4:	0018      	movs	r0, r3
 80004b6:	f003 f8fc 	bl	80036b2 <HAL_GPIO_WritePin>
				// Ensure MPPT precharge is off
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_RESET);
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2200      	movs	r2, #0
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 f8f5 	bl	80036b2 <HAL_GPIO_WritePin>

				// Reset timer
				if (!sysStartup)
 80004c8:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <main+0x204>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2201      	movs	r2, #1
 80004ce:	4053      	eors	r3, r2
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d007      	beq.n	80004e6 <main+0xf2>
				{
					HAL_TIM_Base_Stop_IT(&htim2);
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <main+0x1e4>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f004 fa37 	bl	800494c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004de:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <main+0x1e4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
				}

				// Reset ticks
				tickPrecharge = 0;
 80004e6:	4b45      	ldr	r3, [pc, #276]	; (80005fc <main+0x208>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]

				// Set MPPT Coil active bool
				sysMPPTCoilActive = false;
 80004ec:	4b44      	ldr	r3, [pc, #272]	; (8000600 <main+0x20c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
				sysMPPTPrecharge = false;
 80004f2:	4b44      	ldr	r3, [pc, #272]	; (8000604 <main+0x210>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e011      	b.n	800051e <main+0x12a>

			}
			else if(active_CT)  //if charge_trip
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <main+0x1fc>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00d      	beq.n	800051e <main+0x12a>
			{
				sysMPPTPrecharge = true;
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <main+0x210>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
				//Turn on PRE_MPPT
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_SET);
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2201      	movs	r2, #1
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0018      	movs	r0, r3
 8000512:	f003 f8ce 	bl	80036b2 <HAL_GPIO_WritePin>
				//Start countdown of precharge
				HAL_TIM_Base_Start_IT(&htim2);
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <main+0x1e4>)
 8000518:	0018      	movs	r0, r3
 800051a:	f004 f9c5 	bl	80048a8 <HAL_TIM_Base_Start_IT>
			}
			newInput_CT = false;
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <main+0x1f8>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
		}
		if(newInput_CAN)
 8000524:	4b38      	ldr	r3, [pc, #224]	; (8000608 <main+0x214>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d028      	beq.n	800057e <main+0x18a>
		{
			if(aux0Packet.regenOn && active_Cruise)
 800052c:	4b37      	ldr	r3, [pc, #220]	; (800060c <main+0x218>)
 800052e:	78db      	ldrb	r3, [r3, #3]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00b      	beq.n	800054c <main+0x158>
 8000534:	4b36      	ldr	r3, [pc, #216]	; (8000610 <main+0x21c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d007      	beq.n	800054c <main+0x158>
			{
				// Turn on regen brake
				HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_SET);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	4834      	ldr	r0, [pc, #208]	; (8000614 <main+0x220>)
 8000542:	2201      	movs	r2, #1
 8000544:	0019      	movs	r1, r3
 8000546:	f003 f8b4 	bl	80036b2 <HAL_GPIO_WritePin>
 800054a:	e015      	b.n	8000578 <main+0x184>
			}
			else if(aux0Packet.regenOn)
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <main+0x218>)
 800054e:	78db      	ldrb	r3, [r3, #3]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <main+0x16c>
			{
				DAC_Write(regenDAC, DAC_PowerOn);
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <main+0x224>)
 8000556:	0019      	movs	r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fb5d 	bl	8000c18 <_Z9DAC_Write5slavePh>
 800055e:	e00b      	b.n	8000578 <main+0x184>
			}
			else
			{
				// Turn off regen brake
				HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	482b      	ldr	r0, [pc, #172]	; (8000614 <main+0x220>)
 8000566:	2200      	movs	r2, #0
 8000568:	0019      	movs	r1, r3
 800056a:	f003 f8a2 	bl	80036b2 <HAL_GPIO_WritePin>
				// turn off regen DAC
				DAC_Write(regenDAC, DAC_PowerOff);
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0x228>)
 8000570:	0019      	movs	r1, r3
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fb50 	bl	8000c18 <_Z9DAC_Write5slavePh>
			}
			newInput_CAN = false;
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <main+0x214>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
		}
		if(newInput_Cruise)
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <main+0x22c>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d01b      	beq.n	80005be <main+0x1ca>
		{
			if(active_Cruise)	//Cruise is on
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <main+0x21c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d005      	beq.n	800059a <main+0x1a6>
			{
				DAC_Write(cruiseDAC, DAC_PowerOn);
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <main+0x224>)
 8000590:	0019      	movs	r1, r3
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fb40 	bl	8000c18 <_Z9DAC_Write5slavePh>
 8000598:	e00e      	b.n	80005b8 <main+0x1c4>

				//wantSpeed = ? from CAN
			}
			else
			{
				DAC_Write(cruiseDAC, DAC_PowerOff);
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <main+0x228>)
 800059c:	0019      	movs	r1, r3
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fb3a 	bl	8000c18 <_Z9DAC_Write5slavePh>
				wantSpeed = 0;
 80005a4:	491f      	ldr	r1, [pc, #124]	; (8000624 <main+0x230>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	600a      	str	r2, [r1, #0]
 80005ac:	604b      	str	r3, [r1, #4]
				actualSpeed = 0;
 80005ae:	491e      	ldr	r1, [pc, #120]	; (8000628 <main+0x234>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	600a      	str	r2, [r1, #0]
 80005b6:	604b      	str	r3, [r1, #4]
			}
			newInput_Cruise = false;
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <main+0x22c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
		}
		if(active_Cruise)
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0x21c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d100      	bne.n	80005c8 <main+0x1d4>
 80005c6:	e763      	b.n	8000490 <main+0x9c>
		{
			//Insert formula here
			DAC_Write(cruiseDAC, DAC_PowerOff);
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <main+0x228>)
 80005ca:	0019      	movs	r1, r3
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fb23 	bl	8000c18 <_Z9DAC_Write5slavePh>
	  mcRequest.SendData(); // Send our mc.request
 80005d2:	e75d      	b.n	8000490 <main+0x9c>
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000108 	.word	0x20000108
 80005dc:	20000150 	.word	0x20000150
 80005e0:	08f89540 	.word	0x08f89540
 80005e4:	08000bc1 	.word	0x08000bc1
 80005e8:	200001e4 	.word	0x200001e4
 80005ec:	20000242 	.word	0x20000242
 80005f0:	20000240 	.word	0x20000240
 80005f4:	48000800 	.word	0x48000800
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000248 	.word	0x20000248
 8000600:	20000246 	.word	0x20000246
 8000604:	20000244 	.word	0x20000244
 8000608:	20000250 	.word	0x20000250
 800060c:	20000198 	.word	0x20000198
 8000610:	20000241 	.word	0x20000241
 8000614:	48000400 	.word	0x48000400
 8000618:	20000008 	.word	0x20000008
 800061c:	2000000c 	.word	0x2000000c
 8000620:	20000243 	.word	0x20000243
 8000624:	20000258 	.word	0x20000258
 8000628:	20000260 	.word	0x20000260

0800062c <_Z18SystemClock_Configv>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b093      	sub	sp, #76	; 0x4c
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	2414      	movs	r4, #20
 8000634:	193b      	adds	r3, r7, r4
 8000636:	0018      	movs	r0, r3
 8000638:	2334      	movs	r3, #52	; 0x34
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f004 fd90 	bl	8005162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	2310      	movs	r3, #16
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f004 fd89 	bl	8005162 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2220      	movs	r2, #32
 8000654:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2201      	movs	r2, #1
 800065a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	f003 f85d 	bl	8003724 <HAL_RCC_OscConfig>
 800066a:	0003      	movs	r3, r0
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	4193      	sbcs	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 8000676:	f000 f9d7 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2203      	movs	r2, #3
 8000684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2101      	movs	r1, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f003 fbca 	bl	8003e30 <HAL_RCC_ClockConfig>
 800069c:	0003      	movs	r3, r0
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	4193      	sbcs	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80006a8:	f000 f9be 	bl	8000a28 <Error_Handler>
  }
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b013      	add	sp, #76	; 0x4c
 80006b2:	bd90      	pop	{r4, r7, pc}

080006b4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ba:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <_ZL12MX_SPI2_Initv+0x80>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006c0:	2282      	movs	r2, #130	; 0x82
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ce:	22e0      	movs	r2, #224	; 0xe0
 80006d0:	00d2      	lsls	r2, r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ea:	2210      	movs	r2, #16
 80006ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 8000702:	2207      	movs	r2, #7
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 800070e:	2200      	movs	r2, #0
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_ZL12MX_SPI2_Initv+0x7c>)
 8000714:	0018      	movs	r0, r3
 8000716:	f003 fce5 	bl	80040e4 <HAL_SPI_Init>
 800071a:	0003      	movs	r3, r0
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	4193      	sbcs	r3, r2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 8000726:	f000 f97f 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000a4 	.word	0x200000a4
 8000734:	40003800 	.word	0x40003800

08000738 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	2308      	movs	r3, #8
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2310      	movs	r3, #16
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f004 fd0a 	bl	8005162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2308      	movs	r3, #8
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f004 fd03 	bl	8005162 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	05d2      	lsls	r2, r2, #23
 8000762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <_ZL12MX_TIM2_Initv+0xbc>)
 8000768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000772:	2263      	movs	r2, #99	; 0x63
 8000774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000784:	0018      	movs	r0, r3
 8000786:	f004 f83f 	bl	8004808 <HAL_TIM_Base_Init>
 800078a:	0003      	movs	r3, r0
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	4193      	sbcs	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000796:	f000 f947 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	2108      	movs	r1, #8
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	0152      	lsls	r2, r2, #5
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a4:	187a      	adds	r2, r7, r1
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f004 fa12 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 80007b0:	0003      	movs	r3, r0
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80007bc:	f000 f934 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007cc:	003a      	movs	r2, r7
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <_ZL12MX_TIM2_Initv+0xb8>)
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f004 fc0c 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	0003      	movs	r3, r0
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80007e4:	f000 f920 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b006      	add	sp, #24
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000108 	.word	0x20000108
 80007f4:	0000bb7f 	.word	0x0000bb7f

080007f8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	2308      	movs	r3, #8
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f004 fcaa 	bl	8005162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2308      	movs	r3, #8
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f004 fca3 	bl	8005162 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <_ZL12MX_TIM3_Initv+0xbc>)
 8000820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000824:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <_ZL12MX_TIM3_Initv+0xc0>)
 8000826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000830:	2263      	movs	r2, #99	; 0x63
 8000832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000842:	0018      	movs	r0, r3
 8000844:	f003 ffe0 	bl	8004808 <HAL_TIM_Base_Init>
 8000848:	0003      	movs	r3, r0
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000854:	f000 f8e8 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	2108      	movs	r1, #8
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0152      	lsls	r2, r2, #5
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000862:	187a      	adds	r2, r7, r1
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f004 f9b3 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 800086e:	0003      	movs	r3, r0
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	4193      	sbcs	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800087a:	f000 f8d5 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	003b      	movs	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088a:	003a      	movs	r2, r7
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_ZL12MX_TIM3_Initv+0xb8>)
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f004 fbad 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	0003      	movs	r3, r0
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	4193      	sbcs	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80008a2:	f000 f8c1 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b006      	add	sp, #24
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000150 	.word	0x20000150
 80008b4:	40000400 	.word	0x40000400
 80008b8:	0000bb7f 	.word	0x0000bb7f

080008bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08b      	sub	sp, #44	; 0x2c
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	2414      	movs	r4, #20
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	0018      	movs	r0, r3
 80008c8:	2314      	movs	r3, #20
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f004 fc48 	bl	8005162 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	03c9      	lsls	r1, r1, #15
 80008dc:	430a      	orrs	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	03db      	lsls	r3, r3, #15
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0289      	lsls	r1, r1, #10
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	029b      	lsls	r3, r3, #10
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b44      	ldr	r3, [pc, #272]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0309      	lsls	r1, r1, #12
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	02c9      	lsls	r1, r1, #11
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <_ZL12MX_GPIO_Initv+0x160>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	02db      	lsls	r3, r3, #11
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_OUT_Pin|PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin
 8000942:	23dc      	movs	r3, #220	; 0xdc
 8000944:	00d9      	lsls	r1, r3, #3
 8000946:	2390      	movs	r3, #144	; 0x90
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2200      	movs	r2, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f002 feb0 	bl	80036b2 <HAL_GPIO_WritePin>
                          |SS_REGEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CON_MOTOR_Pin|CON_MPPT_Pin, GPIO_PIN_RESET);
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <_ZL12MX_GPIO_Initv+0x164>)
 8000954:	2200      	movs	r2, #0
 8000956:	2130      	movs	r1, #48	; 0x30
 8000958:	0018      	movs	r0, r3
 800095a:	f002 feaa 	bl	80036b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	4830      	ldr	r0, [pc, #192]	; (8000a24 <_ZL12MX_GPIO_Initv+0x168>)
 8000964:	2200      	movs	r2, #0
 8000966:	0019      	movs	r1, r3
 8000968:	f002 fea3 	bl	80036b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_OUT_Pin PRE_MOTOR_Pin PRE_MPPT_Pin SS_CRUISE_Pin
                           SS_REGEN_Pin */
  GPIO_InitStruct.Pin = DEBUG_OUT_Pin|PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin
 800096c:	193b      	adds	r3, r7, r4
 800096e:	22dc      	movs	r2, #220	; 0xdc
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	601a      	str	r2, [r3, #0]
                          |SS_REGEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	193a      	adds	r2, r7, r4
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fcfa 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : CON_MOTOR_Pin CON_MPPT_Pin */
  GPIO_InitStruct.Pin = CON_MOTOR_Pin|CON_MPPT_Pin;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2201      	movs	r2, #1
 800099e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <_ZL12MX_GPIO_Initv+0x164>)
 80009b0:	0019      	movs	r1, r3
 80009b2:	0010      	movs	r0, r2
 80009b4:	f002 fce8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_TRIP_Pin CRUISE_IN_Pin */
  GPIO_InitStruct.Pin = CHG_TRIP_Pin|CRUISE_IN_Pin;
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2203      	movs	r2, #3
 80009be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	22c4      	movs	r2, #196	; 0xc4
 80009c4:	0392      	lsls	r2, r2, #14
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	000c      	movs	r4, r1
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_ZL12MX_GPIO_Initv+0x168>)
 80009d4:	0019      	movs	r1, r3
 80009d6:	0010      	movs	r0, r2
 80009d8:	f002 fcd6 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : REGEN_BRK_Pin */
  GPIO_InitStruct.Pin = REGEN_BRK_Pin;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	00d2      	lsls	r2, r2, #3
 80009e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(REGEN_BRK_GPIO_Port, &GPIO_InitStruct);
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <_ZL12MX_GPIO_Initv+0x168>)
 80009fc:	0019      	movs	r1, r3
 80009fe:	0010      	movs	r0, r2
 8000a00:	f002 fcc2 	bl	8003388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f002 fc8b 	bl	8003324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a0e:	2005      	movs	r0, #5
 8000a10:	f002 fc9d 	bl	800334e <HAL_NVIC_EnableIRQ>

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00b      	add	sp, #44	; 0x2c
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000400 	.word	0x48000400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_GPIO_EXTI_Callback>:

// -----------------------------
// --- ISR DEFINITION(S) -------
// -----------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	801a      	strh	r2, [r3, #0]
	// check which pin triggered interrupt
	switch(GPIO_PIN)
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d002      	beq.n	8000a4e <HAL_GPIO_EXTI_Callback+0x1a>
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d00f      	beq.n	8000a6c <HAL_GPIO_EXTI_Callback+0x38>
 8000a4c:	e01d      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x56>
	{
	case CHG_TRIP_Pin:
		active_CT = HAL_GPIO_ReadPin(CHG_TRIP_GPIO_Port, CHG_TRIP_Pin); //set active_CT high if started up
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fe10 	bl	8003678 <HAL_GPIO_ReadPin>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	4193      	sbcs	r3, r2
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x68>)
 8000a62:	701a      	strb	r2, [r3, #0]
		newInput_CT = true;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
		break;
 8000a6a:	e010      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x5a>
	case CRUISE_IN_Pin:
		active_Cruise = HAL_GPIO_ReadPin(CRUISE_IN_GPIO_Port, CRUISE_IN_Pin); //read in the cruise GPIO to active cruise
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a6e:	2102      	movs	r1, #2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 fe01 	bl	8003678 <HAL_GPIO_ReadPin>
 8000a76:	0003      	movs	r3, r0
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	4193      	sbcs	r3, r2
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a80:	701a      	strb	r2, [r3, #0]
		newInput_Cruise = true;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e001      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x5a>
	default:
		__NOP();	// no operation
 8000a8a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	20000240 	.word	0x20000240
 8000aa0:	20000242 	.word	0x20000242
 8000aa4:	20000241 	.word	0x20000241
 8000aa8:	20000243 	.word	0x20000243

08000aac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	// check which timer triggered interrupt
	if(htim->Instance == TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d148      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0xa6>
	{
		if(sysMPPTPrecharge)
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d01f      	beq.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			if(tickPrecharge >= 17)  // 15 seconds to deal and PRE_MPPT
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b10      	cmp	r3, #16
 8000ace:	dd16      	ble.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				tickPrecharge = 0;
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_RESET);
 8000ad6:	2390      	movs	r3, #144	; 0x90
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2200      	movs	r2, #0
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f002 fde7 	bl	80036b2 <HAL_GPIO_WritePin>
				sysMPPTPrecharge = false;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(CON_MPPT_GPIO_Port, CON_MPPT_Pin, GPIO_PIN_SET);
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 fdde 	bl	80036b2 <HAL_GPIO_WritePin>
				sysMPPTCoilActive = true;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e004      	b.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x5c>
			}
			else ++tickPrecharge;
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b06:	601a      	str	r2, [r3, #0]
		}
		if(sysStartup)
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d041      	beq.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0xe8>
		{
			if (tickStartup >= 17)
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	dd16      	ble.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x9a>
			{
				HAL_GPIO_WritePin(PRE_MOTOR_GPIO_Port, PRE_MOTOR_Pin, GPIO_PIN_RESET);
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fdc6 	bl	80036b2 <HAL_GPIO_WritePin>
				tickStartup = 0;
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
				sysStartup = false;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
				//turn on CON_MOTOR 15 seconds after startup
				HAL_GPIO_WritePin(CON_MOTOR_GPIO_Port, CON_MOTOR_Pin, GPIO_PIN_SET);
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 fdba 	bl	80036b2 <HAL_GPIO_WritePin>
				sysMCCoilActive = true;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_SET);
		}
		sysDebug = !sysDebug;
	}
	else __NOP();	// no operation
}
 8000b44:	e026      	b.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0xe8>
			else ++tickStartup;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	e020      	b.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0xe8>
	else if(htim->Instance == TIM3)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d11a      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0xe6>
		if (sysDebug)
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_RESET);
 8000b64:	2390      	movs	r3, #144	; 0x90
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 fda0 	bl	80036b2 <HAL_GPIO_WritePin>
 8000b72:	e006      	b.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xd6>
			HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_SET);
 8000b74:	2390      	movs	r3, #144	; 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 fd98 	bl	80036b2 <HAL_GPIO_WritePin>
		sysDebug = !sysDebug;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4053      	eors	r3, r2
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	e000      	b.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0xe8>
	else __NOP();	// no operation
 8000b92:	46c0      	nop			; (mov r8, r8)
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000244 	.word	0x20000244
 8000ba0:	20000248 	.word	0x20000248
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	20000246 	.word	0x20000246
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	2000024c 	.word	0x2000024c
 8000bb4:	20000245 	.word	0x20000245
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	20000001 	.word	0x20000001

08000bc0 <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE>:
{
	if(!aux0.isFifoEmpty())
		aux0Packet = aux0.GetOldestDataPacket(&newInput_CAN);
}

void MC_Receive_Callback(SUBSYSTEM_DATA_MODULE*) {
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6178      	str	r0, [r7, #20]
	if(!mcFrame0.isFifoEmpty())
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ff8a 	bl	8001ae4 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4053      	eors	r3, r2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00d      	beq.n	8000bfa <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x3a>
		mcFrame0Packet = mcFrame0.GetOldestDataPacket(&newInput_CAN);
 8000bde:	4c0c      	ldr	r4, [pc, #48]	; (8000c10 <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x50>)
 8000be0:	003b      	movs	r3, r7
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x54>)
 8000be4:	4909      	ldr	r1, [pc, #36]	; (8000c0c <_Z19MC_Receive_CallbackP21SUBSYSTEM_DATA_MODULE+0x4c>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f862 	bl	8000cb0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>
 8000bec:	003b      	movs	r3, r7
 8000bee:	0020      	movs	r0, r4
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	f004 faab 	bl	8005150 <memcpy>
	int x = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
	x = x +1;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b009      	add	sp, #36	; 0x24
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	200001e4 	.word	0x200001e4
 8000c10:	20000230 	.word	0x20000230
 8000c14:	20000250 	.word	0x20000250

08000c18 <_Z9DAC_Write5slavePh>:

// ----------------------------------
// --- FUNCTION DEFINITION(S) -------
// ----------------------------------
int DAC_Write(slave_t slave, uint8_t *data)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	701a      	strb	r2, [r3, #0]
	GPIO_TypeDef* currentPort;
	uint16_t currentPin;

	// identify which slave select to use for this transaction
	switch(slave)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <_Z9DAC_Write5slavePh+0x1c>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d009      	beq.n	8000c46 <_Z9DAC_Write5slavePh+0x2e>
 8000c32:	e011      	b.n	8000c58 <_Z9DAC_Write5slavePh+0x40>
	{
	case cruiseDAC:
		currentPort = SS_CRUISE_GPIO_Port;
 8000c34:	2390      	movs	r3, #144	; 0x90
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	60fb      	str	r3, [r7, #12]
		currentPin = SS_CRUISE_Pin;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	801a      	strh	r2, [r3, #0]
		break;
 8000c44:	e00b      	b.n	8000c5e <_Z9DAC_Write5slavePh+0x46>
	case regenDAC:
		currentPort = SS_REGEN_GPIO_Port;
 8000c46:	2390      	movs	r3, #144	; 0x90
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	60fb      	str	r3, [r7, #12]
		currentPin = SS_REGEN_Pin;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	801a      	strh	r2, [r3, #0]
		break;
 8000c56:	e002      	b.n	8000c5e <_Z9DAC_Write5slavePh+0x46>
	default:
		// invalid slave select
		return -1;	// unsuccessful transaction
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	e022      	b.n	8000ca4 <_Z9DAC_Write5slavePh+0x8c>
		break;
	}

	// pull slave select low
	HAL_GPIO_WritePin(currentPort, currentPin, GPIO_PIN_RESET);
 8000c5e:	240a      	movs	r4, #10
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	8819      	ldrh	r1, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fd22 	bl	80036b2 <HAL_GPIO_WritePin>
	// transmit an array of 3 8-bit values
	HAL_SPI_Transmit(&hspi2, data, 3, HAL_MAX_DELAY);
 8000c6e:	2301      	movs	r3, #1
 8000c70:	425b      	negs	r3, r3
 8000c72:	6839      	ldr	r1, [r7, #0]
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <_Z9DAC_Write5slavePh+0x94>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	f003 faec 	bl	8004254 <HAL_SPI_Transmit>
	// pull slave select high
	HAL_GPIO_WritePin(currentPort, currentPin, GPIO_PIN_SET);
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	8819      	ldrh	r1, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	0018      	movs	r0, r3
 8000c86:	f002 fd14 	bl	80036b2 <HAL_GPIO_WritePin>
	// poll for SPI ready
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_Z9DAC_Write5slavePh+0x94>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f003 fc39 	bl	8004504 <HAL_SPI_GetState>
 8000c92:	0003      	movs	r3, r0
 8000c94:	3b01      	subs	r3, #1
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	4193      	sbcs	r3, r2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d000      	beq.n	8000ca2 <_Z9DAC_Write5slavePh+0x8a>
 8000ca0:	e7f3      	b.n	8000c8a <_Z9DAC_Write5slavePh+0x72>

	return 0;	// successful transaction
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b005      	add	sp, #20
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	200000a4 	.word	0x200000a4

08000cb0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	61f8      	str	r0, [r7, #28]
 8000cb8:	61b9      	str	r1, [r7, #24]
 8000cba:	617a      	str	r2, [r7, #20]
	{
		CHILD_DATA returnData;
	    if(success)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01a      	beq.n	8000cf8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3312      	adds	r3, #18
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f819 	bl	8000d02 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00d      	beq.n	8000cf8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8000cdc:	69fc      	ldr	r4, [r7, #28]
 8000cde:	003b      	movs	r3, r7
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fbe3 	bl	80014b0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>
 8000cea:	003b      	movs	r3, r7
 8000cec:	0020      	movs	r0, r4
 8000cee:	0019      	movs	r1, r3
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	f004 fa2c 	bl	8005150 <memcpy>
	        }
	    }
	    return returnData;
 8000cf8:	46c0      	nop			; (mov r8, r8)
	}
 8000cfa:	69f8      	ldr	r0, [r7, #28]
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b00b      	add	sp, #44	; 0x2c
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 8000d0c:	230e      	movs	r3, #14
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8b5a      	ldrh	r2, [r3, #26]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	8b1b      	ldrh	r3, [r3, #24]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10a      	bne.n	8000d36 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7f1b      	ldrb	r3, [r3, #28]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d022      	beq.n	8000d74 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
            if(success)
 8000d34:	e01e      	b.n	8000d74 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 8000d42:	230e      	movs	r3, #14
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	8b52      	ldrh	r2, [r2, #26]
 8000d4a:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	8b5b      	ldrh	r3, [r3, #26]
 8000d50:	3301      	adds	r3, #1
 8000d52:	2103      	movs	r1, #3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fb47 	bl	80003e8 <__aeabi_idivmod>
 8000d5a:	000b      	movs	r3, r1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	8b5a      	ldrh	r2, [r3, #26]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	8b1b      	ldrh	r3, [r3, #24]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d102      	bne.n	8000d74 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 8000d74:	230e      	movs	r3, #14
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	18d3      	adds	r3, r2, r3
    }
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b004      	add	sp, #16
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_Z41__static_initialization_and_destruction_0ii>:
	temp[1] = ((*data) >> 4) & 0xFF;	// second 8 bits is data[11:4]
	temp[2] = ((*data) << 4) & 0xFF;	// third 8 bits is data[3:0] in the upper nibble
										// and 4 don't care bits in the lower nibble
	// write spliced data to DAC
	return DAC_Write(slave, temp);
}
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10c      	bne.n	8000db2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d108      	bne.n	8000db2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static AUX_MESSAGE_0 aux0;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f9ec 	bl	8001180 <_ZN13AUX_MESSAGE_0C1Ev>
static MITSUBA_DRIVER_RX_FRAME_0 mcFrame0(0);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fc05 	bl	80015bc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	0000ffff 	.word	0x0000ffff
 8000dc0:	200001a0 	.word	0x200001a0
 8000dc4:	200001e4 	.word	0x200001e4

08000dc8 <_GLOBAL__sub_I_hspi2>:
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <_GLOBAL__sub_I_hspi2+0x14>)
 8000dce:	0019      	movs	r1, r3
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff ffd9 	bl	8000d88 <_Z41__static_initialization_and_destruction_0ii>
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	0000ffff 	.word	0x0000ffff

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	69da      	ldr	r2, [r3, #28]
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0549      	lsls	r1, r1, #21
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	055b      	lsls	r3, r3, #21
 8000e14:	4013      	ands	r3, r2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	2414      	movs	r4, #20
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f004 f991 	bl	8005162 <memset>
  if(hcan->Instance==CAN)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_CAN_MspInit+0x94>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d133      	bne.n	8000eb2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e4c:	69da      	ldr	r2, [r3, #28]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0489      	lsls	r1, r1, #18
 8000e54:	430a      	orrs	r2, r1
 8000e56:	61da      	str	r2, [r3, #28]
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	049b      	lsls	r3, r3, #18
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0289      	lsls	r1, r1, #10
 8000e70:	430a      	orrs	r2, r1
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_CAN_MspInit+0x98>)
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	029b      	lsls	r3, r3, #10
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	22c0      	movs	r2, #192	; 0xc0
 8000e86:	0152      	lsls	r2, r2, #5
 8000e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	2390      	movs	r3, #144	; 0x90
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 fa6b 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40006400 	.word	0x40006400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b08b      	sub	sp, #44	; 0x2c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	2414      	movs	r4, #20
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f004 f943 	bl	8005162 <memset>
  if(hspi->Instance==SPI2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d132      	bne.n	8000f4c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	01c9      	lsls	r1, r1, #7
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	01db      	lsls	r3, r3, #7
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	02c9      	lsls	r1, r1, #11
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	02db      	lsls	r3, r3, #11
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	22a0      	movs	r2, #160	; 0xa0
 8000f22:	0212      	lsls	r2, r2, #8
 8000f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	0021      	movs	r1, r4
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2203      	movs	r2, #3
 8000f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_SPI_MspInit+0x98>)
 8000f44:	0019      	movs	r1, r3
 8000f46:	0010      	movs	r0, r2
 8000f48:	f002 fa1e 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00b      	add	sp, #44	; 0x2c
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	40003800 	.word	0x40003800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d114      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	61da      	str	r2, [r3, #28]
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2201      	movs	r2, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	200f      	movs	r0, #15
 8000f92:	f002 f9c7 	bl	8003324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f002 f9d9 	bl	800334e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f9c:	e018      	b.n	8000fd0 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d113      	bne.n	8000fd0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fae:	2102      	movs	r1, #2
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	61da      	str	r2, [r3, #28]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f002 f9ad 	bl	8003324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f002 f9bf 	bl	800334e <HAL_NVIC_EnableIRQ>
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f001 f99a 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001016:	2001      	movs	r0, #1
 8001018:	f002 fb68 	bl	80036ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800101c:	2002      	movs	r0, #2
 800101e:	f002 fb65 	bl	80036ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <TIM2_IRQHandler+0x14>)
 800102e:	0018      	movs	r0, r3
 8001030:	f003 fcba 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000108 	.word	0x20000108

08001040 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <TIM3_IRQHandler+0x14>)
 8001046:	0018      	movs	r0, r3
 8001048:	f003 fcae 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	20000150 	.word	0x20000150

08001058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_kill>:

int _kill(int pid, int sig)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106e:	f004 f845 	bl	80050fc <__errno>
 8001072:	0003      	movs	r3, r0
 8001074:	2216      	movs	r2, #22
 8001076:	601a      	str	r2, [r3, #0]
	return -1;
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <_exit>:

void _exit (int status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800108c:	2301      	movs	r3, #1
 800108e:	425a      	negs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ffe5 	bl	8001064 <_kill>
	while (1) {}		/* Make sure we hang here */
 800109a:	e7fe      	b.n	800109a <_exit+0x16>

0800109c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 80010a6:	b590      	push	{r4, r7, lr}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	2408      	movs	r4, #8
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	6018      	str	r0, [r3, #0]
 80010b2:	6059      	str	r1, [r3, #4]
 80010b4:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	0021      	movs	r1, r4
 80010c2:	187a      	adds	r2, r7, r1
 80010c4:	7912      	ldrb	r2, [r2, #4]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	79db      	ldrb	r3, [r3, #7]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25a      	sxtb	r2, r3
 8001104:	187b      	adds	r3, r7, r1
 8001106:	799b      	ldrb	r3, [r3, #6]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25a      	sxtb	r2, r3
 800111c:	187b      	adds	r3, r7, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	b25b      	sxtb	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b25b      	sxtb	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b25a      	sxtb	r2, r3
 8001134:	187b      	adds	r3, r7, r1
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	b25b      	sxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b25b      	sxtb	r3, r3
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b25a      	sxtb	r2, r3
 800114c:	187b      	adds	r3, r7, r1
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	b25b      	sxtb	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b25b      	sxtb	r3, r3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25a      	sxtb	r2, r3
 8001164:	187b      	adds	r3, r7, r1
 8001166:	78db      	ldrb	r3, [r3, #3]
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	b25b      	sxtb	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b005      	add	sp, #20
 800117c:	bd90      	pop	{r4, r7, pc}
	...

08001180 <_ZN13AUX_MESSAGE_0C1Ev>:

	return output;
}

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 800118c:	2300      	movs	r3, #0
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2201      	movs	r2, #1
 8001198:	f000 f80c 	bl	80011b4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
{}
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	000003ff 	.word	0x000003ff
 80011b0:	08005258 	.word	0x08005258

080011b4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	        }
	    }
	    return returnData;
	}
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	0019      	movs	r1, r3
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	1c0a      	adds	r2, r1, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	781c      	ldrb	r4, [r3, #0]
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	2324      	movs	r3, #36	; 0x24
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2320      	movs	r3, #32
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	0023      	movs	r3, r4
 80011e8:	f000 faec 	bl	80017c4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]
		{}
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b005      	add	sp, #20
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	08005264 	.word	0x08005264

08001200 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3309      	adds	r3, #9
 800120c:	001c      	movs	r4, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2239      	movs	r2, #57	; 0x39
 8001212:	5c99      	ldrb	r1, [r3, r2]
 8001214:	1898      	adds	r0, r3, r2
 8001216:	7840      	ldrb	r0, [r0, #1]
 8001218:	0200      	lsls	r0, r0, #8
 800121a:	4301      	orrs	r1, r0
 800121c:	1898      	adds	r0, r3, r2
 800121e:	7880      	ldrb	r0, [r0, #2]
 8001220:	0400      	lsls	r0, r0, #16
 8001222:	4301      	orrs	r1, r0
 8001224:	1898      	adds	r0, r3, r2
 8001226:	78c0      	ldrb	r0, [r0, #3]
 8001228:	0600      	lsls	r0, r0, #24
 800122a:	4301      	orrs	r1, r0
 800122c:	2000      	movs	r0, #0
 800122e:	0008      	movs	r0, r1
 8001230:	189b      	adds	r3, r3, r2
 8001232:	791a      	ldrb	r2, [r3, #4]
 8001234:	7959      	ldrb	r1, [r3, #5]
 8001236:	0209      	lsls	r1, r1, #8
 8001238:	430a      	orrs	r2, r1
 800123a:	7999      	ldrb	r1, [r3, #6]
 800123c:	0409      	lsls	r1, r1, #16
 800123e:	430a      	orrs	r2, r1
 8001240:	79db      	ldrb	r3, [r3, #7]
 8001242:	061b      	lsls	r3, r3, #24
 8001244:	431a      	orrs	r2, r3
 8001246:	2300      	movs	r3, #0
 8001248:	0013      	movs	r3, r2
 800124a:	0022      	movs	r2, r4
 800124c:	0019      	movs	r1, r3
 800124e:	f7ff ff2a 	bl	80010a6 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b003      	add	sp, #12
 8001258:	bd90      	pop	{r4, r7, pc}

0800125a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>:
//Private Function Definitions

//Protected Function Definitions
/*****************TX Classes*****************/
void MITSUBA_DRIVER_TX_RL_MESSAGE::dataPacketToArray(MITSUBA_DRIVER_TX_RL_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	6018      	str	r0, [r3, #0]
 8001264:	6039      	str	r1, [r7, #0]
	output[0] = 0;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.requestFrame0) << 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	1d3a      	adds	r2, r7, #4
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	4313      	orrs	r3, r2
 8001276:	b2da      	uxtb	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame1) << 1;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b25a      	sxtb	r2, r3
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b25b      	sxtb	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	b2da      	uxtb	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame2) << 2;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25a      	sxtb	r2, r3
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>:

	return output;
}

//Public Function Definitions
MITSUBA_DRIVER_TX_RL_MESSAGE::MITSUBA_DRIVER_TX_RL_MESSAGE(uint32_t message_id):
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_TX_RL_MESSAGE, MITSUBA_DRIVER_TX_RL_DATA_PACKET>{message_id,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2201      	movs	r2, #1
 80012ce:	f000 f98f 	bl	80015f0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em+0x30>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]
{}
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	08005288 	.word	0x08005288

080012e8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
/*****************RX Classes*****************/
//RX Frame 0
void MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	003c      	movs	r4, r7
 80012f0:	6020      	str	r0, [r4, #0]
 80012f2:	6061      	str	r1, [r4, #4]
 80012f4:	60a2      	str	r2, [r4, #8]
 80012f6:	60e3      	str	r3, [r4, #12]
	output[0] = 0;
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltage);
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	003b      	movs	r3, r7
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b2da      	uxtb	r2, r3
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	3301      	adds	r3, #1
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.battVoltage >> 8);
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	3301      	adds	r3, #1
 800131c:	7819      	ldrb	r1, [r3, #0]
 800131e:	003b      	movs	r3, r7
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	121b      	asrs	r3, r3, #8
 8001324:	b2da      	uxtb	r2, r3
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	3301      	adds	r3, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrent) << 2);
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	3301      	adds	r3, #1
 8001334:	7819      	ldrb	r1, [r3, #0]
 8001336:	003b      	movs	r3, r7
 8001338:	885b      	ldrh	r3, [r3, #2]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	3301      	adds	r3, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	3302      	adds	r3, #2
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.battCurrent >> 6);
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	3302      	adds	r3, #2
 8001356:	7819      	ldrb	r1, [r3, #0]
 8001358:	003b      	movs	r3, r7
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	119b      	asrs	r3, r3, #6
 800135e:	b2da      	uxtb	r2, r3
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	3302      	adds	r3, #2
 8001364:	430a      	orrs	r2, r1
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrentDir) << 3);
 800136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136c:	3302      	adds	r3, #2
 800136e:	7819      	ldrb	r1, [r3, #0]
 8001370:	003b      	movs	r3, r7
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	b2da      	uxtb	r2, r3
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	3302      	adds	r3, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.motorCurrentPkAvg << 4);
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	3302      	adds	r3, #2
 8001386:	7819      	ldrb	r1, [r3, #0]
 8001388:	003b      	movs	r3, r7
 800138a:	88db      	ldrh	r3, [r3, #6]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	b2da      	uxtb	r2, r3
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	3302      	adds	r3, #2
 8001396:	430a      	orrs	r2, r1
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	3303      	adds	r3, #3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorCurrentPkAvg >> 4);
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	3303      	adds	r3, #3
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	003b      	movs	r3, r7
 80013ac:	88db      	ldrh	r3, [r3, #6]
 80013ae:	111b      	asrs	r3, r3, #4
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	3303      	adds	r3, #3
 80013b6:	430a      	orrs	r2, r1
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(static_cast<uint32_t>(input.FETtemp) << 6);
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	3303      	adds	r3, #3
 80013c0:	7819      	ldrb	r1, [r3, #0]
 80013c2:	003b      	movs	r3, r7
 80013c4:	7a1b      	ldrb	r3, [r3, #8]
 80013c6:	019b      	lsls	r3, r3, #6
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	3303      	adds	r3, #3
 80013ce:	430a      	orrs	r2, r1
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]


	uint32_t convMotorRPM = input.motorRPM * 1;
 80013d4:	003b      	movs	r3, r7
 80013d6:	895b      	ldrh	r3, [r3, #10]
 80013d8:	617b      	str	r3, [r7, #20]
	output[4] = 0;
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	3304      	adds	r3, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.FETtemp >> 2);
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	3304      	adds	r3, #4
 80013e6:	7819      	ldrb	r1, [r3, #0]
 80013e8:	003b      	movs	r3, r7
 80013ea:	7a1b      	ldrb	r3, [r3, #8]
 80013ec:	109b      	asrs	r3, r3, #2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	3304      	adds	r3, #4
 80013f4:	430a      	orrs	r2, r1
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
	output[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	3304      	adds	r3, #4
 80013fe:	7819      	ldrb	r1, [r3, #0]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	3304      	adds	r3, #4
 800140c:	430a      	orrs	r2, r1
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

	output[5] = 0;
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	3305      	adds	r3, #5
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	3305      	adds	r3, #5
 800141e:	7819      	ldrb	r1, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	227f      	movs	r2, #127	; 0x7f
 8001428:	4013      	ands	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	3305      	adds	r3, #5
 8001430:	430a      	orrs	r2, r1
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint8_t>(input.PWMDuty << 7));
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	3305      	adds	r3, #5
 800143a:	7819      	ldrb	r1, [r3, #0]
 800143c:	003b      	movs	r3, r7
 800143e:	899b      	ldrh	r3, [r3, #12]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	b2da      	uxtb	r2, r3
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	3305      	adds	r3, #5
 800144a:	430a      	orrs	r2, r1
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]

	output[6] = 0;
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	3306      	adds	r3, #6
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
	output[6] |= static_cast<uint8_t>(input.PWMDuty >> 1);
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	3306      	adds	r3, #6
 800145c:	7819      	ldrb	r1, [r3, #0]
 800145e:	003b      	movs	r3, r7
 8001460:	899b      	ldrh	r3, [r3, #12]
 8001462:	105b      	asrs	r3, r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	3306      	adds	r3, #6
 800146a:	430a      	orrs	r2, r1
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]

	output[7] = 0;
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	3307      	adds	r3, #7
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(input.PWMDuty >> 9);
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	3307      	adds	r3, #7
 800147c:	7819      	ldrb	r1, [r3, #0]
 800147e:	003b      	movs	r3, r7
 8001480:	899b      	ldrh	r3, [r3, #12]
 8001482:	125b      	asrs	r3, r3, #9
 8001484:	b2da      	uxtb	r2, r3
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	3307      	adds	r3, #7
 800148a:	430a      	orrs	r2, r1
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(static_cast<uint32_t>(input.LeadAngle) << 1);
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	3307      	adds	r3, #7
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	003b      	movs	r3, r7
 8001498:	7b9b      	ldrb	r3, [r3, #14]
 800149a:	18db      	adds	r3, r3, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	3307      	adds	r3, #7
 80014a2:	430a      	orrs	r2, r1
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b007      	add	sp, #28
 80014ae:	bd90      	pop	{r4, r7, pc}

080014b0 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET output;
	uint32_t preBattVoltage = (static_cast<uint32_t>(input[1] & 3) << 8) | (input[0]);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	021a      	lsls	r2, r3, #8
 80014c2:	23c0      	movs	r3, #192	; 0xc0
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
	output.battVoltage = static_cast<uint16_t>(preBattVoltage);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	801a      	strh	r2, [r3, #0]

	uint32_t preBattCurrent = (static_cast<uint32_t>(input[2] & 7) << 6) | (input[1] >> 2);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3302      	adds	r3, #2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	019a      	lsls	r2, r3, #6
 80014e0:	23e0      	movs	r3, #224	; 0xe0
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	3201      	adds	r2, #1
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	1092      	asrs	r2, r2, #2
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
	output.battCurrent = static_cast<uint16_t>(preBattCurrent);
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	805a      	strh	r2, [r3, #2]

	output.battCurrentDir = static_cast<bool>(input[2] & 8);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3302      	adds	r3, #2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	001a      	movs	r2, r3
 8001502:	2308      	movs	r3, #8
 8001504:	4013      	ands	r3, r2
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	4193      	sbcs	r3, r2
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	711a      	strb	r2, [r3, #4]

	uint32_t preMotorCurrent = static_cast<uint32_t>((input[3] & 0x3F) << 4) | (input[2] >> 4);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3303      	adds	r3, #3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	001a      	movs	r2, r3
 800151a:	23fc      	movs	r3, #252	; 0xfc
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	3202      	adds	r2, #2
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	1112      	asrs	r2, r2, #4
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
	output.motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	80da      	strh	r2, [r3, #6]

	uint32_t preFETtemp = static_cast<uint32_t>((input[4] & 7) << 2) | (input[3] >> 6);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3304      	adds	r3, #4
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	001a      	movs	r2, r3
 800153e:	231c      	movs	r3, #28
 8001540:	4013      	ands	r3, r2
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	3203      	adds	r2, #3
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	1192      	asrs	r2, r2, #6
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
	output.FETtemp = static_cast<uint8_t>(preFETtemp);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	721a      	strb	r2, [r3, #8]

	uint32_t preMotorRPM = (static_cast<uint32_t>(input[5] & 0x7F) << 5) | (input[4] >> 3);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3305      	adds	r3, #5
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	23fe      	movs	r3, #254	; 0xfe
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	3204      	adds	r2, #4
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	10d2      	asrs	r2, r2, #3
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
	output.motorRPM = static_cast<uint16_t>(preMotorRPM);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	815a      	strh	r2, [r3, #10]

	uint32_t preDuty = (static_cast<uint32_t>(input[7] & 1) << 9) | (input[6] << 1) | (input[5] >> 7);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3307      	adds	r3, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	025a      	lsls	r2, r3, #9
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4013      	ands	r3, r2
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	3206      	adds	r2, #6
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	4313      	orrs	r3, r2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	3205      	adds	r2, #5
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	11d2      	asrs	r2, r2, #7
 8001598:	4313      	orrs	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
	output.PWMDuty = static_cast<uint16_t>(preDuty);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	819a      	strh	r2, [r3, #12]

	output.LeadAngle = static_cast<uint8_t>((input[7] >> 1));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3307      	adds	r3, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	105b      	asrs	r3, r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	739a      	strb	r2, [r3, #14]

	return output;
 80015b2:	46c0      	nop			; (mov r8, r8)
}
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b008      	add	sp, #32
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>:

MITSUBA_DRIVER_RX_FRAME_0::MITSUBA_DRIVER_RX_FRAME_0(uint32_t message_id):
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_0, MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET>{message_id,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, true, false}
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	2208      	movs	r2, #8
 80015d6:	f000 f831 	bl	800163c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em+0x30>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	601a      	str	r2, [r3, #0]
{}
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	08005270 	.word	0x08005270

080015f0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	0019      	movs	r1, r3
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	1c0a      	adds	r2, r1, #0
 8001604:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	781c      	ldrb	r4, [r3, #0]
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	2324      	movs	r3, #36	; 0x24
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2320      	movs	r3, #32
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	0023      	movs	r3, r4
 8001624:	f000 f8ce 	bl	80017c4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb+0x48>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]
		{}
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b005      	add	sp, #20
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	08005294 	.word	0x08005294

0800163c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b087      	sub	sp, #28
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	0019      	movs	r1, r3
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	1c0a      	adds	r2, r1, #0
 8001650:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	1dbb      	adds	r3, r7, #6
 8001656:	781c      	ldrb	r4, [r3, #0]
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	2324      	movs	r3, #36	; 0x24
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	2320      	movs	r3, #32
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	0023      	movs	r3, r4
 8001670:	f000 f8a8 	bl	80017c4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]
		{}
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b005      	add	sp, #20
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	0800527c 	.word	0x0800527c

08001688 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3309      	adds	r3, #9
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	223a      	movs	r2, #58	; 0x3a
 800169a:	9100      	str	r1, [sp, #0]
 800169c:	5a99      	ldrh	r1, [r3, r2]
 800169e:	1898      	adds	r0, r3, r2
 80016a0:	8840      	ldrh	r0, [r0, #2]
 80016a2:	0400      	lsls	r0, r0, #16
 80016a4:	4301      	orrs	r1, r0
 80016a6:	2600      	movs	r6, #0
 80016a8:	000e      	movs	r6, r1
 80016aa:	1899      	adds	r1, r3, r2
 80016ac:	8888      	ldrh	r0, [r1, #4]
 80016ae:	88c9      	ldrh	r1, [r1, #6]
 80016b0:	0409      	lsls	r1, r1, #16
 80016b2:	4301      	orrs	r1, r0
 80016b4:	2500      	movs	r5, #0
 80016b6:	000d      	movs	r5, r1
 80016b8:	1899      	adds	r1, r3, r2
 80016ba:	8908      	ldrh	r0, [r1, #8]
 80016bc:	8949      	ldrh	r1, [r1, #10]
 80016be:	0409      	lsls	r1, r1, #16
 80016c0:	4301      	orrs	r1, r0
 80016c2:	2400      	movs	r4, #0
 80016c4:	000c      	movs	r4, r1
 80016c6:	189b      	adds	r3, r3, r2
 80016c8:	899a      	ldrh	r2, [r3, #12]
 80016ca:	89db      	ldrh	r3, [r3, #14]
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	0013      	movs	r3, r2
 80016d4:	0030      	movs	r0, r6
 80016d6:	0029      	movs	r1, r5
 80016d8:	0022      	movs	r2, r4
 80016da:	f7ff fe05 	bl	80012e8 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b003      	add	sp, #12
 80016e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016e6 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80016e6:	b590      	push	{r4, r7, lr}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3309      	adds	r3, #9
 80016f2:	001c      	movs	r4, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2239      	movs	r2, #57	; 0x39
 80016f8:	5c99      	ldrb	r1, [r3, r2]
 80016fa:	1898      	adds	r0, r3, r2
 80016fc:	7840      	ldrb	r0, [r0, #1]
 80016fe:	0200      	lsls	r0, r0, #8
 8001700:	4301      	orrs	r1, r0
 8001702:	189b      	adds	r3, r3, r2
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	430b      	orrs	r3, r1
 800170a:	001a      	movs	r2, r3
 800170c:	2300      	movs	r3, #0
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	0a12      	lsrs	r2, r2, #8
 8001712:	0e1b      	lsrs	r3, r3, #24
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4313      	orrs	r3, r2
 8001718:	0021      	movs	r1, r4
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fd9d 	bl	800125a <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>
	}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b003      	add	sp, #12
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b08d      	sub	sp, #52	; 0x34
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2100      	movs	r1, #0
 8001734:	0018      	movs	r0, r3
 8001736:	f001 fad3 	bl	8002ce0 <HAL_CAN_GetRxFifoFillLevel>
 800173a:	0003      	movs	r3, r0
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	4193      	sbcs	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d02e      	beq.n	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8001746:	2308      	movs	r3, #8
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	2410      	movs	r4, #16
 800174c:	193a      	adds	r2, r7, r4
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	2100      	movs	r1, #0
 8001752:	f001 f9a9 	bl	8002aa8 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8001756:	0022      	movs	r2, r4
 8001758:	18bb      	adds	r3, r7, r2
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8001760:	18bb      	adds	r3, r7, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e002      	b.n	800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001766:	2310      	movs	r3, #16
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f863 	bl	8001838 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8001772:	0003      	movs	r3, r0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0d9      	beq.n	8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 800177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177e:	7a1b      	ldrb	r3, [r3, #8]
 8001780:	001a      	movs	r2, r3
 8001782:	2310      	movs	r3, #16
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d1d1      	bne.n	8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 800178c:	2308      	movs	r3, #8
 800178e:	18fa      	adds	r2, r7, r3
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	0011      	movs	r1, r2
 8001794:	0018      	movs	r0, r3
 8001796:	f000 f9b3 	bl	8001b00 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f8aa 	bl	80018f6 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80017a2:	e7c5      	b.n	8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b00d      	add	sp, #52	; 0x34
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <CEC_CAN_IRQHandler+0x14>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 fae9 	bl	8002d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	200002e0 	.word	0x200002e0

080017c4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	0019      	movs	r1, r3
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	1c0a      	adds	r2, r1, #0
 80017d8:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1dfa      	adds	r2, r7, #7
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	721a      	strb	r2, [r3, #8]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3312      	adds	r3, #18
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f997 	bl	8001b26 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1dba      	adds	r2, r7, #6
 80017fc:	2130      	movs	r1, #48	; 0x30
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	545a      	strb	r2, [r3, r1]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	2318      	movs	r3, #24
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2131      	movs	r1, #49	; 0x31
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	5453      	strb	r3, [r2, r1]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	221c      	movs	r2, #28
 8001812:	18ba      	adds	r2, r7, r2
 8001814:	2132      	movs	r1, #50	; 0x32
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	545a      	strb	r2, [r3, r1]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
{}
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	080052a0 	.word	0x080052a0

08001838 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fa52 	bl	8001cf0 <_ZN14RX_BINARY_TREE11FindElementEm>
 800184c:	0003      	movs	r3, r0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	20000268 	.word	0x20000268

0800185c <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2238      	movs	r2, #56	; 0x38
 8001870:	5c9b      	ldrb	r3, [r3, r2]
 8001872:	2201      	movs	r2, #1
 8001874:	4053      	eors	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d015      	beq.n	80018a8 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x4c>
    {
        bool success = SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 800187c:	250f      	movs	r5, #15
 800187e:	197c      	adds	r4, r7, r5
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x54>)
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fa14 	bl	8001cb4 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
 800188c:	0003      	movs	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]
        // TODO figure out a way to make this better
		#ifdef DEBUG
        	if(!success)
 8001890:	197b      	adds	r3, r7, r5
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	4053      	eors	r3, r2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d000      	beq.n	80018a0 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x44>
        	{
        		__BKPT(0);
 800189e:	be00      	bkpt	0x0000
        	}
			  // If you are at this breakpoint then your number of messages is incorrect
		#endif
        isReceiving = true;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2238      	movs	r2, #56	; 0x38
 80018a4:	2101      	movs	r1, #1
 80018a6:	5499      	strb	r1, [r3, r2]
    } 
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bdb0      	pop	{r4, r5, r7, pc}
 80018b0:	20000268 	.word	0x20000268

080018b4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2231      	movs	r2, #49	; 0x31
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d113      	bne.n	80018ee <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2232      	movs	r2, #50	; 0x32
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f8c4 	bl	8001a60 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 80018d8:	e009      	b.n	80018ee <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	0010      	movs	r0, r2
 80018e4:	4798      	blx	r3
	    this->sendTransmitBufferData();
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f877 	bl	80019dc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	0010      	movs	r0, r2
 800190e:	4798      	blx	r3
    }
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001920:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8001922:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001926:	2206      	movs	r2, #6
 8001928:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
//	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001938:	22c0      	movs	r2, #192	; 0xc0
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0352      	lsls	r2, r2, #13
 8001944:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001948:	2200      	movs	r2, #0
 800194a:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800194e:	2200      	movs	r2, #0
 8001950:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001954:	2200      	movs	r2, #0
 8001956:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800195a:	2200      	movs	r2, #0
 800195c:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001960:	2200      	movs	r2, #0
 8001962:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8001966:	2200      	movs	r2, #0
 8001968:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800196c:	0018      	movs	r0, r3
 800196e:	f000 fd03 	bl	8002378 <HAL_CAN_Init>
 8001972:	0003      	movs	r3, r0
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	4193      	sbcs	r3, r2
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6a>
	{
		Error_Handler();
 800197e:	f7ff f853 	bl	8000a28 <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 8001982:	003b      	movs	r3, r7
 8001984:	2201      	movs	r2, #1
 8001986:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 8001988:	003b      	movs	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 800198e:	003b      	movs	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 8001994:	003b      	movs	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 800199a:	003b      	movs	r3, r7
 800199c:	2201      	movs	r2, #1
 800199e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 80019a0:	003b      	movs	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 80019a6:	003b      	movs	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80019ac:	003a      	movs	r2, r7
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80019b0:	0011      	movs	r1, r2
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fe2a 	bl	800260c <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80019ba:	2102      	movs	r1, #2
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 f9ba 	bl	8002d36 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 ff13 	bl	80027f0 <HAL_CAN_Start>
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b00a      	add	sp, #40	; 0x28
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	200002e0 	.word	0x200002e0
 80019d8:	40006400 	.word	0x40006400

080019dc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d032      	beq.n	8001a52 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f001 f822 	bl	8002a38 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019f4:	0003      	movs	r3, r0
 80019f6:	425a      	negs	r2, r3
 80019f8:	4153      	adcs	r3, r2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d000      	beq.n	8001a02 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8001a00:	e7f4      	b.n	80019ec <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8001a02:	210c      	movs	r1, #12
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7a1b      	ldrb	r3, [r3, #8]
 8001a0e:	001a      	movs	r2, r3
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2230      	movs	r2, #48	; 0x30
 8001a18:	5c9b      	ldrb	r3, [r3, r2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2204      	movs	r2, #4
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e007      	b.n	8001a3e <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	210c      	movs	r1, #12
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3309      	adds	r3, #9
 8001a42:	001a      	movs	r2, r3
 8001a44:	2324      	movs	r3, #36	; 0x24
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	210c      	movs	r1, #12
 8001a4a:	1879      	adds	r1, r7, r1
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8001a4e:	f000 ff15 	bl	800287c <HAL_CAN_AddTxMessage>
	}
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b00a      	add	sp, #40	; 0x28
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	200002e0 	.word	0x200002e0

08001a60 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d032      	beq.n	8001ad6 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x76>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 ffe0 	bl	8002a38 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	425a      	negs	r2, r3
 8001a7c:	4153      	adcs	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d000      	beq.n	8001a86 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 8001a84:	e7f4      	b.n	8001a70 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 8001a86:	210c      	movs	r1, #12
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7a1b      	ldrb	r3, [r3, #8]
 8001a92:	001a      	movs	r2, r3
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2230      	movs	r2, #48	; 0x30
 8001a9c:	5c9b      	ldrb	r3, [r3, r2]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x52>
		{
			pHeader.ExtId = this->messageIdentifier;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2204      	movs	r2, #4
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e007      	b.n	8001ac2 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x62>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	210c      	movs	r1, #12
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3309      	adds	r3, #9
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	2324      	movs	r3, #36	; 0x24
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	210c      	movs	r1, #12
 8001ace:	1879      	adds	r1, r7, r1
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8001ad2:	f000 fed3 	bl	800287c <HAL_CAN_AddTxMessage>
	}
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b00a      	add	sp, #40	; 0x28
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	200002e0 	.word	0x200002e0

08001ae4 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3312      	adds	r3, #18
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f82a 	bl	8001b4a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8001af6:	0003      	movs	r3, r0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3312      	adds	r3, #18
 8001b0e:	240f      	movs	r4, #15
 8001b10:	193a      	adds	r2, r7, r4
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f82d 	bl	8001b74 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b005      	add	sp, #20
 8001b24:	bd90      	pop	{r4, r7, pc}

08001b26 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
template <class T,uint16_t DEPTH, uint16_t SIZE>
class HELPER_FIFO
{
public:
    //Constructors
    HELPER_FIFO():
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	831a      	strh	r2, [r3, #24]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	835a      	strh	r2, [r3, #26]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	771a      	strb	r2, [r3, #28]
    {}
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    //Public Function Definitions
    bool IsEmpty()
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
    {
        return (headIndex == tailIndex ? emptyNotFull : false);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8b1a      	ldrh	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	8b5b      	ldrh	r3, [r3, #26]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d105      	bne.n	8001b6a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7f1b      	ldrb	r3, [r3, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8001b6a:	2300      	movs	r3, #0
    }
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8b5a      	ldrh	r2, [r3, #26]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8b1b      	ldrh	r3, [r3, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10d      	bne.n	8001ba8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	7f1b      	ldrb	r3, [r3, #28]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4053      	eors	r3, r2
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
        {
            //Fail to write since we are full
            if(success)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d025      	beq.n	8001bec <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                *success = false;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
            if(success)
 8001ba6:	e021      	b.n	8001bec <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            }
        }else
        {
            if(success)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
            {
                *success = true;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8b19      	ldrh	r1, [r3, #24]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 f819 	bl	8001bf4 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8b1b      	ldrh	r3, [r3, #24]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	2103      	movs	r1, #3
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe fc0c 	bl	80003e8 <__aeabi_idivmod>
 8001bd0:	000b      	movs	r3, r1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	831a      	strh	r2, [r3, #24]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8b1a      	ldrh	r2, [r3, #24]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8b5b      	ldrh	r3, [r3, #26]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d103      	bne.n	8001bec <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                emptyNotFull = false;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	771a      	strb	r2, [r3, #28]
            }
        }
    }
 8001bea:	e7ff      	b.n	8001bec <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	230a      	movs	r3, #10
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	1c0a      	adds	r2, r1, #0
 8001c04:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8001c06:	2316      	movs	r3, #22
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	2416      	movs	r4, #22
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d814      	bhi.n	8001c42 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x4e>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	18d1      	adds	r1, r2, r3
 8001c20:	230a      	movs	r3, #10
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	7808      	ldrb	r0, [r1, #0]
 8001c2c:	68f9      	ldr	r1, [r7, #12]
 8001c2e:	00d2      	lsls	r2, r2, #3
 8001c30:	188a      	adds	r2, r1, r2
 8001c32:	1c01      	adds	r1, r0, #0
 8001c34:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	3201      	adds	r2, #1
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e7e5      	b.n	8001c0e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b007      	add	sp, #28
 8001c48:	bd90      	pop	{r4, r7, pc}
	...

08001c4c <_Z41__static_initialization_and_destruction_0ii>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d103      	bne.n	8001c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f814 	bl	8001c94 <_ZN14RX_BINARY_TREEC1Ev>
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0000ffff 	.word	0x0000ffff
 8001c78:	20000268 	.word	0x20000268

08001c7c <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8001c82:	0019      	movs	r1, r3
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ffe1 	bl	8001c4c <_Z41__static_initialization_and_destruction_0ii>
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	0000ffff 	.word	0x0000ffff

08001c94 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2274      	movs	r2, #116	; 0x74
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	5299      	strh	r1, [r3, r2]
{}
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

bool RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2274      	movs	r2, #116	; 0x74
 8001cc2:	5a9b      	ldrh	r3, [r3, r2]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d80e      	bhi.n	8001ce6 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x32>
    {
        root = insert(root,new_element);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f9a9 	bl	800202e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	671a      	str	r2, [r3, #112]	; 0x70
        return true;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x34>
    }
    return false;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f000 f80d 	bl	8001d22 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e001      	b.n	8001d1a <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	e034      	b.n	8001da2 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	0011      	movs	r1, r2
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f88b 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001d44:	0002      	movs	r2, r0
 8001d46:	2301      	movs	r3, #1
 8001d48:	1c19      	adds	r1, r3, #0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	db01      	blt.n	8001d54 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	1c19      	adds	r1, r3, #0
 8001d54:	b2cb      	uxtb	r3, r1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff ffdd 	bl	8001d22 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	e01a      	b.n	8001da2 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 f871 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	1c19      	adds	r1, r3, #0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	dc01      	bgt.n	8001d88 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8001d84:	2300      	movs	r3, #0
 8001d86:	1c19      	adds	r1, r3, #0
 8001d88:	b2cb      	uxtb	r3, r1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff ffc3 	bl	8001d22 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	e000      	b.n	8001da2 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001da0:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b004      	add	sp, #16
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2274      	movs	r2, #116	; 0x74
 8001db8:	5a9b      	ldrh	r3, [r3, r2]
 8001dba:	001a      	movs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	6839      	ldr	r1, [r7, #0]
 8001dc2:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2274      	movs	r2, #116	; 0x74
 8001dc8:	5a9b      	ldrh	r3, [r3, r2]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2274      	movs	r2, #116	; 0x74
 8001dda:	5a9b      	ldrh	r3, [r3, r2]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	3308      	adds	r3, #8
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2274      	movs	r2, #116	; 0x74
 8001dec:	5a9b      	ldrh	r3, [r3, r2]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	330c      	adds	r3, #12
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2274      	movs	r2, #116	; 0x74
 8001dfe:	5a9b      	ldrh	r3, [r3, r2]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	b290      	uxth	r0, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	2174      	movs	r1, #116	; 0x74
 8001e08:	5250      	strh	r0, [r2, r1]
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	18d3      	adds	r3, r2, r3
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d901      	bls.n	8001e30 <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	e000      	b.n	8001e32 <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 8001e30:	687b      	ldr	r3, [r7, #4]
}  
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e001      	b.n	8001e52 <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7b1b      	ldrb	r3, [r3, #12]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	e009      	b.n	8001e84 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	e002      	b.n	8001e84 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	e001      	b.n	8001ea6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 8001eae:	b590      	push	{r4, r7, lr}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff ffae 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0011      	movs	r1, r2
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff ffa5 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001ef0:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0021      	movs	r1, r4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ff8d 	bl	8001e18 <_ZN14RX_BINARY_TREE3maxEmm>
 8001efe:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7ff ff91 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff88 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001f2a:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0021      	movs	r1, r4
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff ff70 	bl	8001e18 <_ZN14RX_BINARY_TREE3maxEmm>
 8001f38:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8001f44:	68fb      	ldr	r3, [r7, #12]
} 
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b005      	add	sp, #20
 8001f4c:	bd90      	pop	{r4, r7, pc}

08001f4e <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff ff5e 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ff55 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001f90:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8001f92:	001a      	movs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	0021      	movs	r1, r4
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff ff3d 	bl	8001e18 <_ZN14RX_BINARY_TREE3maxEmm>
 8001f9e:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7ff ff41 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff ff38 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8001fca:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 8001fcc:	001a      	movs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0021      	movs	r1, r4
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7ff ff20 	bl	8001e18 <_ZN14RX_BINARY_TREE3maxEmm>
 8001fd8:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}  
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b005      	add	sp, #20
 8001fec:	bd90      	pop	{r4, r7, pc}

08001fee <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 8001ffe:	2300      	movs	r3, #0
 8002000:	e011      	b.n	8002026 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f7ff ff15 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002010:	0003      	movs	r3, r0
 8002012:	001c      	movs	r4, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0011      	movs	r1, r2
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ff0c 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 8002022:	0003      	movs	r3, r0
 8002024:	1ae3      	subs	r3, r4, r3
}  
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b003      	add	sp, #12
 800202c:	bd90      	pop	{r4, r7, pc}

0800202e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 800202e:	b590      	push	{r4, r7, lr}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0011      	movs	r1, r2
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff feaf 	bl	8001daa <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 800204c:	0003      	movs	r3, r0
 800204e:	e101      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	0011      	movs	r1, r2
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff ff18 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800205c:	0004      	movs	r4, r0
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fef8 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800206a:	0003      	movs	r3, r0
 800206c:	2201      	movs	r2, #1
 800206e:	429c      	cmp	r4, r3
 8002070:	db01      	blt.n	8002076 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 8002072:	2300      	movs	r3, #0
 8002074:	1c1a      	adds	r2, r3, #0
 8002076:	b2d3      	uxtb	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ffd2 	bl	800202e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 800208a:	0002      	movs	r2, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	e022      	b.n	80020d8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fef7 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800209e:	0004      	movs	r4, r0
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff fed7 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80020ac:	0003      	movs	r3, r0
 80020ae:	2201      	movs	r2, #1
 80020b0:	429c      	cmp	r4, r3
 80020b2:	dc01      	bgt.n	80020b8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 80020b4:	2300      	movs	r3, #0
 80020b6:	1c1a      	adds	r2, r3, #0
 80020b8:	b2d3      	uxtb	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff ffb1 	bl	800202e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80020cc:	0002      	movs	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	e001      	b.n	80020d8 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	e0bd      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff feaa 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 80020e6:	0003      	movs	r3, r0
 80020e8:	001c      	movs	r4, r3
                        height(node->right));  
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0011      	movs	r1, r2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff fea1 	bl	8001e3a <_ZN14RX_BINARY_TREE6heightEP4Node>
 80020f8:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 80020fa:	001a      	movs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0021      	movs	r1, r4
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff fe89 	bl	8001e18 <_ZN14RX_BINARY_TREE3maxEmm>
 8002106:	0003      	movs	r3, r0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	3301      	adds	r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff68 	bl	8001fee <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 800211e:	0003      	movs	r3, r0
 8002120:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b01      	cmp	r3, #1
 8002126:	dd12      	ble.n	800214e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff feac 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002134:	0004      	movs	r4, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0011      	movs	r1, r2
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff fe8b 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002144:	0003      	movs	r3, r0
 8002146:	429c      	cmp	r4, r3
 8002148:	da01      	bge.n	800214e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0011      	movs	r1, r2
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fea7 	bl	8001eae <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8002160:	0003      	movs	r3, r0
 8002162:	e077      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	da12      	bge.n	8002190 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff fe8b 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8002176:	0004      	movs	r4, r0
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff fe6a 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8002186:	0003      	movs	r3, r0
 8002188:	429c      	cmp	r4, r3
 800218a:	dd01      	ble.n	8002190 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 8002190:	2300      	movs	r3, #0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	0011      	movs	r1, r2
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fed6 	bl	8001f4e <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80021a2:	0003      	movs	r3, r0
 80021a4:	e056      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	dd12      	ble.n	80021d2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff fe6a 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 80021b8:	0004      	movs	r4, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff fe49 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 80021c8:	0003      	movs	r3, r0
 80021ca:	429c      	cmp	r4, r3
 80021cc:	dd01      	ble.n	80021d2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d011      	beq.n	80021fc <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff feb4 	bl	8001f4e <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 80021e6:	0002      	movs	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0011      	movs	r1, r2
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff fe5b 	bl	8001eae <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 80021f8:	0003      	movs	r3, r0
 80021fa:	e02b      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	da12      	bge.n	8002228 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff fe3f 	bl	8001e8c <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 800220e:	0004      	movs	r4, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fe1e 	bl	8001e5a <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800221e:	0003      	movs	r3, r0
 8002220:	429c      	cmp	r4, r3
 8002222:	da01      	bge.n	8002228 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d011      	beq.n	8002252 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff fe39 	bl	8001eae <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 800223c:	0002      	movs	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff fe80 	bl	8001f4e <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 800224e:	0003      	movs	r3, r0
 8002250:	e000      	b.n	8002254 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 8002252:	68bb      	ldr	r3, [r7, #8]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b007      	add	sp, #28
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002278:	4c0b      	ldr	r4, [pc, #44]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002286:	f7fe ff09 	bl	800109c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800228a:	f002 ff3d 	bl	8005108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7fe f8b1 	bl	80003f4 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80022a0:	080052b4 	.word	0x080052b4
  ldr r2, =_sbss
 80022a4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80022a8:	2000034c 	.word	0x2000034c

080022ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_COMP_IRQHandler>
	...

080022b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_Init+0x24>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_Init+0x24>)
 80022ba:	2110      	movs	r1, #16
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f809 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c6:	f7fe fd8b 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_InitTick+0x5c>)
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_InitTick+0x60>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	0019      	movs	r1, r3
 80022ea:	23fa      	movs	r3, #250	; 0xfa
 80022ec:	0098      	lsls	r0, r3, #2
 80022ee:	f7fd ff0b 	bl	8000108 <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	0019      	movs	r1, r3
 80022f6:	0020      	movs	r0, r4
 80022f8:	f7fd ff06 	bl	8000108 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	0018      	movs	r0, r3
 8002300:	f001 f835 	bl	800336e <HAL_SYSTICK_Config>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d001      	beq.n	800230c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00f      	b.n	800232c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d80b      	bhi.n	800232a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	2301      	movs	r3, #1
 8002316:	425b      	negs	r3, r3
 8002318:	2200      	movs	r2, #0
 800231a:	0018      	movs	r0, r3
 800231c:	f001 f802 	bl	8003324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_InitTick+0x64>)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b003      	add	sp, #12
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	20000010 	.word	0x20000010
 8002338:	20000018 	.word	0x20000018
 800233c:	20000014 	.word	0x20000014

08002340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x1c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	001a      	movs	r2, r3
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_IncTick+0x20>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	18d2      	adds	r2, r2, r3
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_IncTick+0x20>)
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000018 	.word	0x20000018
 8002360:	20000344 	.word	0x20000344

08002364 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <HAL_GetTick+0x10>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	20000344 	.word	0x20000344

08002378 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e11f      	b.n	80025ca <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d132      	bne.n	80023fc <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a8e      	ldr	r2, [pc, #568]	; (80025d4 <HAL_CAN_Init+0x25c>)
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a8e      	ldr	r2, [pc, #568]	; (80025d8 <HAL_CAN_Init+0x260>)
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a8d      	ldr	r2, [pc, #564]	; (80025dc <HAL_CAN_Init+0x264>)
 80023a6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a8d      	ldr	r2, [pc, #564]	; (80025e0 <HAL_CAN_Init+0x268>)
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a8c      	ldr	r2, [pc, #560]	; (80025e4 <HAL_CAN_Init+0x26c>)
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a8c      	ldr	r2, [pc, #560]	; (80025e8 <HAL_CAN_Init+0x270>)
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a8b      	ldr	r2, [pc, #556]	; (80025ec <HAL_CAN_Init+0x274>)
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a8b      	ldr	r2, [pc, #556]	; (80025f0 <HAL_CAN_Init+0x278>)
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a8a      	ldr	r2, [pc, #552]	; (80025f4 <HAL_CAN_Init+0x27c>)
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_CAN_Init+0x280>)
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a89      	ldr	r2, [pc, #548]	; (80025fc <HAL_CAN_Init+0x284>)
 80023d6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a89      	ldr	r2, [pc, #548]	; (8002600 <HAL_CAN_Init+0x288>)
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a88      	ldr	r2, [pc, #544]	; (8002604 <HAL_CAN_Init+0x28c>)
 80023e2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a86      	ldr	r2, [pc, #536]	; (8002608 <HAL_CAN_Init+0x290>)
 80023f0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	0010      	movs	r0, r2
 80023fa:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240c:	f7ff ffaa 	bl	8002364 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002414:	e013      	b.n	800243e <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002416:	f7ff ffa5 	bl	8002364 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b0a      	cmp	r3, #10
 8002422:	d90c      	bls.n	800243e <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	0292      	lsls	r2, r2, #10
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	2105      	movs	r1, #5
 8002438:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0c5      	b.n	80025ca <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	d0e5      	beq.n	8002416 <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245a:	f7ff ff83 	bl	8002364 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002462:	e013      	b.n	800248c <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002464:	f7ff ff7e 	bl	8002364 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b0a      	cmp	r3, #10
 8002470:	d90c      	bls.n	800248c <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	0292      	lsls	r2, r2, #10
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	2105      	movs	r1, #5
 8002486:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e09e      	b.n	80025ca <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d1e5      	bne.n	8002464 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	438a      	bics	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e5b      	ldrb	r3, [r3, #25]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e007      	b.n	80024ec <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e9b      	ldrb	r3, [r3, #26]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2120      	movs	r1, #32
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2120      	movs	r1, #32
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7edb      	ldrb	r3, [r3, #27]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2110      	movs	r1, #16
 800252a:	438a      	bics	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2110      	movs	r1, #16
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7f1b      	ldrb	r3, [r3, #28]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2108      	movs	r1, #8
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2108      	movs	r1, #8
 8002566:	438a      	bics	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7f5b      	ldrb	r3, [r3, #29]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2104      	movs	r1, #4
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2104      	movs	r1, #4
 8002590:	438a      	bics	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	0011      	movs	r1, r2
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	2101      	movs	r1, #1
 80025c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	08001729 	.word	0x08001729
 80025d8:	0800316d 	.word	0x0800316d
 80025dc:	0800317d 	.word	0x0800317d
 80025e0:	0800318d 	.word	0x0800318d
 80025e4:	0800310d 	.word	0x0800310d
 80025e8:	0800311d 	.word	0x0800311d
 80025ec:	0800312d 	.word	0x0800312d
 80025f0:	0800313d 	.word	0x0800313d
 80025f4:	0800314d 	.word	0x0800314d
 80025f8:	0800315d 	.word	0x0800315d
 80025fc:	0800319d 	.word	0x0800319d
 8002600:	080031ad 	.word	0x080031ad
 8002604:	080031bd 	.word	0x080031bd
 8002608:	08000e29 	.word	0x08000e29

0800260c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800261c:	2013      	movs	r0, #19
 800261e:	183b      	adds	r3, r7, r0
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	2120      	movs	r1, #32
 8002624:	5c52      	ldrb	r2, [r2, r1]
 8002626:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002628:	0002      	movs	r2, r0
 800262a:	18bb      	adds	r3, r7, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d004      	beq.n	800263c <HAL_CAN_ConfigFilter+0x30>
 8002632:	18bb      	adds	r3, r7, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d000      	beq.n	800263c <HAL_CAN_ConfigFilter+0x30>
 800263a:	e0cd      	b.n	80027d8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	58d3      	ldr	r3, [r2, r3]
 8002644:	2201      	movs	r2, #1
 8002646:	431a      	orrs	r2, r3
 8002648:	0011      	movs	r1, r2
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	221f      	movs	r2, #31
 8002658:	4013      	ands	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	2387      	movs	r3, #135	; 0x87
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	58d3      	ldr	r3, [r2, r3]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	43d2      	mvns	r2, r2
 800266e:	401a      	ands	r2, r3
 8002670:	0011      	movs	r1, r2
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	2387      	movs	r3, #135	; 0x87
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d129      	bne.n	80026d6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	2383      	movs	r3, #131	; 0x83
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	58d3      	ldr	r3, [r2, r3]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	43d2      	mvns	r2, r2
 800268e:	401a      	ands	r2, r3
 8002690:	0011      	movs	r1, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	2383      	movs	r3, #131	; 0x83
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026ac:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3248      	adds	r2, #72	; 0x48
 80026b2:	00d2      	lsls	r2, r2, #3
 80026b4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	3348      	adds	r3, #72	; 0x48
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	18cb      	adds	r3, r1, r3
 80026d2:	3304      	adds	r3, #4
 80026d4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d128      	bne.n	8002730 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	2383      	movs	r3, #131	; 0x83
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	58d2      	ldr	r2, [r2, r3]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	0011      	movs	r1, r2
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	2383      	movs	r3, #131	; 0x83
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002706:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3248      	adds	r2, #72	; 0x48
 800270c:	00d2      	lsls	r2, r2, #3
 800270e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002722:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	3348      	adds	r3, #72	; 0x48
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	18cb      	adds	r3, r1, r3
 800272c:	3304      	adds	r3, #4
 800272e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10c      	bne.n	8002752 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	2381      	movs	r3, #129	; 0x81
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	58d3      	ldr	r3, [r2, r3]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	43d2      	mvns	r2, r2
 8002744:	401a      	ands	r2, r3
 8002746:	0011      	movs	r1, r2
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	2381      	movs	r3, #129	; 0x81
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	50d1      	str	r1, [r2, r3]
 8002750:	e00a      	b.n	8002768 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	2381      	movs	r3, #129	; 0x81
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	58d2      	ldr	r2, [r2, r3]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	431a      	orrs	r2, r3
 800275e:	0011      	movs	r1, r2
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	2381      	movs	r3, #129	; 0x81
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	2385      	movs	r3, #133	; 0x85
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	58d3      	ldr	r3, [r2, r3]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	43d2      	mvns	r2, r2
 800277c:	401a      	ands	r2, r3
 800277e:	0011      	movs	r1, r2
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	2385      	movs	r3, #133	; 0x85
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	50d1      	str	r1, [r2, r3]
 8002788:	e00a      	b.n	80027a0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	2385      	movs	r3, #133	; 0x85
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	58d2      	ldr	r2, [r2, r3]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	431a      	orrs	r2, r3
 8002796:	0011      	movs	r1, r2
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	2385      	movs	r3, #133	; 0x85
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10a      	bne.n	80027be <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	2387      	movs	r3, #135	; 0x87
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	58d2      	ldr	r2, [r2, r3]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	0011      	movs	r1, r2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	2387      	movs	r3, #135	; 0x87
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	58d3      	ldr	r3, [r2, r3]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4393      	bics	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e007      	b.n	80027e8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	02d2      	lsls	r2, r2, #11
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
  }
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b006      	add	sp, #24
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d12f      	bne.n	8002864 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	2102      	movs	r1, #2
 800280a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff fda2 	bl	8002364 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002824:	e013      	b.n	800284e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002826:	f7ff fd9d 	bl	8002364 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b0a      	cmp	r3, #10
 8002832:	d90c      	bls.n	800284e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	0292      	lsls	r2, r2, #10
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	2105      	movs	r1, #5
 8002848:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e012      	b.n	8002874 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	d1e5      	bne.n	8002826 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e007      	b.n	8002874 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0312      	lsls	r2, r2, #12
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800288a:	201f      	movs	r0, #31
 800288c:	183b      	adds	r3, r7, r0
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	2120      	movs	r1, #32
 8002892:	5c52      	ldrb	r2, [r2, r1]
 8002894:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d004      	beq.n	80028b0 <HAL_CAN_AddTxMessage+0x34>
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d000      	beq.n	80028b0 <HAL_CAN_AddTxMessage+0x34>
 80028ae:	e0b7      	b.n	8002a20 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	04db      	lsls	r3, r3, #19
 80028b6:	4013      	ands	r3, r2
 80028b8:	d10a      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028c2:	d105      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	055b      	lsls	r3, r3, #21
 80028ca:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028cc:	d100      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x54>
 80028ce:	e09e      	b.n	8002a0e <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	0e1b      	lsrs	r3, r3, #24
 80028d4:	2203      	movs	r2, #3
 80028d6:	4013      	ands	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d908      	bls.n	80028f2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0412      	lsls	r2, r2, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e09e      	b.n	8002a30 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4311      	orrs	r1, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	3218      	adds	r2, #24
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	50d1      	str	r1, [r2, r3]
 800291c:	e00f      	b.n	800293e <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002928:	431a      	orrs	r2, r3
 800292a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002934:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	3218      	adds	r2, #24
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3318      	adds	r3, #24
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	18cb      	adds	r3, r1, r3
 800294e:	3304      	adds	r3, #4
 8002950:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	7d1b      	ldrb	r3, [r3, #20]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d112      	bne.n	8002980 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3318      	adds	r3, #24
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	3304      	adds	r3, #4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3318      	adds	r3, #24
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	18cb      	adds	r3, r1, r3
 800297c:	3304      	adds	r3, #4
 800297e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3307      	adds	r3, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	061a      	lsls	r2, r3, #24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3306      	adds	r3, #6
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3305      	adds	r3, #5
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	0019      	movs	r1, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	6979      	ldr	r1, [r7, #20]
 80029ac:	23c6      	movs	r3, #198	; 0xc6
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	0109      	lsls	r1, r1, #4
 80029b2:	1841      	adds	r1, r0, r1
 80029b4:	18cb      	adds	r3, r1, r3
 80029b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3303      	adds	r3, #3
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	061a      	lsls	r2, r3, #24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3302      	adds	r3, #2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3301      	adds	r3, #1
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	0019      	movs	r1, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	6979      	ldr	r1, [r7, #20]
 80029e2:	23c4      	movs	r3, #196	; 0xc4
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	0109      	lsls	r1, r1, #4
 80029e8:	1841      	adds	r1, r0, r1
 80029ea:	18cb      	adds	r3, r1, r3
 80029ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	3218      	adds	r2, #24
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	58d2      	ldr	r2, [r2, r3]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2101      	movs	r1, #1
 8002a00:	4311      	orrs	r1, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	3218      	adds	r2, #24
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e010      	b.n	8002a30 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	0392      	lsls	r2, r2, #14
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e007      	b.n	8002a30 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	02d2      	lsls	r2, r2, #11
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
  }
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b008      	add	sp, #32
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a44:	200b      	movs	r0, #11
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	5c52      	ldrb	r2, [r2, r1]
 8002a4e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a50:	0002      	movs	r2, r0
 8002a52:	18bb      	adds	r3, r7, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d003      	beq.n	8002a62 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002a5a:	18bb      	adds	r3, r7, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d11d      	bne.n	8002a9e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	04db      	lsls	r3, r3, #19
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	051b      	lsls	r3, r3, #20
 8002a80:	4013      	ands	r3, r2
 8002a82:	d002      	beq.n	8002a8a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3301      	adds	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	d002      	beq.n	8002a9e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab6:	2017      	movs	r0, #23
 8002ab8:	183b      	adds	r3, r7, r0
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	2120      	movs	r1, #32
 8002abe:	5c52      	ldrb	r2, [r2, r1]
 8002ac0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	18bb      	adds	r3, r7, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d004      	beq.n	8002ad6 <HAL_CAN_GetRxMessage+0x2e>
 8002acc:	18bb      	adds	r3, r7, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d000      	beq.n	8002ad6 <HAL_CAN_GetRxMessage+0x2e>
 8002ad4:	e0f8      	b.n	8002cc8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d117      	bne.n	8002b18 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	0392      	lsls	r2, r2, #14
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0ee      	b.n	8002cd8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2203      	movs	r2, #3
 8002b02:	4013      	ands	r3, r2
 8002b04:	d108      	bne.n	8002b18 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	0392      	lsls	r2, r2, #14
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0df      	b.n	8002cd8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	321b      	adds	r2, #27
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	58d3      	ldr	r3, [r2, r3]
 8002b24:	2204      	movs	r2, #4
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	321b      	adds	r2, #27
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	58d3      	ldr	r3, [r2, r3]
 8002b40:	0d5b      	lsrs	r3, r3, #21
 8002b42:	055b      	lsls	r3, r3, #21
 8002b44:	0d5a      	lsrs	r2, r3, #21
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e00a      	b.n	8002b62 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	321b      	adds	r2, #27
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	58d3      	ldr	r3, [r2, r3]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	321b      	adds	r2, #27
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	58d3      	ldr	r3, [r2, r3]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	3304      	adds	r3, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	220f      	movs	r2, #15
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	331b      	adds	r3, #27
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	331b      	adds	r3, #27
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	18d3      	adds	r3, r2, r3
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	0c1a      	lsrs	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	23dc      	movs	r3, #220	; 0xdc
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	188a      	adds	r2, r1, r2
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	23dc      	movs	r3, #220	; 0xdc
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	188a      	adds	r2, r1, r2
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0a1a      	lsrs	r2, r3, #8
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	23dc      	movs	r3, #220	; 0xdc
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	188a      	adds	r2, r1, r2
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0c1a      	lsrs	r2, r3, #16
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	23dc      	movs	r3, #220	; 0xdc
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	188a      	adds	r2, r1, r2
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e1a      	lsrs	r2, r3, #24
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	23de      	movs	r3, #222	; 0xde
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	188a      	adds	r2, r1, r2
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3304      	adds	r3, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	23de      	movs	r3, #222	; 0xde
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	188a      	adds	r2, r1, r2
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0a1a      	lsrs	r2, r3, #8
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3305      	adds	r3, #5
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	23de      	movs	r3, #222	; 0xde
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	188a      	adds	r2, r1, r2
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0c1a      	lsrs	r2, r3, #16
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3306      	adds	r3, #6
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	23de      	movs	r3, #222	; 0xde
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	188a      	adds	r2, r1, r2
 8002c8e:	18d3      	adds	r3, r2, r3
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e1a      	lsrs	r2, r3, #24
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3307      	adds	r3, #7
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2120      	movs	r1, #32
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e007      	b.n	8002cc4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	02d2      	lsls	r2, r2, #11
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
  }
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b006      	add	sp, #24
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cee:	200b      	movs	r0, #11
 8002cf0:	183b      	adds	r3, r7, r0
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	5c52      	ldrb	r2, [r2, r1]
 8002cf8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	18bb      	adds	r3, r7, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d003      	beq.n	8002d0c <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002d04:	18bb      	adds	r3, r7, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d10f      	bne.n	8002d2c <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e005      	b.n	8002d2c <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d40:	200f      	movs	r0, #15
 8002d42:	183b      	adds	r3, r7, r0
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	2120      	movs	r1, #32
 8002d48:	5c52      	ldrb	r2, [r2, r1]
 8002d4a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	18bb      	adds	r3, r7, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d003      	beq.n	8002d5e <HAL_CAN_ActivateNotification+0x28>
 8002d56:	18bb      	adds	r3, r7, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d109      	bne.n	8002d72 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6959      	ldr	r1, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e007      	b.n	8002d82 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	02d2      	lsls	r2, r2, #11
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
  }
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b004      	add	sp, #16
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08a      	sub	sp, #40	; 0x28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d100      	bne.n	8002dd0 <HAL_CAN_IRQHandler+0x46>
 8002dce:	e08a      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d026      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d005      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	0010      	movs	r0, r2
 8002df0:	4798      	blx	r3
 8002df2:	e018      	b.n	8002e26 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2204      	movs	r2, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d005      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	4313      	orrs	r3, r2
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	e00e      	b.n	8002e26 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d005      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0152      	lsls	r2, r2, #5
 8002e16:	4313      	orrs	r3, r2
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e004      	b.n	8002e26 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	0010      	movs	r0, r2
 8002e24:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d02a      	beq.n	8002e86 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d005      	beq.n	8002e50 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	4798      	blx	r3
 8002e4e:	e01a      	b.n	8002e86 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4013      	ands	r3, r2
 8002e58:	d005      	beq.n	8002e66 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	0192      	lsls	r2, r2, #6
 8002e60:	4313      	orrs	r3, r2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e00f      	b.n	8002e86 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d005      	beq.n	8002e7c <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	01d2      	lsls	r2, r2, #7
 8002e76:	4313      	orrs	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e004      	b.n	8002e86 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	0010      	movs	r0, r2
 8002e84:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	025b      	lsls	r3, r3, #9
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d02a      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0252      	lsls	r2, r2, #9
 8002e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d005      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	0010      	movs	r0, r2
 8002eac:	4798      	blx	r3
 8002eae:	e01a      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	02db      	lsls	r3, r3, #11
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d005      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	0212      	lsls	r2, r2, #8
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	e00f      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d005      	beq.n	8002edc <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	0252      	lsls	r2, r2, #9
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e004      	b.n	8002ee6 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00c      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d008      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	4313      	orrs	r3, r2
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d00c      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2208      	movs	r2, #8
 8002f14:	4013      	ands	r3, r2
 8002f16:	d008      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	0010      	movs	r0, r2
 8002f28:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00a      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	0010      	movs	r0, r2
 8002f46:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d00c      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2210      	movs	r2, #16
 8002f54:	4013      	ands	r3, r2
 8002f56:	d008      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	00d2      	lsls	r2, r2, #3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2210      	movs	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d00c      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2208      	movs	r2, #8
 8002f76:	4013      	ands	r3, r2
 8002f78:	d008      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2208      	movs	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	0010      	movs	r0, r2
 8002f8a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	4013      	ands	r3, r2
 8002f92:	d00a      	beq.n	8002faa <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002faa:	6a3a      	ldr	r2, [r7, #32]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d00c      	beq.n	8002fce <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d008      	beq.n	8002fce <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	0010      	movs	r0, r2
 8002fcc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	025b      	lsls	r3, r3, #9
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d008      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	0010      	movs	r0, r2
 8002ff0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ff2:	6a3a      	ldr	r2, [r7, #32]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <HAL_CAN_IRQHandler+0x274>
 8002ffc:	e074      	b.n	80030e8 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2204      	movs	r2, #4
 8003002:	4013      	ands	r3, r2
 8003004:	d100      	bne.n	8003008 <HAL_CAN_IRQHandler+0x27e>
 8003006:	e06b      	b.n	80030e0 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003018:	d003      	beq.n	8003022 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2201      	movs	r2, #1
 800301e:	4313      	orrs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d007      	beq.n	800303c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2202      	movs	r2, #2
 8003030:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003032:	d003      	beq.n	800303c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	2202      	movs	r2, #2
 8003038:	4313      	orrs	r3, r2
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4013      	ands	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2204      	movs	r2, #4
 800304a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800304c:	d003      	beq.n	8003056 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2204      	movs	r2, #4
 8003052:	4313      	orrs	r3, r2
 8003054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4013      	ands	r3, r2
 800305e:	d03f      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2270      	movs	r2, #112	; 0x70
 8003064:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003066:	d03b      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2270      	movs	r2, #112	; 0x70
 800306c:	4013      	ands	r3, r2
 800306e:	2b60      	cmp	r3, #96	; 0x60
 8003070:	d027      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x338>
 8003072:	d82c      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x344>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d01f      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x32e>
 8003078:	d829      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x344>
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d017      	beq.n	80030ae <HAL_CAN_IRQHandler+0x324>
 800307e:	d826      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x344>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d00f      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x31a>
 8003084:	d823      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x344>
 8003086:	2b10      	cmp	r3, #16
 8003088:	d002      	beq.n	8003090 <HAL_CAN_IRQHandler+0x306>
 800308a:	2b20      	cmp	r3, #32
 800308c:	d005      	beq.n	800309a <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800308e:	e01e      	b.n	80030ce <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2208      	movs	r2, #8
 8003094:	4313      	orrs	r3, r2
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003098:	e01a      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	2210      	movs	r2, #16
 800309e:	4313      	orrs	r3, r2
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a2:	e015      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	2220      	movs	r2, #32
 80030a8:	4313      	orrs	r3, r2
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ac:	e010      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2240      	movs	r2, #64	; 0x40
 80030b2:	4313      	orrs	r3, r2
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b6:	e00b      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	4313      	orrs	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c0:	e006      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	0052      	lsls	r2, r2, #1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030cc:	e000      	b.n	80030d0 <HAL_CAN_IRQHandler+0x346>
            break;
 80030ce:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2170      	movs	r1, #112	; 0x70
 80030dc:	438a      	bics	r2, r1
 80030de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	0010      	movs	r0, r2
 8003102:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b00a      	add	sp, #40	; 0x28
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b002      	add	sp, #8
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	0002      	movs	r2, r0
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b7f      	cmp	r3, #127	; 0x7f
 80031de:	d809      	bhi.n	80031f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	001a      	movs	r2, r3
 80031e6:	231f      	movs	r3, #31
 80031e8:	401a      	ands	r2, r3
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_EnableIRQ+0x30>)
 80031ec:	2101      	movs	r1, #1
 80031ee:	4091      	lsls	r1, r2
 80031f0:	000a      	movs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
  }
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b7f      	cmp	r3, #127	; 0x7f
 8003214:	d828      	bhi.n	8003268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003216:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <__NVIC_SetPriority+0xd4>)
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b25b      	sxtb	r3, r3
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	33c0      	adds	r3, #192	; 0xc0
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	589b      	ldr	r3, [r3, r2]
 8003226:	1dfa      	adds	r2, r7, #7
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	0011      	movs	r1, r2
 800322c:	2203      	movs	r2, #3
 800322e:	400a      	ands	r2, r1
 8003230:	00d2      	lsls	r2, r2, #3
 8003232:	21ff      	movs	r1, #255	; 0xff
 8003234:	4091      	lsls	r1, r2
 8003236:	000a      	movs	r2, r1
 8003238:	43d2      	mvns	r2, r2
 800323a:	401a      	ands	r2, r3
 800323c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	22ff      	movs	r2, #255	; 0xff
 8003244:	401a      	ands	r2, r3
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0018      	movs	r0, r3
 800324c:	2303      	movs	r3, #3
 800324e:	4003      	ands	r3, r0
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003254:	481f      	ldr	r0, [pc, #124]	; (80032d4 <__NVIC_SetPriority+0xd4>)
 8003256:	1dfb      	adds	r3, r7, #7
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b25b      	sxtb	r3, r3
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	430a      	orrs	r2, r1
 8003260:	33c0      	adds	r3, #192	; 0xc0
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003266:	e031      	b.n	80032cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <__NVIC_SetPriority+0xd8>)
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	0019      	movs	r1, r3
 8003270:	230f      	movs	r3, #15
 8003272:	400b      	ands	r3, r1
 8003274:	3b08      	subs	r3, #8
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3306      	adds	r3, #6
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	3304      	adds	r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1dfa      	adds	r2, r7, #7
 8003284:	7812      	ldrb	r2, [r2, #0]
 8003286:	0011      	movs	r1, r2
 8003288:	2203      	movs	r2, #3
 800328a:	400a      	ands	r2, r1
 800328c:	00d2      	lsls	r2, r2, #3
 800328e:	21ff      	movs	r1, #255	; 0xff
 8003290:	4091      	lsls	r1, r2
 8003292:	000a      	movs	r2, r1
 8003294:	43d2      	mvns	r2, r2
 8003296:	401a      	ands	r2, r3
 8003298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	401a      	ands	r2, r3
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	0018      	movs	r0, r3
 80032a8:	2303      	movs	r3, #3
 80032aa:	4003      	ands	r3, r0
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <__NVIC_SetPriority+0xd8>)
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	001c      	movs	r4, r3
 80032b8:	230f      	movs	r3, #15
 80032ba:	4023      	ands	r3, r4
 80032bc:	3b08      	subs	r3, #8
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	430a      	orrs	r2, r1
 80032c2:	3306      	adds	r3, #6
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	18c3      	adds	r3, r0, r3
 80032c8:	3304      	adds	r3, #4
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b003      	add	sp, #12
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	045b      	lsls	r3, r3, #17
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d301      	bcc.n	80032f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f0:	2301      	movs	r3, #1
 80032f2:	e010      	b.n	8003316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <SysTick_Config+0x44>)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	3a01      	subs	r2, #1
 80032fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fc:	2301      	movs	r3, #1
 80032fe:	425b      	negs	r3, r3
 8003300:	2103      	movs	r1, #3
 8003302:	0018      	movs	r0, r3
 8003304:	f7ff ff7c 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <SysTick_Config+0x44>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <SysTick_Config+0x44>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	e000e010 	.word	0xe000e010

08003324 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	210f      	movs	r1, #15
 8003330:	187b      	adds	r3, r7, r1
 8003332:	1c02      	adds	r2, r0, #0
 8003334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	187b      	adds	r3, r7, r1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b25b      	sxtb	r3, r3
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ff5d 	bl	8003200 <__NVIC_SetPriority>
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	0002      	movs	r2, r0
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b25b      	sxtb	r3, r3
 8003360:	0018      	movs	r0, r3
 8003362:	f7ff ff33 	bl	80031cc <__NVIC_EnableIRQ>
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f7ff ffaf 	bl	80032dc <SysTick_Config>
 800337e:	0003      	movs	r3, r0
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003396:	e155      	b.n	8003644 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4091      	lsls	r1, r2
 80033a2:	000a      	movs	r2, r1
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d100      	bne.n	80033b0 <HAL_GPIO_Init+0x28>
 80033ae:	e146      	b.n	800363e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2203      	movs	r2, #3
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d005      	beq.n	80033c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d130      	bne.n	800342a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	409a      	lsls	r2, r3
 80033d6:	0013      	movs	r3, r2
 80033d8:	43da      	mvns	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	0013      	movs	r3, r2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033fe:	2201      	movs	r2, #1
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	409a      	lsls	r2, r3
 8003404:	0013      	movs	r3, r2
 8003406:	43da      	mvns	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	2201      	movs	r2, #1
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2203      	movs	r2, #3
 8003430:	4013      	ands	r3, r2
 8003432:	2b03      	cmp	r3, #3
 8003434:	d017      	beq.n	8003466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	2203      	movs	r2, #3
 8003442:	409a      	lsls	r2, r3
 8003444:	0013      	movs	r3, r2
 8003446:	43da      	mvns	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	0013      	movs	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2203      	movs	r2, #3
 800346c:	4013      	ands	r3, r2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d123      	bne.n	80034ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	08da      	lsrs	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3208      	adds	r2, #8
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	58d3      	ldr	r3, [r2, r3]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2207      	movs	r2, #7
 8003484:	4013      	ands	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	409a      	lsls	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	43da      	mvns	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2107      	movs	r1, #7
 800349e:	400b      	ands	r3, r1
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	43da      	mvns	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	401a      	ands	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	23c0      	movs	r3, #192	; 0xc0
 80034f4:	029b      	lsls	r3, r3, #10
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <HAL_GPIO_Init+0x174>
 80034fa:	e0a0      	b.n	800363e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fc:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_GPIO_Init+0x2d4>)
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	4b56      	ldr	r3, [pc, #344]	; (800365c <HAL_GPIO_Init+0x2d4>)
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	619a      	str	r2, [r3, #24]
 8003508:	4b54      	ldr	r3, [pc, #336]	; (800365c <HAL_GPIO_Init+0x2d4>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2201      	movs	r2, #1
 800350e:	4013      	ands	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x2d8>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	589b      	ldr	r3, [r3, r2]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2203      	movs	r2, #3
 8003526:	4013      	ands	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	2390      	movs	r3, #144	; 0x90
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d019      	beq.n	8003576 <HAL_GPIO_Init+0x1ee>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a47      	ldr	r2, [pc, #284]	; (8003664 <HAL_GPIO_Init+0x2dc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_GPIO_Init+0x1ea>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a46      	ldr	r2, [pc, #280]	; (8003668 <HAL_GPIO_Init+0x2e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00d      	beq.n	800356e <HAL_GPIO_Init+0x1e6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a45      	ldr	r2, [pc, #276]	; (800366c <HAL_GPIO_Init+0x2e4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <HAL_GPIO_Init+0x1e2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a44      	ldr	r2, [pc, #272]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_GPIO_Init+0x1de>
 8003562:	2304      	movs	r3, #4
 8003564:	e008      	b.n	8003578 <HAL_GPIO_Init+0x1f0>
 8003566:	2305      	movs	r3, #5
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x1f0>
 800356a:	2303      	movs	r3, #3
 800356c:	e004      	b.n	8003578 <HAL_GPIO_Init+0x1f0>
 800356e:	2302      	movs	r3, #2
 8003570:	e002      	b.n	8003578 <HAL_GPIO_Init+0x1f0>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_GPIO_Init+0x1f0>
 8003576:	2300      	movs	r3, #0
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	2103      	movs	r1, #3
 800357c:	400a      	ands	r2, r1
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	4093      	lsls	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003588:	4935      	ldr	r1, [pc, #212]	; (8003660 <HAL_GPIO_Init+0x2d8>)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	3302      	adds	r3, #2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	025b      	lsls	r3, r3, #9
 80035ae:	4013      	ands	r3, r2
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035ba:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80035c0:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	4013      	ands	r3, r2
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43da      	mvns	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	035b      	lsls	r3, r3, #13
 8003602:	4013      	ands	r3, r2
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003614:	4b17      	ldr	r3, [pc, #92]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43da      	mvns	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	039b      	lsls	r3, r3, #14
 800362c:	4013      	ands	r3, r2
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	40da      	lsrs	r2, r3
 800364c:	1e13      	subs	r3, r2, #0
 800364e:	d000      	beq.n	8003652 <HAL_GPIO_Init+0x2ca>
 8003650:	e6a2      	b.n	8003398 <HAL_GPIO_Init+0x10>
  } 
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b006      	add	sp, #24
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40010000 	.word	0x40010000
 8003664:	48000400 	.word	0x48000400
 8003668:	48000800 	.word	0x48000800
 800366c:	48000c00 	.word	0x48000c00
 8003670:	48001000 	.word	0x48001000
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	000a      	movs	r2, r1
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	1cba      	adds	r2, r7, #2
 800368c:	8812      	ldrh	r2, [r2, #0]
 800368e:	4013      	ands	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003692:	230f      	movs	r3, #15
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e003      	b.n	80036a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800369c:	230f      	movs	r3, #15
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
  }
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	0008      	movs	r0, r1
 80036bc:	0011      	movs	r1, r2
 80036be:	1cbb      	adds	r3, r7, #2
 80036c0:	1c02      	adds	r2, r0, #0
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	1c7b      	adds	r3, r7, #1
 80036c6:	1c0a      	adds	r2, r1, #0
 80036c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ca:	1c7b      	adds	r3, r7, #1
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d2:	1cbb      	adds	r3, r7, #2
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036da:	e003      	b.n	80036e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036dc:	1cbb      	adds	r3, r7, #2
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	0002      	movs	r2, r0
 80036f4:	1dbb      	adds	r3, r7, #6
 80036f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	1dba      	adds	r2, r7, #6
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	4013      	ands	r3, r2
 8003702:	d008      	beq.n	8003716 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003706:	1dba      	adds	r2, r7, #6
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800370c:	1dbb      	adds	r3, r7, #6
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	0018      	movs	r0, r3
 8003712:	f7fd f98f 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b002      	add	sp, #8
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f000 fb76 	bl	8003e24 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4013      	ands	r3, r2
 8003740:	d100      	bne.n	8003744 <HAL_RCC_OscConfig+0x20>
 8003742:	e08e      	b.n	8003862 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003744:	4bc5      	ldr	r3, [pc, #788]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	220c      	movs	r2, #12
 800374a:	4013      	ands	r3, r2
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00e      	beq.n	800376e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003750:	4bc2      	ldr	r3, [pc, #776]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	220c      	movs	r2, #12
 8003756:	4013      	ands	r3, r2
 8003758:	2b08      	cmp	r3, #8
 800375a:	d117      	bne.n	800378c <HAL_RCC_OscConfig+0x68>
 800375c:	4bbf      	ldr	r3, [pc, #764]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	23c0      	movs	r3, #192	; 0xc0
 8003762:	025b      	lsls	r3, r3, #9
 8003764:	401a      	ands	r2, r3
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	025b      	lsls	r3, r3, #9
 800376a:	429a      	cmp	r2, r3
 800376c:	d10e      	bne.n	800378c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376e:	4bbb      	ldr	r3, [pc, #748]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	029b      	lsls	r3, r3, #10
 8003776:	4013      	ands	r3, r2
 8003778:	d100      	bne.n	800377c <HAL_RCC_OscConfig+0x58>
 800377a:	e071      	b.n	8003860 <HAL_RCC_OscConfig+0x13c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d000      	beq.n	8003786 <HAL_RCC_OscConfig+0x62>
 8003784:	e06c      	b.n	8003860 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f000 fb4c 	bl	8003e24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x80>
 8003794:	4bb1      	ldr	r3, [pc, #708]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4bb0      	ldr	r3, [pc, #704]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	0249      	lsls	r1, r1, #9
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e02f      	b.n	8003804 <HAL_RCC_OscConfig+0xe0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCC_OscConfig+0xa2>
 80037ac:	4bab      	ldr	r3, [pc, #684]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4baa      	ldr	r3, [pc, #680]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037b2:	49ab      	ldr	r1, [pc, #684]	; (8003a60 <HAL_RCC_OscConfig+0x33c>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	4ba8      	ldr	r3, [pc, #672]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4ba7      	ldr	r3, [pc, #668]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037be:	49a9      	ldr	r1, [pc, #676]	; (8003a64 <HAL_RCC_OscConfig+0x340>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e01e      	b.n	8003804 <HAL_RCC_OscConfig+0xe0>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10e      	bne.n	80037ec <HAL_RCC_OscConfig+0xc8>
 80037ce:	4ba3      	ldr	r3, [pc, #652]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4ba2      	ldr	r3, [pc, #648]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037d4:	2180      	movs	r1, #128	; 0x80
 80037d6:	02c9      	lsls	r1, r1, #11
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	4b9f      	ldr	r3, [pc, #636]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b9e      	ldr	r3, [pc, #632]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	0249      	lsls	r1, r1, #9
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0xe0>
 80037ec:	4b9b      	ldr	r3, [pc, #620]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b9a      	ldr	r3, [pc, #616]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037f2:	499b      	ldr	r1, [pc, #620]	; (8003a60 <HAL_RCC_OscConfig+0x33c>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	4b98      	ldr	r3, [pc, #608]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b97      	ldr	r3, [pc, #604]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80037fe:	4999      	ldr	r1, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x340>)
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d014      	beq.n	8003836 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fdaa 	bl	8002364 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003816:	f7fe fda5 	bl	8002364 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e2fd      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003828:	4b8c      	ldr	r3, [pc, #560]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	4013      	ands	r3, r2
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0xf2>
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fd95 	bl	8002364 <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fd90 	bl	8002364 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2e8      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	4013      	ands	r3, r2
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x11c>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2202      	movs	r2, #2
 8003868:	4013      	ands	r3, r2
 800386a:	d100      	bne.n	800386e <HAL_RCC_OscConfig+0x14a>
 800386c:	e06c      	b.n	8003948 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800386e:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	220c      	movs	r2, #12
 8003874:	4013      	ands	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003878:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	220c      	movs	r2, #12
 800387e:	4013      	ands	r3, r2
 8003880:	2b08      	cmp	r3, #8
 8003882:	d11f      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1a0>
 8003884:	4b75      	ldr	r3, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	23c0      	movs	r3, #192	; 0xc0
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	401a      	ands	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	429a      	cmp	r2, r3
 8003894:	d116      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003896:	4b71      	ldr	r3, [pc, #452]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2202      	movs	r2, #2
 800389c:	4013      	ands	r3, r2
 800389e:	d005      	beq.n	80038ac <HAL_RCC_OscConfig+0x188>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e2bb      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	22f8      	movs	r2, #248	; 0xf8
 80038b2:	4393      	bics	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00da      	lsls	r2, r3, #3
 80038bc:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	e041      	b.n	8003948 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d024      	beq.n	8003916 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038cc:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe fd44 	bl	8002364 <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe fd3f 	bl	8002364 <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e297      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d0f1      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	22f8      	movs	r2, #248	; 0xf8
 8003904:	4393      	bics	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00da      	lsls	r2, r3, #3
 800390e:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e018      	b.n	8003948 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800391c:	2101      	movs	r1, #1
 800391e:	438a      	bics	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fe fd1f 	bl	8002364 <HAL_GetTick>
 8003926:	0003      	movs	r3, r0
 8003928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe fd1a 	bl	8002364 <HAL_GetTick>
 8003930:	0002      	movs	r2, r0
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e272      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2202      	movs	r2, #2
 8003944:	4013      	ands	r3, r2
 8003946:	d1f1      	bne.n	800392c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	4013      	ands	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 800395c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003960:	2101      	movs	r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe fcfd 	bl	8002364 <HAL_GetTick>
 800396a:	0003      	movs	r3, r0
 800396c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe fcf8 	bl	8002364 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e250      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2202      	movs	r2, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d0f1      	beq.n	8003970 <HAL_RCC_OscConfig+0x24c>
 800398c:	e018      	b.n	80039c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003994:	2101      	movs	r1, #1
 8003996:	438a      	bics	r2, r1
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7fe fce3 	bl	8002364 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a4:	f7fe fcde 	bl	8002364 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e236      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d1f1      	bne.n	80039a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2204      	movs	r2, #4
 80039c6:	4013      	ands	r3, r2
 80039c8:	d100      	bne.n	80039cc <HAL_RCC_OscConfig+0x2a8>
 80039ca:	e0b5      	b.n	8003b38 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039cc:	201f      	movs	r0, #31
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	055b      	lsls	r3, r3, #21
 80039dc:	4013      	ands	r3, r2
 80039de:	d110      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	0549      	lsls	r1, r1, #21
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	055b      	lsls	r3, r3, #21
 80039f6:	4013      	ands	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_OscConfig+0x344>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_RCC_OscConfig+0x344>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_RCC_OscConfig+0x344>)
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	0049      	lsls	r1, r1, #1
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fca2 	bl	8002364 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe fc9d 	bl	8002364 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1f5      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x344>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10f      	bne.n	8003a6c <HAL_RCC_OscConfig+0x348>
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <HAL_RCC_OscConfig+0x338>)
 8003a52:	2101      	movs	r1, #1
 8003a54:	430a      	orrs	r2, r1
 8003a56:	621a      	str	r2, [r3, #32]
 8003a58:	e036      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3a4>
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	fffeffff 	.word	0xfffeffff
 8003a64:	fffbffff 	.word	0xfffbffff
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCC_OscConfig+0x36a>
 8003a74:	4bca      	ldr	r3, [pc, #808]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	4bc9      	ldr	r3, [pc, #804]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	621a      	str	r2, [r3, #32]
 8003a80:	4bc7      	ldr	r3, [pc, #796]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	4bc6      	ldr	r3, [pc, #792]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a86:	2104      	movs	r1, #4
 8003a88:	438a      	bics	r2, r1
 8003a8a:	621a      	str	r2, [r3, #32]
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3a4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x38c>
 8003a96:	4bc2      	ldr	r3, [pc, #776]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	4bc1      	ldr	r3, [pc, #772]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	621a      	str	r2, [r3, #32]
 8003aa2:	4bbf      	ldr	r3, [pc, #764]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	4bbe      	ldr	r3, [pc, #760]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	621a      	str	r2, [r3, #32]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3a4>
 8003ab0:	4bbb      	ldr	r3, [pc, #748]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	4bba      	ldr	r3, [pc, #744]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	621a      	str	r2, [r3, #32]
 8003abc:	4bb8      	ldr	r3, [pc, #736]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003abe:	6a1a      	ldr	r2, [r3, #32]
 8003ac0:	4bb7      	ldr	r3, [pc, #732]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d014      	beq.n	8003afa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fc48 	bl	8002364 <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	e009      	b.n	8003aee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fe fc43 	bl	8002364 <HAL_GetTick>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	4aaf      	ldr	r2, [pc, #700]	; (8003da4 <HAL_RCC_OscConfig+0x680>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e19a      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aee:	4bac      	ldr	r3, [pc, #688]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x3b6>
 8003af8:	e013      	b.n	8003b22 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7fe fc33 	bl	8002364 <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	e009      	b.n	8003b18 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe fc2e 	bl	8002364 <HAL_GetTick>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	4aa5      	ldr	r2, [pc, #660]	; (8003da4 <HAL_RCC_OscConfig+0x680>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e185      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	4ba1      	ldr	r3, [pc, #644]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b22:	231f      	movs	r3, #31
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	4b9b      	ldr	r3, [pc, #620]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b32:	499d      	ldr	r1, [pc, #628]	; (8003da8 <HAL_RCC_OscConfig+0x684>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d12a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b4a:	4b95      	ldr	r3, [pc, #596]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4e:	4b94      	ldr	r3, [pc, #592]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b50:	2104      	movs	r1, #4
 8003b52:	430a      	orrs	r2, r1
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b56:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	4b91      	ldr	r3, [pc, #580]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fbff 	bl	8002364 <HAL_GetTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b6c:	f7fe fbfa 	bl	8002364 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e152      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b7e:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d0f1      	beq.n	8003b6c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b88:	4b85      	ldr	r3, [pc, #532]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	22f8      	movs	r2, #248	; 0xf8
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	00da      	lsls	r2, r3, #3
 8003b98:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9e:	e034      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	3305      	adds	r3, #5
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ba8:	4b7d      	ldr	r3, [pc, #500]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	4b7c      	ldr	r3, [pc, #496]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bae:	2104      	movs	r1, #4
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	22f8      	movs	r2, #248	; 0xf8
 8003bba:	4393      	bics	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	00da      	lsls	r2, r3, #3
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bca:	e01e      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bcc:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd0:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003bd8:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	438a      	bics	r2, r1
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fe fbbe 	bl	8002364 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bee:	f7fe fbb9 	bl	8002364 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e111      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d1f1      	bne.n	8003bee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	4013      	ands	r3, r2
 8003c12:	d05c      	beq.n	8003cce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	220c      	movs	r2, #12
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d00e      	beq.n	8003c3e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003c20:	4b5f      	ldr	r3, [pc, #380]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	220c      	movs	r2, #12
 8003c26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d114      	bne.n	8003c56 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003c2c:	4b5c      	ldr	r3, [pc, #368]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	23c0      	movs	r3, #192	; 0xc0
 8003c32:	025b      	lsls	r3, r3, #9
 8003c34:	401a      	ands	r2, r3
 8003c36:	23c0      	movs	r3, #192	; 0xc0
 8003c38:	025b      	lsls	r3, r3, #9
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003c3e:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	025b      	lsls	r3, r3, #9
 8003c46:	4013      	ands	r3, r2
 8003c48:	d040      	beq.n	8003ccc <HAL_RCC_OscConfig+0x5a8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d03c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0e6      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c62:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	0249      	lsls	r1, r1, #9
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fb7a 	bl	8002364 <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c76:	f7fe fb75 	bl	8002364 <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0cd      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	025b      	lsls	r3, r3, #9
 8003c90:	4013      	ands	r3, r2
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x552>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003c9c:	4943      	ldr	r1, [pc, #268]	; (8003dac <HAL_RCC_OscConfig+0x688>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fb5f 	bl	8002364 <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cac:	f7fe fb5a 	bl	8002364 <HAL_GetTick>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0b2      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	025b      	lsls	r3, r3, #9
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x588>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003ccc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d100      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5b4>
 8003cd6:	e0a4      	b.n	8003e22 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	220c      	movs	r2, #12
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d100      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x5c2>
 8003ce4:	e078      	b.n	8003dd8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d14c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003cf4:	492e      	ldr	r1, [pc, #184]	; (8003db0 <HAL_RCC_OscConfig+0x68c>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fb33 	bl	8002364 <HAL_GetTick>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fe fb2e 	bl	8002364 <HAL_GetTick>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e086      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	049b      	lsls	r3, r3, #18
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	220f      	movs	r2, #15
 8003d28:	4393      	bics	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x690>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	0449      	lsls	r1, r1, #17
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fb01 	bl	8002364 <HAL_GetTick>
 8003d62:	0003      	movs	r3, r0
 8003d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fafc 	bl	8002364 <HAL_GetTick>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e054      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	049b      	lsls	r3, r3, #18
 8003d82:	4013      	ands	r3, r2
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x644>
 8003d86:	e04c      	b.n	8003e22 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <HAL_RCC_OscConfig+0x67c>)
 8003d8e:	4908      	ldr	r1, [pc, #32]	; (8003db0 <HAL_RCC_OscConfig+0x68c>)
 8003d90:	400a      	ands	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fae6 	bl	8002364 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x6a6>
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000
 8003da4:	00001388 	.word	0x00001388
 8003da8:	efffffff 	.word	0xefffffff
 8003dac:	fffeffff 	.word	0xfffeffff
 8003db0:	feffffff 	.word	0xfeffffff
 8003db4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe fad4 	bl	8002364 <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e02c      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_RCC_OscConfig+0x708>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	049b      	lsls	r3, r3, #18
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x694>
 8003dd6:	e024      	b.n	8003e22 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e01f      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x708>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_RCC_OscConfig+0x708>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	23c0      	movs	r3, #192	; 0xc0
 8003df4:	025b      	lsls	r3, r3, #9
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d10e      	bne.n	8003e1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	220f      	movs	r2, #15
 8003e04:	401a      	ands	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	23f0      	movs	r3, #240	; 0xf0
 8003e12:	039b      	lsls	r3, r3, #14
 8003e14:	401a      	ands	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b008      	add	sp, #32
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0bf      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d911      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b5e      	ldr	r3, [pc, #376]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4393      	bics	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	4b5b      	ldr	r3, [pc, #364]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0a6      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2204      	movs	r2, #4
 8003e86:	4013      	ands	r3, r2
 8003e88:	d006      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e8a:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e90:	21e0      	movs	r1, #224	; 0xe0
 8003e92:	00c9      	lsls	r1, r1, #3
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	22f0      	movs	r2, #240	; 0xf0
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d04c      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d120      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07a      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	049b      	lsls	r3, r3, #18
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d114      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06e      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e062      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e05b      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	4393      	bics	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f20:	f7fe fa20 	bl	8002364 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f28:	e009      	b.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2a:	f7fe fa1b 	bl	8002364 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_RCC_ClockConfig+0x1a4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e042      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	220c      	movs	r2, #12
 8003f44:	401a      	ands	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1ec      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d211      	bcs.n	8003f82 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f70:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <HAL_RCC_ClockConfig+0x19c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e020      	b.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2204      	movs	r2, #4
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_RCC_ClockConfig+0x1a8>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	0019      	movs	r1, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fa0:	f000 f820 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa4:	0001      	movs	r1, r0
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1a0>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	220f      	movs	r2, #15
 8003fae:	4013      	ands	r3, r2
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1ac>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	000a      	movs	r2, r1
 8003fb6:	40da      	lsrs	r2, r3
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003fba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	f7fe f98b 	bl	80022d8 <HAL_InitTick>
  
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	00001388 	.word	0x00001388
 8003fd8:	fffff8ff 	.word	0xfffff8ff
 8003fdc:	08005240 	.word	0x08005240
 8003fe0:	20000010 	.word	0x20000010

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b08f      	sub	sp, #60	; 0x3c
 8003fe8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003fea:	2314      	movs	r3, #20
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	4a38      	ldr	r2, [pc, #224]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xec>)
 8003ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ff2:	c313      	stmia	r3!, {r0, r1, r4}
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	4a36      	ldr	r2, [pc, #216]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003ffc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ffe:	c313      	stmia	r3!, {r0, r1, r4}
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
 800400c:	2300      	movs	r3, #0
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	220c      	movs	r2, #12
 8004022:	4013      	ands	r3, r2
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d047      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xd4>
 8004028:	d849      	bhi.n	80040be <HAL_RCC_GetSysClockFreq+0xda>
 800402a:	2b04      	cmp	r3, #4
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x50>
 800402e:	2b08      	cmp	r3, #8
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x56>
 8004032:	e044      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004038:	e044      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	220f      	movs	r2, #15
 8004040:	4013      	ands	r3, r2
 8004042:	2214      	movs	r2, #20
 8004044:	18ba      	adds	r2, r7, r2
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	220f      	movs	r2, #15
 8004050:	4013      	ands	r3, r2
 8004052:	1d3a      	adds	r2, r7, #4
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405a:	23c0      	movs	r3, #192	; 0xc0
 800405c:	025b      	lsls	r3, r3, #9
 800405e:	401a      	ands	r2, r3
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	025b      	lsls	r3, r3, #9
 8004064:	429a      	cmp	r2, r3
 8004066:	d109      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406a:	481c      	ldr	r0, [pc, #112]	; (80040dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800406c:	f7fc f84c 	bl	8000108 <__udivsi3>
 8004070:	0003      	movs	r3, r0
 8004072:	001a      	movs	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	4353      	muls	r3, r2
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
 800407a:	e01a      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800407c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407e:	23c0      	movs	r3, #192	; 0xc0
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	401a      	ands	r2, r3
 8004084:	23c0      	movs	r3, #192	; 0xc0
 8004086:	025b      	lsls	r3, r3, #9
 8004088:	429a      	cmp	r2, r3
 800408a:	d109      	bne.n	80040a0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800408c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004090:	f7fc f83a 	bl	8000108 <__udivsi3>
 8004094:	0003      	movs	r3, r0
 8004096:	001a      	movs	r2, r3
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	4353      	muls	r3, r2
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
 800409e:	e008      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a2:	480e      	ldr	r0, [pc, #56]	; (80040dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a4:	f7fc f830 	bl	8000108 <__udivsi3>
 80040a8:	0003      	movs	r3, r0
 80040aa:	001a      	movs	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	4353      	muls	r3, r2
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b00f      	add	sp, #60	; 0x3c
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	08005220 	.word	0x08005220
 80040d4:	08005230 	.word	0x08005230
 80040d8:	40021000 	.word	0x40021000
 80040dc:	007a1200 	.word	0x007a1200
 80040e0:	02dc6c00 	.word	0x02dc6c00

080040e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0a8      	b.n	8004248 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	2382      	movs	r3, #130	; 0x82
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	429a      	cmp	r2, r3
 8004108:	d009      	beq.n	800411e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	61da      	str	r2, [r3, #28]
 8004110:	e005      	b.n	800411e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	225d      	movs	r2, #93	; 0x5d
 8004128:	5c9b      	ldrb	r3, [r3, r2]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	225c      	movs	r2, #92	; 0x5c
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f7fc fec2 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	225d      	movs	r2, #93	; 0x5d
 8004144:	2102      	movs	r1, #2
 8004146:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	438a      	bics	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	23e0      	movs	r3, #224	; 0xe0
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	429a      	cmp	r2, r3
 8004162:	d902      	bls.n	800416a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e002      	b.n	8004170 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	015b      	lsls	r3, r3, #5
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	23f0      	movs	r3, #240	; 0xf0
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	429a      	cmp	r2, r3
 800417a:	d008      	beq.n	800418e <HAL_SPI_Init+0xaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	23e0      	movs	r3, #224	; 0xe0
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	429a      	cmp	r2, r3
 8004186:	d002      	beq.n	800418e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	2382      	movs	r3, #130	; 0x82
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	401a      	ands	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	2384      	movs	r3, #132	; 0x84
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	400b      	ands	r3, r1
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2102      	movs	r1, #2
 80041aa:	400b      	ands	r3, r1
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2101      	movs	r1, #1
 80041b4:	400b      	ands	r3, r1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6999      	ldr	r1, [r3, #24]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	400b      	ands	r3, r1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2138      	movs	r1, #56	; 0x38
 80041ca:	400b      	ands	r3, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	400b      	ands	r3, r1
 80041d6:	431a      	orrs	r2, r3
 80041d8:	0011      	movs	r1, r2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	401a      	ands	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	2204      	movs	r2, #4
 80041f4:	401a      	ands	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2110      	movs	r1, #16
 80041fc:	400b      	ands	r3, r1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	2108      	movs	r1, #8
 8004206:	400b      	ands	r3, r1
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	23f0      	movs	r3, #240	; 0xf0
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	400b      	ands	r3, r1
 8004214:	431a      	orrs	r2, r3
 8004216:	0011      	movs	r1, r2
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	015b      	lsls	r3, r3, #5
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4907      	ldr	r1, [pc, #28]	; (8004250 <HAL_SPI_Init+0x16c>)
 8004234:	400a      	ands	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	225d      	movs	r2, #93	; 0x5d
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fffff7ff 	.word	0xfffff7ff

08004254 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	1dbb      	adds	r3, r7, #6
 8004262:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004264:	231f      	movs	r3, #31
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	225c      	movs	r2, #92	; 0x5c
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_SPI_Transmit+0x26>
 8004276:	2302      	movs	r3, #2
 8004278:	e140      	b.n	80044fc <HAL_SPI_Transmit+0x2a8>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	225c      	movs	r2, #92	; 0x5c
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004282:	f7fe f86f 	bl	8002364 <HAL_GetTick>
 8004286:	0003      	movs	r3, r0
 8004288:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800428a:	2316      	movs	r3, #22
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	1dba      	adds	r2, r7, #6
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	225d      	movs	r2, #93	; 0x5d
 8004298:	5c9b      	ldrb	r3, [r3, r2]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d004      	beq.n	80042aa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80042a0:	231f      	movs	r3, #31
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2202      	movs	r2, #2
 80042a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80042a8:	e11d      	b.n	80044e6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_SPI_Transmit+0x64>
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80042b8:	231f      	movs	r3, #31
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
    goto error;
 80042c0:	e111      	b.n	80044e6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	225d      	movs	r2, #93	; 0x5d
 80042c6:	2103      	movs	r1, #3
 80042c8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1dba      	adds	r2, r7, #6
 80042da:	8812      	ldrh	r2, [r2, #0]
 80042dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1dba      	adds	r2, r7, #6
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2244      	movs	r2, #68	; 0x44
 80042f0:	2100      	movs	r1, #0
 80042f2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2246      	movs	r2, #70	; 0x46
 80042f8:	2100      	movs	r1, #0
 80042fa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	429a      	cmp	r2, r3
 8004312:	d110      	bne.n	8004336 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2140      	movs	r1, #64	; 0x40
 8004320:	438a      	bics	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	01c9      	lsls	r1, r1, #7
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	4013      	ands	r3, r2
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d007      	beq.n	8004354 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	23e0      	movs	r3, #224	; 0xe0
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	429a      	cmp	r2, r3
 800435e:	d94e      	bls.n	80043fe <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_SPI_Transmit+0x11e>
 8004368:	2316      	movs	r3, #22
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d13f      	bne.n	80043f2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004396:	e02c      	b.n	80043f2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d112      	bne.n	80043cc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ca:	e012      	b.n	80043f2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043cc:	f7fd ffca 	bl	8002364 <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d802      	bhi.n	80043e2 <HAL_SPI_Transmit+0x18e>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_Transmit+0x194>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d104      	bne.n	80043f2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80043e8:	231f      	movs	r3, #31
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2203      	movs	r2, #3
 80043ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80043f0:	e079      	b.n	80044e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1cd      	bne.n	8004398 <HAL_SPI_Transmit+0x144>
 80043fc:	e04f      	b.n	800449e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_SPI_Transmit+0x1bc>
 8004406:	2316      	movs	r3, #22
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d141      	bne.n	8004494 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004436:	e02d      	b.n	8004494 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2202      	movs	r2, #2
 8004440:	4013      	ands	r3, r2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d113      	bne.n	800446e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800446c:	e012      	b.n	8004494 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446e:	f7fd ff79 	bl	8002364 <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d802      	bhi.n	8004484 <HAL_SPI_Transmit+0x230>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x236>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800448a:	231f      	movs	r3, #31
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	2203      	movs	r2, #3
 8004490:	701a      	strb	r2, [r3, #0]
          goto error;
 8004492:	e028      	b.n	80044e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1cc      	bne.n	8004438 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f969 	bl	800477c <SPI_EndRxTxTransaction>
 80044aa:	1e03      	subs	r3, r0, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80044da:	231f      	movs	r3, #31
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2201      	movs	r2, #1
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e000      	b.n	80044e6 <HAL_SPI_Transmit+0x292>
  }

error:
 80044e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	225d      	movs	r2, #93	; 0x5d
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	225c      	movs	r2, #92	; 0x5c
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80044f6:	231f      	movs	r3, #31
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	781b      	ldrb	r3, [r3, #0]
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b008      	add	sp, #32
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	225d      	movs	r2, #93	; 0x5d
 8004510:	5c9b      	ldrb	r3, [r3, r2]
 8004512:	b2db      	uxtb	r3, r3
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800452c:	f7fd ff1a 	bl	8002364 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800453c:	f7fd ff12 	bl	8002364 <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004544:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	015b      	lsls	r3, r3, #5
 800454a:	0d1b      	lsrs	r3, r3, #20
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	4353      	muls	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004552:	e058      	b.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	d055      	beq.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800455a:	f7fd ff03 	bl	8002364 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	429a      	cmp	r2, r3
 8004568:	d902      	bls.n	8004570 <SPI_WaitFlagStateUntilTimeout+0x54>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d142      	bne.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	21e0      	movs	r1, #224	; 0xe0
 800457c:	438a      	bics	r2, r1
 800457e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	2382      	movs	r3, #130	; 0x82
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	429a      	cmp	r2, r3
 800458a:	d113      	bne.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	429a      	cmp	r2, r3
 8004596:	d005      	beq.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	438a      	bics	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	019b      	lsls	r3, r3, #6
 80045bc:	429a      	cmp	r2, r3
 80045be:	d110      	bne.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	491a      	ldr	r1, [pc, #104]	; (8004634 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2180      	movs	r1, #128	; 0x80
 80045dc:	0189      	lsls	r1, r1, #6
 80045de:	430a      	orrs	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	225d      	movs	r2, #93	; 0x5d
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	225c      	movs	r2, #92	; 0x5c
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e017      	b.n	8004626 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3b01      	subs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	425a      	negs	r2, r3
 8004616:	4153      	adcs	r3, r2
 8004618:	b2db      	uxtb	r3, r3
 800461a:	001a      	movs	r2, r3
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d197      	bne.n	8004554 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b008      	add	sp, #32
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	20000010 	.word	0x20000010
 8004634:	ffffdfff 	.word	0xffffdfff

08004638 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004646:	2317      	movs	r3, #23
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800464e:	f7fd fe89 	bl	8002364 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	18d3      	adds	r3, r2, r3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800465e:	f7fd fe81 	bl	8002364 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800466e:	4b41      	ldr	r3, [pc, #260]	; (8004774 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	0013      	movs	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	189b      	adds	r3, r3, r2
 8004678:	00da      	lsls	r2, r3, #3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	0d1b      	lsrs	r3, r3, #20
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	4353      	muls	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004684:	e068      	b.n	8004758 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	23c0      	movs	r3, #192	; 0xc0
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	429a      	cmp	r2, r3
 800468e:	d10a      	bne.n	80046a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	2117      	movs	r1, #23
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	d055      	beq.n	8004758 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ac:	f7fd fe5a 	bl	8002364 <HAL_GetTick>
 80046b0:	0002      	movs	r2, r0
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d902      	bls.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d142      	bne.n	8004748 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	21e0      	movs	r1, #224	; 0xe0
 80046ce:	438a      	bics	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	2382      	movs	r3, #130	; 0x82
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	429a      	cmp	r2, r3
 80046dc:	d113      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0xce>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d005      	beq.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	438a      	bics	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	429a      	cmp	r2, r3
 8004710:	d110      	bne.n	8004734 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800471e:	400a      	ands	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0189      	lsls	r1, r1, #6
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	225d      	movs	r2, #93	; 0x5d
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	225c      	movs	r2, #92	; 0x5c
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e010      	b.n	800476a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3b01      	subs	r3, #1
 8004756:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d18e      	bne.n	8004686 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b00a      	add	sp, #40	; 0x28
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000010 	.word	0x20000010
 8004778:	ffffdfff 	.word	0xffffdfff

0800477c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	23c0      	movs	r3, #192	; 0xc0
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	0013      	movs	r3, r2
 8004796:	2200      	movs	r2, #0
 8004798:	f7ff ff4e 	bl	8004638 <SPI_WaitFifoStateUntilTimeout>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d007      	beq.n	80047b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	2220      	movs	r2, #32
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e027      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	0013      	movs	r3, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	f7ff fead 	bl	800451c <SPI_WaitFlagStateUntilTimeout>
 80047c2:	1e03      	subs	r3, r0, #0
 80047c4:	d007      	beq.n	80047d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	2220      	movs	r2, #32
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e014      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	23c0      	movs	r3, #192	; 0xc0
 80047da:	00d9      	lsls	r1, r3, #3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	0013      	movs	r3, r2
 80047e4:	2200      	movs	r2, #0
 80047e6:	f7ff ff27 	bl	8004638 <SPI_WaitFifoStateUntilTimeout>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d007      	beq.n	80047fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	2220      	movs	r2, #32
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e000      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b004      	add	sp, #16
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e042      	b.n	80048a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	223d      	movs	r2, #61	; 0x3d
 800481e:	5c9b      	ldrb	r3, [r3, r2]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223c      	movs	r2, #60	; 0x3c
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f7fc fb95 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	223d      	movs	r2, #61	; 0x3d
 800483a:	2102      	movs	r1, #2
 800483c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	0019      	movs	r1, r3
 8004848:	0010      	movs	r0, r2
 800484a:	f000 fab7 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2246      	movs	r2, #70	; 0x46
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223e      	movs	r2, #62	; 0x3e
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	223f      	movs	r2, #63	; 0x3f
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2241      	movs	r2, #65	; 0x41
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2242      	movs	r2, #66	; 0x42
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2243      	movs	r2, #67	; 0x43
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2244      	movs	r2, #68	; 0x44
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2245      	movs	r2, #69	; 0x45
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	223d      	movs	r2, #61	; 0x3d
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	223d      	movs	r2, #61	; 0x3d
 80048b4:	5c9b      	ldrb	r3, [r3, r2]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e03b      	b.n	8004938 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	223d      	movs	r2, #61	; 0x3d
 80048c4:	2102      	movs	r1, #2
 80048c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	430a      	orrs	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIM_Base_Start_IT+0x98>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <HAL_TIM_Base_Start_IT+0x5a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d009      	beq.n	8004902 <HAL_TIM_Base_Start_IT+0x5a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <HAL_TIM_Base_Start_IT+0x9c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_TIM_Base_Start_IT+0x5a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_TIM_Base_Start_IT+0xa0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b06      	cmp	r3, #6
 8004912:	d010      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e007      	b.n	8004936 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b004      	add	sp, #16
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40014000 	.word	0x40014000

0800494c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2101      	movs	r1, #1
 8004960:	438a      	bics	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <HAL_TIM_Base_Stop_IT+0x54>)
 800496c:	4013      	ands	r3, r2
 800496e:	d10d      	bne.n	800498c <HAL_TIM_Base_Stop_IT+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <HAL_TIM_Base_Stop_IT+0x58>)
 8004978:	4013      	ands	r3, r2
 800497a:	d107      	bne.n	800498c <HAL_TIM_Base_Stop_IT+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2101      	movs	r1, #1
 8004988:	438a      	bics	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	223d      	movs	r2, #61	; 0x3d
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	00001111 	.word	0x00001111
 80049a4:	00000444 	.word	0x00000444

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2202      	movs	r2, #2
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d124      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11d      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2203      	movs	r2, #3
 80049d2:	4252      	negs	r2, r2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2203      	movs	r2, #3
 80049e4:	4013      	ands	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f9ce 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 80049f0:	e007      	b.n	8004a02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 f9c1 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f9cd 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d125      	bne.n	8004a62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d11e      	bne.n	8004a62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2205      	movs	r2, #5
 8004a2a:	4252      	negs	r2, r2
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	23c0      	movs	r3, #192	; 0xc0
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 f9a1 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004a4a:	e007      	b.n	8004a5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 f994 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f9a0 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d124      	bne.n	8004aba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2208      	movs	r2, #8
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d11d      	bne.n	8004aba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2209      	movs	r2, #9
 8004a84:	4252      	negs	r2, r2
 8004a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4013      	ands	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 f975 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004aa2:	e007      	b.n	8004ab4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 f968 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f974 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d125      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d11e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2211      	movs	r2, #17
 8004adc:	4252      	negs	r2, r2
 8004ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	23c0      	movs	r3, #192	; 0xc0
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f948 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004afc:	e007      	b.n	8004b0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 f93b 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 f947 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10f      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2202      	movs	r2, #2
 8004b36:	4252      	negs	r2, r2
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fb ffb5 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d10f      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d108      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2281      	movs	r2, #129	; 0x81
 8004b64:	4252      	negs	r2, r2
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 faa6 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d10f      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2240      	movs	r2, #64	; 0x40
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d108      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2241      	movs	r2, #65	; 0x41
 8004b92:	4252      	negs	r2, r2
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 f907 	bl	8004dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d10f      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d108      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2221      	movs	r2, #33	; 0x21
 8004bc0:	4252      	negs	r2, r2
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fa70 	bl	80050ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	230f      	movs	r3, #15
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	223c      	movs	r2, #60	; 0x3c
 8004bea:	5c9b      	ldrb	r3, [r3, r2]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x20>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0bc      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x19a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223c      	movs	r2, #60	; 0x3c
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	223d      	movs	r2, #61	; 0x3d
 8004c00:	2102      	movs	r1, #2
 8004c02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2277      	movs	r2, #119	; 0x77
 8004c10:	4393      	bics	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	0192      	lsls	r2, r2, #6
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d040      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xde>
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0192      	lsls	r2, r2, #6
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d900      	bls.n	8004c3a <HAL_TIM_ConfigClockSource+0x66>
 8004c38:	e088      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	0152      	lsls	r2, r2, #5
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d100      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x70>
 8004c42:	e088      	b.n	8004d56 <HAL_TIM_ConfigClockSource+0x182>
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	0152      	lsls	r2, r2, #5
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d900      	bls.n	8004c4e <HAL_TIM_ConfigClockSource+0x7a>
 8004c4c:	e07e      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c4e:	2b70      	cmp	r3, #112	; 0x70
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xb0>
 8004c52:	d900      	bls.n	8004c56 <HAL_TIM_ConfigClockSource+0x82>
 8004c54:	e07a      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c56:	2b60      	cmp	r3, #96	; 0x60
 8004c58:	d04f      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x126>
 8004c5a:	d900      	bls.n	8004c5e <HAL_TIM_ConfigClockSource+0x8a>
 8004c5c:	e076      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c5e:	2b50      	cmp	r3, #80	; 0x50
 8004c60:	d03b      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x106>
 8004c62:	d900      	bls.n	8004c66 <HAL_TIM_ConfigClockSource+0x92>
 8004c64:	e072      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d057      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x146>
 8004c6a:	d900      	bls.n	8004c6e <HAL_TIM_ConfigClockSource+0x9a>
 8004c6c:	e06e      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d063      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x166>
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x166>
 8004c78:	d868      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d05d      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x166>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d05b      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x166>
 8004c82:	e063      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f000 f98c 	bl	8004fb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2277      	movs	r2, #119	; 0x77
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e052      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 f975 	bl	8004fb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	01c9      	lsls	r1, r1, #7
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03e      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	f000 f8e8 	bl	8004ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	; 0x50
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f942 	bl	8004f7c <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02e      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	001a      	movs	r2, r3
 8004d08:	f000 f906 	bl	8004f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	; 0x60
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 f932 	bl	8004f7c <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01e      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	001a      	movs	r2, r3
 8004d28:	f000 f8c8 	bl	8004ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f922 	bl	8004f7c <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00e      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	0019      	movs	r1, r3
 8004d44:	0010      	movs	r0, r2
 8004d46:	f000 f919 	bl	8004f7c <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e005      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	230f      	movs	r3, #15
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
      break;
 8004d54:	e000      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004d56:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	223d      	movs	r2, #61	; 0x3d
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	223c      	movs	r2, #60	; 0x3c
 8004d64:	2100      	movs	r1, #0
 8004d66:	5499      	strb	r1, [r3, r2]

  return status;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	781b      	ldrb	r3, [r3, #0]
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	ffff00ff 	.word	0xffff00ff

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a34      	ldr	r2, [pc, #208]	; (8004ea0 <TIM_Base_SetConfig+0xe4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d008      	beq.n	8004de6 <TIM_Base_SetConfig+0x2a>
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	05db      	lsls	r3, r3, #23
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d003      	beq.n	8004de6 <TIM_Base_SetConfig+0x2a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a30      	ldr	r2, [pc, #192]	; (8004ea4 <TIM_Base_SetConfig+0xe8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d108      	bne.n	8004df8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2270      	movs	r2, #112	; 0x70
 8004dea:	4393      	bics	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <TIM_Base_SetConfig+0xe4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	05db      	lsls	r3, r3, #23
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d013      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <TIM_Base_SetConfig+0xe8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <TIM_Base_SetConfig+0xec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	; (8004eac <TIM_Base_SetConfig+0xf0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	4393      	bics	r3, r2
 8004e4a:	001a      	movs	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <TIM_Base_SetConfig+0xe4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xce>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <TIM_Base_SetConfig+0xf0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xce>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <TIM_Base_SetConfig+0xf4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xce>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <TIM_Base_SetConfig+0xf8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d103      	bne.n	8004e92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	615a      	str	r2, [r3, #20]
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40002000 	.word	0x40002000
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800
 8004eb8:	fffffcff 	.word	0xfffffcff

08004ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4393      	bics	r3, r2
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	22f0      	movs	r2, #240	; 0xf0
 8004ee6:	4393      	bics	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	4393      	bics	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b006      	add	sp, #24
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	001a      	movs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <TIM_TI2_ConfigInputStage+0x60>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	031b      	lsls	r3, r3, #12
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	22a0      	movs	r2, #160	; 0xa0
 8004f54:	4393      	bics	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b006      	add	sp, #24
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	ffff0fff 	.word	0xffff0fff

08004f7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2270      	movs	r2, #112	; 0x70
 8004f90:	4393      	bics	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b004      	add	sp, #16
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <TIM_ETR_SetConfig+0x3c>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b006      	add	sp, #24
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	ffff00ff 	.word	0xffff00ff

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	223c      	movs	r2, #60	; 0x3c
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e047      	b.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	223c      	movs	r2, #60	; 0x3c
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223d      	movs	r2, #61	; 0x3d
 8005014:	2102      	movs	r1, #2
 8005016:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2270      	movs	r2, #112	; 0x70
 800502c:	4393      	bics	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	429a      	cmp	r2, r3
 8005056:	d009      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2280      	movs	r2, #128	; 0x80
 8005070:	4393      	bics	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	223d      	movs	r2, #61	; 0x3d
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	223c      	movs	r2, #60	; 0x3c
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <__cxa_pure_virtual>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	f000 f805 	bl	80050dc <_ZSt9terminatev>

080050d2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80050d2:	b510      	push	{r4, lr}
 80050d4:	4780      	blx	r0
 80050d6:	f000 f809 	bl	80050ec <abort>
	...

080050dc <_ZSt9terminatev>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <_ZSt9terminatev+0xc>)
 80050de:	b510      	push	{r4, lr}
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f7ff fff6 	bl	80050d2 <_ZN10__cxxabiv111__terminateEPFvvE>
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	2000001c 	.word	0x2000001c

080050ec <abort>:
 80050ec:	2006      	movs	r0, #6
 80050ee:	b510      	push	{r4, lr}
 80050f0:	f000 f86a 	bl	80051c8 <raise>
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fb ffc5 	bl	8001084 <_exit>
	...

080050fc <__errno>:
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <__errno+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	4770      	bx	lr
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000020 	.word	0x20000020

08005108 <__libc_init_array>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	2600      	movs	r6, #0
 800510c:	4d0c      	ldr	r5, [pc, #48]	; (8005140 <__libc_init_array+0x38>)
 800510e:	4c0d      	ldr	r4, [pc, #52]	; (8005144 <__libc_init_array+0x3c>)
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	42a6      	cmp	r6, r4
 8005116:	d109      	bne.n	800512c <__libc_init_array+0x24>
 8005118:	2600      	movs	r6, #0
 800511a:	f000 f875 	bl	8005208 <_init>
 800511e:	4d0a      	ldr	r5, [pc, #40]	; (8005148 <__libc_init_array+0x40>)
 8005120:	4c0a      	ldr	r4, [pc, #40]	; (800514c <__libc_init_array+0x44>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	42a6      	cmp	r6, r4
 8005128:	d105      	bne.n	8005136 <__libc_init_array+0x2e>
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	00b3      	lsls	r3, r6, #2
 800512e:	58eb      	ldr	r3, [r5, r3]
 8005130:	4798      	blx	r3
 8005132:	3601      	adds	r6, #1
 8005134:	e7ee      	b.n	8005114 <__libc_init_array+0xc>
 8005136:	00b3      	lsls	r3, r6, #2
 8005138:	58eb      	ldr	r3, [r5, r3]
 800513a:	4798      	blx	r3
 800513c:	3601      	adds	r6, #1
 800513e:	e7f2      	b.n	8005126 <__libc_init_array+0x1e>
 8005140:	080052a4 	.word	0x080052a4
 8005144:	080052a4 	.word	0x080052a4
 8005148:	080052a4 	.word	0x080052a4
 800514c:	080052b0 	.word	0x080052b0

08005150 <memcpy>:
 8005150:	2300      	movs	r3, #0
 8005152:	b510      	push	{r4, lr}
 8005154:	429a      	cmp	r2, r3
 8005156:	d100      	bne.n	800515a <memcpy+0xa>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	5ccc      	ldrb	r4, [r1, r3]
 800515c:	54c4      	strb	r4, [r0, r3]
 800515e:	3301      	adds	r3, #1
 8005160:	e7f8      	b.n	8005154 <memcpy+0x4>

08005162 <memset>:
 8005162:	0003      	movs	r3, r0
 8005164:	1882      	adds	r2, r0, r2
 8005166:	4293      	cmp	r3, r2
 8005168:	d100      	bne.n	800516c <memset+0xa>
 800516a:	4770      	bx	lr
 800516c:	7019      	strb	r1, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	e7f9      	b.n	8005166 <memset+0x4>

08005172 <_raise_r>:
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	0004      	movs	r4, r0
 8005176:	000d      	movs	r5, r1
 8005178:	291f      	cmp	r1, #31
 800517a:	d904      	bls.n	8005186 <_raise_r+0x14>
 800517c:	2316      	movs	r3, #22
 800517e:	6003      	str	r3, [r0, #0]
 8005180:	2001      	movs	r0, #1
 8005182:	4240      	negs	r0, r0
 8005184:	bd70      	pop	{r4, r5, r6, pc}
 8005186:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <_raise_r+0x24>
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	189b      	adds	r3, r3, r2
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	2a00      	cmp	r2, #0
 8005194:	d108      	bne.n	80051a8 <_raise_r+0x36>
 8005196:	0020      	movs	r0, r4
 8005198:	f000 f832 	bl	8005200 <_getpid_r>
 800519c:	002a      	movs	r2, r5
 800519e:	0001      	movs	r1, r0
 80051a0:	0020      	movs	r0, r4
 80051a2:	f000 f81b 	bl	80051dc <_kill_r>
 80051a6:	e7ed      	b.n	8005184 <_raise_r+0x12>
 80051a8:	2000      	movs	r0, #0
 80051aa:	2a01      	cmp	r2, #1
 80051ac:	d0ea      	beq.n	8005184 <_raise_r+0x12>
 80051ae:	1c51      	adds	r1, r2, #1
 80051b0:	d103      	bne.n	80051ba <_raise_r+0x48>
 80051b2:	2316      	movs	r3, #22
 80051b4:	3001      	adds	r0, #1
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	e7e4      	b.n	8005184 <_raise_r+0x12>
 80051ba:	2400      	movs	r4, #0
 80051bc:	0028      	movs	r0, r5
 80051be:	601c      	str	r4, [r3, #0]
 80051c0:	4790      	blx	r2
 80051c2:	0020      	movs	r0, r4
 80051c4:	e7de      	b.n	8005184 <_raise_r+0x12>
	...

080051c8 <raise>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <raise+0x10>)
 80051cc:	0001      	movs	r1, r0
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	f7ff ffcf 	bl	8005172 <_raise_r>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	20000020 	.word	0x20000020

080051dc <_kill_r>:
 80051dc:	2300      	movs	r3, #0
 80051de:	b570      	push	{r4, r5, r6, lr}
 80051e0:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_kill_r+0x20>)
 80051e2:	0004      	movs	r4, r0
 80051e4:	0008      	movs	r0, r1
 80051e6:	0011      	movs	r1, r2
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	f7fb ff3b 	bl	8001064 <_kill>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d103      	bne.n	80051fa <_kill_r+0x1e>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d000      	beq.n	80051fa <_kill_r+0x1e>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	20000348 	.word	0x20000348

08005200 <_getpid_r>:
 8005200:	b510      	push	{r4, lr}
 8005202:	f7fb ff29 	bl	8001058 <_getpid>
 8005206:	bd10      	pop	{r4, pc}

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
