
mcb_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080039e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000088  08003a68  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003a68  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e91a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260d  00000000  00000000  0002e9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00031e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001852b  00000000  00000000  00032b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a834  00000000  00000000  0004b04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000827f9  00000000  00000000  0005587f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003580  00000000  00000000  000d80f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003968 	.word	0x08003968

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08003968 	.word	0x08003968

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 ff96 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f8e2 	bl	80005c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f9cc 	bl	800079c <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000404:	f000 f926 	bl	8000654 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 8000408:	f000 f966 	bl	80006d8 <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DAC_Write(cruiseDAC, DAC_Init);
 800040c:	4b5b      	ldr	r3, [pc, #364]	; (800057c <main+0x188>)
 800040e:	0019      	movs	r1, r3
 8000410:	2000      	movs	r0, #0
 8000412:	f000 fb3d 	bl	8000a90 <_Z9DAC_Write5slavePh>
  DAC_Write(regenDAC, DAC_Init);
 8000416:	4b59      	ldr	r3, [pc, #356]	; (800057c <main+0x188>)
 8000418:	0019      	movs	r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fb38 	bl	8000a90 <_Z9DAC_Write5slavePh>

  //startup functions
  HAL_GPIO_WritePin(PRE_MOTOR_GPIO_Port, PRE_MOTOR_Pin, GPIO_PIN_SET); //set PRE_MOTOR high
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2201      	movs	r2, #1
 8000426:	2140      	movs	r1, #64	; 0x40
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fdac 	bl	8001f86 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800042e:	4b54      	ldr	r3, [pc, #336]	; (8000580 <main+0x18c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);
 8000436:	4b52      	ldr	r3, [pc, #328]	; (8000580 <main+0x18c>)
 8000438:	0018      	movs	r0, r3
 800043a:	f002 fe39 	bl	80030b0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(newInput_CT)
 800043e:	4b51      	ldr	r3, [pc, #324]	; (8000584 <main+0x190>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d041      	beq.n	80004ca <main+0xd6>
		{
			if(!active_CT) //if charge trip was turned off. CHG_TRIP/PB0 is low
 8000446:	4b50      	ldr	r3, [pc, #320]	; (8000588 <main+0x194>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2201      	movs	r2, #1
 800044c:	4053      	eors	r3, r2
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d025      	beq.n	80004a0 <main+0xac>
			{
				// Turn off MPPT coil
				HAL_GPIO_WritePin(CON_MPPT_GPIO_Port, CON_MPPT_Pin, GPIO_PIN_RESET);
 8000454:	4b4d      	ldr	r3, [pc, #308]	; (800058c <main+0x198>)
 8000456:	2200      	movs	r2, #0
 8000458:	2120      	movs	r1, #32
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fd93 	bl	8001f86 <HAL_GPIO_WritePin>
				// Ensure MPPT precharge is off
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_RESET);
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2200      	movs	r2, #0
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fd8c 	bl	8001f86 <HAL_GPIO_WritePin>

				// Reset timer
				if (!sysStartup)
 800046e:	4b48      	ldr	r3, [pc, #288]	; (8000590 <main+0x19c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2201      	movs	r2, #1
 8000474:	4053      	eors	r3, r2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d007      	beq.n	800048c <main+0x98>
				{
					HAL_TIM_Base_Stop_IT(&htim2);
 800047c:	4b40      	ldr	r3, [pc, #256]	; (8000580 <main+0x18c>)
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fe38 	bl	80030f4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000484:	4b3e      	ldr	r3, [pc, #248]	; (8000580 <main+0x18c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				// Reset ticks
				tickPrecharge = 0;
 800048c:	4b41      	ldr	r3, [pc, #260]	; (8000594 <main+0x1a0>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]

				// Set MPPT Coil active bool
				sysMPPTCoilActive = false;
 8000492:	4b41      	ldr	r3, [pc, #260]	; (8000598 <main+0x1a4>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
				sysMPPTPrecharge = false;
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <main+0x1a8>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e011      	b.n	80004c4 <main+0xd0>

			}
			else if(active_CT)  //if charge_trip
 80004a0:	4b39      	ldr	r3, [pc, #228]	; (8000588 <main+0x194>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00d      	beq.n	80004c4 <main+0xd0>
			{
				sysMPPTPrecharge = true;
 80004a8:	4b3c      	ldr	r3, [pc, #240]	; (800059c <main+0x1a8>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
				//Turn on PRE_MPPT
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_SET);
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2201      	movs	r2, #1
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fd65 	bl	8001f86 <HAL_GPIO_WritePin>
				//Start countdown of precharge
				HAL_TIM_Base_Start_IT(&htim2);
 80004bc:	4b30      	ldr	r3, [pc, #192]	; (8000580 <main+0x18c>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 fdf6 	bl	80030b0 <HAL_TIM_Base_Start_IT>
			}
			newInput_CT = false;
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <main+0x190>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
		}
		if(newInput_CAN)
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <main+0x1ac>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d028      	beq.n	8000524 <main+0x130>
		{
			if(aux0Packet.regenOn && active_Cruise)
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <main+0x1b0>)
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00b      	beq.n	80004f2 <main+0xfe>
 80004da:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <main+0x1b4>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d007      	beq.n	80004f2 <main+0xfe>
			{
				// Turn on regen brake
				HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_SET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	4831      	ldr	r0, [pc, #196]	; (80005ac <main+0x1b8>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	0019      	movs	r1, r3
 80004ec:	f001 fd4b 	bl	8001f86 <HAL_GPIO_WritePin>
 80004f0:	e015      	b.n	800051e <main+0x12a>
			}
			else if(aux0Packet.regenOn)
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <main+0x1b0>)
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d005      	beq.n	8000506 <main+0x112>
			{
				DAC_Write(regenDAC, DAC_PowerOn);
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <main+0x1bc>)
 80004fc:	0019      	movs	r1, r3
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fac6 	bl	8000a90 <_Z9DAC_Write5slavePh>
 8000504:	e00b      	b.n	800051e <main+0x12a>
			}
			else
			{
				// Turn off regen brake
				HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4828      	ldr	r0, [pc, #160]	; (80005ac <main+0x1b8>)
 800050c:	2200      	movs	r2, #0
 800050e:	0019      	movs	r1, r3
 8000510:	f001 fd39 	bl	8001f86 <HAL_GPIO_WritePin>
				// turn off regen DAC
				DAC_Write(regenDAC, DAC_PowerOff);
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <main+0x1c0>)
 8000516:	0019      	movs	r1, r3
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fab9 	bl	8000a90 <_Z9DAC_Write5slavePh>
			}
			newInput_CAN = false;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <main+0x1ac>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
		}
		if(newInput_Cruise)
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <main+0x1c4>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01b      	beq.n	8000564 <main+0x170>
		{
			if(active_Cruise)	//Cruise is on
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <main+0x1b4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <main+0x14c>
			{
				DAC_Write(cruiseDAC, DAC_PowerOn);
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <main+0x1bc>)
 8000536:	0019      	movs	r1, r3
 8000538:	2000      	movs	r0, #0
 800053a:	f000 faa9 	bl	8000a90 <_Z9DAC_Write5slavePh>
 800053e:	e00e      	b.n	800055e <main+0x16a>

				//wantSpeed = ? from CAN
			}
			else
			{
				DAC_Write(cruiseDAC, DAC_PowerOff);
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <main+0x1c0>)
 8000542:	0019      	movs	r1, r3
 8000544:	2000      	movs	r0, #0
 8000546:	f000 faa3 	bl	8000a90 <_Z9DAC_Write5slavePh>
				wantSpeed = 0;
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <main+0x1c8>)
 800054c:	2300      	movs	r3, #0
 800054e:	2400      	movs	r4, #0
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	6054      	str	r4, [r2, #4]
				actualSpeed = 0;
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <main+0x1cc>)
 8000556:	2300      	movs	r3, #0
 8000558:	2400      	movs	r4, #0
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	6054      	str	r4, [r2, #4]
			}
			newInput_Cruise = false;
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0x1c4>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
		}
		if(active_Cruise)
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <main+0x1b4>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <main+0x17a>
 800056c:	e767      	b.n	800043e <main+0x4a>
		{
			//Insert formula here
			DAC_Write(cruiseDAC, DAC_PowerOff);
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <main+0x1c0>)
 8000570:	0019      	movs	r1, r3
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fa8c 	bl	8000a90 <_Z9DAC_Write5slavePh>
		if(newInput_CT)
 8000578:	e761      	b.n	800043e <main+0x4a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	20000004 	.word	0x20000004
 8000580:	20000108 	.word	0x20000108
 8000584:	20000196 	.word	0x20000196
 8000588:	20000194 	.word	0x20000194
 800058c:	48000800 	.word	0x48000800
 8000590:	20000000 	.word	0x20000000
 8000594:	2000019c 	.word	0x2000019c
 8000598:	2000019a 	.word	0x2000019a
 800059c:	20000198 	.word	0x20000198
 80005a0:	200001a4 	.word	0x200001a4
 80005a4:	20000148 	.word	0x20000148
 80005a8:	20000195 	.word	0x20000195
 80005ac:	48000400 	.word	0x48000400
 80005b0:	20000008 	.word	0x20000008
 80005b4:	2000000c 	.word	0x2000000c
 80005b8:	20000197 	.word	0x20000197
 80005bc:	200001a8 	.word	0x200001a8
 80005c0:	200001b0 	.word	0x200001b0

080005c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b093      	sub	sp, #76	; 0x4c
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	2414      	movs	r4, #20
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	0018      	movs	r0, r3
 80005d0:	2334      	movs	r3, #52	; 0x34
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 f975 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	2310      	movs	r3, #16
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 f96e 	bl	80038c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	0021      	movs	r1, r4
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2202      	movs	r2, #2
 80005ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2201      	movs	r2, #1
 80005f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2210      	movs	r2, #16
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fcf7 	bl	8001ff8 <HAL_RCC_OscConfig>
 800060a:	0003      	movs	r3, r0
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	4193      	sbcs	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000616:	f000 fa87 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f002 f864 	bl	8002704 <HAL_RCC_ClockConfig>
 800063c:	0003      	movs	r3, r0
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	4193      	sbcs	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000648:	f000 fa6e 	bl	8000b28 <Error_Handler>
  }
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b013      	add	sp, #76	; 0x4c
 8000652:	bd90      	pop	{r4, r7, pc}

08000654 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <_ZL12MX_SPI2_Initv+0x80>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000660:	2282      	movs	r2, #130	; 0x82
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 800066e:	22e0      	movs	r2, #224	; 0xe0
 8000670:	00d2      	lsls	r2, r2, #3
 8000672:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000676:	2202      	movs	r2, #2
 8000678:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 800067c:	2201      	movs	r2, #1
 800067e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 800068a:	2210      	movs	r2, #16
 800068c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 80006a2:	2207      	movs	r2, #7
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <_ZL12MX_SPI2_Initv+0x7c>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f002 f97d 	bl	80029b4 <HAL_SPI_Init>
 80006ba:	0003      	movs	r3, r0
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	4193      	sbcs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 80006c6:	f000 fa2f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	40003800 	.word	0x40003800

080006d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	2308      	movs	r3, #8
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	2310      	movs	r3, #16
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 f8eb 	bl	80038c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	2308      	movs	r3, #8
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f003 f8e4 	bl	80038c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	05d2      	lsls	r2, r2, #23
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <_ZL12MX_TIM2_Initv+0xbc>)
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <_ZL12MX_TIM2_Initv+0xc0>)
 8000714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000724:	0018      	movs	r0, r3
 8000726:	f002 fc97 	bl	8003058 <HAL_TIM_Base_Init>
 800072a:	0003      	movs	r3, r0
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	4193      	sbcs	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000736:	f000 f9f7 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	2108      	movs	r1, #8
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0152      	lsls	r2, r2, #5
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000744:	187a      	adds	r2, r7, r1
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f002 fe12 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000750:	0003      	movs	r3, r0
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800075c:	f000 f9e4 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076c:	003a      	movs	r2, r7
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <_ZL12MX_TIM2_Initv+0xb8>)
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fff6 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	0003      	movs	r3, r0
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	4193      	sbcs	r3, r2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000784:	f000 f9d0 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b006      	add	sp, #24
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000108 	.word	0x20000108
 8000794:	000002cf 	.word	0x000002cf
 8000798:	0000270f 	.word	0x0000270f

0800079c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	; 0x2c
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	2414      	movs	r4, #20
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2314      	movs	r3, #20
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 f889 	bl	80038c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b53      	ldr	r3, [pc, #332]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b52      	ldr	r3, [pc, #328]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b4f      	ldr	r3, [pc, #316]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	03db      	lsls	r3, r3, #15
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b48      	ldr	r3, [pc, #288]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b44      	ldr	r3, [pc, #272]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0309      	lsls	r1, r1, #12
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b41      	ldr	r3, [pc, #260]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	031b      	lsls	r3, r3, #12
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	02c9      	lsls	r1, r1, #11
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <_ZL12MX_GPIO_Initv+0x164>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	02db      	lsls	r3, r3, #11
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_OUT_Pin|PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin
 8000822:	23dc      	movs	r3, #220	; 0xdc
 8000824:	00d9      	lsls	r1, r3, #3
 8000826:	2390      	movs	r3, #144	; 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2200      	movs	r2, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fbaa 	bl	8001f86 <HAL_GPIO_WritePin>
                          |SS_REGEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CON_MOTOR_Pin|CON_MPPT_Pin, GPIO_PIN_RESET);
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <_ZL12MX_GPIO_Initv+0x168>)
 8000834:	2200      	movs	r2, #0
 8000836:	2130      	movs	r1, #48	; 0x30
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fba4 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	4831      	ldr	r0, [pc, #196]	; (8000908 <_ZL12MX_GPIO_Initv+0x16c>)
 8000844:	2200      	movs	r2, #0
 8000846:	0019      	movs	r1, r3
 8000848:	f001 fb9d 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_OUT_Pin PRE_MOTOR_Pin PRE_MPPT_Pin SS_CRUISE_Pin
                           SS_REGEN_Pin */
  GPIO_InitStruct.Pin = DEBUG_OUT_Pin|PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin
 800084c:	193b      	adds	r3, r7, r4
 800084e:	22dc      	movs	r2, #220	; 0xdc
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	601a      	str	r2, [r3, #0]
                          |SS_REGEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	193a      	adds	r2, r7, r4
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f001 f9f4 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CON_MOTOR_Pin CON_MPPT_Pin */
  GPIO_InitStruct.Pin = CON_MOTOR_Pin|CON_MPPT_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2230      	movs	r2, #48	; 0x30
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	000c      	movs	r4, r1
 8000890:	187b      	adds	r3, r7, r1
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <_ZL12MX_GPIO_Initv+0x168>)
 8000894:	0019      	movs	r1, r3
 8000896:	0010      	movs	r0, r2
 8000898:	f001 f9e0 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_TRIP_Pin CRUISE_IN_Pin */
  GPIO_InitStruct.Pin = CHG_TRIP_Pin|CRUISE_IN_Pin;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2203      	movs	r2, #3
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <_ZL12MX_GPIO_Initv+0x170>)
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	000c      	movs	r4, r1
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <_ZL12MX_GPIO_Initv+0x16c>)
 80008b6:	0019      	movs	r1, r3
 80008b8:	0010      	movs	r0, r2
 80008ba:	f001 f9cf 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : REGEN_BRK_Pin */
  GPIO_InitStruct.Pin = REGEN_BRK_Pin;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(REGEN_BRK_GPIO_Port, &GPIO_InitStruct);
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <_ZL12MX_GPIO_Initv+0x16c>)
 80008de:	0019      	movs	r1, r3
 80008e0:	0010      	movs	r0, r2
 80008e2:	f001 f9bb 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2005      	movs	r0, #5
 80008ec:	f001 f984 	bl	8001bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80008f0:	2005      	movs	r0, #5
 80008f2:	f001 f996 	bl	8001c22 <HAL_NVIC_EnableIRQ>

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b00b      	add	sp, #44	; 0x2c
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800
 8000908:	48000400 	.word	0x48000400
 800090c:	10310000 	.word	0x10310000

08000910 <HAL_GPIO_EXTI_Callback>:

// -----------------------------
// --- ISR DEFINITION(S) -------
// -----------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dbb      	adds	r3, r7, #6
 800091a:	801a      	strh	r2, [r3, #0]
	// check which pin triggered interrupt
	switch(GPIO_PIN)
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d002      	beq.n	800092a <HAL_GPIO_EXTI_Callback+0x1a>
 8000924:	2b02      	cmp	r3, #2
 8000926:	d00f      	beq.n	8000948 <HAL_GPIO_EXTI_Callback+0x38>
 8000928:	e01d      	b.n	8000966 <HAL_GPIO_EXTI_Callback+0x56>
	{
	case CHG_TRIP_Pin:
		active_CT = HAL_GPIO_ReadPin(CHG_TRIP_GPIO_Port, CHG_TRIP_Pin); //set active_CT high if started up
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_GPIO_EXTI_Callback+0x60>)
 800092c:	2101      	movs	r1, #1
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fb0c 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000934:	0003      	movs	r3, r0
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	4193      	sbcs	r3, r2
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 800093e:	701a      	strb	r2, [r3, #0]
		newInput_CT = true;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_GPIO_EXTI_Callback+0x68>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
		break;
 8000946:	e00f      	b.n	8000968 <HAL_GPIO_EXTI_Callback+0x58>
	case CRUISE_IN_Pin:
		active_Cruise = HAL_GPIO_ReadPin(CRUISE_IN_GPIO_Port, CRUISE_IN_Pin); //read in the cruise GPIO to active cruise
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_GPIO_EXTI_Callback+0x60>)
 800094a:	2102      	movs	r1, #2
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fafd 	bl	8001f4c <HAL_GPIO_ReadPin>
 8000952:	0003      	movs	r3, r0
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	4193      	sbcs	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_GPIO_EXTI_Callback+0x6c>)
 800095c:	701a      	strb	r2, [r3, #0]
		newInput_Cruise = true;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_GPIO_EXTI_Callback+0x70>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		break;
 8000964:	e000      	b.n	8000968 <HAL_GPIO_EXTI_Callback+0x58>
	default:
		__NOP();	// no operation
 8000966:	46c0      	nop			; (mov r8, r8)
	}
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	48000400 	.word	0x48000400
 8000974:	20000194 	.word	0x20000194
 8000978:	20000196 	.word	0x20000196
 800097c:	20000195 	.word	0x20000195
 8000980:	20000197 	.word	0x20000197

08000984 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	// check which timer triggered interrupt
	if(htim->Instance == TIM2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	429a      	cmp	r2, r3
 8000996:	d163      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xdc>
	{
		if (sysDebug)
 8000998:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d016      	beq.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			if (tickDebug >=5)
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	dd0d      	ble.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				tickDebug = 0;
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_SET);
 80009ae:	2390      	movs	r3, #144	; 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2201      	movs	r2, #1
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fae5 	bl	8001f86 <HAL_GPIO_WritePin>
				sysDebug = false;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e004      	b.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x4a>
			}
			else
			{
				++tickDebug;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009cc:	601a      	str	r2, [r3, #0]
			}
		}
		if(sysMPPTPrecharge)
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d01f      	beq.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			if(tickPrecharge >= 17)  // 15 seconds to deal and PRE_MPPT
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b10      	cmp	r3, #16
 80009dc:	dd16      	ble.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				tickPrecharge = 0;
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PRE_MPPT_GPIO_Port, PRE_MPPT_Pin, GPIO_PIN_RESET);
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 faca 	bl	8001f86 <HAL_GPIO_WritePin>
				sysMPPTPrecharge = false;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(CON_MPPT_GPIO_Port, CON_MPPT_Pin, GPIO_PIN_SET);
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	2120      	movs	r1, #32
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fac1 	bl	8001f86 <HAL_GPIO_WritePin>
				sysMPPTCoilActive = true;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e004      	b.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x92>
			}
			else ++tickPrecharge;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a14:	601a      	str	r2, [r3, #0]
		}
		if(sysStartup)
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d021      	beq.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0xde>
		{
			if (tickStartup >= 17)
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b10      	cmp	r3, #16
 8000a24:	dd16      	ble.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0xd0>
			{
				HAL_GPIO_WritePin(PRE_MOTOR_GPIO_Port, PRE_MOTOR_Pin, GPIO_PIN_RESET);
 8000a26:	2390      	movs	r3, #144	; 0x90
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 faa9 	bl	8001f86 <HAL_GPIO_WritePin>
				tickStartup = 0;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
				sysStartup = false;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
				//turn on CON_MOTOR 15 seconds after startup
				HAL_GPIO_WritePin(CON_MOTOR_GPIO_Port, CON_MOTOR_Pin, GPIO_PIN_SET);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fa9d 	bl	8001f86 <HAL_GPIO_WritePin>
				sysMCCoilActive = true;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
			}
			else ++tickStartup;
		}
	}
	else __NOP();	// no operation
}
 8000a52:	e006      	b.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0xde>
			else ++tickStartup;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	e000      	b.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0xde>
	else __NOP();	// no operation
 8000a60:	46c0      	nop			; (mov r8, r8)
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000001 	.word	0x20000001
 8000a70:	200001b8 	.word	0x200001b8
 8000a74:	20000198 	.word	0x20000198
 8000a78:	2000019c 	.word	0x2000019c
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	2000019a 	.word	0x2000019a
 8000a84:	20000000 	.word	0x20000000
 8000a88:	200001a0 	.word	0x200001a0
 8000a8c:	20000199 	.word	0x20000199

08000a90 <_Z9DAC_Write5slavePh>:

// ----------------------------------
// --- FUNCTION DEFINITION(S) -------
// ----------------------------------
int DAC_Write(slave_t slave, uint8_t *data)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	0002      	movs	r2, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	701a      	strb	r2, [r3, #0]
	GPIO_TypeDef* currentPort;
	uint16_t currentPin;

	// identify which slave select to use for this transaction
	switch(slave)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <_Z9DAC_Write5slavePh+0x1c>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d009      	beq.n	8000abe <_Z9DAC_Write5slavePh+0x2e>
 8000aaa:	e011      	b.n	8000ad0 <_Z9DAC_Write5slavePh+0x40>
	{
	case cruiseDAC:
		currentPort = SS_CRUISE_GPIO_Port;
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	60fb      	str	r3, [r7, #12]
		currentPin = SS_CRUISE_Pin;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	801a      	strh	r2, [r3, #0]
		break;
 8000abc:	e00b      	b.n	8000ad6 <_Z9DAC_Write5slavePh+0x46>
	case regenDAC:
		currentPort = SS_REGEN_GPIO_Port;
 8000abe:	2390      	movs	r3, #144	; 0x90
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	60fb      	str	r3, [r7, #12]
		currentPin = SS_REGEN_Pin;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	00d2      	lsls	r2, r2, #3
 8000acc:	801a      	strh	r2, [r3, #0]
		break;
 8000ace:	e002      	b.n	8000ad6 <_Z9DAC_Write5slavePh+0x46>
	default:
		// invalid slave select
		return -1;	// unsuccessful transaction
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	e022      	b.n	8000b1c <_Z9DAC_Write5slavePh+0x8c>
		break;
	}

	// pull slave select low
	HAL_GPIO_WritePin(currentPort, currentPin, GPIO_PIN_RESET);
 8000ad6:	240a      	movs	r4, #10
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	8819      	ldrh	r1, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fa50 	bl	8001f86 <HAL_GPIO_WritePin>
	// transmit an array of 3 8-bit values
	HAL_SPI_Transmit(&hspi2, data, 3, HAL_MAX_DELAY);
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	425b      	negs	r3, r3
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <_Z9DAC_Write5slavePh+0x94>)
 8000aee:	2203      	movs	r2, #3
 8000af0:	f001 fffa 	bl	8002ae8 <HAL_SPI_Transmit>
	// pull slave select high
	HAL_GPIO_WritePin(currentPort, currentPin, GPIO_PIN_SET);
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	8819      	ldrh	r1, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2201      	movs	r2, #1
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 fa42 	bl	8001f86 <HAL_GPIO_WritePin>
	// poll for SPI ready
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_Z9DAC_Write5slavePh+0x94>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 f970 	bl	8002dea <HAL_SPI_GetState>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	4193      	sbcs	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d000      	beq.n	8000b1a <_Z9DAC_Write5slavePh+0x8a>
 8000b18:	e7f3      	b.n	8000b02 <_Z9DAC_Write5slavePh+0x72>

	return 0;	// successful transaction
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b005      	add	sp, #20
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	200000a4 	.word	0x200000a4

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_Z41__static_initialization_and_destruction_0ii>:
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d107      	bne.n	8000b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d103      	bne.n	8000b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AUX_MESSAGE_0 aux0;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 f96e 	bl	8000e30 <_ZN13AUX_MESSAGE_0C1Ev>
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	0000ffff 	.word	0x0000ffff
 8000b60:	20000150 	.word	0x20000150

08000b64 <_GLOBAL__sub_I_hspi2>:
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <_GLOBAL__sub_I_hspi2+0x14>)
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff ffe1 	bl	8000b34 <_Z41__static_initialization_and_destruction_0ii>
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	0000ffff 	.word	0x0000ffff

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	619a      	str	r2, [r3, #24]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0549      	lsls	r1, r1, #21
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_MspInit+0x44>)
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	055b      	lsls	r3, r3, #21
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	2314      	movs	r3, #20
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 fe74 	bl	80038c4 <memset>
  if(hspi->Instance==SPI2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_SPI_MspInit+0x90>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d132      	bne.n	8000c4c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000be8:	69da      	ldr	r2, [r3, #28]
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	01c9      	lsls	r1, r1, #7
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	61da      	str	r2, [r3, #28]
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000bf6:	69da      	ldr	r2, [r3, #28]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_SPI_MspInit+0x94>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c1e:	2114      	movs	r1, #20
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	22a0      	movs	r2, #160	; 0xa0
 8000c24:	0212      	lsls	r2, r2, #8
 8000c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2203      	movs	r2, #3
 8000c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_SPI_MspInit+0x98>)
 8000c44:	0019      	movs	r1, r3
 8000c46:	0010      	movs	r0, r2
 8000c48:	f001 f808 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b00a      	add	sp, #40	; 0x28
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40003800 	.word	0x40003800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d113      	bne.n	8000c9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c76:	69da      	ldr	r2, [r3, #28]
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	61da      	str	r2, [r3, #28]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4013      	ands	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	200f      	movs	r0, #15
 8000c92:	f000 ffb1 	bl	8001bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f000 ffc3 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b004      	add	sp, #16
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 fb72 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f001 f96e 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f001 f96b 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <TIM2_IRQHandler+0x14>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 fa26 	bl	8003148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000108 	.word	0x20000108

08000d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_kill>:

int _kill(int pid, int sig)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d1e:	f002 fda7 	bl	8003870 <__errno>
 8000d22:	0003      	movs	r3, r0
 8000d24:	2216      	movs	r2, #22
 8000d26:	601a      	str	r2, [r3, #0]
	return -1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	425b      	negs	r3, r3
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_exit>:

void _exit (int status)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425a      	negs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ffe5 	bl	8000d14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d4a:	e7fe      	b.n	8000d4a <_exit+0x16>

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void AUX_MESSAGE_0::dataPacketToArray(AUX_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	2408      	movs	r4, #8
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	6018      	str	r0, [r3, #0]
 8000d62:	6059      	str	r1, [r3, #4]
 8000d64:	607a      	str	r2, [r7, #4]
	assert_param(output != nullptr);
	output[0] = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.hazardsOn) << 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0021      	movs	r1, r4
 8000d72:	187a      	adds	r2, r7, r1
 8000d74:	7912      	ldrb	r2, [r2, #4]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.headlightsOn) << 1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	79db      	ldrb	r3, [r3, #7]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.leftOn) << 2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.rightOn) << 3;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cplusOn) << 4;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.cminusOn) << 5;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.hornOn) << 6;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	789b      	ldrb	r3, [r3, #2]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.regenOn) << 7;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	01db      	lsls	r3, r3, #7
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
	...

08000e30 <_ZN13AUX_MESSAGE_0C1Ev>:

	return output;
}

//Public Function Definitions
AUX_MESSAGE_0::AUX_MESSAGE_0():
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<AUX_MESSAGE_0, AUX_MESSAGE_0_DATA_PACKET>{subsystem_info::AUX0_MSG_ID,subsystem_info::AUX0_MSG_LENGTH, false, false, false}
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <_ZN13AUX_MESSAGE_0C1Ev+0x2c>)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2300      	movs	r3, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2300      	movs	r3, #0
 8000e46:	2201      	movs	r2, #1
 8000e48:	f000 f80c 	bl	8000e64 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <_ZN13AUX_MESSAGE_0C1Ev+0x30>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
{}
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	000003ff 	.word	0x000003ff
 8000e60:	080039b8 	.word	0x080039b8

08000e64 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	        }
	    }
	    return returnData;
	}
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	0019      	movs	r1, r3
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	1c0a      	adds	r2, r1, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	781c      	ldrb	r4, [r3, #0]
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	2324      	movs	r3, #36	; 0x24
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	2320      	movs	r3, #32
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	0023      	movs	r3, r4
 8000e98:	f000 f884 	bl	8000fa4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8000e9c:	4a03      	ldr	r2, [pc, #12]	; (8000eac <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]
		{}
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b005      	add	sp, #20
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	080039c4 	.word	0x080039c4

08000eb0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13AUX_MESSAGE_025AUX_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3309      	adds	r3, #9
 8000ebc:	001c      	movs	r4, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2239      	movs	r2, #57	; 0x39
 8000ec2:	5c99      	ldrb	r1, [r3, r2]
 8000ec4:	1898      	adds	r0, r3, r2
 8000ec6:	7840      	ldrb	r0, [r0, #1]
 8000ec8:	0200      	lsls	r0, r0, #8
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	1898      	adds	r0, r3, r2
 8000ece:	7880      	ldrb	r0, [r0, #2]
 8000ed0:	0400      	lsls	r0, r0, #16
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	1898      	adds	r0, r3, r2
 8000ed6:	78c0      	ldrb	r0, [r0, #3]
 8000ed8:	0600      	lsls	r0, r0, #24
 8000eda:	4301      	orrs	r1, r0
 8000edc:	2000      	movs	r0, #0
 8000ede:	0008      	movs	r0, r1
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	791a      	ldrb	r2, [r3, #4]
 8000ee4:	7959      	ldrb	r1, [r3, #5]
 8000ee6:	0209      	lsls	r1, r1, #8
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	7999      	ldrb	r1, [r3, #6]
 8000eec:	0409      	lsls	r1, r1, #16
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	79db      	ldrb	r3, [r3, #7]
 8000ef2:	061b      	lsls	r3, r3, #24
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0022      	movs	r2, r4
 8000efc:	f7ff ff2b 	bl	8000d56 <_ZN13AUX_MESSAGE_017dataPacketToArrayE25AUX_MESSAGE_0_DATA_PACKETPh>
	}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b003      	add	sp, #12
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b08d      	sub	sp, #52	; 0x34
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2100      	movs	r1, #0
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 fb87 	bl	8001628 <HAL_CAN_GetRxFifoFillLevel>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	4193      	sbcs	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8000f26:	2308      	movs	r3, #8
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2410      	movs	r4, #16
 8000f2c:	193a      	adds	r2, r7, r4
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	2100      	movs	r1, #0
 8000f32:	f000 fa5d 	bl	80013f0 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000f3e:	2310      	movs	r3, #16
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	e002      	b.n	8000f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000f46:	2310      	movs	r3, #16
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 f863 	bl	8001018 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000f52:	0003      	movs	r3, r0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0d9      	beq.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	001a      	movs	r2, r3
 8000f62:	2310      	movs	r3, #16
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d1d1      	bne.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	18fa      	adds	r2, r7, r3
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 f872 	bl	800105e <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 f85d 	bl	800103c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000f82:	e7c5      	b.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b00d      	add	sp, #52	; 0x34
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <CEC_CAN_IRQHandler+0x14>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 fb73 	bl	800167e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000234 	.word	0x20000234

08000fa4 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	0019      	movs	r1, r3
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	1c0a      	adds	r2, r1, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1dfa      	adds	r2, r7, #7
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	721a      	strb	r2, [r3, #8]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3312      	adds	r3, #18
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f856 	bl	8001084 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1dba      	adds	r2, r7, #6
 8000fdc:	2130      	movs	r1, #48	; 0x30
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	545a      	strb	r2, [r3, r1]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2218      	movs	r2, #24
 8000fe6:	18ba      	adds	r2, r7, r2
 8000fe8:	2131      	movs	r1, #49	; 0x31
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	545a      	strb	r2, [r3, r1]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	221c      	movs	r2, #28
 8000ff2:	18ba      	adds	r2, r7, r2
 8000ff4:	2132      	movs	r1, #50	; 0x32
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	545a      	strb	r2, [r3, r1]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2238      	movs	r2, #56	; 0x38
 8001004:	2100      	movs	r1, #0
 8001006:	5499      	strb	r1, [r3, r2]
{}
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	080039d0 	.word	0x080039d0

08001018 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f8de 	bl	80011e8 <_ZN14RX_BINARY_TREE11FindElementEm>
 800102c:	0003      	movs	r3, r0
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	200001bc 	.word	0x200001bc

0800103c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	0010      	movs	r0, r2
 8001054:	4798      	blx	r3
    }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3312      	adds	r3, #18
 800106c:	240f      	movs	r4, #15
 800106e:	193a      	adds	r2, r7, r4
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f818 	bl	80010a8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b005      	add	sp, #20
 8001082:	bd90      	pop	{r4, r7, pc}

08001084 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
template <class T,uint16_t DEPTH, uint16_t SIZE>
class HELPER_FIFO
{
public:
    //Constructors
    HELPER_FIFO():
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	831a      	strh	r2, [r3, #24]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	835a      	strh	r2, [r3, #26]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	771a      	strb	r2, [r3, #28]
    {}
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8b5a      	ldrh	r2, [r3, #26]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8b1b      	ldrh	r3, [r3, #24]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d10d      	bne.n	80010dc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	7f1b      	ldrb	r3, [r3, #28]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4053      	eors	r3, r2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
        {
            //Fail to write since we are full
            if(success)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d025      	beq.n	8001120 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                *success = false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
            if(success)
 80010da:	e021      	b.n	8001120 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            }
        }else
        {
            if(success)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
            {
                *success = true;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8b19      	ldrh	r1, [r3, #24]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 f819 	bl	8001128 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8b1b      	ldrh	r3, [r3, #24]
 80010fa:	3301      	adds	r3, #1
 80010fc:	2103      	movs	r1, #3
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff f972 	bl	80003e8 <__aeabi_idivmod>
 8001104:	000b      	movs	r3, r1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	831a      	strh	r2, [r3, #24]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8b1a      	ldrh	r2, [r3, #24]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8b5b      	ldrh	r3, [r3, #26]
 8001114:	429a      	cmp	r2, r3
 8001116:	d103      	bne.n	8001120 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                emptyNotFull = false;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	771a      	strb	r2, [r3, #28]
            }
        }
    }
 800111e:	e7ff      	b.n	8001120 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	230a      	movs	r3, #10
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	1c0a      	adds	r2, r1, #0
 8001138:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 800113a:	2316      	movs	r3, #22
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2200      	movs	r2, #0
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	2316      	movs	r3, #22
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	d815      	bhi.n	8001178 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 800114c:	2416      	movs	r4, #22
 800114e:	193b      	adds	r3, r7, r4
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	230a      	movs	r3, #10
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	193b      	adds	r3, r7, r4
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	7808      	ldrb	r0, [r1, #0]
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	00d2      	lsls	r2, r2, #3
 8001166:	188a      	adds	r2, r1, r2
 8001168:	1c01      	adds	r1, r0, #0
 800116a:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 800116c:	193b      	adds	r3, r7, r4
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	193b      	adds	r3, r7, r4
 8001172:	3201      	adds	r2, #1
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	e7e4      	b.n	8001142 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b007      	add	sp, #28
 800117e:	bd90      	pop	{r4, r7, pc}

08001180 <_Z41__static_initialization_and_destruction_0ii>:
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d107      	bne.n	80011a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d103      	bne.n	80011a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f814 	bl	80011c8 <_ZN14RX_BINARY_TREEC1Ev>
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0000ffff 	.word	0x0000ffff
 80011ac:	200001bc 	.word	0x200001bc

080011b0 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ffe1 	bl	8001180 <_Z41__static_initialization_and_destruction_0ii>
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	0000ffff 	.word	0x0000ffff

080011c8 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	671a      	str	r2, [r3, #112]	; 0x70
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2274      	movs	r2, #116	; 0x74
 80011da:	2100      	movs	r1, #0
 80011dc:	5299      	strh	r1, [r3, r2]
{}
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN14RX_BINARY_TREE11FindElementEm>:
    }
    return false;
}

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f80d 	bl	800121a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001200:	0003      	movs	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 800120a:	2300      	movs	r3, #0
 800120c:	e001      	b.n	8001212 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	e034      	b.n	800129a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f000 f833 	bl	80012a2 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800123c:	0002      	movs	r2, r0
 800123e:	2301      	movs	r3, #1
 8001240:	1c19      	adds	r1, r3, #0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4293      	cmp	r3, r2
 8001246:	db01      	blt.n	800124c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	1c19      	adds	r1, r3, #0
 800124c:	b2cb      	uxtb	r3, r1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ffdd 	bl	800121a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001260:	0003      	movs	r3, r0
 8001262:	e01a      	b.n	800129a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	0011      	movs	r1, r2
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f819 	bl	80012a2 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8001270:	0002      	movs	r2, r0
 8001272:	2301      	movs	r3, #1
 8001274:	1c19      	adds	r1, r3, #0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4293      	cmp	r3, r2
 800127a:	dc01      	bgt.n	8001280 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 800127c:	2300      	movs	r3, #0
 800127e:	1c19      	adds	r1, r3, #0
 8001280:	b2cb      	uxtb	r3, r1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	6899      	ldr	r1, [r3, #8]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	0018      	movs	r0, r3
 8001290:	f7ff ffc3 	bl	800121a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8001294:	0003      	movs	r3, r0
 8001296:	e000      	b.n	800129a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8001298:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:
        return 0;  
    return N->height;  
}

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80012b2:	2301      	movs	r3, #1
 80012b4:	425b      	negs	r3, r3
 80012b6:	e009      	b.n	80012cc <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80012c0:	2301      	movs	r3, #1
 80012c2:	425b      	negs	r3, r3
 80012c4:	e002      	b.n	80012cc <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopForever+0x6>)
  ldr r1, =_edata
 80012da:	490e      	ldr	r1, [pc, #56]	; (8001314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <LoopForever+0xe>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f0:	4c0b      	ldr	r4, [pc, #44]	; (8001320 <LoopForever+0x16>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012fe:	f7ff fd25 	bl	8000d4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001302:	f002 fabb 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff f875 	bl	80003f4 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
  ldr   r0, =_estack
 800130c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001318:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 800131c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001320:	20000264 	.word	0x20000264

08001324 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_COMP_IRQHandler>
	...

08001328 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_Init+0x24>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_Init+0x24>)
 8001332:	2110      	movs	r1, #16
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001338:	2000      	movs	r0, #0
 800133a:	f000 f809 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133e:	f7ff fc1d 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_InitTick+0x5c>)
 800135a:	681c      	ldr	r4, [r3, #0]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_InitTick+0x60>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	0019      	movs	r1, r3
 8001362:	23fa      	movs	r3, #250	; 0xfa
 8001364:	0098      	lsls	r0, r3, #2
 8001366:	f7fe fecf 	bl	8000108 <__udivsi3>
 800136a:	0003      	movs	r3, r0
 800136c:	0019      	movs	r1, r3
 800136e:	0020      	movs	r0, r4
 8001370:	f7fe feca 	bl	8000108 <__udivsi3>
 8001374:	0003      	movs	r3, r0
 8001376:	0018      	movs	r0, r3
 8001378:	f000 fc63 	bl	8001c42 <HAL_SYSTICK_Config>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00f      	b.n	80013a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d80b      	bhi.n	80013a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2301      	movs	r3, #1
 800138e:	425b      	negs	r3, r3
 8001390:	2200      	movs	r2, #0
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fc30 	bl	8001bf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_InitTick+0x64>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b003      	add	sp, #12
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000018 	.word	0x20000018
 80013b4:	20000014 	.word	0x20000014

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	18d2      	adds	r2, r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	20000018 	.word	0x20000018
 80013d8:	2000025c 	.word	0x2000025c

080013dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	2000025c 	.word	0x2000025c

080013f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fe:	2017      	movs	r0, #23
 8001400:	183b      	adds	r3, r7, r0
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	2120      	movs	r1, #32
 8001406:	5c52      	ldrb	r2, [r2, r1]
 8001408:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800140a:	183b      	adds	r3, r7, r0
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_CAN_GetRxMessage+0x2e>
 8001412:	2317      	movs	r3, #23
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d000      	beq.n	800141e <HAL_CAN_GetRxMessage+0x2e>
 800141c:	e0f8      	b.n	8001610 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10e      	bne.n	8001442 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2203      	movs	r2, #3
 800142c:	4013      	ands	r3, r2
 800142e:	d117      	bne.n	8001460 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	0392      	lsls	r2, r2, #14
 8001438:	431a      	orrs	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0ee      	b.n	8001620 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	0392      	lsls	r2, r2, #14
 8001456:	431a      	orrs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0df      	b.n	8001620 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	321b      	adds	r2, #27
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	58d3      	ldr	r3, [r2, r3]
 800146c:	2204      	movs	r2, #4
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	321b      	adds	r2, #27
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	58d3      	ldr	r3, [r2, r3]
 8001488:	0d5b      	lsrs	r3, r3, #21
 800148a:	055b      	lsls	r3, r3, #21
 800148c:	0d5a      	lsrs	r2, r3, #21
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00a      	b.n	80014aa <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	321b      	adds	r2, #27
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	58d3      	ldr	r3, [r2, r3]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	321b      	adds	r2, #27
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	58d3      	ldr	r3, [r2, r3]
 80014b6:	2202      	movs	r2, #2
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	3304      	adds	r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	220f      	movs	r2, #15
 80014d0:	401a      	ands	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	331b      	adds	r3, #27
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	401a      	ands	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	331b      	adds	r3, #27
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	18d3      	adds	r3, r2, r3
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	0c1a      	lsrs	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	23dc      	movs	r3, #220	; 0xdc
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	188a      	adds	r2, r1, r2
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	23dc      	movs	r3, #220	; 0xdc
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	188a      	adds	r2, r1, r2
 8001530:	18d3      	adds	r3, r2, r3
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0a1a      	lsrs	r2, r3, #8
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	23dc      	movs	r3, #220	; 0xdc
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	188a      	adds	r2, r1, r2
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0c1a      	lsrs	r2, r3, #16
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3302      	adds	r3, #2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	23dc      	movs	r3, #220	; 0xdc
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	188a      	adds	r2, r1, r2
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0e1a      	lsrs	r2, r3, #24
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3303      	adds	r3, #3
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	23de      	movs	r3, #222	; 0xde
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	188a      	adds	r2, r1, r2
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	23de      	movs	r3, #222	; 0xde
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	188a      	adds	r2, r1, r2
 800159e:	18d3      	adds	r3, r2, r3
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0a1a      	lsrs	r2, r3, #8
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3305      	adds	r3, #5
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	23de      	movs	r3, #222	; 0xde
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	188a      	adds	r2, r1, r2
 80015ba:	18d3      	adds	r3, r2, r3
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0c1a      	lsrs	r2, r3, #16
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3306      	adds	r3, #6
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	23de      	movs	r3, #222	; 0xde
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	188a      	adds	r2, r1, r2
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0e1a      	lsrs	r2, r3, #24
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3307      	adds	r3, #7
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2120      	movs	r1, #32
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e007      	b.n	800160c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2120      	movs	r1, #32
 8001608:	430a      	orrs	r2, r1
 800160a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e007      	b.n	8001620 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	02d2      	lsls	r2, r2, #11
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
  }
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001636:	200b      	movs	r0, #11
 8001638:	183b      	adds	r3, r7, r0
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	2120      	movs	r1, #32
 800163e:	5c52      	ldrb	r2, [r2, r1]
 8001640:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001642:	183b      	adds	r3, r7, r0
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d004      	beq.n	8001654 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 800164a:	230b      	movs	r3, #11
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d10f      	bne.n	8001674 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2203      	movs	r2, #3
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e005      	b.n	8001674 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2203      	movs	r2, #3
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001674:	68fb      	ldr	r3, [r7, #12]
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b08a      	sub	sp, #40	; 0x28
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	2201      	movs	r2, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_CAN_IRQHandler+0x46>
 80016c2:	e084      	b.n	80017ce <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d024      	beq.n	8001716 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f000 f97e 	bl	80019e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80016e4:	e017      	b.n	8001716 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2204      	movs	r2, #4
 80016ea:	4013      	ands	r3, r2
 80016ec:	d005      	beq.n	80016fa <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	4313      	orrs	r3, r2
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e00d      	b.n	8001716 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2208      	movs	r2, #8
 80016fe:	4013      	ands	r3, r2
 8001700:	d005      	beq.n	800170e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	0152      	lsls	r2, r2, #5
 8001708:	4313      	orrs	r3, r2
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	e003      	b.n	8001716 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f97d 	bl	8001a10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4013      	ands	r3, r2
 800171e:	d028      	beq.n	8001772 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d004      	beq.n	800173e <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0018      	movs	r0, r3
 8001738:	f000 f95a 	bl	80019f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800173c:	e019      	b.n	8001772 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4013      	ands	r3, r2
 8001746:	d005      	beq.n	8001754 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	0192      	lsls	r2, r2, #6
 800174e:	4313      	orrs	r3, r2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	e00e      	b.n	8001772 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d005      	beq.n	800176a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	01d2      	lsls	r2, r2, #7
 8001764:	4313      	orrs	r3, r2
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e003      	b.n	8001772 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f957 	bl	8001a20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	4013      	ands	r3, r2
 800177a:	d028      	beq.n	80017ce <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	0252      	lsls	r2, r2, #9
 8001784:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	0018      	movs	r0, r3
 8001794:	f000 f934 	bl	8001a00 <HAL_CAN_TxMailbox2CompleteCallback>
 8001798:	e019      	b.n	80017ce <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	02db      	lsls	r3, r3, #11
 80017a0:	4013      	ands	r3, r2
 80017a2:	d005      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0212      	lsls	r2, r2, #8
 80017aa:	4313      	orrs	r3, r2
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	e00e      	b.n	80017ce <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	031b      	lsls	r3, r3, #12
 80017b6:	4013      	ands	r3, r2
 80017b8:	d005      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0252      	lsls	r2, r2, #9
 80017c0:	4313      	orrs	r3, r2
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
 80017c4:	e003      	b.n	80017ce <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 f931 	bl	8001a30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	2208      	movs	r2, #8
 80017d2:	4013      	ands	r3, r2
 80017d4:	d00c      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2210      	movs	r2, #16
 80017da:	4013      	ands	r3, r2
 80017dc:	d008      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4313      	orrs	r3, r2
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d00b      	beq.n	8001810 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2208      	movs	r2, #8
 80017fc:	4013      	ands	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f918 	bl	8001a40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff fb6e 	bl	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	4013      	ands	r3, r2
 8001832:	d00c      	beq.n	800184e <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2210      	movs	r2, #16
 8001838:	4013      	ands	r3, r2
 800183a:	d008      	beq.n	800184e <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	4313      	orrs	r3, r2
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2210      	movs	r2, #16
 800184c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	2220      	movs	r2, #32
 8001852:	4013      	ands	r3, r2
 8001854:	d00b      	beq.n	800186e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2208      	movs	r2, #8
 800185a:	4013      	ands	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2208      	movs	r2, #8
 8001864:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f8f9 	bl	8001a60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	2210      	movs	r2, #16
 8001872:	4013      	ands	r3, r2
 8001874:	d009      	beq.n	800188a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2203      	movs	r2, #3
 800187e:	4013      	ands	r3, r2
 8001880:	d003      	beq.n	800188a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f8e3 	bl	8001a50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d00b      	beq.n	80018ac <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2210      	movs	r2, #16
 8001898:	4013      	ands	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f8e2 	bl	8001a70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018ac:	6a3a      	ldr	r2, [r7, #32]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	4013      	ands	r3, r2
 80018b4:	d00b      	beq.n	80018ce <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2208      	movs	r2, #8
 80018ba:	4013      	ands	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2208      	movs	r2, #8
 80018c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8d9 	bl	8001a80 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_CAN_IRQHandler+0x25c>
 80018d8:	e071      	b.n	80019be <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	2204      	movs	r2, #4
 80018de:	4013      	ands	r3, r2
 80018e0:	d100      	bne.n	80018e4 <HAL_CAN_IRQHandler+0x266>
 80018e2:	e068      	b.n	80019b6 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f4:	d003      	beq.n	80018fe <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	2201      	movs	r2, #1
 80018fa:	4313      	orrs	r3, r2
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2202      	movs	r2, #2
 8001914:	4313      	orrs	r3, r2
 8001916:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001918:	6a3a      	ldr	r2, [r7, #32]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4013      	ands	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2204      	movs	r2, #4
 8001926:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001928:	d003      	beq.n	8001932 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	2204      	movs	r2, #4
 800192e:	4313      	orrs	r3, r2
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001932:	6a3a      	ldr	r2, [r7, #32]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d03c      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2270      	movs	r2, #112	; 0x70
 8001940:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001942:	d038      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2270      	movs	r2, #112	; 0x70
 8001948:	4013      	ands	r3, r2
 800194a:	2b30      	cmp	r3, #48	; 0x30
 800194c:	d016      	beq.n	800197c <HAL_CAN_IRQHandler+0x2fe>
 800194e:	d804      	bhi.n	800195a <HAL_CAN_IRQHandler+0x2dc>
 8001950:	2b10      	cmp	r3, #16
 8001952:	d009      	beq.n	8001968 <HAL_CAN_IRQHandler+0x2ea>
 8001954:	2b20      	cmp	r3, #32
 8001956:	d00c      	beq.n	8001972 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001958:	e025      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800195a:	2b50      	cmp	r3, #80	; 0x50
 800195c:	d018      	beq.n	8001990 <HAL_CAN_IRQHandler+0x312>
 800195e:	2b60      	cmp	r3, #96	; 0x60
 8001960:	d01b      	beq.n	800199a <HAL_CAN_IRQHandler+0x31c>
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d00f      	beq.n	8001986 <HAL_CAN_IRQHandler+0x308>
            break;
 8001966:	e01e      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2208      	movs	r2, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001970:	e019      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	2210      	movs	r2, #16
 8001976:	4313      	orrs	r3, r2
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197a:	e014      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	2220      	movs	r2, #32
 8001980:	4313      	orrs	r3, r2
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001984:	e00f      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	4313      	orrs	r3, r2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800198e:	e00a      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	4313      	orrs	r3, r2
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001998:	e005      	b.n	80019a6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	0052      	lsls	r2, r2, #1
 80019a0:	4313      	orrs	r3, r2
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2170      	movs	r1, #112	; 0x70
 80019b2:	438a      	bics	r2, r1
 80019b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2204      	movs	r2, #4
 80019bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f85c 	bl	8001a90 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b00a      	add	sp, #40	; 0x28
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab2:	d809      	bhi.n	8001ac8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	231f      	movs	r3, #31
 8001abc:	401a      	ands	r2, r3
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_EnableIRQ+0x30>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4091      	lsls	r1, r2
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
  }
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	0002      	movs	r2, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	d828      	bhi.n	8001b3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <__NVIC_SetPriority+0xd4>)
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	33c0      	adds	r3, #192	; 0xc0
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	589b      	ldr	r3, [r3, r2]
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	0011      	movs	r1, r2
 8001b00:	2203      	movs	r2, #3
 8001b02:	400a      	ands	r2, r1
 8001b04:	00d2      	lsls	r2, r2, #3
 8001b06:	21ff      	movs	r1, #255	; 0xff
 8001b08:	4091      	lsls	r1, r2
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	401a      	ands	r2, r3
 8001b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	401a      	ands	r2, r3
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	2303      	movs	r3, #3
 8001b22:	4003      	ands	r3, r0
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b28:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <__NVIC_SetPriority+0xd4>)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	430a      	orrs	r2, r1
 8001b34:	33c0      	adds	r3, #192	; 0xc0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b3a:	e031      	b.n	8001ba0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <__NVIC_SetPriority+0xd8>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	0019      	movs	r1, r3
 8001b44:	230f      	movs	r3, #15
 8001b46:	400b      	ands	r3, r1
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3306      	adds	r3, #6
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1dfa      	adds	r2, r7, #7
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	400a      	ands	r2, r1
 8001b60:	00d2      	lsls	r2, r2, #3
 8001b62:	21ff      	movs	r1, #255	; 0xff
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	401a      	ands	r2, r3
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	4003      	ands	r3, r0
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <__NVIC_SetPriority+0xd8>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	4023      	ands	r3, r4
 8001b90:	3b08      	subs	r3, #8
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	430a      	orrs	r2, r1
 8001b96:	3306      	adds	r3, #6
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	18c3      	adds	r3, r0, r3
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b003      	add	sp, #12
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <SysTick_Config+0x40>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e010      	b.n	8001be8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <SysTick_Config+0x44>)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff ff7d 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <SysTick_Config+0x44>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x44>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	00ffffff 	.word	0x00ffffff
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	210f      	movs	r1, #15
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	1c02      	adds	r2, r0, #0
 8001c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	0002      	movs	r2, r0
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff ffaf 	bl	8001bb0 <SysTick_Config>
 8001c52:	0003      	movs	r3, r0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	e155      	b.n	8001f18 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d100      	bne.n	8001c84 <HAL_GPIO_Init+0x28>
 8001c82:	e146      	b.n	8001f12 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_GPIO_Init+0x48>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b12      	cmp	r3, #18
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	43da      	mvns	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	409a      	lsls	r2, r3
 8001d28:	0013      	movs	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0xea>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b12      	cmp	r3, #18
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	58d3      	ldr	r3, [r2, r3]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2207      	movs	r2, #7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	43da      	mvns	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2107      	movs	r1, #7
 8001d72:	400b      	ands	r3, r1
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	6939      	ldr	r1, [r7, #16]
 8001d8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2203      	movs	r2, #3
 8001dac:	401a      	ands	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	055b      	lsls	r3, r3, #21
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_GPIO_Init+0x174>
 8001dce:	e0a0      	b.n	8001f12 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_GPIO_Init+0x2d4>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	589b      	ldr	r3, [r3, r2]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	409a      	lsls	r2, r3
 8001e02:	0013      	movs	r3, r2
 8001e04:	43da      	mvns	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	2390      	movs	r3, #144	; 0x90
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1ea>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2e0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1e6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1e2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1de>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	2103      	movs	r1, #3
 8001e50:	400a      	ands	r2, r1
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	025b      	lsls	r3, r3, #9
 8001e82:	4013      	ands	r3, r2
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	035b      	lsls	r3, r3, #13
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	039b      	lsls	r3, r3, #14
 8001f00:	4013      	ands	r3, r2
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	1e13      	subs	r3, r2, #0
 8001f22:	d000      	beq.n	8001f26 <HAL_GPIO_Init+0x2ca>
 8001f24:	e6a2      	b.n	8001c6c <HAL_GPIO_Init+0x10>
  } 
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b006      	add	sp, #24
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	48000c00 	.word	0x48000c00
 8001f44:	48001000 	.word	0x48001000
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	000a      	movs	r2, r1
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	1cba      	adds	r2, r7, #2
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	4013      	ands	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f70:	230f      	movs	r3, #15
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
  }
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	0008      	movs	r0, r1
 8001f90:	0011      	movs	r1, r2
 8001f92:	1cbb      	adds	r3, r7, #2
 8001f94:	1c02      	adds	r2, r0, #0
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	1c7b      	adds	r3, r7, #1
 8001f9a:	1c0a      	adds	r2, r1, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9e:	1c7b      	adds	r3, r7, #1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	1cbb      	adds	r3, r7, #2
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb0:	1cbb      	adds	r3, r7, #2
 8001fb2:	881a      	ldrh	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	1dba      	adds	r2, r7, #6
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d008      	beq.n	8001fea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fda:	1dba      	adds	r2, r7, #6
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	1dbb      	adds	r3, r7, #6
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7fe fc93 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f000 fb76 	bl	80026f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d100      	bne.n	8002018 <HAL_RCC_OscConfig+0x20>
 8002016:	e08e      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002018:	4bc5      	ldr	r3, [pc, #788]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	220c      	movs	r2, #12
 800201e:	4013      	ands	r3, r2
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00e      	beq.n	8002042 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002024:	4bc2      	ldr	r3, [pc, #776]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	220c      	movs	r2, #12
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d117      	bne.n	8002060 <HAL_RCC_OscConfig+0x68>
 8002030:	4bbf      	ldr	r3, [pc, #764]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	025b      	lsls	r3, r3, #9
 8002038:	401a      	ands	r2, r3
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	429a      	cmp	r2, r3
 8002040:	d10e      	bne.n	8002060 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002042:	4bbb      	ldr	r3, [pc, #748]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d100      	bne.n	8002050 <HAL_RCC_OscConfig+0x58>
 800204e:	e071      	b.n	8002134 <HAL_RCC_OscConfig+0x13c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d000      	beq.n	800205a <HAL_RCC_OscConfig+0x62>
 8002058:	e06c      	b.n	8002134 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f000 fb4c 	bl	80026f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x80>
 8002068:	4bb1      	ldr	r3, [pc, #708]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4bb0      	ldr	r3, [pc, #704]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0249      	lsls	r1, r1, #9
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e02f      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0xa2>
 8002080:	4bab      	ldr	r3, [pc, #684]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4baa      	ldr	r3, [pc, #680]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002086:	49ab      	ldr	r1, [pc, #684]	; (8002334 <HAL_RCC_OscConfig+0x33c>)
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	4ba8      	ldr	r3, [pc, #672]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4ba7      	ldr	r3, [pc, #668]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002092:	49a9      	ldr	r1, [pc, #676]	; (8002338 <HAL_RCC_OscConfig+0x340>)
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e01e      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10e      	bne.n	80020c0 <HAL_RCC_OscConfig+0xc8>
 80020a2:	4ba3      	ldr	r3, [pc, #652]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4ba2      	ldr	r3, [pc, #648]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	02c9      	lsls	r1, r1, #11
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	4b9f      	ldr	r3, [pc, #636]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	0249      	lsls	r1, r1, #9
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 80020c0:	4b9b      	ldr	r3, [pc, #620]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b9a      	ldr	r3, [pc, #616]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020c6:	499b      	ldr	r1, [pc, #620]	; (8002334 <HAL_RCC_OscConfig+0x33c>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4b98      	ldr	r3, [pc, #608]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b97      	ldr	r3, [pc, #604]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020d2:	4999      	ldr	r1, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x340>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d014      	beq.n	800210a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff f97c 	bl	80013dc <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ea:	f7ff f977 	bl	80013dc <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e2fd      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0xf2>
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff f967 	bl	80013dc <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f962 	bl	80013dc <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e2e8      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x11c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_RCC_OscConfig+0x14a>
 8002140:	e06c      	b.n	800221c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002142:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	220c      	movs	r2, #12
 8002148:	4013      	ands	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800214c:	4b78      	ldr	r3, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	220c      	movs	r2, #12
 8002152:	4013      	ands	r3, r2
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11f      	bne.n	8002198 <HAL_RCC_OscConfig+0x1a0>
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	401a      	ands	r2, r3
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	429a      	cmp	r2, r3
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x188>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e2bb      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	22f8      	movs	r2, #248	; 0xf8
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00da      	lsls	r2, r3, #3
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e041      	b.n	800221c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f916 	bl	80013dc <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f911 	bl	80013dc <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e297      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f1      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	22f8      	movs	r2, #248	; 0xf8
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e018      	b.n	800221c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff f8f1 	bl	80013dc <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002200:	f7ff f8ec 	bl	80013dc <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e272      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d1f1      	bne.n	8002200 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2208      	movs	r2, #8
 8002222:	4013      	ands	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002234:	2101      	movs	r1, #1
 8002236:	430a      	orrs	r2, r1
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff f8cf 	bl	80013dc <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff f8ca 	bl	80013dc <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e250      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d0f1      	beq.n	8002244 <HAL_RCC_OscConfig+0x24c>
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002268:	2101      	movs	r1, #1
 800226a:	438a      	bics	r2, r1
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7ff f8b5 	bl	80013dc <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff f8b0 	bl	80013dc <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e236      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d1f1      	bne.n	8002278 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2204      	movs	r2, #4
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2a8>
 800229e:	e0b5      	b.n	800240c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	4013      	ands	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0549      	lsls	r1, r1, #21
 80022be:	430a      	orrs	r2, r1
 80022c0:	61da      	str	r2, [r3, #28]
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	055b      	lsls	r3, r3, #21
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d0:	231f      	movs	r3, #31
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d11a      	bne.n	800231a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0049      	lsls	r1, r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7ff f873 	bl	80013dc <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fc:	f7ff f86e 	bl	80013dc <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1f4      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_OscConfig+0x344>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10e      	bne.n	8002340 <HAL_RCC_OscConfig+0x348>
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002328:	2101      	movs	r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	621a      	str	r2, [r3, #32]
 800232e:	e035      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002330:	40021000 	.word	0x40021000
 8002334:	fffeffff 	.word	0xfffeffff
 8002338:	fffbffff 	.word	0xfffbffff
 800233c:	40007000 	.word	0x40007000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x36a>
 8002348:	4bca      	ldr	r3, [pc, #808]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	4bc7      	ldr	r3, [pc, #796]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4bc6      	ldr	r3, [pc, #792]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800235a:	2104      	movs	r1, #4
 800235c:	438a      	bics	r2, r1
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x38c>
 800236a:	4bc2      	ldr	r3, [pc, #776]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	4bc1      	ldr	r3, [pc, #772]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002370:	2104      	movs	r1, #4
 8002372:	430a      	orrs	r2, r1
 8002374:	621a      	str	r2, [r3, #32]
 8002376:	4bbf      	ldr	r3, [pc, #764]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	4bbe      	ldr	r3, [pc, #760]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	621a      	str	r2, [r3, #32]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002384:	4bbb      	ldr	r3, [pc, #748]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	4bba      	ldr	r3, [pc, #744]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	4bb8      	ldr	r3, [pc, #736]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4bb7      	ldr	r3, [pc, #732]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002396:	2104      	movs	r1, #4
 8002398:	438a      	bics	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff f81a 	bl	80013dc <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff f815 	bl	80013dc <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4aaf      	ldr	r2, [pc, #700]	; (8002678 <HAL_RCC_OscConfig+0x680>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e19a      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4bac      	ldr	r3, [pc, #688]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x3b6>
 80023cc:	e013      	b.n	80023f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff f805 	bl	80013dc <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7ff f800 	bl	80013dc <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4aa5      	ldr	r2, [pc, #660]	; (8002678 <HAL_RCC_OscConfig+0x680>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e185      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4ba1      	ldr	r3, [pc, #644]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b9c      	ldr	r3, [pc, #624]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002406:	499d      	ldr	r1, [pc, #628]	; (800267c <HAL_RCC_OscConfig+0x684>)
 8002408:	400a      	ands	r2, r1
 800240a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d12a      	bne.n	8002474 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800241e:	4b95      	ldr	r3, [pc, #596]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002424:	2104      	movs	r1, #4
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800242a:	4b92      	ldr	r3, [pc, #584]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe ffd1 	bl	80013dc <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002440:	f7fe ffcc 	bl	80013dc <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e152      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d0f1      	beq.n	8002440 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800245c:	4b85      	ldr	r3, [pc, #532]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	22f8      	movs	r2, #248	; 0xf8
 8002462:	4393      	bics	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	00da      	lsls	r2, r3, #3
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800246e:	430a      	orrs	r2, r1
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
 8002472:	e034      	b.n	80024de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	3305      	adds	r3, #5
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800247c:	4b7d      	ldr	r3, [pc, #500]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002480:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002482:	2104      	movs	r1, #4
 8002484:	438a      	bics	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	22f8      	movs	r2, #248	; 0xf8
 800248e:	4393      	bics	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	00da      	lsls	r2, r3, #3
 8002498:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
 800249e:	e01e      	b.n	80024de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024a0:	4b74      	ldr	r3, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024a6:	2104      	movs	r1, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024ac:	4b71      	ldr	r3, [pc, #452]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b0:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe ff90 	bl	80013dc <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024c2:	f7fe ff8b 	bl	80013dc <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e111      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f1      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	d05c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024e8:	4b62      	ldr	r3, [pc, #392]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d00e      	beq.n	8002512 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024f4:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	220c      	movs	r2, #12
 80024fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d114      	bne.n	800252a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002500:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	23c0      	movs	r3, #192	; 0xc0
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	401a      	ands	r2, r3
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	429a      	cmp	r2, r3
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	4013      	ands	r3, r2
 800251c:	d040      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5a8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d03c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0e6      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01b      	beq.n	800256a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0249      	lsls	r1, r1, #9
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff4c 	bl	80013dc <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254a:	f7fe ff47 	bl	80013dc <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0cd      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800255e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	4013      	ands	r3, r2
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x552>
 8002568:	e01b      	b.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002570:	4943      	ldr	r1, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x688>)
 8002572:	400a      	ands	r2, r1
 8002574:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe ff31 	bl	80013dc <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002580:	f7fe ff2c 	bl	80013dc <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b2      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	4013      	ands	r3, r2
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x588>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_RCC_OscConfig+0x5b4>
 80025aa:	e0a4      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	220c      	movs	r2, #12
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x5c2>
 80025b8:	e078      	b.n	80026ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d14c      	bne.n	800265c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	492e      	ldr	r1, [pc, #184]	; (8002684 <HAL_RCC_OscConfig+0x68c>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe ff05 	bl	80013dc <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe ff00 	bl	80013dc <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e086      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	220f      	movs	r2, #15
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <HAL_RCC_OscConfig+0x690>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	431a      	orrs	r2, r3
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	0449      	lsls	r1, r1, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fed3 	bl	80013dc <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fece 	bl	80013dc <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e054      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x644>
 800265a:	e04c      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <HAL_RCC_OscConfig+0x68c>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe feb8 	bl	80013dc <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x6a6>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40021000 	.word	0x40021000
 8002678:	00001388 	.word	0x00001388
 800267c:	efffffff 	.word	0xefffffff
 8002680:	fffeffff 	.word	0xfffeffff
 8002684:	feffffff 	.word	0xfeffffff
 8002688:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fea6 	bl	80013dc <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e02c      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	049b      	lsls	r3, r3, #18
 80026a6:	4013      	ands	r3, r2
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x694>
 80026aa:	e024      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01f      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	23c0      	movs	r3, #192	; 0xc0
 80026c8:	025b      	lsls	r3, r3, #9
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10e      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	220f      	movs	r2, #15
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	23f0      	movs	r3, #240	; 0xf0
 80026e6:	039b      	lsls	r3, r3, #14
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b008      	add	sp, #32
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0bf      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d911      	bls.n	800274a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2201      	movs	r2, #1
 800272c:	4393      	bics	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0a6      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d015      	beq.n	8002780 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2204      	movs	r2, #4
 800275a:	4013      	ands	r3, r2
 800275c:	d006      	beq.n	800276c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800275e:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002764:	21e0      	movs	r1, #224	; 0xe0
 8002766:	00c9      	lsls	r1, r1, #3
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	22f0      	movs	r2, #240	; 0xf0
 8002772:	4393      	bics	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	d04c      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d120      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07a      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	049b      	lsls	r3, r3, #18
 80027b2:	4013      	ands	r3, r2
 80027b4:	d114      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06e      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	4013      	ands	r3, r2
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e062      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e05b      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	4393      	bics	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fdf2 	bl	80013dc <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fc:	e009      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7fe fded 	bl	80013dc <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_RCC_ClockConfig+0x1a4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e042      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	220c      	movs	r2, #12
 8002818:	401a      	ands	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1ec      	bne.n	80027fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d211      	bcs.n	8002856 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e020      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2204      	movs	r2, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_RCC_ClockConfig+0x1a8>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002874:	f000 f820 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002878:	0001      	movs	r1, r0
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	220f      	movs	r2, #15
 8002882:	4013      	ands	r3, r2
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1ac>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	000a      	movs	r2, r1
 800288a:	40da      	lsrs	r2, r3
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800288e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fd5d 	bl	8001350 <HAL_InitTick>
  
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	00001388 	.word	0x00001388
 80028ac:	fffff8ff 	.word	0xfffff8ff
 80028b0:	080039a0 	.word	0x080039a0
 80028b4:	20000010 	.word	0x20000010

080028b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08f      	sub	sp, #60	; 0x3c
 80028bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028be:	2314      	movs	r3, #20
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80028c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028c6:	c313      	stmia	r3!, {r0, r1, r4}
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80028d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028d2:	c313      	stmia	r3!, {r0, r1, r4}
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e0:	2300      	movs	r3, #0
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	220c      	movs	r2, #12
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d006      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x52>
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d043      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xd0>
 8002900:	2b04      	cmp	r3, #4
 8002902:	d144      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002908:	e044      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	220f      	movs	r2, #15
 8002910:	4013      	ands	r3, r2
 8002912:	2214      	movs	r2, #20
 8002914:	18ba      	adds	r2, r7, r2
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	220f      	movs	r2, #15
 8002920:	4013      	ands	r3, r2
 8002922:	1d3a      	adds	r2, r7, #4
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	025b      	lsls	r3, r3, #9
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	429a      	cmp	r2, r3
 8002936:	d109      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	481c      	ldr	r0, [pc, #112]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800293c:	f7fd fbe4 	bl	8000108 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	001a      	movs	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	4353      	muls	r3, r2
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
 800294a:	e01a      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800294c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	401a      	ands	r2, r3
 8002954:	23c0      	movs	r3, #192	; 0xc0
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	429a      	cmp	r2, r3
 800295a:	d109      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295e:	4814      	ldr	r0, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002960:	f7fd fbd2 	bl	8000108 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	4353      	muls	r3, r2
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e008      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002972:	480e      	ldr	r0, [pc, #56]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002974:	f7fd fbc8 	bl	8000108 <__udivsi3>
 8002978:	0003      	movs	r3, r0
 800297a:	001a      	movs	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4353      	muls	r3, r2
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002992:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b00f      	add	sp, #60	; 0x3c
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	08003980 	.word	0x08003980
 80029a4:	08003990 	.word	0x08003990
 80029a8:	40021000 	.word	0x40021000
 80029ac:	007a1200 	.word	0x007a1200
 80029b0:	02dc6c00 	.word	0x02dc6c00

080029b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e08a      	b.n	8002adc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	225d      	movs	r2, #93	; 0x5d
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	225c      	movs	r2, #92	; 0x5c
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fe f8ee 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	225d      	movs	r2, #93	; 0x5d
 80029ec:	2102      	movs	r1, #2
 80029ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2140      	movs	r1, #64	; 0x40
 80029fc:	438a      	bics	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	23e0      	movs	r3, #224	; 0xe0
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d902      	bls.n	8002a12 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e002      	b.n	8002a18 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	015b      	lsls	r3, r3, #5
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	23f0      	movs	r3, #240	; 0xf0
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d008      	beq.n	8002a36 <HAL_SPI_Init+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	23e0      	movs	r3, #224	; 0xe0
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	23e0      	movs	r3, #224	; 0xe0
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d903      	bls.n	8002a52 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a50:	e002      	b.n	8002a58 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6999      	ldr	r1, [r3, #24]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	400b      	ands	r3, r1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	0011      	movs	r1, r2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <HAL_SPI_Init+0x130>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	225d      	movs	r2, #93	; 0x5d
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	fffff7ff 	.word	0xfffff7ff

08002ae8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002af8:	231f      	movs	r3, #31
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	225c      	movs	r2, #92	; 0x5c
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Transmit+0x26>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e169      	b.n	8002de2 <HAL_SPI_Transmit+0x2fa>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	225c      	movs	r2, #92	; 0x5c
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b16:	f7fe fc61 	bl	80013dc <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b1e:	2316      	movs	r3, #22
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	1dba      	adds	r2, r7, #6
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	225d      	movs	r2, #93	; 0x5d
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d004      	beq.n	8002b3e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002b34:	231f      	movs	r3, #31
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b3c:	e146      	b.n	8002dcc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_SPI_Transmit+0x64>
 8002b44:	1dbb      	adds	r3, r7, #6
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b4c:	231f      	movs	r3, #31
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b54:	e13a      	b.n	8002dcc <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	225d      	movs	r2, #93	; 0x5d
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1dba      	adds	r2, r7, #6
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1dba      	adds	r2, r7, #6
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2244      	movs	r2, #68	; 0x44
 8002b84:	2100      	movs	r1, #0
 8002b86:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2246      	movs	r2, #70	; 0x46
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d108      	bne.n	8002bba <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	01c9      	lsls	r1, r1, #7
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d007      	beq.n	8002bd8 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	23e0      	movs	r3, #224	; 0xe0
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d94e      	bls.n	8002c82 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_SPI_Transmit+0x10e>
 8002bec:	2316      	movs	r3, #22
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d13f      	bne.n	8002c76 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	1c9a      	adds	r2, r3, #2
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c1a:	e02c      	b.n	8002c76 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d112      	bne.n	8002c50 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4e:	e012      	b.n	8002c76 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c50:	f7fe fbc4 	bl	80013dc <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d802      	bhi.n	8002c66 <HAL_SPI_Transmit+0x17e>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x184>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002c6c:	231f      	movs	r3, #31
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2203      	movs	r2, #3
 8002c72:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c74:	e0aa      	b.n	8002dcc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1cd      	bne.n	8002c1c <HAL_SPI_Transmit+0x134>
 8002c80:	e080      	b.n	8002d84 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_SPI_Transmit+0x1ae>
 8002c8a:	2316      	movs	r3, #22
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d000      	beq.n	8002c96 <HAL_SPI_Transmit+0x1ae>
 8002c94:	e071      	b.n	8002d7a <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d912      	bls.n	8002cc6 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc4:	e059      	b.n	8002d7a <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cec:	e045      	b.n	8002d7a <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d12b      	bne.n	8002d54 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d912      	bls.n	8002d2c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b02      	subs	r3, #2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2a:	e026      	b.n	8002d7a <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	7812      	ldrb	r2, [r2, #0]
 8002d38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d52:	e012      	b.n	8002d7a <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe fb42 	bl	80013dc <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d802      	bhi.n	8002d6a <HAL_SPI_Transmit+0x282>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Transmit+0x288>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002d70:	231f      	movs	r3, #31
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2203      	movs	r2, #3
 8002d76:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d78:	e028      	b.n	8002dcc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1b4      	bne.n	8002cee <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f91e 	bl	8002fcc <SPI_EndRxTxTransaction>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002dc0:	231f      	movs	r3, #31
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e000      	b.n	8002dcc <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002dca:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	225d      	movs	r2, #93	; 0x5d
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	225c      	movs	r2, #92	; 0x5c
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ddc:	231f      	movs	r3, #31
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b008      	add	sp, #32
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	225d      	movs	r2, #93	; 0x5d
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e14:	e050      	b.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	d04d      	beq.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fade 	bl	80013dc <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d902      	bls.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d142      	bne.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	21e0      	movs	r1, #224	; 0xe0
 8002e3e:	438a      	bics	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	2382      	movs	r3, #130	; 0x82
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d113      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x72>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d005      	beq.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d107      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	438a      	bics	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d110      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002e8e:	400a      	ands	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0189      	lsls	r1, r1, #6
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	225d      	movs	r2, #93	; 0x5d
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	225c      	movs	r2, #92	; 0x5c
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e00f      	b.n	8002ed8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	425a      	negs	r2, r3
 8002ec8:	4153      	adcs	r3, r2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	001a      	movs	r2, r3
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d19f      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	ffffdfff 	.word	0xffffdfff

08002ee4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ef2:	e05c      	b.n	8002fae <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d106      	bne.n	8002f0c <SPI_WaitFifoStateUntilTimeout+0x28>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	d04d      	beq.n	8002fae <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f12:	f7fe fa63 	bl	80013dc <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d902      	bls.n	8002f28 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d142      	bne.n	8002fae <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	21e0      	movs	r1, #224	; 0xe0
 8002f34:	438a      	bics	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	2382      	movs	r3, #130	; 0x82
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d113      	bne.n	8002f6c <SPI_WaitFifoStateUntilTimeout+0x88>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d005      	beq.n	8002f5c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	438a      	bics	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	019b      	lsls	r3, r3, #6
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d110      	bne.n	8002f9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4911      	ldr	r1, [pc, #68]	; (8002fc8 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0189      	lsls	r1, r1, #6
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	225d      	movs	r2, #93	; 0x5d
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	225c      	movs	r2, #92	; 0x5c
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e008      	b.n	8002fc0 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d19a      	bne.n	8002ef4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	ffffdfff 	.word	0xffffdfff

08002fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	23c0      	movs	r3, #192	; 0xc0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f7ff ff7c 	bl	8002ee4 <SPI_WaitFifoStateUntilTimeout>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d007      	beq.n	8003000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e027      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	0013      	movs	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	f7ff fef9 	bl	8002e04 <SPI_WaitFlagStateUntilTimeout>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d007      	beq.n	8003026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301a:	2220      	movs	r2, #32
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e014      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	23c0      	movs	r3, #192	; 0xc0
 800302a:	00d9      	lsls	r1, r3, #3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	0013      	movs	r3, r2
 8003034:	2200      	movs	r2, #0
 8003036:	f7ff ff55 	bl	8002ee4 <SPI_WaitFifoStateUntilTimeout>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d007      	beq.n	800304e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	2220      	movs	r2, #32
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e000      	b.n	8003050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b004      	add	sp, #16
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01e      	b.n	80030a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223d      	movs	r2, #61	; 0x3d
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	223c      	movs	r2, #60	; 0x3c
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7fd fded 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223d      	movs	r2, #61	; 0x3d
 800308a:	2102      	movs	r1, #2
 800308c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	0019      	movs	r1, r3
 8003098:	0010      	movs	r0, r2
 800309a:	f000 fa49 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223d      	movs	r2, #61	; 0x3d
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2207      	movs	r2, #7
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d007      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	438a      	bics	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <HAL_TIM_Base_Stop_IT+0x4c>)
 8003114:	4013      	ands	r3, r2
 8003116:	d10d      	bne.n	8003134 <HAL_TIM_Base_Stop_IT+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_TIM_Base_Stop_IT+0x50>)
 8003120:	4013      	ands	r3, r2
 8003122:	d107      	bne.n	8003134 <HAL_TIM_Base_Stop_IT+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	00001111 	.word	0x00001111
 8003144:	00000444 	.word	0x00000444

08003148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d124      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d11d      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2203      	movs	r2, #3
 8003172:	4252      	negs	r2, r2
 8003174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2203      	movs	r2, #3
 8003184:	4013      	ands	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f000 f9b8 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 8003190:	e007      	b.n	80031a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f9ab 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	0018      	movs	r0, r3
 800319e:	f000 f9b7 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2204      	movs	r2, #4
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d125      	bne.n	8003202 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2204      	movs	r2, #4
 80031be:	4013      	ands	r3, r2
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11e      	bne.n	8003202 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2205      	movs	r2, #5
 80031ca:	4252      	negs	r2, r2
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	23c0      	movs	r3, #192	; 0xc0
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f98b 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 80031ea:	e007      	b.n	80031fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f97e 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f98a 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2208      	movs	r2, #8
 800320a:	4013      	ands	r3, r2
 800320c:	2b08      	cmp	r3, #8
 800320e:	d124      	bne.n	800325a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2208      	movs	r2, #8
 8003218:	4013      	ands	r3, r2
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11d      	bne.n	800325a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2209      	movs	r2, #9
 8003224:	4252      	negs	r2, r2
 8003226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2204      	movs	r2, #4
 800322c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2203      	movs	r2, #3
 8003236:	4013      	ands	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 f95f 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 8003242:	e007      	b.n	8003254 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f952 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f000 f95e 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2210      	movs	r2, #16
 8003262:	4013      	ands	r3, r2
 8003264:	2b10      	cmp	r3, #16
 8003266:	d125      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2210      	movs	r2, #16
 8003270:	4013      	ands	r3, r2
 8003272:	2b10      	cmp	r3, #16
 8003274:	d11e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2211      	movs	r2, #17
 800327c:	4252      	negs	r2, r2
 800327e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2208      	movs	r2, #8
 8003284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	23c0      	movs	r3, #192	; 0xc0
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4013      	ands	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 f932 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 800329c:	e007      	b.n	80032ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f925 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f931 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10f      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2202      	movs	r2, #2
 80032d6:	4252      	negs	r2, r2
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd fb51 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d10f      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d108      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2281      	movs	r2, #129	; 0x81
 8003304:	4252      	negs	r2, r2
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fa90 	bl	8003830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	4013      	ands	r3, r2
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d10f      	bne.n	800333e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d108      	bne.n	800333e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2241      	movs	r2, #65	; 0x41
 8003332:	4252      	negs	r2, r2
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f8f1 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2220      	movs	r2, #32
 8003346:	4013      	ands	r3, r2
 8003348:	2b20      	cmp	r3, #32
 800334a:	d10f      	bne.n	800336c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	2b20      	cmp	r3, #32
 8003358:	d108      	bne.n	800336c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2221      	movs	r2, #33	; 0x21
 8003360:	4252      	negs	r2, r2
 8003362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fa5a 	bl	8003820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	223c      	movs	r2, #60	; 0x3c
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIM_ConfigClockSource+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e0ab      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x170>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	223c      	movs	r2, #60	; 0x3c
 8003390:	2101      	movs	r1, #1
 8003392:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	223d      	movs	r2, #61	; 0x3d
 8003398:	2102      	movs	r1, #2
 800339a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2277      	movs	r2, #119	; 0x77
 80033a8:	4393      	bics	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <HAL_TIM_ConfigClockSource+0x178>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d100      	bne.n	80033c6 <HAL_TIM_ConfigClockSource+0x52>
 80033c4:	e06b      	b.n	800349e <HAL_TIM_ConfigClockSource+0x12a>
 80033c6:	d80e      	bhi.n	80033e6 <HAL_TIM_ConfigClockSource+0x72>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d100      	bne.n	80033ce <HAL_TIM_ConfigClockSource+0x5a>
 80033cc:	e077      	b.n	80034be <HAL_TIM_ConfigClockSource+0x14a>
 80033ce:	d803      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x64>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d100      	bne.n	80033d6 <HAL_TIM_ConfigClockSource+0x62>
 80033d4:	e073      	b.n	80034be <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033d6:	e07c      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d100      	bne.n	80033de <HAL_TIM_ConfigClockSource+0x6a>
 80033dc:	e06f      	b.n	80034be <HAL_TIM_ConfigClockSource+0x14a>
 80033de:	2b30      	cmp	r3, #48	; 0x30
 80033e0:	d100      	bne.n	80033e4 <HAL_TIM_ConfigClockSource+0x70>
 80033e2:	e06c      	b.n	80034be <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80033e4:	e075      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80033e6:	2b70      	cmp	r3, #112	; 0x70
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_ConfigClockSource+0x94>
 80033ea:	d804      	bhi.n	80033f6 <HAL_TIM_ConfigClockSource+0x82>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d036      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xea>
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d044      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80033f4:	e06d      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	0152      	lsls	r2, r2, #5
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d068      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0x15c>
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	0192      	lsls	r2, r2, #6
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003406:	e064      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f000 f984 	bl	8003724 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2277      	movs	r2, #119	; 0x77
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
      break;
 8003434:	e04d      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f000 f96d 	bl	8003724 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	01c9      	lsls	r1, r1, #7
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
      break;
 800345c:	e039      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	001a      	movs	r2, r3
 800346c:	f000 f8e0 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2150      	movs	r1, #80	; 0x50
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f93a 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 800347c:	e029      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	001a      	movs	r2, r3
 800348c:	f000 f8fe 	bl	800368c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2160      	movs	r1, #96	; 0x60
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f92a 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 800349c:	e019      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	001a      	movs	r2, r3
 80034ac:	f000 f8c0 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2140      	movs	r1, #64	; 0x40
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f91a 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e009      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0019      	movs	r1, r3
 80034c8:	0010      	movs	r0, r2
 80034ca:	f000 f911 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80034d0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223d      	movs	r2, #61	; 0x3d
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223c      	movs	r2, #60	; 0x3c
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	ffff00ff 	.word	0xffff00ff

080034f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a34      	ldr	r2, [pc, #208]	; (8003614 <TIM_Base_SetConfig+0xe4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d008      	beq.n	800355a <TIM_Base_SetConfig+0x2a>
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	429a      	cmp	r2, r3
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x2a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a30      	ldr	r2, [pc, #192]	; (8003618 <TIM_Base_SetConfig+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2270      	movs	r2, #112	; 0x70
 800355e:	4393      	bics	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a29      	ldr	r2, [pc, #164]	; (8003614 <TIM_Base_SetConfig+0xe4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	429a      	cmp	r2, r3
 800357c:	d013      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <TIM_Base_SetConfig+0xe8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <TIM_Base_SetConfig+0xec>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <TIM_Base_SetConfig+0xf0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a22      	ldr	r2, [pc, #136]	; (8003624 <TIM_Base_SetConfig+0xf4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x76>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <TIM_Base_SetConfig+0xf8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a20      	ldr	r2, [pc, #128]	; (800362c <TIM_Base_SetConfig+0xfc>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	4393      	bics	r3, r2
 80035be:	001a      	movs	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <TIM_Base_SetConfig+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_Base_SetConfig+0xce>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <TIM_Base_SetConfig+0xf0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_Base_SetConfig+0xce>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <TIM_Base_SetConfig+0xf4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_Base_SetConfig+0xce>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <TIM_Base_SetConfig+0xf8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d103      	bne.n	8003606 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	615a      	str	r2, [r3, #20]
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40002000 	.word	0x40002000
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	fffffcff 	.word	0xfffffcff

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	2201      	movs	r2, #1
 8003648:	4393      	bics	r3, r2
 800364a:	001a      	movs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	22f0      	movs	r2, #240	; 0xf0
 800365a:	4393      	bics	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	220a      	movs	r2, #10
 800366c:	4393      	bics	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}

0800368c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	2210      	movs	r2, #16
 800369e:	4393      	bics	r3, r2
 80036a0:	001a      	movs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <TIM_TI2_ConfigInputStage+0x60>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	22a0      	movs	r2, #160	; 0xa0
 80036c8:	4393      	bics	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b006      	add	sp, #24
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	ffff0fff 	.word	0xffff0fff

080036f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2270      	movs	r2, #112	; 0x70
 8003704:	4393      	bics	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	2207      	movs	r2, #7
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <TIM_ETR_SetConfig+0x3c>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffff00ff 	.word	0xffff00ff

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	223c      	movs	r2, #60	; 0x3c
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e047      	b.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223c      	movs	r2, #60	; 0x3c
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223d      	movs	r2, #61	; 0x3d
 8003788:	2102      	movs	r1, #2
 800378a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2270      	movs	r2, #112	; 0x70
 80037a0:	4393      	bics	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00f      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d009      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a10      	ldr	r2, [pc, #64]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10c      	bne.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	4393      	bics	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223d      	movs	r2, #61	; 0x3d
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	223c      	movs	r2, #60	; 0x3c
 8003806:	2100      	movs	r1, #0
 8003808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40014000 	.word	0x40014000

08003820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <__cxa_pure_virtual>:
 8003840:	b510      	push	{r4, lr}
 8003842:	f000 f805 	bl	8003850 <_ZSt9terminatev>

08003846 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003846:	b510      	push	{r4, lr}
 8003848:	4780      	blx	r0
 800384a:	f000 f809 	bl	8003860 <abort>
	...

08003850 <_ZSt9terminatev>:
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <_ZSt9terminatev+0xc>)
 8003852:	b510      	push	{r4, lr}
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f7ff fff6 	bl	8003846 <_ZN10__cxxabiv111__terminateEPFvvE>
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	2000001c 	.word	0x2000001c

08003860 <abort>:
 8003860:	b510      	push	{r4, lr}
 8003862:	2006      	movs	r0, #6
 8003864:	f000 f860 	bl	8003928 <raise>
 8003868:	2001      	movs	r0, #1
 800386a:	f7fd fa63 	bl	8000d34 <_exit>
	...

08003870 <__errno>:
 8003870:	4b01      	ldr	r3, [pc, #4]	; (8003878 <__errno+0x8>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	4770      	bx	lr
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	20000020 	.word	0x20000020

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	2600      	movs	r6, #0
 8003880:	4d0c      	ldr	r5, [pc, #48]	; (80038b4 <__libc_init_array+0x38>)
 8003882:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003884:	1b64      	subs	r4, r4, r5
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	2600      	movs	r6, #0
 800388e:	f000 f86b 	bl	8003968 <_init>
 8003892:	4d0a      	ldr	r5, [pc, #40]	; (80038bc <__libc_init_array+0x40>)
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <__libc_init_array+0x44>)
 8003896:	1b64      	subs	r4, r4, r5
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	00b3      	lsls	r3, r6, #2
 80038a2:	58eb      	ldr	r3, [r5, r3]
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	00b3      	lsls	r3, r6, #2
 80038ac:	58eb      	ldr	r3, [r5, r3]
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	080039d4 	.word	0x080039d4
 80038b8:	080039d4 	.word	0x080039d4
 80038bc:	080039d4 	.word	0x080039d4
 80038c0:	080039e0 	.word	0x080039e0

080038c4 <memset>:
 80038c4:	0003      	movs	r3, r0
 80038c6:	1812      	adds	r2, r2, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	7019      	strb	r1, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_raise_r>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	0004      	movs	r4, r0
 80038d8:	000d      	movs	r5, r1
 80038da:	291f      	cmp	r1, #31
 80038dc:	d904      	bls.n	80038e8 <_raise_r+0x14>
 80038de:	2316      	movs	r3, #22
 80038e0:	6003      	str	r3, [r0, #0]
 80038e2:	2001      	movs	r0, #1
 80038e4:	4240      	negs	r0, r0
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <_raise_r+0x24>
 80038ee:	008a      	lsls	r2, r1, #2
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d108      	bne.n	800390a <_raise_r+0x36>
 80038f8:	0020      	movs	r0, r4
 80038fa:	f000 f831 	bl	8003960 <_getpid_r>
 80038fe:	002a      	movs	r2, r5
 8003900:	0001      	movs	r1, r0
 8003902:	0020      	movs	r0, r4
 8003904:	f000 f81a 	bl	800393c <_kill_r>
 8003908:	e7ed      	b.n	80038e6 <_raise_r+0x12>
 800390a:	2000      	movs	r0, #0
 800390c:	2a01      	cmp	r2, #1
 800390e:	d0ea      	beq.n	80038e6 <_raise_r+0x12>
 8003910:	1c51      	adds	r1, r2, #1
 8003912:	d103      	bne.n	800391c <_raise_r+0x48>
 8003914:	2316      	movs	r3, #22
 8003916:	3001      	adds	r0, #1
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	e7e4      	b.n	80038e6 <_raise_r+0x12>
 800391c:	2400      	movs	r4, #0
 800391e:	0028      	movs	r0, r5
 8003920:	601c      	str	r4, [r3, #0]
 8003922:	4790      	blx	r2
 8003924:	0020      	movs	r0, r4
 8003926:	e7de      	b.n	80038e6 <_raise_r+0x12>

08003928 <raise>:
 8003928:	b510      	push	{r4, lr}
 800392a:	4b03      	ldr	r3, [pc, #12]	; (8003938 <raise+0x10>)
 800392c:	0001      	movs	r1, r0
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	f7ff ffd0 	bl	80038d4 <_raise_r>
 8003934:	bd10      	pop	{r4, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	20000020 	.word	0x20000020

0800393c <_kill_r>:
 800393c:	2300      	movs	r3, #0
 800393e:	b570      	push	{r4, r5, r6, lr}
 8003940:	4c06      	ldr	r4, [pc, #24]	; (800395c <_kill_r+0x20>)
 8003942:	0005      	movs	r5, r0
 8003944:	0008      	movs	r0, r1
 8003946:	0011      	movs	r1, r2
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	f7fd f9e3 	bl	8000d14 <_kill>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d103      	bne.n	800395a <_kill_r+0x1e>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d000      	beq.n	800395a <_kill_r+0x1e>
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	20000260 	.word	0x20000260

08003960 <_getpid_r>:
 8003960:	b510      	push	{r4, lr}
 8003962:	f7fd f9d1 	bl	8000d08 <_getpid>
 8003966:	bd10      	pop	{r4, pc}

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
