
mcb_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08002bcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002bcc  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c460  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e40  00000000  00000000  0002c494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  0002e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f0a  00000000  00000000  0002fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098df  00000000  00000000  00046ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ce11  00000000  00000000  000503b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd1ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eac  00000000  00000000  000cd248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b6c 	.word	0x08002b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b6c 	.word	0x08002b6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fc34 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f807 	bl	800040e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f8f0 	bl	80005e4 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000404:	f000 f84c 	bl	80004a0 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 8000408:	f000 f88c 	bl	8000524 <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800040c:	e7fe      	b.n	800040c <main+0x18>

0800040e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040e:	b590      	push	{r4, r7, lr}
 8000410:	b093      	sub	sp, #76	; 0x4c
 8000412:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000414:	2414      	movs	r4, #20
 8000416:	193b      	adds	r3, r7, r4
 8000418:	0018      	movs	r0, r3
 800041a:	2334      	movs	r3, #52	; 0x34
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f002 fb9c 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	0018      	movs	r0, r3
 8000428:	2310      	movs	r3, #16
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fb95 	bl	8002b5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000432:	0021      	movs	r1, r4
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2202      	movs	r2, #2
 8000438:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2201      	movs	r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2210      	movs	r2, #16
 8000444:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	187b      	adds	r3, r7, r1
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fa38 	bl	80018c4 <HAL_RCC_OscConfig>
 8000454:	0003      	movs	r3, r0
 8000456:	1e5a      	subs	r2, r3, #1
 8000458:	4193      	sbcs	r3, r2
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000460:	f000 f974 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2100      	movs	r1, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fda5 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000486:	0003      	movs	r3, r0
 8000488:	1e5a      	subs	r2, r3, #1
 800048a:	4193      	sbcs	r3, r2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000492:	f000 f95b 	bl	800074c <Error_Handler>
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b013      	add	sp, #76	; 0x4c
 800049c:	bd90      	pop	{r4, r7, pc}
	...

080004a0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004a6:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <_ZL12MX_SPI2_Initv+0x80>)
 80004a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004ac:	2282      	movs	r2, #130	; 0x82
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004ba:	22e0      	movs	r2, #224	; 0xe0
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004ee:	2207      	movs	r2, #7
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_ZL12MX_SPI2_Initv+0x7c>)
 8000500:	0018      	movs	r0, r3
 8000502:	f001 febd 	bl	8002280 <HAL_SPI_Init>
 8000506:	0003      	movs	r3, r0
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	4193      	sbcs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 8000512:	f000 f91b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000028 	.word	0x20000028
 8000520:	40003800 	.word	0x40003800

08000524 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	2308      	movs	r3, #8
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2310      	movs	r3, #16
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fb11 	bl	8002b5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2308      	movs	r3, #8
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fb0a 	bl	8002b5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	05d2      	lsls	r2, r2, #23
 800054e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <_ZL12MX_TIM2_Initv+0xbc>)
 8000554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 800055e:	2264      	movs	r2, #100	; 0x64
 8000560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 ff1f 	bl	80023b4 <HAL_TIM_Base_Init>
 8000576:	0003      	movs	r3, r0
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	4193      	sbcs	r3, r2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000582:	f000 f8e3 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000586:	2108      	movs	r1, #8
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0152      	lsls	r2, r2, #5
 800058e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000590:	187a      	adds	r2, r7, r1
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f002 f84e 	bl	8002638 <HAL_TIM_ConfigClockSource>
 800059c:	0003      	movs	r3, r0
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	4193      	sbcs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80005a8:	f000 f8d0 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b8:	003a      	movs	r2, r7
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <_ZL12MX_TIM2_Initv+0xb8>)
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fa3a 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	0003      	movs	r3, r0
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	4193      	sbcs	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80005d0:	f000 f8bc 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b006      	add	sp, #24
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	0000bb7f 	.word	0x0000bb7f

080005e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	240c      	movs	r4, #12
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 fab1 	bl	8002b5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b50      	ldr	r3, [pc, #320]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b4f      	ldr	r3, [pc, #316]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b49      	ldr	r3, [pc, #292]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b48      	ldr	r3, [pc, #288]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0309      	lsls	r1, r1, #12
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	031b      	lsls	r3, r3, #12
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b42      	ldr	r3, [pc, #264]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	02c9      	lsls	r1, r1, #11
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b3e      	ldr	r3, [pc, #248]	; (800073c <_ZL12MX_GPIO_Initv+0x158>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	02db      	lsls	r3, r3, #11
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin|SS_REGEN_Pin, GPIO_PIN_RESET);
 800064e:	23d8      	movs	r3, #216	; 0xd8
 8000650:	00d9      	lsls	r1, r3, #3
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f001 f915 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CON_MOTOR_Pin|CON_MPPT_Pin, GPIO_PIN_RESET);
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <_ZL12MX_GPIO_Initv+0x15c>)
 8000660:	2200      	movs	r2, #0
 8000662:	2130      	movs	r1, #48	; 0x30
 8000664:	0018      	movs	r0, r3
 8000666:	f001 f90f 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4835      	ldr	r0, [pc, #212]	; (8000744 <_ZL12MX_GPIO_Initv+0x160>)
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	f001 f908 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PRE_MOTOR_Pin PRE_MPPT_Pin SS_CRUISE_Pin SS_REGEN_Pin */
  GPIO_InitStruct.Pin = PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin|SS_REGEN_Pin;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	22d8      	movs	r2, #216	; 0xd8
 800067c:	00d2      	lsls	r2, r2, #3
 800067e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2201      	movs	r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	193a      	adds	r2, r7, r4
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 ff7c 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : CON_MOTOR_Pin CON_MPPT_Pin */
  GPIO_InitStruct.Pin = CON_MOTOR_Pin|CON_MPPT_Pin;
 80006a0:	0021      	movs	r1, r4
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2230      	movs	r2, #48	; 0x30
 80006a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	000c      	movs	r4, r1
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <_ZL12MX_GPIO_Initv+0x15c>)
 80006c0:	0019      	movs	r1, r3
 80006c2:	0010      	movs	r0, r2
 80006c4:	f000 ff68 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_TRIP_Pin */
  GPIO_InitStruct.Pin = CHG_TRIP_Pin;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <_ZL12MX_GPIO_Initv+0x164>)
 80006d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_TRIP_GPIO_Port, &GPIO_InitStruct);
 80006dc:	000c      	movs	r4, r1
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <_ZL12MX_GPIO_Initv+0x160>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 ff57 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : CRUISE_IN_Pin */
  GPIO_InitStruct.Pin = CRUISE_IN_Pin;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_ZL12MX_GPIO_Initv+0x164>)
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CRUISE_IN_GPIO_Port, &GPIO_InitStruct);
 80006fe:	000c      	movs	r4, r1
 8000700:	187b      	adds	r3, r7, r1
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <_ZL12MX_GPIO_Initv+0x160>)
 8000704:	0019      	movs	r1, r3
 8000706:	0010      	movs	r0, r2
 8000708:	f000 ff46 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : REGEN_BRK_Pin */
  GPIO_InitStruct.Pin = REGEN_BRK_Pin;
 800070c:	0021      	movs	r1, r4
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	00d2      	lsls	r2, r2, #3
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(REGEN_BRK_GPIO_Port, &GPIO_InitStruct);
 8000728:	187b      	adds	r3, r7, r1
 800072a:	4a06      	ldr	r2, [pc, #24]	; (8000744 <_ZL12MX_GPIO_Initv+0x160>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f000 ff32 	bl	8001598 <HAL_GPIO_Init>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b009      	add	sp, #36	; 0x24
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800
 8000744:	48000400 	.word	0x48000400
 8000748:	10310000 	.word	0x10310000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	619a      	str	r2, [r3, #24]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	69da      	ldr	r2, [r3, #28]
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0549      	lsls	r1, r1, #21
 8000780:	430a      	orrs	r2, r1
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_MspInit+0x44>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	055b      	lsls	r3, r3, #21
 800078c:	4013      	ands	r3, r2
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2314      	movs	r3, #20
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 f9d2 	bl	8002b5c <memset>
  if(hspi->Instance==SPI2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d132      	bne.n	8000828 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	01c9      	lsls	r1, r1, #7
 80007cc:	430a      	orrs	r2, r1
 80007ce:	61da      	str	r2, [r3, #28]
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	02c9      	lsls	r1, r1, #11
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_SPI_MspInit+0x94>)
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	02db      	lsls	r3, r3, #11
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007fa:	2114      	movs	r1, #20
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	22a0      	movs	r2, #160	; 0xa0
 8000800:	0212      	lsls	r2, r2, #8
 8000802:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2203      	movs	r2, #3
 8000814:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	187b      	adds	r3, r7, r1
 800081e:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_SPI_MspInit+0x98>)
 8000820:	0019      	movs	r1, r3
 8000822:	0010      	movs	r0, r2
 8000824:	f000 feb8 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b00a      	add	sp, #40	; 0x28
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40003800 	.word	0x40003800
 8000834:	40021000 	.word	0x40021000
 8000838:	48000400 	.word	0x48000400

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	429a      	cmp	r2, r3
 800084e:	d113      	bne.n	8000878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	61da      	str	r2, [r3, #28]
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	200f      	movs	r0, #15
 800086e:	f000 fe61 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 fe73 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 fa22 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <TIM2_IRQHandler+0x14>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fda4 	bl	800240c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	2000008c 	.word	0x2000008c

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008da:	b590      	push	{r4, r7, lr}
 80008dc:	b08d      	sub	sp, #52	; 0x34
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2100      	movs	r1, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fb3c 	bl	8000f64 <HAL_CAN_GetRxFifoFillLevel>
 80008ec:	0003      	movs	r3, r0
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4193      	sbcs	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d02e      	beq.n	8000956 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 80008f8:	2308      	movs	r3, #8
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2410      	movs	r4, #16
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	2100      	movs	r1, #0
 8000904:	f000 fa12 	bl	8000d2c <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8000908:	193b      	adds	r3, r7, r4
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d103      	bne.n	8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000910:	2310      	movs	r3, #16
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	e002      	b.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8000918:	2310      	movs	r3, #16
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f82a 	bl	8000978 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 8000924:	0003      	movs	r3, r0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0d9      	beq.n	80008e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	7a1b      	ldrb	r3, [r3, #8]
 8000932:	001a      	movs	r2, r3
 8000934:	2310      	movs	r3, #16
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	429a      	cmp	r2, r3
 800093c:	d1d1      	bne.n	80008e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 800093e:	2308      	movs	r3, #8
 8000940:	18fa      	adds	r2, r7, r3
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f839 	bl	80009be <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f824 	bl	800099c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 8000954:	e7c5      	b.n	80008e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00d      	add	sp, #52	; 0x34
 800095c:	bd90      	pop	{r4, r7, pc}
	...

08000960 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <CEC_CAN_IRQHandler+0x14>)
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fb27 	bl	8000fba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000144 	.word	0x20000144

08000978 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
{}
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8cc 	bl	8000b24 <_ZN14RX_BINARY_TREE11FindElementEm>
 800098c:	0003      	movs	r3, r0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	200000cc 	.word	0x200000cc

0800099c <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d004      	beq.n	80009b6 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	0010      	movs	r0, r2
 80009b4:	4798      	blx	r3
    }
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}

080009be <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 80009be:	b590      	push	{r4, r7, lr}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3312      	adds	r3, #18
 80009cc:	240f      	movs	r4, #15
 80009ce:	193a      	adds	r2, r7, r4
 80009d0:	6839      	ldr	r1, [r7, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f806 	bl	80009e4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b005      	add	sp, #20
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	8b5a      	ldrh	r2, [r3, #26]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	8b1b      	ldrh	r3, [r3, #24]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d10d      	bne.n	8000a18 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	7f1b      	ldrb	r3, [r3, #28]
 8000a00:	2201      	movs	r2, #1
 8000a02:	4053      	eors	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
        {
            //Fail to write since we are full
            if(success)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d025      	beq.n	8000a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                *success = false;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
            if(success)
 8000a16:	e021      	b.n	8000a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            }
        }else
        {
            if(success)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
            {
                *success = true;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	8b19      	ldrh	r1, [r3, #24]
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f819 	bl	8000a64 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	8b1b      	ldrh	r3, [r3, #24]
 8000a36:	3301      	adds	r3, #1
 8000a38:	2103      	movs	r1, #3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff fcd4 	bl	80003e8 <__aeabi_idivmod>
 8000a40:	000b      	movs	r3, r1
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	831a      	strh	r2, [r3, #24]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8b1a      	ldrh	r2, [r3, #24]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	8b5b      	ldrh	r3, [r3, #26]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d103      	bne.n	8000a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                emptyNotFull = false;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2200      	movs	r2, #0
 8000a58:	771a      	strb	r2, [r3, #28]
            }
        }
    }
 8000a5a:	e7ff      	b.n	8000a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b004      	add	sp, #16
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	230a      	movs	r3, #10
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	1c0a      	adds	r2, r1, #0
 8000a74:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8000a76:	2316      	movs	r3, #22
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	2316      	movs	r3, #22
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d815      	bhi.n	8000ab4 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8000a88:	2416      	movs	r4, #22
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	18d1      	adds	r1, r2, r3
 8000a92:	230a      	movs	r3, #10
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	881a      	ldrh	r2, [r3, #0]
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	7808      	ldrb	r0, [r1, #0]
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	188a      	adds	r2, r1, r2
 8000aa4:	1c01      	adds	r1, r0, #0
 8000aa6:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	3201      	adds	r2, #1
 8000ab0:	801a      	strh	r2, [r3, #0]
 8000ab2:	e7e4      	b.n	8000a7e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b007      	add	sp, #28
 8000aba:	bd90      	pop	{r4, r7, pc}

08000abc <_Z41__static_initialization_and_destruction_0ii>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d107      	bne.n	8000adc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d103      	bne.n	8000adc <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f814 	bl	8000b04 <_ZN14RX_BINARY_TREEC1Ev>
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	0000ffff 	.word	0x0000ffff
 8000ae8:	200000cc 	.word	0x200000cc

08000aec <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8000af2:	0019      	movs	r1, r3
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ffe1 	bl	8000abc <_Z41__static_initialization_and_destruction_0ii>
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	0000ffff 	.word	0x0000ffff

08000b04 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	671a      	str	r2, [r3, #112]	; 0x70
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2274      	movs	r2, #116	; 0x74
 8000b16:	2100      	movs	r1, #0
 8000b18:	5299      	strh	r1, [r3, r2]
{}
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_ZN14RX_BINARY_TREE11FindElementEm>:
    }
    return false;
}

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f80d 	bl	8000b56 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e001      	b.n	8000b4e <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	e034      	b.n	8000bd6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f833 	bl	8000bde <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	1c19      	adds	r1, r3, #0
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	db01      	blt.n	8000b88 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	1c19      	adds	r1, r3, #0
 8000b88:	b2cb      	uxtb	r3, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	6859      	ldr	r1, [r3, #4]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ffdd 	bl	8000b56 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	e01a      	b.n	8000bd6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f819 	bl	8000bde <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000bac:	0002      	movs	r2, r0
 8000bae:	2301      	movs	r3, #1
 8000bb0:	1c19      	adds	r1, r3, #0
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	dc01      	bgt.n	8000bbc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	1c19      	adds	r1, r3, #0
 8000bbc:	b2cb      	uxtb	r3, r1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	6899      	ldr	r1, [r3, #8]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ffc3 	bl	8000b56 <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	e000      	b.n	8000bd6 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_ZN14RX_BINARY_TREE8node_keyEP4Node>:
        return 0;  
    return N->height;  
}

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	e009      	b.n	8000c08 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	e002      	b.n	8000c08 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c3a:	f7ff fe49 	bl	80008d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f001 ff69 	bl	8002b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fbd7 	bl	80003f4 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08002bc0 	.word	0x08002bc0
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	20000170 	.word	0x20000170

08000c60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_COMP_IRQHandler>
	...

08000c64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_Init+0x24>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_Init+0x24>)
 8000c6e:	2110      	movs	r1, #16
 8000c70:	430a      	orrs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f809 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fd6d 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_InitTick+0x60>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	23fa      	movs	r3, #250	; 0xfa
 8000ca0:	0098      	lsls	r0, r3, #2
 8000ca2:	f7ff fa31 	bl	8000108 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0020      	movs	r0, r4
 8000cac:	f7ff fa2c 	bl	8000108 <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fc63 	bl	800157e <HAL_SYSTICK_Config>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e00f      	b.n	8000ce0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d80b      	bhi.n	8000cde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	425b      	negs	r3, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fc30 	bl	8001534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_InitTick+0x64>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b003      	add	sp, #12
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	18d2      	adds	r2, r2, r3
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_IncTick+0x20>)
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000008 	.word	0x20000008
 8000d14:	2000016c 	.word	0x2000016c

08000d18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	2000016c 	.word	0x2000016c

08000d2c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	2120      	movs	r1, #32
 8000d42:	5c52      	ldrb	r2, [r2, r1]
 8000d44:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d46:	183b      	adds	r3, r7, r0
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d005      	beq.n	8000d5a <HAL_CAN_GetRxMessage+0x2e>
 8000d4e:	2317      	movs	r3, #23
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d000      	beq.n	8000d5a <HAL_CAN_GetRxMessage+0x2e>
 8000d58:	e0f8      	b.n	8000f4c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10e      	bne.n	8000d7e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2203      	movs	r2, #3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d117      	bne.n	8000d9c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0392      	lsls	r2, r2, #14
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e0ee      	b.n	8000f5c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
 8000d88:	d108      	bne.n	8000d9c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	0392      	lsls	r2, r2, #14
 8000d92:	431a      	orrs	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e0df      	b.n	8000f5c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	321b      	adds	r2, #27
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	2204      	movs	r2, #4
 8000daa:	401a      	ands	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10b      	bne.n	8000dd0 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	321b      	adds	r2, #27
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	58d3      	ldr	r3, [r2, r3]
 8000dc4:	0d5b      	lsrs	r3, r3, #21
 8000dc6:	055b      	lsls	r3, r3, #21
 8000dc8:	0d5a      	lsrs	r2, r3, #21
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e00a      	b.n	8000de6 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	321b      	adds	r2, #27
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	58d3      	ldr	r3, [r2, r3]
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	321b      	adds	r2, #27
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	58d3      	ldr	r3, [r2, r3]
 8000df2:	2202      	movs	r2, #2
 8000df4:	401a      	ands	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	331b      	adds	r3, #27
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	3304      	adds	r3, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	331b      	adds	r3, #27
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	22ff      	movs	r2, #255	; 0xff
 8000e26:	401a      	ands	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	331b      	adds	r3, #27
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	18d3      	adds	r3, r2, r3
 8000e38:	3304      	adds	r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0c1b      	lsrs	r3, r3, #16
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c1a      	lsrs	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6819      	ldr	r1, [r3, #0]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	23dc      	movs	r3, #220	; 0xdc
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	188a      	adds	r2, r1, r2
 8000e54:	18d3      	adds	r3, r2, r3
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6819      	ldr	r1, [r3, #0]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	23dc      	movs	r3, #220	; 0xdc
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	188a      	adds	r2, r1, r2
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0a1a      	lsrs	r2, r3, #8
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	23dc      	movs	r3, #220	; 0xdc
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	188a      	adds	r2, r1, r2
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0c1a      	lsrs	r2, r3, #16
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3302      	adds	r3, #2
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	23dc      	movs	r3, #220	; 0xdc
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	188a      	adds	r2, r1, r2
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0e1a      	lsrs	r2, r3, #24
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3303      	adds	r3, #3
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	23de      	movs	r3, #222	; 0xde
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	188a      	adds	r2, r1, r2
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	23de      	movs	r3, #222	; 0xde
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	188a      	adds	r2, r1, r2
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0a1a      	lsrs	r2, r3, #8
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	23de      	movs	r3, #222	; 0xde
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	188a      	adds	r2, r1, r2
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	0c1a      	lsrs	r2, r3, #16
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3306      	adds	r3, #6
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	23de      	movs	r3, #222	; 0xde
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	188a      	adds	r2, r1, r2
 8000f12:	18d3      	adds	r3, r2, r3
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e1a      	lsrs	r2, r3, #24
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2120      	movs	r1, #32
 8000f32:	430a      	orrs	r2, r1
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	e007      	b.n	8000f48 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2120      	movs	r1, #32
 8000f44:	430a      	orrs	r2, r1
 8000f46:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e007      	b.n	8000f5c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	02d2      	lsls	r2, r2, #11
 8000f54:	431a      	orrs	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
  }
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b006      	add	sp, #24
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f72:	200b      	movs	r0, #11
 8000f74:	183b      	adds	r3, r7, r0
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	2120      	movs	r1, #32
 8000f7a:	5c52      	ldrb	r2, [r2, r1]
 8000f7c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d004      	beq.n	8000f90 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8000f86:	230b      	movs	r3, #11
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d106      	bne.n	8000fa4 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e005      	b.n	8000fb0 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2203      	movs	r2, #3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b08a      	sub	sp, #40	; 0x28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_CAN_IRQHandler+0x46>
 8000ffe:	e084      	b.n	800110a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	d024      	beq.n	8001052 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2202      	movs	r2, #2
 8001014:	4013      	ands	r3, r2
 8001016:	d004      	beq.n	8001022 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f97e 	bl	800131c <HAL_CAN_TxMailbox0CompleteCallback>
 8001020:	e017      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2204      	movs	r2, #4
 8001026:	4013      	ands	r3, r2
 8001028:	d005      	beq.n	8001036 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	4313      	orrs	r3, r2
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	e00d      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2208      	movs	r2, #8
 800103a:	4013      	ands	r3, r2
 800103c:	d005      	beq.n	800104a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0152      	lsls	r2, r2, #5
 8001044:	4313      	orrs	r3, r2
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
 8001048:	e003      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f000 f97d 	bl	800134c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4013      	ands	r3, r2
 800105a:	d028      	beq.n	80010ae <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4013      	ands	r3, r2
 800106e:	d004      	beq.n	800107a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f95a 	bl	800132c <HAL_CAN_TxMailbox1CompleteCallback>
 8001078:	e019      	b.n	80010ae <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4013      	ands	r3, r2
 8001082:	d005      	beq.n	8001090 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0192      	lsls	r2, r2, #6
 800108a:	4313      	orrs	r3, r2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e00e      	b.n	80010ae <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	4013      	ands	r3, r2
 8001098:	d005      	beq.n	80010a6 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	01d2      	lsls	r2, r2, #7
 80010a0:	4313      	orrs	r3, r2
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	e003      	b.n	80010ae <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 f957 	bl	800135c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	4013      	ands	r3, r2
 80010b6:	d028      	beq.n	800110a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	0252      	lsls	r2, r2, #9
 80010c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	d004      	beq.n	80010d6 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f934 	bl	800133c <HAL_CAN_TxMailbox2CompleteCallback>
 80010d4:	e019      	b.n	800110a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	4013      	ands	r3, r2
 80010de:	d005      	beq.n	80010ec <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	0212      	lsls	r2, r2, #8
 80010e6:	4313      	orrs	r3, r2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e00e      	b.n	800110a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	031b      	lsls	r3, r3, #12
 80010f2:	4013      	ands	r3, r2
 80010f4:	d005      	beq.n	8001102 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0252      	lsls	r2, r2, #9
 80010fc:	4313      	orrs	r3, r2
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001100:	e003      	b.n	800110a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0018      	movs	r0, r3
 8001106:	f000 f931 	bl	800136c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	2208      	movs	r2, #8
 800110e:	4013      	ands	r3, r2
 8001110:	d00c      	beq.n	800112c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2210      	movs	r2, #16
 8001116:	4013      	ands	r3, r2
 8001118:	d008      	beq.n	800112c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4313      	orrs	r3, r2
 8001122:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2210      	movs	r2, #16
 800112a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	2204      	movs	r2, #4
 8001130:	4013      	ands	r3, r2
 8001132:	d00b      	beq.n	800114c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2208      	movs	r2, #8
 8001138:	4013      	ands	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	0018      	movs	r0, r3
 8001148:	f000 f918 	bl	800137c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d009      	beq.n	8001168 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fbb9 	bl	80008da <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	4013      	ands	r3, r2
 800116e:	d00c      	beq.n	800118a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2210      	movs	r2, #16
 8001174:	4013      	ands	r3, r2
 8001176:	d008      	beq.n	800118a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	4313      	orrs	r3, r2
 8001180:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2210      	movs	r2, #16
 8001188:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	2220      	movs	r2, #32
 800118e:	4013      	ands	r3, r2
 8001190:	d00b      	beq.n	80011aa <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2208      	movs	r2, #8
 8001196:	4013      	ands	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2208      	movs	r2, #8
 80011a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 f8f9 	bl	800139c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2210      	movs	r2, #16
 80011ae:	4013      	ands	r3, r2
 80011b0:	d009      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2203      	movs	r2, #3
 80011ba:	4013      	ands	r3, r2
 80011bc:	d003      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 f8e3 	bl	800138c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011c6:	6a3a      	ldr	r2, [r7, #32]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	029b      	lsls	r3, r3, #10
 80011cc:	4013      	ands	r3, r2
 80011ce:	d00b      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2210      	movs	r2, #16
 80011d4:	4013      	ands	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2210      	movs	r2, #16
 80011de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f8e2 	bl	80013ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011e8:	6a3a      	ldr	r2, [r7, #32]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	025b      	lsls	r3, r3, #9
 80011ee:	4013      	ands	r3, r2
 80011f0:	d00b      	beq.n	800120a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	2208      	movs	r2, #8
 80011f6:	4013      	ands	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2208      	movs	r2, #8
 8001200:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f000 f8d9 	bl	80013bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800120a:	6a3a      	ldr	r2, [r7, #32]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_CAN_IRQHandler+0x25c>
 8001214:	e071      	b.n	80012fa <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2204      	movs	r2, #4
 800121a:	4013      	ands	r3, r2
 800121c:	d100      	bne.n	8001220 <HAL_CAN_IRQHandler+0x266>
 800121e:	e068      	b.n	80012f2 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001220:	6a3a      	ldr	r2, [r7, #32]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4013      	ands	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001230:	d003      	beq.n	800123a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	2201      	movs	r2, #1
 8001236:	4313      	orrs	r3, r2
 8001238:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800123a:	6a3a      	ldr	r2, [r7, #32]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800124a:	d003      	beq.n	8001254 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	4313      	orrs	r3, r2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4013      	ands	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2204      	movs	r2, #4
 8001262:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001264:	d003      	beq.n	800126e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	2204      	movs	r2, #4
 800126a:	4313      	orrs	r3, r2
 800126c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d03c      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2270      	movs	r2, #112	; 0x70
 800127c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800127e:	d038      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2270      	movs	r2, #112	; 0x70
 8001284:	4013      	ands	r3, r2
 8001286:	2b30      	cmp	r3, #48	; 0x30
 8001288:	d016      	beq.n	80012b8 <HAL_CAN_IRQHandler+0x2fe>
 800128a:	d804      	bhi.n	8001296 <HAL_CAN_IRQHandler+0x2dc>
 800128c:	2b10      	cmp	r3, #16
 800128e:	d009      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x2ea>
 8001290:	2b20      	cmp	r3, #32
 8001292:	d00c      	beq.n	80012ae <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001294:	e025      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001296:	2b50      	cmp	r3, #80	; 0x50
 8001298:	d018      	beq.n	80012cc <HAL_CAN_IRQHandler+0x312>
 800129a:	2b60      	cmp	r3, #96	; 0x60
 800129c:	d01b      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x31c>
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d00f      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x308>
            break;
 80012a2:	e01e      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	2208      	movs	r2, #8
 80012a8:	4313      	orrs	r3, r2
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ac:	e019      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	2210      	movs	r2, #16
 80012b2:	4313      	orrs	r3, r2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b6:	e014      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	2220      	movs	r2, #32
 80012bc:	4313      	orrs	r3, r2
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c0:	e00f      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	4313      	orrs	r3, r2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ca:	e00a      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	4313      	orrs	r3, r2
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d4:	e005      	b.n	80012e2 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	4313      	orrs	r3, r2
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e0:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2170      	movs	r1, #112	; 0x70
 80012ee:	438a      	bics	r2, r1
 80012f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2204      	movs	r2, #4
 80012f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d009      	beq.n	8001314 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f85c 	bl	80013cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b00a      	add	sp, #40	; 0x28
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b7f      	cmp	r3, #127	; 0x7f
 80013ee:	d809      	bhi.n	8001404 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	001a      	movs	r2, r3
 80013f6:	231f      	movs	r3, #31
 80013f8:	401a      	ands	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_EnableIRQ+0x30>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	4091      	lsls	r1, r2
 8001400:	000a      	movs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	0002      	movs	r2, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b7f      	cmp	r3, #127	; 0x7f
 8001424:	d828      	bhi.n	8001478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	33c0      	adds	r3, #192	; 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	589b      	ldr	r3, [r3, r2]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	430a      	orrs	r2, r1
 8001470:	33c0      	adds	r3, #192	; 0xc0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001476:	e031      	b.n	80014dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0019      	movs	r1, r3
 8001480:	230f      	movs	r3, #15
 8001482:	400b      	ands	r3, r1
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3306      	adds	r3, #6
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	001c      	movs	r4, r3
 80014c8:	230f      	movs	r3, #15
 80014ca:	4023      	ands	r3, r4
 80014cc:	3b08      	subs	r3, #8
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	430a      	orrs	r2, r1
 80014d2:	3306      	adds	r3, #6
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	18c3      	adds	r3, r0, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b003      	add	sp, #12
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <SysTick_Config+0x40>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e010      	b.n	8001524 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <SysTick_Config+0x44>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3a01      	subs	r2, #1
 8001508:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	2103      	movs	r1, #3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff7d 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SysTick_Config+0x44>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x44>)
 800151e:	2207      	movs	r2, #7
 8001520:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	00ffffff 	.word	0x00ffffff
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	210f      	movs	r1, #15
 8001540:	187b      	adds	r3, r7, r1
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25b      	sxtb	r3, r3
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	0002      	movs	r2, r0
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ffaf 	bl	80014ec <SysTick_Config>
 800158e:	0003      	movs	r3, r0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e155      	b.n	8001854 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x28>
 80015be:	e146      	b.n	800184e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d00b      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d4:	2b11      	cmp	r3, #17
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	2201      	movs	r2, #1
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	409a      	lsls	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	43da      	mvns	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0xea>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2107      	movs	r1, #7
 80016ae:	400b      	ands	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x174>
 800170a:	e0a0      	b.n	800184e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_GPIO_Init+0x2d4>)
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_GPIO_Init+0x2d4>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	619a      	str	r2, [r3, #24]
 8001718:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_GPIO_Init+0x2d4>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	589b      	ldr	r3, [r3, r2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	409a      	lsls	r2, r3
 800173e:	0013      	movs	r3, r2
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	2390      	movs	r3, #144	; 0x90
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	429a      	cmp	r2, r3
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a47      	ldr	r2, [pc, #284]	; (8001874 <HAL_GPIO_Init+0x2dc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x1ea>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x1e6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a45      	ldr	r2, [pc, #276]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x1e2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a44      	ldr	r2, [pc, #272]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x1de>
 8001772:	2304      	movs	r3, #4
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x1f0>
 8001776:	2305      	movs	r3, #5
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x1f0>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x1f0>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x1f0>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x1f0>
 8001786:	2300      	movs	r3, #0
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	2103      	movs	r1, #3
 800178c:	400a      	ands	r2, r1
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	4013      	ands	r3, r2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43da      	mvns	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	035b      	lsls	r3, r3, #13
 8001812:	4013      	ands	r3, r2
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43da      	mvns	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	039b      	lsls	r3, r3, #14
 800183c:	4013      	ands	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	40da      	lsrs	r2, r3
 800185c:	1e13      	subs	r3, r2, #0
 800185e:	d000      	beq.n	8001862 <HAL_GPIO_Init+0x2ca>
 8001860:	e6a2      	b.n	80015a8 <HAL_GPIO_Init+0x10>
  } 
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b006      	add	sp, #24
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	48000400 	.word	0x48000400
 8001878:	48000800 	.word	0x48000800
 800187c:	48000c00 	.word	0x48000c00
 8001880:	48001000 	.word	0x48001000
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	0008      	movs	r0, r1
 8001892:	0011      	movs	r1, r2
 8001894:	1cbb      	adds	r3, r7, #2
 8001896:	1c02      	adds	r2, r0, #0
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	1c7b      	adds	r3, r7, #1
 800189c:	1c0a      	adds	r2, r1, #0
 800189e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	1c7b      	adds	r3, r7, #1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	881a      	ldrh	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b2:	1cbb      	adds	r3, r7, #2
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f000 fb76 	bl	8001fc4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	4013      	ands	r3, r2
 80018e0:	d100      	bne.n	80018e4 <HAL_RCC_OscConfig+0x20>
 80018e2:	e08e      	b.n	8001a02 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e4:	4bc5      	ldr	r3, [pc, #788]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	220c      	movs	r2, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d00e      	beq.n	800190e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f0:	4bc2      	ldr	r3, [pc, #776]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	220c      	movs	r2, #12
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d117      	bne.n	800192c <HAL_RCC_OscConfig+0x68>
 80018fc:	4bbf      	ldr	r3, [pc, #764]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	23c0      	movs	r3, #192	; 0xc0
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	401a      	ands	r2, r3
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	429a      	cmp	r2, r3
 800190c:	d10e      	bne.n	800192c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	4bbb      	ldr	r3, [pc, #748]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d100      	bne.n	800191c <HAL_RCC_OscConfig+0x58>
 800191a:	e071      	b.n	8001a00 <HAL_RCC_OscConfig+0x13c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d000      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
 8001924:	e06c      	b.n	8001a00 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f000 fb4c 	bl	8001fc4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x80>
 8001934:	4bb1      	ldr	r3, [pc, #708]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4bb0      	ldr	r3, [pc, #704]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	0249      	lsls	r1, r1, #9
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e02f      	b.n	80019a4 <HAL_RCC_OscConfig+0xe0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0xa2>
 800194c:	4bab      	ldr	r3, [pc, #684]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4baa      	ldr	r3, [pc, #680]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001952:	49ab      	ldr	r1, [pc, #684]	; (8001c00 <HAL_RCC_OscConfig+0x33c>)
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	4ba8      	ldr	r3, [pc, #672]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4ba7      	ldr	r3, [pc, #668]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800195e:	49a9      	ldr	r1, [pc, #676]	; (8001c04 <HAL_RCC_OscConfig+0x340>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e01e      	b.n	80019a4 <HAL_RCC_OscConfig+0xe0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10e      	bne.n	800198c <HAL_RCC_OscConfig+0xc8>
 800196e:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4ba2      	ldr	r3, [pc, #648]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	02c9      	lsls	r1, r1, #11
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	4b9f      	ldr	r3, [pc, #636]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b9e      	ldr	r3, [pc, #632]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	0249      	lsls	r1, r1, #9
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xe0>
 800198c:	4b9b      	ldr	r3, [pc, #620]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b9a      	ldr	r3, [pc, #616]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001992:	499b      	ldr	r1, [pc, #620]	; (8001c00 <HAL_RCC_OscConfig+0x33c>)
 8001994:	400a      	ands	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b98      	ldr	r3, [pc, #608]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b97      	ldr	r3, [pc, #604]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 800199e:	4999      	ldr	r1, [pc, #612]	; (8001c04 <HAL_RCC_OscConfig+0x340>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d014      	beq.n	80019d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9b4 	bl	8000d18 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff f9af 	bl	8000d18 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e2fd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c8:	4b8c      	ldr	r3, [pc, #560]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0xf2>
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff f99f 	bl	8000d18 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f99a 	bl	8000d18 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e2e8      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x11c>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x14a>
 8001a0c:	e06c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	220c      	movs	r2, #12
 8001a14:	4013      	ands	r3, r2
 8001a16:	d00e      	beq.n	8001a36 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a18:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d11f      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1a0>
 8001a24:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x188>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e2bb      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b6b      	ldr	r3, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	22f8      	movs	r2, #248	; 0xf8
 8001a52:	4393      	bics	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00da      	lsls	r2, r3, #3
 8001a5c:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e041      	b.n	8001ae8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d024      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f94e 	bl	8000d18 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff f949 	bl	8000d18 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e297      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d0f1      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	22f8      	movs	r2, #248	; 0xf8
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	00da      	lsls	r2, r3, #3
 8001aae:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	438a      	bics	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f929 	bl	8000d18 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff f924 	bl	8000d18 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e272      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d1f1      	bne.n	8001acc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2208      	movs	r2, #8
 8001aee:	4013      	ands	r3, r2
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d019      	beq.n	8001b2e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f907 	bl	8000d18 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff f902 	bl	8000d18 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e250      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f1      	beq.n	8001b10 <HAL_RCC_OscConfig+0x24c>
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	438a      	bics	r2, r1
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f8ed 	bl	8000d18 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f8e8 	bl	8000d18 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e236      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f1      	bne.n	8001b44 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4013      	ands	r3, r2
 8001b68:	d100      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2a8>
 8001b6a:	e0b5      	b.n	8001cd8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6c:	231f      	movs	r3, #31
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	055b      	lsls	r3, r3, #21
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0549      	lsls	r1, r1, #21
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	055b      	lsls	r3, r3, #21
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b9c:	231f      	movs	r3, #31
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_RCC_OscConfig+0x344>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d11a      	bne.n	8001be6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x344>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_RCC_OscConfig+0x344>)
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	0049      	lsls	r1, r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f8ab 	bl	8000d18 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc8:	f7ff f8a6 	bl	8000d18 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x344>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10e      	bne.n	8001c0c <HAL_RCC_OscConfig+0x348>
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_RCC_OscConfig+0x338>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	621a      	str	r2, [r3, #32]
 8001bfa:	e035      	b.n	8001c68 <HAL_RCC_OscConfig+0x3a4>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	fffeffff 	.word	0xfffeffff
 8001c04:	fffbffff 	.word	0xfffbffff
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x36a>
 8001c14:	4bca      	ldr	r3, [pc, #808]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	4bc9      	ldr	r3, [pc, #804]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	621a      	str	r2, [r3, #32]
 8001c20:	4bc7      	ldr	r3, [pc, #796]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	4bc6      	ldr	r3, [pc, #792]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c26:	2104      	movs	r1, #4
 8001c28:	438a      	bics	r2, r1
 8001c2a:	621a      	str	r2, [r3, #32]
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x3a4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x38c>
 8001c36:	4bc2      	ldr	r3, [pc, #776]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	4bc1      	ldr	r3, [pc, #772]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	621a      	str	r2, [r3, #32]
 8001c42:	4bbf      	ldr	r3, [pc, #764]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	4bbe      	ldr	r3, [pc, #760]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	621a      	str	r2, [r3, #32]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x3a4>
 8001c50:	4bbb      	ldr	r3, [pc, #748]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c52:	6a1a      	ldr	r2, [r3, #32]
 8001c54:	4bba      	ldr	r3, [pc, #744]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	438a      	bics	r2, r1
 8001c5a:	621a      	str	r2, [r3, #32]
 8001c5c:	4bb8      	ldr	r3, [pc, #736]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	6a1a      	ldr	r2, [r3, #32]
 8001c60:	4bb7      	ldr	r3, [pc, #732]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c62:	2104      	movs	r1, #4
 8001c64:	438a      	bics	r2, r1
 8001c66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f852 	bl	8000d18 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff f84d 	bl	8000d18 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4aaf      	ldr	r2, [pc, #700]	; (8001f44 <HAL_RCC_OscConfig+0x680>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e19a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	4bac      	ldr	r3, [pc, #688]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3b6>
 8001c98:	e013      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f83d 	bl	8000d18 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	e009      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f838 	bl	8000d18 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	4aa5      	ldr	r2, [pc, #660]	; (8001f44 <HAL_RCC_OscConfig+0x680>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e185      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc2:	231f      	movs	r3, #31
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	4b9b      	ldr	r3, [pc, #620]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cd2:	499d      	ldr	r1, [pc, #628]	; (8001f48 <HAL_RCC_OscConfig+0x684>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d12a      	bne.n	8001d40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cea:	4b95      	ldr	r3, [pc, #596]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	4b94      	ldr	r3, [pc, #592]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cf6:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfa:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f809 	bl	8000d18 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d0c:	f7ff f804 	bl	8000d18 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e152      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f1      	beq.n	8001d0c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d28:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	22f8      	movs	r2, #248	; 0xf8
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	00da      	lsls	r2, r3, #3
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d3e:	e034      	b.n	8001daa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	3305      	adds	r3, #5
 8001d46:	d111      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d48:	4b7d      	ldr	r3, [pc, #500]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4c:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	438a      	bics	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	22f8      	movs	r2, #248	; 0xf8
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	00da      	lsls	r2, r3, #3
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
 8001d6a:	e01e      	b.n	8001daa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d6c:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d70:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d72:	2104      	movs	r1, #4
 8001d74:	430a      	orrs	r2, r1
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d78:	4b71      	ldr	r3, [pc, #452]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7c:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	438a      	bics	r2, r1
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffc8 	bl	8000d18 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d8e:	f7fe ffc3 	bl	8000d18 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e111      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001da0:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f1      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2220      	movs	r2, #32
 8001db0:	4013      	ands	r3, r2
 8001db2:	d05c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001db4:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	220c      	movs	r2, #12
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d00e      	beq.n	8001dde <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dc0:	4b5f      	ldr	r3, [pc, #380]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d114      	bne.n	8001df6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dcc:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	4013      	ands	r3, r2
 8001de8:	d040      	beq.n	8001e6c <HAL_RCC_OscConfig+0x5a8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d03c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0e6      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e02:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0249      	lsls	r1, r1, #9
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff84 	bl	8000d18 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7fe ff7f 	bl	8000d18 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0cd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x552>
 8001e34:	e01b      	b.n	8001e6e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e36:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e3c:	4943      	ldr	r1, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x688>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe ff69 	bl	8000d18 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4c:	f7fe ff64 	bl	8000d18 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0b2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e5e:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x588>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e6c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5b4>
 8001e76:	e0a4      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d100      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5c2>
 8001e84:	e078      	b.n	8001f78 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d14c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001e94:	492e      	ldr	r1, [pc, #184]	; (8001f50 <HAL_RCC_OscConfig+0x68c>)
 8001e96:	400a      	ands	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe ff3d 	bl	8000d18 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ff38 	bl	8000d18 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e086      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	049b      	lsls	r3, r3, #18
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	4393      	bics	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_RCC_OscConfig+0x690>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	0449      	lsls	r1, r1, #17
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe ff0b 	bl	8000d18 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe ff06 	bl	8000d18 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	049b      	lsls	r3, r3, #18
 8001f22:	4013      	ands	r3, r2
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x644>
 8001f26:	e04c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <HAL_RCC_OscConfig+0x68c>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fef0 	bl	8000d18 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x6a6>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40021000 	.word	0x40021000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	fffeffff 	.word	0xfffeffff
 8001f50:	feffffff 	.word	0xfeffffff
 8001f54:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7fe fede 	bl	8000d18 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e02c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_RCC_OscConfig+0x708>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	049b      	lsls	r3, r3, #18
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x694>
 8001f76:	e024      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_OscConfig+0x708>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x708>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	025b      	lsls	r3, r3, #9
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10e      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	23f0      	movs	r3, #240	; 0xf0
 8001fb2:	039b      	lsls	r3, r3, #14
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b008      	add	sp, #32
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0bf      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d911      	bls.n	8002016 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b5e      	ldr	r3, [pc, #376]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0a6      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d015      	beq.n	800204c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	d006      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800202a:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002030:	21e0      	movs	r1, #224	; 0xe0
 8002032:	00c9      	lsls	r1, r1, #3
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d04c      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d120      	bne.n	80020ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07a      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d114      	bne.n	80020ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06e      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	025b      	lsls	r3, r3, #9
 8002096:	4013      	ands	r3, r2
 8002098:	d108      	bne.n	80020ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e062      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2202      	movs	r2, #2
 80020a4:	4013      	ands	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e05b      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fe2a 	bl	8000d18 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c8:	e009      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ca:	f7fe fe25 	bl	8000d18 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_RCC_ClockConfig+0x1a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e042      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	220c      	movs	r2, #12
 80020e4:	401a      	ands	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ec      	bne.n	80020ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d211      	bcs.n	8002122 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x19c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e020      	b.n	8002164 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_RCC_ClockConfig+0x1a8>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002140:	f000 f820 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002144:	0001      	movs	r1, r0
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1a0>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	220f      	movs	r2, #15
 800214e:	4013      	ands	r3, r2
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1ac>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	000a      	movs	r2, r1
 8002156:	40da      	lsrs	r2, r3
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1b0>)
 800215a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800215c:	2000      	movs	r0, #0
 800215e:	f7fe fd95 	bl	8000c8c <HAL_InitTick>
  
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
 8002174:	00001388 	.word	0x00001388
 8002178:	fffff8ff 	.word	0xfffff8ff
 800217c:	08002ba4 	.word	0x08002ba4
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b08f      	sub	sp, #60	; 0x3c
 8002188:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800218a:	2314      	movs	r3, #20
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	4a37      	ldr	r2, [pc, #220]	; (800226c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002190:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002192:	c313      	stmia	r3!, {r0, r1, r4}
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4a35      	ldr	r2, [pc, #212]	; (8002270 <HAL_RCC_GetSysClockFreq+0xec>)
 800219c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800219e:	c313      	stmia	r3!, {r0, r1, r4}
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ac:	2300      	movs	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf0>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	220c      	movs	r2, #12
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d006      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x52>
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d043      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xd0>
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d144      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021d4:	e044      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	220f      	movs	r2, #15
 80021dc:	4013      	ands	r3, r2
 80021de:	2214      	movs	r2, #20
 80021e0:	18ba      	adds	r2, r7, r2
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf0>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	220f      	movs	r2, #15
 80021ec:	4013      	ands	r3, r2
 80021ee:	1d3a      	adds	r2, r7, #4
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f6:	23c0      	movs	r3, #192	; 0xc0
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	401a      	ands	r2, r3
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	429a      	cmp	r2, r3
 8002202:	d109      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002206:	481c      	ldr	r0, [pc, #112]	; (8002278 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002208:	f7fd ff7e 	bl	8000108 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	001a      	movs	r2, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	4353      	muls	r3, r2
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	e01a      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	025b      	lsls	r3, r3, #9
 800221e:	401a      	ands	r2, r3
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	429a      	cmp	r2, r3
 8002226:	d109      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222a:	4814      	ldr	r0, [pc, #80]	; (800227c <HAL_RCC_GetSysClockFreq+0xf8>)
 800222c:	f7fd ff6c 	bl	8000108 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	001a      	movs	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	4353      	muls	r3, r2
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
 800223a:	e008      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002240:	f7fd ff62 	bl	8000108 <__udivsi3>
 8002244:	0003      	movs	r3, r0
 8002246:	001a      	movs	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	4353      	muls	r3, r2
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002252:	e005      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002258:	e002      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RCC_GetSysClockFreq+0xf4>)
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800225e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b00f      	add	sp, #60	; 0x3c
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	08002b84 	.word	0x08002b84
 8002270:	08002b94 	.word	0x08002b94
 8002274:	40021000 	.word	0x40021000
 8002278:	007a1200 	.word	0x007a1200
 800227c:	02dc6c00 	.word	0x02dc6c00

08002280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e08a      	b.n	80023a8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	225d      	movs	r2, #93	; 0x5d
 800229c:	5c9b      	ldrb	r3, [r3, r2]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	225c      	movs	r2, #92	; 0x5c
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fe fa76 	bl	80007a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	225d      	movs	r2, #93	; 0x5d
 80022b8:	2102      	movs	r1, #2
 80022ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2140      	movs	r1, #64	; 0x40
 80022c8:	438a      	bics	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	23e0      	movs	r3, #224	; 0xe0
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d902      	bls.n	80022de <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e002      	b.n	80022e4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	23f0      	movs	r3, #240	; 0xf0
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d008      	beq.n	8002302 <HAL_SPI_Init+0x82>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	23e0      	movs	r3, #224	; 0xe0
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	23e0      	movs	r3, #224	; 0xe0
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	429a      	cmp	r2, r3
 8002314:	d903      	bls.n	800231e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
 800231c:	e002      	b.n	8002324 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6999      	ldr	r1, [r3, #24]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	400b      	ands	r3, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	431a      	orrs	r2, r3
 8002352:	0011      	movs	r1, r2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	2204      	movs	r2, #4
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	431a      	orrs	r2, r3
 800237c:	0011      	movs	r1, r2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4907      	ldr	r1, [pc, #28]	; (80023b0 <HAL_SPI_Init+0x130>)
 8002394:	400a      	ands	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	225d      	movs	r2, #93	; 0x5d
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	fffff7ff 	.word	0xfffff7ff

080023b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01e      	b.n	8002404 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	223d      	movs	r2, #61	; 0x3d
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223c      	movs	r2, #60	; 0x3c
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7fe fa2d 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	223d      	movs	r2, #61	; 0x3d
 80023e6:	2102      	movs	r1, #2
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	0019      	movs	r1, r3
 80023f4:	0010      	movs	r0, r2
 80023f6:	f000 fa05 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	223d      	movs	r2, #61	; 0x3d
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d124      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d11d      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2203      	movs	r2, #3
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f9c0 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002454:	e007      	b.n	8002466 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f9b3 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f9bf 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	2b04      	cmp	r3, #4
 8002478:	d125      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2204      	movs	r2, #4
 8002482:	4013      	ands	r3, r2
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2205      	movs	r2, #5
 800248e:	4252      	negs	r2, r2
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	23c0      	movs	r3, #192	; 0xc0
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f993 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f986 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f992 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2208      	movs	r2, #8
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d124      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2208      	movs	r2, #8
 80024dc:	4013      	ands	r3, r2
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11d      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2209      	movs	r2, #9
 80024e8:	4252      	negs	r2, r2
 80024ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f967 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002506:	e007      	b.n	8002518 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f95a 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f966 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	2b10      	cmp	r3, #16
 800252a:	d125      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2210      	movs	r2, #16
 8002534:	4013      	ands	r3, r2
 8002536:	2b10      	cmp	r3, #16
 8002538:	d11e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2211      	movs	r2, #17
 8002540:	4252      	negs	r2, r2
 8002542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2208      	movs	r2, #8
 8002548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f93a 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002560:	e007      	b.n	8002572 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f92d 	bl	80027c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f939 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4252      	negs	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 f907 	bl	80027b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d10f      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	4013      	ands	r3, r2
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d108      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2281      	movs	r2, #129	; 0x81
 80025c8:	4252      	negs	r2, r2
 80025ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 fa98 	bl	8002b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	4013      	ands	r3, r2
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d10f      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d108      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2241      	movs	r2, #65	; 0x41
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f8f9 	bl	80027f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	2b20      	cmp	r3, #32
 800260e:	d10f      	bne.n	8002630 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	4013      	ands	r3, r2
 800261a:	2b20      	cmp	r3, #32
 800261c:	d108      	bne.n	8002630 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2221      	movs	r2, #33	; 0x21
 8002624:	4252      	negs	r2, r2
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fa62 	bl	8002af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223c      	movs	r2, #60	; 0x3c
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIM_ConfigClockSource+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e0ab      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x170>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223c      	movs	r2, #60	; 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	223d      	movs	r2, #61	; 0x3d
 800265c:	2102      	movs	r1, #2
 800265e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2277      	movs	r2, #119	; 0x77
 800266c:	4393      	bics	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_TIM_ConfigClockSource+0x178>)
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d100      	bne.n	800268a <HAL_TIM_ConfigClockSource+0x52>
 8002688:	e06b      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x12a>
 800268a:	d80e      	bhi.n	80026aa <HAL_TIM_ConfigClockSource+0x72>
 800268c:	2b10      	cmp	r3, #16
 800268e:	d100      	bne.n	8002692 <HAL_TIM_ConfigClockSource+0x5a>
 8002690:	e077      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x14a>
 8002692:	d803      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x64>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d100      	bne.n	800269a <HAL_TIM_ConfigClockSource+0x62>
 8002698:	e073      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800269a:	e07c      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800269c:	2b20      	cmp	r3, #32
 800269e:	d100      	bne.n	80026a2 <HAL_TIM_ConfigClockSource+0x6a>
 80026a0:	e06f      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x14a>
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d100      	bne.n	80026a8 <HAL_TIM_ConfigClockSource+0x70>
 80026a6:	e06c      	b.n	8002782 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80026a8:	e075      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80026aa:	2b70      	cmp	r3, #112	; 0x70
 80026ac:	d00e      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0x94>
 80026ae:	d804      	bhi.n	80026ba <HAL_TIM_ConfigClockSource+0x82>
 80026b0:	2b50      	cmp	r3, #80	; 0x50
 80026b2:	d036      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0xea>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d044      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80026b8:	e06d      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	0152      	lsls	r2, r2, #5
 80026be:	4293      	cmp	r3, r2
 80026c0:	d068      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x15c>
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	0192      	lsls	r2, r2, #6
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d017      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80026ca:	e064      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f000 f98c 	bl	80029f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2277      	movs	r2, #119	; 0x77
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]
      break;
 80026f8:	e04d      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f000 f975 	bl	80029f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	01c9      	lsls	r1, r1, #7
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
      break;
 8002720:	e039      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	001a      	movs	r2, r3
 8002730:	f000 f8e8 	bl	8002904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2150      	movs	r1, #80	; 0x50
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f942 	bl	80029c4 <TIM_ITRx_SetConfig>
      break;
 8002740:	e029      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	001a      	movs	r2, r3
 8002750:	f000 f906 	bl	8002960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2160      	movs	r1, #96	; 0x60
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f932 	bl	80029c4 <TIM_ITRx_SetConfig>
      break;
 8002760:	e019      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	001a      	movs	r2, r3
 8002770:	f000 f8c8 	bl	8002904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2140      	movs	r1, #64	; 0x40
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f922 	bl	80029c4 <TIM_ITRx_SetConfig>
      break;
 8002780:	e009      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f000 f919 	bl	80029c4 <TIM_ITRx_SetConfig>
      break;
 8002792:	e000      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002794:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223d      	movs	r2, #61	; 0x3d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223c      	movs	r2, #60	; 0x3c
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ffff00ff 	.word	0xffff00ff

080027b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <TIM_Base_SetConfig+0xe4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d008      	beq.n	800282e <TIM_Base_SetConfig+0x2a>
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	05db      	lsls	r3, r3, #23
 8002822:	429a      	cmp	r2, r3
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x2a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <TIM_Base_SetConfig+0xe8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2270      	movs	r2, #112	; 0x70
 8002832:	4393      	bics	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <TIM_Base_SetConfig+0xe4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d018      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	429a      	cmp	r2, r3
 8002850:	d013      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <TIM_Base_SetConfig+0xe8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00f      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <TIM_Base_SetConfig+0xec>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <TIM_Base_SetConfig+0xf0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <TIM_Base_SetConfig+0xf4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x76>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <TIM_Base_SetConfig+0xf8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <TIM_Base_SetConfig+0xfc>)
 800287e:	4013      	ands	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	4393      	bics	r3, r2
 8002892:	001a      	movs	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <TIM_Base_SetConfig+0xe4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0xce>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <TIM_Base_SetConfig+0xf0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0xce>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <TIM_Base_SetConfig+0xf4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0xce>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <TIM_Base_SetConfig+0xf8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d103      	bne.n	80028da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	615a      	str	r2, [r3, #20]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40002000 	.word	0x40002000
 80028f4:	40014000 	.word	0x40014000
 80028f8:	40014400 	.word	0x40014400
 80028fc:	40014800 	.word	0x40014800
 8002900:	fffffcff 	.word	0xfffffcff

08002904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	001a      	movs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	22f0      	movs	r2, #240	; 0xf0
 800292e:	4393      	bics	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	220a      	movs	r2, #10
 8002940:	4393      	bics	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}

08002960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	2210      	movs	r2, #16
 8002972:	4393      	bics	r3, r2
 8002974:	001a      	movs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <TIM_TI2_ConfigInputStage+0x60>)
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	031b      	lsls	r3, r3, #12
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	22a0      	movs	r2, #160	; 0xa0
 800299c:	4393      	bics	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b006      	add	sp, #24
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	ffff0fff 	.word	0xffff0fff

080029c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2270      	movs	r2, #112	; 0x70
 80029d8:	4393      	bics	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	2207      	movs	r2, #7
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <TIM_ETR_SetConfig+0x3c>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	021a      	lsls	r2, r3, #8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	ffff00ff 	.word	0xffff00ff

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223c      	movs	r2, #60	; 0x3c
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e047      	b.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	223c      	movs	r2, #60	; 0x3c
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	223d      	movs	r2, #61	; 0x3d
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2270      	movs	r2, #112	; 0x70
 8002a74:	4393      	bics	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00f      	beq.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10c      	bne.n	8002ace <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	4393      	bics	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223d      	movs	r2, #61	; 0x3d
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223c      	movs	r2, #60	; 0x3c
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40014000 	.word	0x40014000

08002af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <__libc_init_array>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	2600      	movs	r6, #0
 8002b18:	4d0c      	ldr	r5, [pc, #48]	; (8002b4c <__libc_init_array+0x38>)
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	; (8002b50 <__libc_init_array+0x3c>)
 8002b1c:	1b64      	subs	r4, r4, r5
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	42a6      	cmp	r6, r4
 8002b22:	d109      	bne.n	8002b38 <__libc_init_array+0x24>
 8002b24:	2600      	movs	r6, #0
 8002b26:	f000 f821 	bl	8002b6c <_init>
 8002b2a:	4d0a      	ldr	r5, [pc, #40]	; (8002b54 <__libc_init_array+0x40>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	; (8002b58 <__libc_init_array+0x44>)
 8002b2e:	1b64      	subs	r4, r4, r5
 8002b30:	10a4      	asrs	r4, r4, #2
 8002b32:	42a6      	cmp	r6, r4
 8002b34:	d105      	bne.n	8002b42 <__libc_init_array+0x2e>
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	00b3      	lsls	r3, r6, #2
 8002b3a:	58eb      	ldr	r3, [r5, r3]
 8002b3c:	4798      	blx	r3
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7ee      	b.n	8002b20 <__libc_init_array+0xc>
 8002b42:	00b3      	lsls	r3, r6, #2
 8002b44:	58eb      	ldr	r3, [r5, r3]
 8002b46:	4798      	blx	r3
 8002b48:	3601      	adds	r6, #1
 8002b4a:	e7f2      	b.n	8002b32 <__libc_init_array+0x1e>
 8002b4c:	08002bb4 	.word	0x08002bb4
 8002b50:	08002bb4 	.word	0x08002bb4
 8002b54:	08002bb4 	.word	0x08002bb4
 8002b58:	08002bbc 	.word	0x08002bbc

08002b5c <memset>:
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	1812      	adds	r2, r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	7019      	strb	r1, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
