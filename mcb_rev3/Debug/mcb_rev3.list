
mcb_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022a8  080022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080022f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080022f0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000803a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f7  00000000  00000000  0002806e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00029968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001617b  00000000  00000000  0002a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d5f  00000000  00000000  000409ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007545d  00000000  00000000  0004770a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bcb67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  000bcbe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002290 	.word	0x08002290

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002290 	.word	0x08002290

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fba0 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f805 	bl	800040a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f88e 	bl	8000520 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8000404:	f000 f84a 	bl	800049c <_ZL12MX_SPI2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x14>

0800040a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040a:	b590      	push	{r4, r7, lr}
 800040c:	b093      	sub	sp, #76	; 0x4c
 800040e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	2414      	movs	r4, #20
 8000412:	193b      	adds	r3, r7, r4
 8000414:	0018      	movs	r0, r3
 8000416:	2334      	movs	r3, #52	; 0x34
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f001 ff30 	bl	8002280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f001 ff29 	bl	8002280 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042e:	0021      	movs	r1, r4
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2202      	movs	r2, #2
 8000434:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2210      	movs	r2, #16
 8000440:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000448:	187b      	adds	r3, r7, r1
 800044a:	0018      	movs	r0, r3
 800044c:	f001 f97c 	bl	8001748 <HAL_RCC_OscConfig>
 8000450:	0003      	movs	r3, r0
 8000452:	1e5a      	subs	r2, r3, #1
 8000454:	4193      	sbcs	r3, r2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 800045c:	f000 f914 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2207      	movs	r2, #7
 8000464:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fce9 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000482:	0003      	movs	r3, r0
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	4193      	sbcs	r3, r2
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800048e:	f000 f8fb 	bl	8000688 <Error_Handler>
  }
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b013      	add	sp, #76	; 0x4c
 8000498:	bd90      	pop	{r4, r7, pc}
	...

0800049c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004a0:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004a2:	4a1e      	ldr	r2, [pc, #120]	; (800051c <_ZL12MX_SPI2_Initv+0x80>)
 80004a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004a8:	2282      	movs	r2, #130	; 0x82
 80004aa:	0052      	lsls	r2, r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004b6:	22e0      	movs	r2, #224	; 0xe0
 80004b8:	00d2      	lsls	r2, r2, #3
 80004ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004be:	2202      	movs	r2, #2
 80004c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004d2:	2210      	movs	r2, #16
 80004d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004ea:	2207      	movs	r2, #7
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <_ZL12MX_SPI2_Initv+0x7c>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fe01 	bl	8002104 <HAL_SPI_Init>
 8000502:	0003      	movs	r3, r0
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	4193      	sbcs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <_ZL12MX_SPI2_Initv+0x76>
  {
    Error_Handler();
 800050e:	f000 f8bb 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028
 800051c:	40003800 	.word	0x40003800

08000520 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	240c      	movs	r4, #12
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2314      	movs	r3, #20
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f001 fea5 	bl	8002280 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b50      	ldr	r3, [pc, #320]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b4f      	ldr	r3, [pc, #316]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0289      	lsls	r1, r1, #10
 8000540:	430a      	orrs	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	029b      	lsls	r3, r3, #10
 800054c:	4013      	ands	r3, r2
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b49      	ldr	r3, [pc, #292]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b48      	ldr	r3, [pc, #288]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0309      	lsls	r1, r1, #12
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b45      	ldr	r3, [pc, #276]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	031b      	lsls	r3, r3, #12
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b41      	ldr	r3, [pc, #260]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	02c9      	lsls	r1, r1, #11
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	4b3e      	ldr	r3, [pc, #248]	; (8000678 <_ZL12MX_GPIO_Initv+0x158>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	02db      	lsls	r3, r3, #11
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin|SS_REGEN_Pin, GPIO_PIN_RESET);
 800058a:	23d8      	movs	r3, #216	; 0xd8
 800058c:	00d9      	lsls	r1, r3, #3
 800058e:	2390      	movs	r3, #144	; 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2200      	movs	r2, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f8b9 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CON_MOTOR_Pin|CON_MPPT_Pin, GPIO_PIN_RESET);
 800059a:	4b38      	ldr	r3, [pc, #224]	; (800067c <_ZL12MX_GPIO_Initv+0x15c>)
 800059c:	2200      	movs	r2, #0
 800059e:	2130      	movs	r1, #48	; 0x30
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f8b3 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REGEN_BRK_GPIO_Port, REGEN_BRK_Pin, GPIO_PIN_RESET);
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	4835      	ldr	r0, [pc, #212]	; (8000680 <_ZL12MX_GPIO_Initv+0x160>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	0019      	movs	r1, r3
 80005b0:	f001 f8ac 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PRE_MOTOR_Pin PRE_MPPT_Pin SS_CRUISE_Pin SS_REGEN_Pin */
  GPIO_InitStruct.Pin = PRE_MOTOR_Pin|PRE_MPPT_Pin|SS_CRUISE_Pin|SS_REGEN_Pin;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	22d8      	movs	r2, #216	; 0xd8
 80005b8:	00d2      	lsls	r2, r2, #3
 80005ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	193a      	adds	r2, r7, r4
 80005d0:	2390      	movs	r3, #144	; 0x90
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 ff20 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : CON_MOTOR_Pin CON_MPPT_Pin */
  GPIO_InitStruct.Pin = CON_MOTOR_Pin|CON_MPPT_Pin;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2230      	movs	r2, #48	; 0x30
 80005e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	000c      	movs	r4, r1
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_ZL12MX_GPIO_Initv+0x15c>)
 80005fc:	0019      	movs	r1, r3
 80005fe:	0010      	movs	r0, r2
 8000600:	f000 ff0c 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_TRIP_Pin */
  GPIO_InitStruct.Pin = CHG_TRIP_Pin;
 8000604:	0021      	movs	r1, r4
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <_ZL12MX_GPIO_Initv+0x164>)
 8000610:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2201      	movs	r2, #1
 8000616:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_TRIP_GPIO_Port, &GPIO_InitStruct);
 8000618:	000c      	movs	r4, r1
 800061a:	187b      	adds	r3, r7, r1
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <_ZL12MX_GPIO_Initv+0x160>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f000 fefb 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : CRUISE_IN_Pin */
  GPIO_InitStruct.Pin = CRUISE_IN_Pin;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_ZL12MX_GPIO_Initv+0x164>)
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CRUISE_IN_GPIO_Port, &GPIO_InitStruct);
 800063a:	000c      	movs	r4, r1
 800063c:	187b      	adds	r3, r7, r1
 800063e:	4a10      	ldr	r2, [pc, #64]	; (8000680 <_ZL12MX_GPIO_Initv+0x160>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f000 feea 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : REGEN_BRK_Pin */
  GPIO_InitStruct.Pin = REGEN_BRK_Pin;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	00d2      	lsls	r2, r2, #3
 8000650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(REGEN_BRK_GPIO_Port, &GPIO_InitStruct);
 8000664:	187b      	adds	r3, r7, r1
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <_ZL12MX_GPIO_Initv+0x160>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f000 fed6 	bl	800141c <HAL_GPIO_Init>

}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b009      	add	sp, #36	; 0x24
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	48000800 	.word	0x48000800
 8000680:	48000400 	.word	0x48000400
 8000684:	10310000 	.word	0x10310000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	619a      	str	r2, [r3, #24]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	69da      	ldr	r2, [r3, #28]
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0549      	lsls	r1, r1, #21
 80006bc:	430a      	orrs	r2, r1
 80006be:	61da      	str	r2, [r3, #28]
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_MspInit+0x44>)
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	055b      	lsls	r3, r3, #21
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2314      	movs	r3, #20
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f001 fdc6 	bl	8002280 <memset>
  if(hspi->Instance==SPI2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1c      	ldr	r2, [pc, #112]	; (800076c <HAL_SPI_MspInit+0x90>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d132      	bne.n	8000764 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_SPI_MspInit+0x94>)
 8000700:	69da      	ldr	r2, [r3, #28]
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <HAL_SPI_MspInit+0x94>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	01c9      	lsls	r1, r1, #7
 8000708:	430a      	orrs	r2, r1
 800070a:	61da      	str	r2, [r3, #28]
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_SPI_MspInit+0x94>)
 800070e:	69da      	ldr	r2, [r3, #28]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	01db      	lsls	r3, r3, #7
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_SPI_MspInit+0x94>)
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_SPI_MspInit+0x94>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	02c9      	lsls	r1, r1, #11
 8000724:	430a      	orrs	r2, r1
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_SPI_MspInit+0x94>)
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	02db      	lsls	r3, r3, #11
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000736:	2114      	movs	r1, #20
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22a0      	movs	r2, #160	; 0xa0
 800073c:	0212      	lsls	r2, r2, #8
 800073e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_SPI_MspInit+0x98>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f000 fe5c 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b00a      	add	sp, #40	; 0x28
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40003800 	.word	0x40003800
 8000770:	40021000 	.word	0x40021000
 8000774:	48000400 	.word	0x48000400

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 fa14 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08d      	sub	sp, #52	; 0x34
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2100      	movs	r1, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fb3b 	bl	8000e3c <HAL_CAN_GetRxFifoFillLevel>
 80007c6:	0003      	movs	r3, r0
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	4193      	sbcs	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d02e      	beq.n	8000830 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 80007d2:	2308      	movs	r3, #8
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	2410      	movs	r4, #16
 80007d8:	193a      	adds	r2, r7, r4
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	2100      	movs	r1, #0
 80007de:	f000 fa11 	bl	8000c04 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d103      	bne.n	80007f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 80007ea:	2310      	movs	r3, #16
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	e002      	b.n	80007f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80007f2:	2310      	movs	r3, #16
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 f829 	bl	8000850 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 80007fe:	0003      	movs	r3, r0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8000802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0d9      	beq.n	80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8000808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	001a      	movs	r2, r3
 800080e:	2310      	movs	r3, #16
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d1d1      	bne.n	80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8000818:	2308      	movs	r3, #8
 800081a:	18fa      	adds	r2, r7, r3
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f000 f838 	bl	8000896 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	0018      	movs	r0, r3
 800082a:	f000 f823 	bl	8000874 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800082e:	e7c5      	b.n	80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b00d      	add	sp, #52	; 0x34
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <CEC_CAN_IRQHandler+0x14>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fb27 	bl	8000e92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000104 	.word	0x20000104

08000850 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
{}
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8cc 	bl	80009fc <_ZN14RX_BINARY_TREE11FindElementEm>
 8000864:	0003      	movs	r3, r0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	2000008c 	.word	0x2000008c

08000874 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:
	    this->sendTransmitBufferData();
	}
}

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	0010      	movs	r0, r2
 800088c:	4798      	blx	r3
    }
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}

08000896 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3312      	adds	r3, #18
 80008a4:	240f      	movs	r4, #15
 80008a6:	193a      	adds	r2, r7, r4
 80008a8:	6839      	ldr	r1, [r7, #0]
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f806 	bl	80008bc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	781b      	ldrb	r3, [r3, #0]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b005      	add	sp, #20
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	8b5a      	ldrh	r2, [r3, #26]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	8b1b      	ldrh	r3, [r3, #24]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d10d      	bne.n	80008f0 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	7f1b      	ldrb	r3, [r3, #28]
 80008d8:	2201      	movs	r2, #1
 80008da:	4053      	eors	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
        {
            //Fail to write since we are full
            if(success)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d025      	beq.n	8000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                *success = false;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
            if(success)
 80008ee:	e021      	b.n	8000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            }
        }else
        {
            if(success)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
            {
                *success = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8b19      	ldrh	r1, [r3, #24]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	0018      	movs	r0, r3
 8000906:	f000 f819 	bl	800093c <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	8b1b      	ldrh	r3, [r3, #24]
 800090e:	3301      	adds	r3, #1
 8000910:	2103      	movs	r1, #3
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fd68 	bl	80003e8 <__aeabi_idivmod>
 8000918:	000b      	movs	r3, r1
 800091a:	b29a      	uxth	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	831a      	strh	r2, [r3, #24]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	8b1a      	ldrh	r2, [r3, #24]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	8b5b      	ldrh	r3, [r3, #26]
 8000928:	429a      	cmp	r2, r3
 800092a:	d103      	bne.n	8000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            {
                emptyNotFull = false;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2200      	movs	r2, #0
 8000930:	771a      	strb	r2, [r3, #28]
            }
        }
    }
 8000932:	e7ff      	b.n	8000934 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	230a      	movs	r3, #10
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	1c0a      	adds	r2, r1, #0
 800094c:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 800094e:	2316      	movs	r3, #22
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	2200      	movs	r2, #0
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	2316      	movs	r3, #22
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d815      	bhi.n	800098c <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8000960:	2416      	movs	r4, #22
 8000962:	193b      	adds	r3, r7, r4
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	18d1      	adds	r1, r2, r3
 800096a:	230a      	movs	r3, #10
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	193b      	adds	r3, r7, r4
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	7808      	ldrb	r0, [r1, #0]
 8000976:	68f9      	ldr	r1, [r7, #12]
 8000978:	00d2      	lsls	r2, r2, #3
 800097a:	188a      	adds	r2, r1, r2
 800097c:	1c01      	adds	r1, r0, #0
 800097e:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8000980:	193b      	adds	r3, r7, r4
 8000982:	881a      	ldrh	r2, [r3, #0]
 8000984:	193b      	adds	r3, r7, r4
 8000986:	3201      	adds	r2, #1
 8000988:	801a      	strh	r2, [r3, #0]
 800098a:	e7e4      	b.n	8000956 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b007      	add	sp, #28
 8000992:	bd90      	pop	{r4, r7, pc}

08000994 <_Z41__static_initialization_and_destruction_0ii>:
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d107      	bne.n	80009b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d103      	bne.n	80009b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f814 	bl	80009dc <_ZN14RX_BINARY_TREEC1Ev>
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0000ffff 	.word	0x0000ffff
 80009c0:	2000008c 	.word	0x2000008c

080009c4 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff ffe1 	bl	8000994 <_Z41__static_initialization_and_destruction_0ii>
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	0000ffff 	.word	0x0000ffff

080009dc <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	671a      	str	r2, [r3, #112]	; 0x70
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2274      	movs	r2, #116	; 0x74
 80009ee:	2100      	movs	r1, #0
 80009f0:	5299      	strh	r1, [r3, r2]
{}
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_ZN14RX_BINARY_TREE11FindElementEm>:
    }
    return false;
}

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f80d 	bl	8000a2e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000a14:	0003      	movs	r3, r0
 8000a16:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e001      	b.n	8000a26 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b004      	add	sp, #16
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	e034      	b.n	8000aae <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f833 	bl	8000ab6 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000a50:	0002      	movs	r2, r0
 8000a52:	2301      	movs	r3, #1
 8000a54:	1c19      	adds	r1, r3, #0
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	db01      	blt.n	8000a60 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	1c19      	adds	r1, r3, #0
 8000a60:	b2cb      	uxtb	r3, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	6859      	ldr	r1, [r3, #4]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ffdd 	bl	8000a2e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000a74:	0003      	movs	r3, r0
 8000a76:	e01a      	b.n	8000aae <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f819 	bl	8000ab6 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8000a84:	0002      	movs	r2, r0
 8000a86:	2301      	movs	r3, #1
 8000a88:	1c19      	adds	r1, r3, #0
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	dc01      	bgt.n	8000a94 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8000a90:	2300      	movs	r3, #0
 8000a92:	1c19      	adds	r1, r3, #0
 8000a94:	b2cb      	uxtb	r3, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	6899      	ldr	r1, [r3, #8]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ffc3 	bl	8000a2e <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	e000      	b.n	8000aae <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8000aac:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:
        return 0;  
    return N->height;  
}

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	e009      	b.n	8000ae0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	e002      	b.n	8000ae0 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b12:	f7ff fe4a 	bl	80007aa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b16:	f001 fb8f 	bl	8002238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fc6b 	bl	80003f4 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   r0, =_estack
 8000b20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	080022e4 	.word	0x080022e4
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	20000130 	.word	0x20000130

08000b38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_COMP_IRQHandler>
	...

08000b3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_Init+0x24>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_Init+0x24>)
 8000b46:	2110      	movs	r1, #16
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f809 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b52:	f7ff fd9f 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_InitTick+0x5c>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	23fa      	movs	r3, #250	; 0xfa
 8000b78:	0098      	lsls	r0, r3, #2
 8000b7a:	f7ff fac5 	bl	8000108 <__udivsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff fac0 	bl	8000108 <__udivsi3>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fc39 	bl	8001402 <HAL_SYSTICK_Config>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00f      	b.n	8000bb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d80b      	bhi.n	8000bb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fc16 	bl	80013d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_InitTick+0x64>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	18d2      	adds	r2, r2, r3
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_IncTick+0x20>)
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000008 	.word	0x20000008
 8000bec:	2000012c 	.word	0x2000012c

08000bf0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	2000012c 	.word	0x2000012c

08000c04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c12:	2017      	movs	r0, #23
 8000c14:	183b      	adds	r3, r7, r0
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	2120      	movs	r1, #32
 8000c1a:	5c52      	ldrb	r2, [r2, r1]
 8000c1c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c1e:	183b      	adds	r3, r7, r0
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_CAN_GetRxMessage+0x2e>
 8000c26:	2317      	movs	r3, #23
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d000      	beq.n	8000c32 <HAL_CAN_GetRxMessage+0x2e>
 8000c30:	e0f8      	b.n	8000e24 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10e      	bne.n	8000c56 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	d117      	bne.n	8000c74 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0392      	lsls	r2, r2, #14
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e0ee      	b.n	8000e34 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d108      	bne.n	8000c74 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	0392      	lsls	r2, r2, #14
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e0df      	b.n	8000e34 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	321b      	adds	r2, #27
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	58d3      	ldr	r3, [r2, r3]
 8000c80:	2204      	movs	r2, #4
 8000c82:	401a      	ands	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	321b      	adds	r2, #27
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	58d3      	ldr	r3, [r2, r3]
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	055b      	lsls	r3, r3, #21
 8000ca0:	0d5a      	lsrs	r2, r3, #21
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	e00a      	b.n	8000cbe <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	321b      	adds	r2, #27
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	58d3      	ldr	r3, [r2, r3]
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	321b      	adds	r2, #27
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	58d3      	ldr	r3, [r2, r3]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	401a      	ands	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	331b      	adds	r3, #27
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	3304      	adds	r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	331b      	adds	r3, #27
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	22ff      	movs	r2, #255	; 0xff
 8000cfe:	401a      	ands	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	331b      	adds	r3, #27
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	18d3      	adds	r3, r2, r3
 8000d10:	3304      	adds	r3, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	0c1a      	lsrs	r2, r3, #16
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	23dc      	movs	r3, #220	; 0xdc
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	188a      	adds	r2, r1, r2
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	23dc      	movs	r3, #220	; 0xdc
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	188a      	adds	r2, r1, r2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	0a1a      	lsrs	r2, r3, #8
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	23dc      	movs	r3, #220	; 0xdc
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	188a      	adds	r2, r1, r2
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	0c1a      	lsrs	r2, r3, #16
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	23dc      	movs	r3, #220	; 0xdc
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	188a      	adds	r2, r1, r2
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	0e1a      	lsrs	r2, r3, #24
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3303      	adds	r3, #3
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	23de      	movs	r3, #222	; 0xde
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	188a      	adds	r2, r1, r2
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	23de      	movs	r3, #222	; 0xde
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	188a      	adds	r2, r1, r2
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	0a1a      	lsrs	r2, r3, #8
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3305      	adds	r3, #5
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	23de      	movs	r3, #222	; 0xde
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	188a      	adds	r2, r1, r2
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	0c1a      	lsrs	r2, r3, #16
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	23de      	movs	r3, #222	; 0xde
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	188a      	adds	r2, r1, r2
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0e1a      	lsrs	r2, r3, #24
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3307      	adds	r3, #7
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d108      	bne.n	8000e10 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2120      	movs	r1, #32
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e007      	b.n	8000e34 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	02d2      	lsls	r2, r2, #11
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
  }
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e4a:	200b      	movs	r0, #11
 8000e4c:	183b      	adds	r3, r7, r0
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	2120      	movs	r1, #32
 8000e52:	5c52      	ldrb	r2, [r2, r1]
 8000e54:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e56:	183b      	adds	r3, r7, r0
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d004      	beq.n	8000e68 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8000e5e:	230b      	movs	r3, #11
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d10f      	bne.n	8000e88 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	e005      	b.n	8000e88 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2203      	movs	r2, #3
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b08a      	sub	sp, #40	; 0x28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d100      	bne.n	8000ed8 <HAL_CAN_IRQHandler+0x46>
 8000ed6:	e084      	b.n	8000fe2 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	d024      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2202      	movs	r2, #2
 8000eec:	4013      	ands	r3, r2
 8000eee:	d004      	beq.n	8000efa <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f97e 	bl	80011f4 <HAL_CAN_TxMailbox0CompleteCallback>
 8000ef8:	e017      	b.n	8000f2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2204      	movs	r2, #4
 8000efe:	4013      	ands	r3, r2
 8000f00:	d005      	beq.n	8000f0e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0c:	e00d      	b.n	8000f2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2208      	movs	r2, #8
 8000f12:	4013      	ands	r3, r2
 8000f14:	d005      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0152      	lsls	r2, r2, #5
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	e003      	b.n	8000f2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 f97d 	bl	8001224 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4013      	ands	r3, r2
 8000f32:	d028      	beq.n	8000f86 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d004      	beq.n	8000f52 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f95a 	bl	8001204 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f50:	e019      	b.n	8000f86 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d005      	beq.n	8000f68 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	0192      	lsls	r2, r2, #6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	e00e      	b.n	8000f86 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d005      	beq.n	8000f7e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	01d2      	lsls	r2, r2, #7
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7c:	e003      	b.n	8000f86 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 f957 	bl	8001234 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d028      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	0252      	lsls	r2, r2, #9
 8000f98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d004      	beq.n	8000fae <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f934 	bl	8001214 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fac:	e019      	b.n	8000fe2 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	02db      	lsls	r3, r3, #11
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d005      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0212      	lsls	r2, r2, #8
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e00e      	b.n	8000fe2 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d005      	beq.n	8000fda <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	0252      	lsls	r2, r2, #9
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd8:	e003      	b.n	8000fe2 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 f931 	bl	8001244 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d00c      	beq.n	8001004 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2210      	movs	r2, #16
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d008      	beq.n	8001004 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2210      	movs	r2, #16
 8001002:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	2204      	movs	r2, #4
 8001008:	4013      	ands	r3, r2
 800100a:	d00b      	beq.n	8001024 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2208      	movs	r2, #8
 8001010:	4013      	ands	r3, r2
 8001012:	d007      	beq.n	8001024 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2208      	movs	r2, #8
 800101a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f918 	bl	8001254 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	2202      	movs	r2, #2
 8001028:	4013      	ands	r3, r2
 800102a:	d009      	beq.n	8001040 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2203      	movs	r2, #3
 8001034:	4013      	ands	r3, r2
 8001036:	d003      	beq.n	8001040 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fbba 	bl	80007b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	2240      	movs	r2, #64	; 0x40
 8001044:	4013      	ands	r3, r2
 8001046:	d00c      	beq.n	8001062 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2210      	movs	r2, #16
 800104c:	4013      	ands	r3, r2
 800104e:	d008      	beq.n	8001062 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	4313      	orrs	r3, r2
 8001058:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2210      	movs	r2, #16
 8001060:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	2220      	movs	r2, #32
 8001066:	4013      	ands	r3, r2
 8001068:	d00b      	beq.n	8001082 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2208      	movs	r2, #8
 800106e:	4013      	ands	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2208      	movs	r2, #8
 8001078:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f000 f8f9 	bl	8001274 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2210      	movs	r2, #16
 8001086:	4013      	ands	r3, r2
 8001088:	d009      	beq.n	800109e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2203      	movs	r2, #3
 8001092:	4013      	ands	r3, r2
 8001094:	d003      	beq.n	800109e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 f8e3 	bl	8001264 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800109e:	6a3a      	ldr	r2, [r7, #32]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	029b      	lsls	r3, r3, #10
 80010a4:	4013      	ands	r3, r2
 80010a6:	d00b      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2210      	movs	r2, #16
 80010ac:	4013      	ands	r3, r2
 80010ae:	d007      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2210      	movs	r2, #16
 80010b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f8e2 	bl	8001284 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010c0:	6a3a      	ldr	r2, [r7, #32]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d00b      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2208      	movs	r2, #8
 80010ce:	4013      	ands	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 f8d9 	bl	8001294 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_CAN_IRQHandler+0x25c>
 80010ec:	e071      	b.n	80011d2 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2204      	movs	r2, #4
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_CAN_IRQHandler+0x266>
 80010f6:	e068      	b.n	80011ca <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010f8:	6a3a      	ldr	r2, [r7, #32]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4013      	ands	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001108:	d003      	beq.n	8001112 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	2201      	movs	r2, #1
 800110e:	4313      	orrs	r3, r2
 8001110:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001112:	6a3a      	ldr	r2, [r7, #32]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4013      	ands	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001122:	d003      	beq.n	800112c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	2202      	movs	r2, #2
 8001128:	4313      	orrs	r3, r2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4013      	ands	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2204      	movs	r2, #4
 800113a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800113c:	d003      	beq.n	8001146 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	2204      	movs	r2, #4
 8001142:	4313      	orrs	r3, r2
 8001144:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d03c      	beq.n	80011ca <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2270      	movs	r2, #112	; 0x70
 8001154:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001156:	d038      	beq.n	80011ca <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2270      	movs	r2, #112	; 0x70
 800115c:	4013      	ands	r3, r2
 800115e:	2b30      	cmp	r3, #48	; 0x30
 8001160:	d016      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2fe>
 8001162:	d804      	bhi.n	800116e <HAL_CAN_IRQHandler+0x2dc>
 8001164:	2b10      	cmp	r3, #16
 8001166:	d009      	beq.n	800117c <HAL_CAN_IRQHandler+0x2ea>
 8001168:	2b20      	cmp	r3, #32
 800116a:	d00c      	beq.n	8001186 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800116c:	e025      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800116e:	2b50      	cmp	r3, #80	; 0x50
 8001170:	d018      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x312>
 8001172:	2b60      	cmp	r3, #96	; 0x60
 8001174:	d01b      	beq.n	80011ae <HAL_CAN_IRQHandler+0x31c>
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d00f      	beq.n	800119a <HAL_CAN_IRQHandler+0x308>
            break;
 800117a:	e01e      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	2208      	movs	r2, #8
 8001180:	4313      	orrs	r3, r2
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001184:	e019      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	2210      	movs	r2, #16
 800118a:	4313      	orrs	r3, r2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800118e:	e014      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2220      	movs	r2, #32
 8001194:	4313      	orrs	r3, r2
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001198:	e00f      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	4313      	orrs	r3, r2
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011a2:	e00a      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	4313      	orrs	r3, r2
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011ac:	e005      	b.n	80011ba <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	0052      	lsls	r2, r2, #1
 80011b4:	4313      	orrs	r3, r2
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011b8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2170      	movs	r1, #112	; 0x70
 80011c6:	438a      	bics	r2, r1
 80011c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2204      	movs	r2, #4
 80011d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 f85c 	bl	80012a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b00a      	add	sp, #40	; 0x28
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	0002      	movs	r2, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b7f      	cmp	r3, #127	; 0x7f
 80012c8:	d828      	bhi.n	800131c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <__NVIC_SetPriority+0xd4>)
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	33c0      	adds	r3, #192	; 0xc0
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	589b      	ldr	r3, [r3, r2]
 80012da:	1dfa      	adds	r2, r7, #7
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	0011      	movs	r1, r2
 80012e0:	2203      	movs	r2, #3
 80012e2:	400a      	ands	r2, r1
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	21ff      	movs	r1, #255	; 0xff
 80012e8:	4091      	lsls	r1, r2
 80012ea:	000a      	movs	r2, r1
 80012ec:	43d2      	mvns	r2, r2
 80012ee:	401a      	ands	r2, r3
 80012f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	22ff      	movs	r2, #255	; 0xff
 80012f8:	401a      	ands	r2, r3
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	2303      	movs	r3, #3
 8001302:	4003      	ands	r3, r0
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <__NVIC_SetPriority+0xd4>)
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	430a      	orrs	r2, r1
 8001314:	33c0      	adds	r3, #192	; 0xc0
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800131a:	e031      	b.n	8001380 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <__NVIC_SetPriority+0xd8>)
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0019      	movs	r1, r3
 8001324:	230f      	movs	r3, #15
 8001326:	400b      	ands	r3, r1
 8001328:	3b08      	subs	r3, #8
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3306      	adds	r3, #6
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1dfa      	adds	r2, r7, #7
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	0011      	movs	r1, r2
 800133c:	2203      	movs	r2, #3
 800133e:	400a      	ands	r2, r1
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	21ff      	movs	r1, #255	; 0xff
 8001344:	4091      	lsls	r1, r2
 8001346:	000a      	movs	r2, r1
 8001348:	43d2      	mvns	r2, r2
 800134a:	401a      	ands	r2, r3
 800134c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	22ff      	movs	r2, #255	; 0xff
 8001354:	401a      	ands	r2, r3
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	0018      	movs	r0, r3
 800135c:	2303      	movs	r3, #3
 800135e:	4003      	ands	r3, r0
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <__NVIC_SetPriority+0xd8>)
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	001c      	movs	r4, r3
 800136c:	230f      	movs	r3, #15
 800136e:	4023      	ands	r3, r4
 8001370:	3b08      	subs	r3, #8
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	430a      	orrs	r2, r1
 8001376:	3306      	adds	r3, #6
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	18c3      	adds	r3, r0, r3
 800137c:	3304      	adds	r3, #4
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b003      	add	sp, #12
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <SysTick_Config+0x40>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e010      	b.n	80013c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <SysTick_Config+0x44>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	3a01      	subs	r2, #1
 80013ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	2301      	movs	r3, #1
 80013b0:	425b      	negs	r3, r3
 80013b2:	2103      	movs	r1, #3
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ff7d 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SysTick_Config+0x44>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x44>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	00ffffff 	.word	0x00ffffff
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	210f      	movs	r1, #15
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	1c02      	adds	r2, r0, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	0011      	movs	r1, r2
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff ffbf 	bl	8001390 <SysTick_Config>
 8001412:	0003      	movs	r3, r0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e155      	b.n	80016d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d100      	bne.n	8001444 <HAL_GPIO_Init+0x28>
 8001442:	e146      	b.n	80016d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d00b      	beq.n	8001464 <HAL_GPIO_Init+0x48>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	2b11      	cmp	r3, #17
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d130      	bne.n	80014c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	409a      	lsls	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	43da      	mvns	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	2201      	movs	r2, #1
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0xea>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b12      	cmp	r3, #18
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2207      	movs	r2, #7
 8001518:	4013      	ands	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	409a      	lsls	r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2107      	movs	r1, #7
 8001532:	400b      	ands	r3, r1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	6939      	ldr	r1, [r7, #16]
 800154c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	401a      	ands	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	055b      	lsls	r3, r3, #21
 800158a:	4013      	ands	r3, r2
 800158c:	d100      	bne.n	8001590 <HAL_GPIO_Init+0x174>
 800158e:	e0a0      	b.n	80016d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x2d8>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	589b      	ldr	r3, [r3, r2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	43da      	mvns	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	2390      	movs	r3, #144	; 0x90
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x1ee>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a47      	ldr	r2, [pc, #284]	; (80016f8 <HAL_GPIO_Init+0x2dc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x1ea>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_GPIO_Init+0x2e0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x1e6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a45      	ldr	r2, [pc, #276]	; (8001700 <HAL_GPIO_Init+0x2e4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x1e2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_GPIO_Init+0x2e8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x1de>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 800160a:	2300      	movs	r3, #0
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	2103      	movs	r1, #3
 8001610:	400a      	ands	r2, r1
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2d8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	029b      	lsls	r3, r3, #10
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	035b      	lsls	r3, r3, #13
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	039b      	lsls	r3, r3, #14
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	40da      	lsrs	r2, r3
 80016e0:	1e13      	subs	r3, r2, #0
 80016e2:	d000      	beq.n	80016e6 <HAL_GPIO_Init+0x2ca>
 80016e4:	e6a2      	b.n	800142c <HAL_GPIO_Init+0x10>
  } 
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b006      	add	sp, #24
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	48001000 	.word	0x48001000
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	0008      	movs	r0, r1
 8001716:	0011      	movs	r1, r2
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	1c7b      	adds	r3, r7, #1
 8001720:	1c0a      	adds	r2, r1, #0
 8001722:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	1c7b      	adds	r3, r7, #1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001736:	1cbb      	adds	r3, r7, #2
 8001738:	881a      	ldrh	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f000 fb76 	bl	8001e48 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d100      	bne.n	8001768 <HAL_RCC_OscConfig+0x20>
 8001766:	e08e      	b.n	8001886 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001768:	4bc5      	ldr	r3, [pc, #788]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	220c      	movs	r2, #12
 800176e:	4013      	ands	r3, r2
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00e      	beq.n	8001792 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001774:	4bc2      	ldr	r3, [pc, #776]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	220c      	movs	r2, #12
 800177a:	4013      	ands	r3, r2
 800177c:	2b08      	cmp	r3, #8
 800177e:	d117      	bne.n	80017b0 <HAL_RCC_OscConfig+0x68>
 8001780:	4bbf      	ldr	r3, [pc, #764]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	401a      	ands	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	429a      	cmp	r2, r3
 8001790:	d10e      	bne.n	80017b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4bbb      	ldr	r3, [pc, #748]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	4013      	ands	r3, r2
 800179c:	d100      	bne.n	80017a0 <HAL_RCC_OscConfig+0x58>
 800179e:	e071      	b.n	8001884 <HAL_RCC_OscConfig+0x13c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d000      	beq.n	80017aa <HAL_RCC_OscConfig+0x62>
 80017a8:	e06c      	b.n	8001884 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 fb4c 	bl	8001e48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x80>
 80017b8:	4bb1      	ldr	r3, [pc, #708]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4bb0      	ldr	r3, [pc, #704]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e02f      	b.n	8001828 <HAL_RCC_OscConfig+0xe0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0xa2>
 80017d0:	4bab      	ldr	r3, [pc, #684]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4baa      	ldr	r3, [pc, #680]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017d6:	49ab      	ldr	r1, [pc, #684]	; (8001a84 <HAL_RCC_OscConfig+0x33c>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4ba7      	ldr	r3, [pc, #668]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017e2:	49a9      	ldr	r1, [pc, #676]	; (8001a88 <HAL_RCC_OscConfig+0x340>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e01e      	b.n	8001828 <HAL_RCC_OscConfig+0xe0>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10e      	bne.n	8001810 <HAL_RCC_OscConfig+0xc8>
 80017f2:	4ba3      	ldr	r3, [pc, #652]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	02c9      	lsls	r1, r1, #11
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b9e      	ldr	r3, [pc, #632]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xe0>
 8001810:	4b9b      	ldr	r3, [pc, #620]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b9a      	ldr	r3, [pc, #616]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001816:	499b      	ldr	r1, [pc, #620]	; (8001a84 <HAL_RCC_OscConfig+0x33c>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b98      	ldr	r3, [pc, #608]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b97      	ldr	r3, [pc, #604]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001822:	4999      	ldr	r1, [pc, #612]	; (8001a88 <HAL_RCC_OscConfig+0x340>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f9de 	bl	8000bf0 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff f9d9 	bl	8000bf0 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e2fd      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0xf2>
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff f9c9 	bl	8000bf0 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff f9c4 	bl	8000bf0 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2e8      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x11c>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x14a>
 8001890:	e06c      	b.n	800196c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001892:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	d00e      	beq.n	80018ba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800189c:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d11f      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1a0>
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	401a      	ands	r2, r3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x188>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e2bb      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	22f8      	movs	r2, #248	; 0xf8
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	e041      	b.n	800196c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d024      	beq.n	800193a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f0:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f978 	bl	8000bf0 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff f973 	bl	8000bf0 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e297      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d0f1      	beq.n	8001906 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	22f8      	movs	r2, #248	; 0xf8
 8001928:	4393      	bics	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00da      	lsls	r2, r3, #3
 8001932:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e018      	b.n	800196c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001940:	2101      	movs	r1, #1
 8001942:	438a      	bics	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff f953 	bl	8000bf0 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff f94e 	bl	8000bf0 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e272      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d1f1      	bne.n	8001950 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	4013      	ands	r3, r2
 8001974:	d036      	beq.n	80019e4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b40      	ldr	r3, [pc, #256]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001984:	2101      	movs	r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff f931 	bl	8000bf0 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff f92c 	bl	8000bf0 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e250      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f1      	beq.n	8001994 <HAL_RCC_OscConfig+0x24c>
 80019b0:	e018      	b.n	80019e4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80019b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	438a      	bics	r2, r1
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff f917 	bl	8000bf0 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff f912 	bl	8000bf0 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e236      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f1      	bne.n	80019c8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2204      	movs	r2, #4
 80019ea:	4013      	ands	r3, r2
 80019ec:	d100      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2a8>
 80019ee:	e0b5      	b.n	8001b5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f0:	231f      	movs	r3, #31
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0549      	lsls	r1, r1, #21
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a20:	231f      	movs	r3, #31
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_RCC_OscConfig+0x344>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d11a      	bne.n	8001a6a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_RCC_OscConfig+0x344>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_RCC_OscConfig+0x344>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0049      	lsls	r1, r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f8d5 	bl	8000bf0 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4c:	f7ff f8d0 	bl	8000bf0 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1f4      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x344>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10e      	bne.n	8001a90 <HAL_RCC_OscConfig+0x348>
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <HAL_RCC_OscConfig+0x338>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	621a      	str	r2, [r3, #32]
 8001a7e:	e035      	b.n	8001aec <HAL_RCC_OscConfig+0x3a4>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	fffeffff 	.word	0xfffeffff
 8001a88:	fffbffff 	.word	0xfffbffff
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x36a>
 8001a98:	4bca      	ldr	r3, [pc, #808]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	4bc9      	ldr	r3, [pc, #804]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	621a      	str	r2, [r3, #32]
 8001aa4:	4bc7      	ldr	r3, [pc, #796]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001aa6:	6a1a      	ldr	r2, [r3, #32]
 8001aa8:	4bc6      	ldr	r3, [pc, #792]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	2104      	movs	r1, #4
 8001aac:	438a      	bics	r2, r1
 8001aae:	621a      	str	r2, [r3, #32]
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x3a4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x38c>
 8001aba:	4bc2      	ldr	r3, [pc, #776]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	4bc1      	ldr	r3, [pc, #772]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	621a      	str	r2, [r3, #32]
 8001ac6:	4bbf      	ldr	r3, [pc, #764]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	4bbe      	ldr	r3, [pc, #760]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	621a      	str	r2, [r3, #32]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x3a4>
 8001ad4:	4bbb      	ldr	r3, [pc, #748]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	4bba      	ldr	r3, [pc, #744]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	438a      	bics	r2, r1
 8001ade:	621a      	str	r2, [r3, #32]
 8001ae0:	4bb8      	ldr	r3, [pc, #736]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	4bb7      	ldr	r3, [pc, #732]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	438a      	bics	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d014      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff f87c 	bl	8000bf0 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff f877 	bl	8000bf0 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4aaf      	ldr	r2, [pc, #700]	; (8001dc8 <HAL_RCC_OscConfig+0x680>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e19a      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	4bac      	ldr	r3, [pc, #688]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x3b6>
 8001b1c:	e013      	b.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f867 	bl	8000bf0 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	e009      	b.n	8001b3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff f862 	bl	8000bf0 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	4aa5      	ldr	r2, [pc, #660]	; (8001dc8 <HAL_RCC_OscConfig+0x680>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e185      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	4ba1      	ldr	r3, [pc, #644]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b46:	231f      	movs	r3, #31
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b9c      	ldr	r3, [pc, #624]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	4b9b      	ldr	r3, [pc, #620]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	499d      	ldr	r1, [pc, #628]	; (8001dcc <HAL_RCC_OscConfig+0x684>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	4013      	ands	r3, r2
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d12a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b6e:	4b95      	ldr	r3, [pc, #596]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	2104      	movs	r1, #4
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b7a:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f833 	bl	8000bf0 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b90:	f7ff f82e 	bl	8000bf0 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e152      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d0f1      	beq.n	8001b90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bac:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	22f8      	movs	r2, #248	; 0xf8
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	00da      	lsls	r2, r3, #3
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	e034      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	3305      	adds	r3, #5
 8001bca:	d111      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bcc:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	4b7c      	ldr	r3, [pc, #496]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd8:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	22f8      	movs	r2, #248	; 0xf8
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	00da      	lsls	r2, r3, #3
 8001be8:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
 8001bee:	e01e      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf4:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bfc:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c00:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	438a      	bics	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7fe fff2 	bl	8000bf0 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c12:	f7fe ffed 	bl	8000bf0 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e111      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c24:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f1      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	d05c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c38:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d00e      	beq.n	8001c62 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c44:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d114      	bne.n	8001c7a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c50:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	401a      	ands	r2, r3
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	025b      	lsls	r3, r3, #9
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c62:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d040      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x5a8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d03c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0e6      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01b      	beq.n	8001cba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c82:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffae 	bl	8000bf0 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c9a:	f7fe ffa9 	bl	8000bf0 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0cd      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x552>
 8001cb8:	e01b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	4943      	ldr	r1, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x688>)
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff93 	bl	8000bf0 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd0:	f7fe ff8e 	bl	8000bf0 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0b2      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	025b      	lsls	r3, r3, #9
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x588>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cf0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5b4>
 8001cfa:	e0a4      	b.n	8001e46 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	220c      	movs	r2, #12
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d100      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5c2>
 8001d08:	e078      	b.n	8001dfc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d14c      	bne.n	8001dac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d18:	492e      	ldr	r1, [pc, #184]	; (8001dd4 <HAL_RCC_OscConfig+0x68c>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe ff67 	bl	8000bf0 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ff62 	bl	8000bf0 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e086      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x690>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	0449      	lsls	r1, r1, #17
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe ff35 	bl	8000bf0 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe ff30 	bl	8000bf0 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	049b      	lsls	r3, r3, #18
 8001da6:	4013      	ands	r3, r2
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x644>
 8001daa:	e04c      	b.n	8001e46 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_RCC_OscConfig+0x67c>)
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <HAL_RCC_OscConfig+0x68c>)
 8001db4:	400a      	ands	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff1a 	bl	8000bf0 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x6a6>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	00001388 	.word	0x00001388
 8001dcc:	efffffff 	.word	0xefffffff
 8001dd0:	fffeffff 	.word	0xfffeffff
 8001dd4:	feffffff 	.word	0xfeffffff
 8001dd8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ff08 	bl	8000bf0 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e02c      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_RCC_OscConfig+0x708>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	049b      	lsls	r3, r3, #18
 8001df6:	4013      	ands	r3, r2
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x694>
 8001dfa:	e024      	b.n	8001e46 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e01f      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_OscConfig+0x708>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x708>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	23c0      	movs	r3, #192	; 0xc0
 8001e18:	025b      	lsls	r3, r3, #9
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d10e      	bne.n	8001e42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	220f      	movs	r2, #15
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	23f0      	movs	r3, #240	; 0xf0
 8001e36:	039b      	lsls	r3, r3, #14
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b008      	add	sp, #32
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0bf      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d911      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0a6      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d006      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eae:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb4:	21e0      	movs	r1, #224	; 0xe0
 8001eb6:	00c9      	lsls	r1, r1, #3
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	22f0      	movs	r2, #240	; 0xf0
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d04c      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d120      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	049b      	lsls	r3, r3, #18
 8001f02:	4013      	ands	r3, r2
 8001f04:	d114      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e062      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e05b      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7fe fe54 	bl	8000bf0 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fe4f 	bl	8000bf0 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_RCC_ClockConfig+0x1a4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e042      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	220c      	movs	r2, #12
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1ec      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d211      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x19c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e020      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2204      	movs	r2, #4
 8001fac:	4013      	ands	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_RCC_ClockConfig+0x1a8>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fc4:	f000 f820 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc8:	0001      	movs	r1, r0
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1ac>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	000a      	movs	r2, r1
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1b0>)
 8001fde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7fe fdbf 	bl	8000b64 <HAL_InitTick>
  
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	fffff8ff 	.word	0xfffff8ff
 8002000:	080022c8 	.word	0x080022c8
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b08f      	sub	sp, #60	; 0x3c
 800200c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800200e:	2314      	movs	r3, #20
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002014:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002016:	c313      	stmia	r3!, {r0, r1, r4}
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4a35      	ldr	r2, [pc, #212]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002020:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002022:	c313      	stmia	r3!, {r0, r1, r4}
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002030:	2300      	movs	r3, #0
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	220c      	movs	r2, #12
 8002046:	4013      	ands	r3, r2
 8002048:	2b08      	cmp	r3, #8
 800204a:	d006      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x52>
 800204c:	2b0c      	cmp	r3, #12
 800204e:	d043      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0xd0>
 8002050:	2b04      	cmp	r3, #4
 8002052:	d144      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002058:	e044      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	220f      	movs	r2, #15
 8002060:	4013      	ands	r3, r2
 8002062:	2214      	movs	r2, #20
 8002064:	18ba      	adds	r2, r7, r2
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	220f      	movs	r2, #15
 8002070:	4013      	ands	r3, r2
 8002072:	1d3a      	adds	r2, r7, #4
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800207a:	23c0      	movs	r3, #192	; 0xc0
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	401a      	ands	r2, r3
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	025b      	lsls	r3, r3, #9
 8002084:	429a      	cmp	r2, r3
 8002086:	d109      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800208c:	f7fe f83c 	bl	8000108 <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	001a      	movs	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	4353      	muls	r3, r2
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
 800209a:	e01a      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	025b      	lsls	r3, r3, #9
 80020a2:	401a      	ands	r2, r3
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ae:	4814      	ldr	r0, [pc, #80]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b0:	f7fe f82a 	bl	8000108 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	001a      	movs	r2, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	4353      	muls	r3, r2
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
 80020be:	e008      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020c2:	480e      	ldr	r0, [pc, #56]	; (80020fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80020c4:	f7fe f820 	bl	8000108 <__udivsi3>
 80020c8:	0003      	movs	r3, r0
 80020ca:	001a      	movs	r2, r3
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	4353      	muls	r3, r2
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020dc:	e002      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b00f      	add	sp, #60	; 0x3c
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	080022a8 	.word	0x080022a8
 80020f4:	080022b8 	.word	0x080022b8
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	02dc6c00 	.word	0x02dc6c00

08002104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e08a      	b.n	800222c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	225d      	movs	r2, #93	; 0x5d
 8002120:	5c9b      	ldrb	r3, [r3, r2]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	225c      	movs	r2, #92	; 0x5c
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f7fe fad2 	bl	80006dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	225d      	movs	r2, #93	; 0x5d
 800213c:	2102      	movs	r1, #2
 800213e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	438a      	bics	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	23e0      	movs	r3, #224	; 0xe0
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e002      	b.n	8002168 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	015b      	lsls	r3, r3, #5
 8002166:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	23f0      	movs	r3, #240	; 0xf0
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	429a      	cmp	r2, r3
 8002172:	d008      	beq.n	8002186 <HAL_SPI_Init+0x82>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	23e0      	movs	r3, #224	; 0xe0
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	429a      	cmp	r2, r3
 800217e:	d002      	beq.n	8002186 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	23e0      	movs	r3, #224	; 0xe0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	429a      	cmp	r2, r3
 8002198:	d903      	bls.n	80021a2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	e002      	b.n	80021a8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6999      	ldr	r1, [r3, #24]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	400b      	ands	r3, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	0011      	movs	r1, r2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	2204      	movs	r2, #4
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	431a      	orrs	r2, r3
 8002200:	0011      	movs	r1, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4907      	ldr	r1, [pc, #28]	; (8002234 <HAL_SPI_Init+0x130>)
 8002218:	400a      	ands	r2, r1
 800221a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	225d      	movs	r2, #93	; 0x5d
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}
 8002234:	fffff7ff 	.word	0xfffff7ff

08002238 <__libc_init_array>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	2600      	movs	r6, #0
 800223c:	4d0c      	ldr	r5, [pc, #48]	; (8002270 <__libc_init_array+0x38>)
 800223e:	4c0d      	ldr	r4, [pc, #52]	; (8002274 <__libc_init_array+0x3c>)
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	42a6      	cmp	r6, r4
 8002246:	d109      	bne.n	800225c <__libc_init_array+0x24>
 8002248:	2600      	movs	r6, #0
 800224a:	f000 f821 	bl	8002290 <_init>
 800224e:	4d0a      	ldr	r5, [pc, #40]	; (8002278 <__libc_init_array+0x40>)
 8002250:	4c0a      	ldr	r4, [pc, #40]	; (800227c <__libc_init_array+0x44>)
 8002252:	1b64      	subs	r4, r4, r5
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	42a6      	cmp	r6, r4
 8002258:	d105      	bne.n	8002266 <__libc_init_array+0x2e>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	00b3      	lsls	r3, r6, #2
 800225e:	58eb      	ldr	r3, [r5, r3]
 8002260:	4798      	blx	r3
 8002262:	3601      	adds	r6, #1
 8002264:	e7ee      	b.n	8002244 <__libc_init_array+0xc>
 8002266:	00b3      	lsls	r3, r6, #2
 8002268:	58eb      	ldr	r3, [r5, r3]
 800226a:	4798      	blx	r3
 800226c:	3601      	adds	r6, #1
 800226e:	e7f2      	b.n	8002256 <__libc_init_array+0x1e>
 8002270:	080022d8 	.word	0x080022d8
 8002274:	080022d8 	.word	0x080022d8
 8002278:	080022d8 	.word	0x080022d8
 800227c:	080022e0 	.word	0x080022e0

08002280 <memset>:
 8002280:	0003      	movs	r3, r0
 8002282:	1812      	adds	r2, r2, r0
 8002284:	4293      	cmp	r3, r2
 8002286:	d100      	bne.n	800228a <memset+0xa>
 8002288:	4770      	bx	lr
 800228a:	7019      	strb	r1, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	e7f9      	b.n	8002284 <memset+0x4>

08002290 <_init>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr

0800229c <_fini>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr
